
atomic_clock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .itcm         00001568  00000000  08000298  00020000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00019ff8  08001800  08001800  00021800  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .user_flash   00000000  08100000  08100000  0004022c  2**0
                  CONTENTS
  4 .rodata       00003828  0801b7f8  0801b7f8  0003b7f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .ARM          00000008  0801f020  0801f020  0003f020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .init_array   00000004  0801f028  0801f028  0003f028  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801f02c  0801f02c  0003f02c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000022c  20000000  0801f030  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00007104  20000230  0801f25c  00040230  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20007334  0801f25c  00047334  2**0
                  ALLOC
 11 .lwip_sec     00044b83  30000000  30000000  00050000  2**2
                  ALLOC
 12 .ARM.attributes 0000002e  00000000  00000000  0004022c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0004025a  2**0
                  CONTENTS, READONLY
 14 .debug_info   0003931e  00000000  00000000  0004029d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00007459  00000000  00000000  000795bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000029a8  00000000  00000000  00080a18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00002140  00000000  00000000  000833c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00011b7f  00000000  00000000  00085500  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00040a22  00000000  00000000  0009707f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    001a94bd  00000000  00000000  000d7aa1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000bfec  00000000  00000000  00280f60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000051  00000000  00000000  0028cf4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .itcm:

00000000 <synth_writereg>:
  * @param  Address
  * @param  Chip address
  * @param  Verify
  * @retval Contents read back from register
  */
static uint32_t synth_writereg(const uint32_t data, const uint32_t reg_address, const uint32_t chip_address, const bool verify) {
       0:	b580      	push	{r7, lr}
       2:	b08a      	sub	sp, #40	; 0x28
       4:	af00      	add	r7, sp, #0
       6:	60f8      	str	r0, [r7, #12]
       8:	60b9      	str	r1, [r7, #8]
       a:	607a      	str	r2, [r7, #4]
       c:	70fb      	strb	r3, [r7, #3]

	uint32_t read_data = 0;
       e:	2300      	movs	r3, #0
      10:	627b      	str	r3, [r7, #36]	; 0x24
	const uint32_t write_data = (data << 8) | (reg_address << 3) | chip_address; // This is what we will write, 32 bits in total.
      12:	68fb      	ldr	r3, [r7, #12]
      14:	021a      	lsls	r2, r3, #8
      16:	68bb      	ldr	r3, [r7, #8]
      18:	00db      	lsls	r3, r3, #3
      1a:	4313      	orrs	r3, r2
      1c:	687a      	ldr	r2, [r7, #4]
      1e:	4313      	orrs	r3, r2
      20:	61fb      	str	r3, [r7, #28]
	#ifdef SPI_DEBUG
		printf("SPI BYTES WRITTEN: 0x%X \r\n", write_data);
	#endif //SPI_DEBUG
	HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, 0);
      22:	2200      	movs	r2, #0
      24:	f44f 7180 	mov.w	r1, #256	; 0x100
      28:	4830      	ldr	r0, [pc, #192]	; (ec <synth_writereg+0xec>)
      2a:	f001 fa95 	bl	1558 <__HAL_GPIO_WritePin_veneer>
	HAL_GPIO_WritePin(SEN_GPIO_Port, SEN_Pin, 0); // Take SEN low to indicate we are sending data
      2e:	2200      	movs	r2, #0
      30:	f44f 6100 	mov.w	r1, #2048	; 0x800
      34:	482d      	ldr	r0, [pc, #180]	; (ec <synth_writereg+0xec>)
      36:	f001 fa8f 	bl	1558 <__HAL_GPIO_WritePin_veneer>

	/* Clock in the data */
	for (uint32_t i = 0; i < SYNTH_SPI_BITS; i++) {
      3a:	2300      	movs	r3, #0
      3c:	623b      	str	r3, [r7, #32]
      3e:	e036      	b.n	ae <synth_writereg+0xae>

		/* Data written on the rising edge */
		uint32_t bit = (SYNTH_SPI_BITS - 1 - i);
      40:	2220      	movs	r2, #32
      42:	6a3b      	ldr	r3, [r7, #32]
      44:	1ad3      	subs	r3, r2, r3
      46:	3b01      	subs	r3, #1
      48:	617b      	str	r3, [r7, #20]
		HAL_GPIO_WritePin(MOSI_GPIO_Port, MOSI_Pin, !!(write_data & (1 << bit)));
      4a:	2201      	movs	r2, #1
      4c:	697b      	ldr	r3, [r7, #20]
      4e:	fa02 f303 	lsl.w	r3, r2, r3
      52:	461a      	mov	r2, r3
      54:	69fb      	ldr	r3, [r7, #28]
      56:	4013      	ands	r3, r2
      58:	2b00      	cmp	r3, #0
      5a:	bf14      	ite	ne
      5c:	2301      	movne	r3, #1
      5e:	2300      	moveq	r3, #0
      60:	b2db      	uxtb	r3, r3
      62:	461a      	mov	r2, r3
      64:	f44f 7100 	mov.w	r1, #512	; 0x200
      68:	4820      	ldr	r0, [pc, #128]	; (ec <synth_writereg+0xec>)
      6a:	f001 fa75 	bl	1558 <__HAL_GPIO_WritePin_veneer>
		HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, 1);
      6e:	2201      	movs	r2, #1
      70:	f44f 7180 	mov.w	r1, #256	; 0x100
      74:	481d      	ldr	r0, [pc, #116]	; (ec <synth_writereg+0xec>)
      76:	f001 fa6f 	bl	1558 <__HAL_GPIO_WritePin_veneer>
		HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, 0);
      7a:	2200      	movs	r2, #0
      7c:	f44f 7180 	mov.w	r1, #256	; 0x100
      80:	481a      	ldr	r0, [pc, #104]	; (ec <synth_writereg+0xec>)
      82:	f001 fa69 	bl	1558 <__HAL_GPIO_WritePin_veneer>

		/* Data read on the falling edge */
		read_data = read_data
				| (HAL_GPIO_ReadPin(MISO_GPIO_Port, MISO_Pin)
      86:	f44f 6180 	mov.w	r1, #1024	; 0x400
      8a:	4818      	ldr	r0, [pc, #96]	; (ec <synth_writereg+0xec>)
      8c:	f001 fa54 	bl	1538 <__HAL_GPIO_ReadPin_veneer>
      90:	4603      	mov	r3, r0
      92:	4619      	mov	r1, r3
						<< (SYNTH_SPI_BITS - 1 - i));
      94:	2220      	movs	r2, #32
      96:	6a3b      	ldr	r3, [r7, #32]
      98:	1ad3      	subs	r3, r2, r3
      9a:	3b01      	subs	r3, #1
      9c:	fa01 f303 	lsl.w	r3, r1, r3
      a0:	461a      	mov	r2, r3
		read_data = read_data
      a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
      a4:	4313      	orrs	r3, r2
      a6:	627b      	str	r3, [r7, #36]	; 0x24
	for (uint32_t i = 0; i < SYNTH_SPI_BITS; i++) {
      a8:	6a3b      	ldr	r3, [r7, #32]
      aa:	3301      	adds	r3, #1
      ac:	623b      	str	r3, [r7, #32]
      ae:	2220      	movs	r2, #32
      b0:	6a3b      	ldr	r3, [r7, #32]
      b2:	4293      	cmp	r3, r2
      b4:	d3c4      	bcc.n	40 <synth_writereg+0x40>
	}

	HAL_GPIO_WritePin(SEN_GPIO_Port, SEN_Pin, 1); // Assert the SEN line to register the transmitted data
      b6:	2201      	movs	r2, #1
      b8:	f44f 6100 	mov.w	r1, #2048	; 0x800
      bc:	480b      	ldr	r0, [pc, #44]	; (ec <synth_writereg+0xec>)
      be:	f001 fa4b 	bl	1558 <__HAL_GPIO_WritePin_veneer>

	if (verify) {
      c2:	78fb      	ldrb	r3, [r7, #3]
      c4:	2b00      	cmp	r3, #0
      c6:	d00c      	beq.n	e2 <synth_writereg+0xe2>
		const uint32_t verify_data = synth_readreg(reg_address); // Data returned on the second cycle
      c8:	68b8      	ldr	r0, [r7, #8]
      ca:	f000 f813 	bl	f4 <synth_readreg>
      ce:	61b8      	str	r0, [r7, #24]
		if (verify_data != data) {
      d0:	69ba      	ldr	r2, [r7, #24]
      d2:	68fb      	ldr	r3, [r7, #12]
      d4:	429a      	cmp	r2, r3
      d6:	d004      	beq.n	e2 <synth_writereg+0xe2>
			printf("SPI transmission error!\n");
      d8:	4805      	ldr	r0, [pc, #20]	; (f0 <synth_writereg+0xf0>)
      da:	f001 fa39 	bl	1550 <__puts_veneer>
			Error_Handler(); // We enter an infinite loop here
      de:	f001 fa3f 	bl	1560 <__Error_Handler_veneer>
		}
	}

	return read_data;
      e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
      e4:	4618      	mov	r0, r3
      e6:	3728      	adds	r7, #40	; 0x28
      e8:	46bd      	mov	sp, r7
      ea:	bd80      	pop	{r7, pc}
      ec:	58020800 	.word	0x58020800
      f0:	0801ba38 	.word	0x0801ba38

000000f4 <synth_readreg>:
/**
  * @brief  Reads a register.
  * @param  Address
  * @retval Register contents
  */
static uint32_t synth_readreg(const uint32_t reg_address){
      f4:	b580      	push	{r7, lr}
      f6:	b084      	sub	sp, #16
      f8:	af00      	add	r7, sp, #0
      fa:	6078      	str	r0, [r7, #4]

    synth_writereg(reg_address, 0x0, 0x0, DONT_VERIFY); // First cycle to send the read address
      fc:	2300      	movs	r3, #0
      fe:	2200      	movs	r2, #0
     100:	2100      	movs	r1, #0
     102:	6878      	ldr	r0, [r7, #4]
     104:	f7ff ff7c 	bl	0 <synth_writereg>
    const uint32_t read_data = synth_writereg(reg_address, 0x0, 0x0, DONT_VERIFY);  // Data returned on the second cycle
     108:	2300      	movs	r3, #0
     10a:	2200      	movs	r2, #0
     10c:	2100      	movs	r1, #0
     10e:	6878      	ldr	r0, [r7, #4]
     110:	f7ff ff76 	bl	0 <synth_writereg>
     114:	60f8      	str	r0, [r7, #12]

    return (read_data >> 8); // We only care about the first 24 bits returned.
     116:	68fb      	ldr	r3, [r7, #12]
     118:	0a1b      	lsrs	r3, r3, #8

}
     11a:	4618      	mov	r0, r3
     11c:	3710      	adds	r7, #16
     11e:	46bd      	mov	sp, r7
     120:	bd80      	pop	{r7, pc}

00000122 <set_MW_power>:
/**
  * @brief  Program LO2 output gain.
  * @param  MW power setting
  * @retval Success/fail
  */
uint32_t set_MW_power (const uint8_t mw_power) {
     122:	b580      	push	{r7, lr}
     124:	b084      	sub	sp, #16
     126:	af00      	add	r7, sp, #0
     128:	4603      	mov	r3, r0
     12a:	71fb      	strb	r3, [r7, #7]
	if (mw_power > 3) {//check that LO2GAIN is an integer from 0 to 3 inclusive
     12c:	79fb      	ldrb	r3, [r7, #7]
     12e:	2b03      	cmp	r3, #3
     130:	d904      	bls.n	13c <set_MW_power+0x1a>
		printf("illegal mw_power - must be an integer from 0 to 3!\n");
     132:	4811      	ldr	r0, [pc, #68]	; (178 <set_MW_power+0x56>)
     134:	f001 fa0c 	bl	1550 <__puts_veneer>
		Error_Handler(); // We enter an infinite loop here
     138:	f001 fa12 	bl	1560 <__Error_Handler_veneer>
	}
	uint32_t read_data = synth_readreg(GAIN_DIVIDER_REGISTER); // Get the current value.
     13c:	2016      	movs	r0, #22
     13e:	f7ff ffd9 	bl	f4 <synth_readreg>
     142:	60f8      	str	r0, [r7, #12]
	read_data &= 0xFFFFFCFF; 		// Zero bits 8:9.
     144:	68fb      	ldr	r3, [r7, #12]
     146:	f423 7340 	bic.w	r3, r3, #768	; 0x300
     14a:	60fb      	str	r3, [r7, #12]
	read_data |= (mw_power << 8);	// Set LO2GAIN value.
     14c:	79fb      	ldrb	r3, [r7, #7]
     14e:	021b      	lsls	r3, r3, #8
     150:	461a      	mov	r2, r3
     152:	68fb      	ldr	r3, [r7, #12]
     154:	4313      	orrs	r3, r2
     156:	60fb      	str	r3, [r7, #12]
	synth_writereg(read_data, GAIN_DIVIDER_REGISTER, 0x0, VERIFY); // Update the VCO divide register.
     158:	2301      	movs	r3, #1
     15a:	2200      	movs	r2, #0
     15c:	2116      	movs	r1, #22
     15e:	68f8      	ldr	r0, [r7, #12]
     160:	f7ff ff4e 	bl	0 <synth_writereg>
	#ifdef MW_VERBOSE
		printf("PROGRAMMED GAIN DIVIDER REGISTER: 0x%lX \r\n", read_data);
	#endif
	printf("LO2 gain setting: %u \r\n", mw_power);
     164:	79fb      	ldrb	r3, [r7, #7]
     166:	4619      	mov	r1, r3
     168:	4804      	ldr	r0, [pc, #16]	; (17c <set_MW_power+0x5a>)
     16a:	f001 f9e9 	bl	1540 <__printf_veneer>
	return SUCCESS;
     16e:	2300      	movs	r3, #0
}
     170:	4618      	mov	r0, r3
     172:	3710      	adds	r7, #16
     174:	46bd      	mov	sp, r7
     176:	bd80      	pop	{r7, pc}
     178:	0801ba50 	.word	0x0801ba50
     17c:	0801ba84 	.word	0x0801ba84

00000180 <init_synthesiser>:
/**
  * @brief  Initialises HMC835 synthesiser.
  * @param  MW power setting
  * @retval Success/fail
  */
uint32_t init_synthesiser(const uint8_t mw_power) {
     180:	b580      	push	{r7, lr}
     182:	b084      	sub	sp, #16
     184:	af00      	add	r7, sp, #0
     186:	4603      	mov	r3, r0
     188:	71fb      	strb	r3, [r7, #7]

	//Set pins to required initial conditions
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET); // Turn off the amber lock LED
     18a:	2200      	movs	r2, #0
     18c:	2102      	movs	r1, #2
     18e:	4856      	ldr	r0, [pc, #344]	; (2e8 <_Min_Heap_Size+0xe8>)
     190:	f001 f9e2 	bl	1558 <__HAL_GPIO_WritePin_veneer>
	HAL_GPIO_WritePin(SCOPE_TRIG_OUT_GPIO_Port, SCOPE_TRIG_OUT_Pin, GPIO_PIN_SET); // Sets trigger output high
     194:	2201      	movs	r2, #1
     196:	2101      	movs	r1, #1
     198:	4854      	ldr	r0, [pc, #336]	; (2ec <_Min_Heap_Size+0xec>)
     19a:	f001 f9dd 	bl	1558 <__HAL_GPIO_WritePin_veneer>
	HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, 0);
     19e:	2200      	movs	r2, #0
     1a0:	f44f 7180 	mov.w	r1, #256	; 0x100
     1a4:	4852      	ldr	r0, [pc, #328]	; (2f0 <_Min_Heap_Size+0xf0>)
     1a6:	f001 f9d7 	bl	1558 <__HAL_GPIO_WritePin_veneer>
	HAL_GPIO_WritePin(SEN_GPIO_Port, SEN_Pin, 1);
     1aa:	2201      	movs	r2, #1
     1ac:	f44f 6100 	mov.w	r1, #2048	; 0x800
     1b0:	484f      	ldr	r0, [pc, #316]	; (2f0 <_Min_Heap_Size+0xf0>)
     1b2:	f001 f9d1 	bl	1558 <__HAL_GPIO_WritePin_veneer>
	HAL_GPIO_WritePin(REG_EN_GPIO_Port, REG_EN_Pin, 1); // Enable the main regulator.
     1b6:	2201      	movs	r2, #1
     1b8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
     1bc:	484c      	ldr	r0, [pc, #304]	; (2f0 <_Min_Heap_Size+0xf0>)
     1be:	f001 f9cb 	bl	1558 <__HAL_GPIO_WritePin_veneer>

	HAL_Delay(100); // Wait 100 ms for the supply to stabilise.
     1c2:	2064      	movs	r0, #100	; 0x64
     1c4:	f001 f9b0 	bl	1528 <__HAL_Delay_veneer>

	synth_writereg(0x1UL << 5, OPEN_MODE_READ_ADDRESS, 0x0, DONT_VERIFY); // Soft reset.
     1c8:	2300      	movs	r3, #0
     1ca:	2200      	movs	r2, #0
     1cc:	2100      	movs	r1, #0
     1ce:	2020      	movs	r0, #32
     1d0:	f7ff ff16 	bl	0 <synth_writereg>
	synth_writereg(0x41BFFF, ANALOG_EN_REGISTER, 0x0, VERIFY); // Set the SDO output level to 3.3 Volts
     1d4:	2301      	movs	r3, #1
     1d6:	2200      	movs	r2, #0
     1d8:	2108      	movs	r1, #8
     1da:	4846      	ldr	r0, [pc, #280]	; (2f4 <_Min_Heap_Size+0xf4>)
     1dc:	f7ff ff10 	bl	0 <synth_writereg>

	uint32_t read_data = synth_readreg(ID_REGISTER); // Read the ID register to check the chip is communicating
     1e0:	2000      	movs	r0, #0
     1e2:	f7ff ff87 	bl	f4 <synth_readreg>
     1e6:	60f8      	str	r0, [r7, #12]
	/* Check we have the correct ID */
	if (read_data != SYNTH_ID) {
     1e8:	4a43      	ldr	r2, [pc, #268]	; (2f8 <_Min_Heap_Size+0xf8>)
     1ea:	68fb      	ldr	r3, [r7, #12]
     1ec:	4293      	cmp	r3, r2
     1ee:	d00a      	beq.n	206 <_Min_Heap_Size+0x6>
		HAL_GPIO_WritePin(REG_EN_GPIO_Port, REG_EN_Pin, 0); // Disable the main regulator.
     1f0:	2200      	movs	r2, #0
     1f2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
     1f6:	483e      	ldr	r0, [pc, #248]	; (2f0 <_Min_Heap_Size+0xf0>)
     1f8:	f001 f9ae 	bl	1558 <__HAL_GPIO_WritePin_veneer>
		printf("Incorrect synthesiser ID!\r\n");
     1fc:	483f      	ldr	r0, [pc, #252]	; (2fc <_Min_Heap_Size+0xfc>)
     1fe:	f001 f9a7 	bl	1550 <__puts_veneer>
		return ERROR;
     202:	2301      	movs	r3, #1
     204:	e06b      	b.n	2de <_Min_Heap_Size+0xde>
	}

	/* Everything looks good, we can communicate with the chip :-) */
	printf("HMC835 Detected.\r\n");
     206:	483e      	ldr	r0, [pc, #248]	; (300 <_Min_Heap_Size+0x100>)
     208:	f001 f9a2 	bl	1550 <__puts_veneer>

	/* Enables Single-Ended output mode for LO2 output */
	read_data = synth_readreg(MODES_REGISTER); // Get the current value of the modes register
     20c:	2017      	movs	r0, #23
     20e:	f7ff ff71 	bl	f4 <synth_readreg>
     212:	60f8      	str	r0, [r7, #12]
#ifdef MW_VERBOSE
	printf("READ MODES REGISTER: 0x%lX \r\n", read_data);
#endif
	read_data |= (0x1UL << 9);     // Enable single ended output for LO2 (LO2_P)
     214:	68fb      	ldr	r3, [r7, #12]
     216:	f443 7300 	orr.w	r3, r3, #512	; 0x200
     21a:	60fb      	str	r3, [r7, #12]
	read_data  &= ~(!AUTO_MUTE << 7); //can disable auto_mute - see variable declarations
     21c:	2301      	movs	r3, #1
     21e:	f083 0301 	eor.w	r3, r3, #1
     222:	b2db      	uxtb	r3, r3
     224:	01db      	lsls	r3, r3, #7
     226:	43db      	mvns	r3, r3
     228:	461a      	mov	r2, r3
     22a:	68fb      	ldr	r3, [r7, #12]
     22c:	4013      	ands	r3, r2
     22e:	60fb      	str	r3, [r7, #12]
	synth_writereg(read_data, MODES_REGISTER, 0x0, VERIFY); // Send
     230:	2301      	movs	r3, #1
     232:	2200      	movs	r2, #0
     234:	2117      	movs	r1, #23
     236:	68f8      	ldr	r0, [r7, #12]
     238:	f7ff fee2 	bl	0 <synth_writereg>
	//read_data = synth_readreg(LOCK_DETECT_REGISTER); // Get the current value.
	//read_data &= 0xFFFFFFF8; // Zero the first 3 LSBs.
	//read_data |= 0x07;
	//synth_writereg(read_data, LOCK_DETECT_REGISTER, 0x0, VERIFY); // Update the VCO divide register.

	synth_writereg(1, REFDIV_REGISTER, 0x0, VERIFY); // Reference divider setting.
     23c:	2301      	movs	r3, #1
     23e:	2200      	movs	r2, #0
     240:	2102      	movs	r1, #2
     242:	2001      	movs	r0, #1
     244:	f7ff fedc 	bl	0 <synth_writereg>
	printf("PROGRAMMED DIVIDER REGISTER: 0x01 \r\n");
#endif

	/* Lock detect training: This must be done after any change to the PD
	 * reference frequency or after power cycle. */
	read_data = synth_readreg(LOCK_DETECT_REGISTER); // Get contents of lock detect register
     248:	2007      	movs	r0, #7
     24a:	f7ff ff53 	bl	f4 <synth_readreg>
     24e:	60f8      	str	r0, [r7, #12]
#ifdef MW_VERBOSE
	printf("READ LOCK_DETECT_REGISTER: 0x%lX \r\n", read_data);
#endif
	read_data |= (0x1UL << 11);      // Enable lock-detect counters.
     250:	68fb      	ldr	r3, [r7, #12]
     252:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
     256:	60fb      	str	r3, [r7, #12]
	read_data |= (0x1UL << 14);      // Enable the lock-detect timer.
     258:	68fb      	ldr	r3, [r7, #12]
     25a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
     25e:	60fb      	str	r3, [r7, #12]
	read_data |= (0x1UL << 20);      // Train the lock-detect timer.
     260:	68fb      	ldr	r3, [r7, #12]
     262:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
     266:	60fb      	str	r3, [r7, #12]
	synth_writereg(read_data, LOCK_DETECT_REGISTER, 0x0, VERIFY); // Send
     268:	2301      	movs	r3, #1
     26a:	2200      	movs	r2, #0
     26c:	2107      	movs	r1, #7
     26e:	68f8      	ldr	r0, [r7, #12]
     270:	f7ff fec6 	bl	0 <synth_writereg>
#ifdef MW_VERBOSE
	printf("PROGRAMMED LOCK DETECT REGISTER: 0x%lX \r\n", read_data);
#endif
	HAL_Delay(10); // Wait 10 ms for training to complete, not sure if we really need to do this.
     274:	200a      	movs	r0, #10
     276:	f001 f957 	bl	1528 <__HAL_Delay_veneer>

	/* Program LO2 output gain */
	if (mw_power > 3) {//check that LO2GAIN is an integer from 0 to 3 inclusive
     27a:	79fb      	ldrb	r3, [r7, #7]
     27c:	2b03      	cmp	r3, #3
     27e:	d904      	bls.n	28a <_Min_Heap_Size+0x8a>
		printf("illegal mw_power - must be an integer from 0 to 3!\n");
     280:	4820      	ldr	r0, [pc, #128]	; (304 <_Min_Heap_Size+0x104>)
     282:	f001 f965 	bl	1550 <__puts_veneer>
		Error_Handler();
     286:	f001 f96b 	bl	1560 <__Error_Handler_veneer>
	}
	read_data = synth_readreg(GAIN_DIVIDER_REGISTER); // Get the current value.
     28a:	2016      	movs	r0, #22
     28c:	f7ff ff32 	bl	f4 <synth_readreg>
     290:	60f8      	str	r0, [r7, #12]
	read_data &= 0xFFFFFCFF; 		// Zero bits 8:9.
     292:	68fb      	ldr	r3, [r7, #12]
     294:	f423 7340 	bic.w	r3, r3, #768	; 0x300
     298:	60fb      	str	r3, [r7, #12]
	read_data |= (mw_power << 8);	// Set LO2GAIN value.
     29a:	79fb      	ldrb	r3, [r7, #7]
     29c:	021b      	lsls	r3, r3, #8
     29e:	461a      	mov	r2, r3
     2a0:	68fb      	ldr	r3, [r7, #12]
     2a2:	4313      	orrs	r3, r2
     2a4:	60fb      	str	r3, [r7, #12]
	synth_writereg(read_data, GAIN_DIVIDER_REGISTER, 0x0, VERIFY); // Update the VCO divide register.
     2a6:	2301      	movs	r3, #1
     2a8:	2200      	movs	r2, #0
     2aa:	2116      	movs	r1, #22
     2ac:	68f8      	ldr	r0, [r7, #12]
     2ae:	f7ff fea7 	bl	0 <synth_writereg>
	printf("PROGRAMMED GAIN DIVIDER REGISTER: 0x%lX \r\n", read_data);
	printf("LO2 gain setting: %u \r\n", mw_power);
#endif

	/* Sets output frequency to the hyperfine value */
	set_frequency_hz(HYPERFINE);
     2b2:	4b15      	ldr	r3, [pc, #84]	; (308 <_Min_Heap_Size+0x108>)
     2b4:	ed93 7b00 	vldr	d7, [r3]
     2b8:	eeb0 0b47 	vmov.f64	d0, d7
     2bc:	f000 f83f 	bl	33e <set_frequency_hz>
	//printf("Single frequency output: %f Hz \r\n", HYPERFINE);
	printf("Single frequency output: %.10g Hz \r\n", HYPERFINE);
     2c0:	4b11      	ldr	r3, [pc, #68]	; (308 <_Min_Heap_Size+0x108>)
     2c2:	e9d3 2300 	ldrd	r2, r3, [r3]
     2c6:	4811      	ldr	r0, [pc, #68]	; (30c <_Min_Heap_Size+0x10c>)
     2c8:	f001 f93a 	bl	1540 <__printf_veneer>
//	struct MW_struct *mw_sweep_settings = 0;  //create a structure to store the sweep settings
	mw_sweep_settings.state = MW_FIXED_FREQ;
     2cc:	4b10      	ldr	r3, [pc, #64]	; (310 <_Min_Heap_Size+0x110>)
     2ce:	2201      	movs	r2, #1
     2d0:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(MW_INVALID_GPIO_Port, MW_INVALID_Pin, GPIO_PIN_RESET); // MW_invalid output low
     2d2:	2200      	movs	r2, #0
     2d4:	2102      	movs	r1, #2
     2d6:	480f      	ldr	r0, [pc, #60]	; (314 <_Min_Heap_Size+0x114>)
     2d8:	f001 f93e 	bl	1558 <__HAL_GPIO_WritePin_veneer>
	return SUCCESS;
     2dc:	2300      	movs	r3, #0
}
     2de:	4618      	mov	r0, r3
     2e0:	3710      	adds	r7, #16
     2e2:	46bd      	mov	sp, r7
     2e4:	bd80      	pop	{r7, pc}
     2e6:	bf00      	nop
     2e8:	58021000 	.word	0x58021000
     2ec:	58021800 	.word	0x58021800
     2f0:	58020800 	.word	0x58020800
     2f4:	0041bfff 	.word	0x0041bfff
     2f8:	00c7701a 	.word	0x00c7701a
     2fc:	0801ba9c 	.word	0x0801ba9c
     300:	0801bab8 	.word	0x0801bab8
     304:	0801ba50 	.word	0x0801ba50
     308:	0801eb10 	.word	0x0801eb10
     30c:	0801bacc 	.word	0x0801bacc
     310:	200005f8 	.word	0x200005f8
     314:	58020400 	.word	0x58020400

00000318 <lock_status>:
/**
  * @brief  Checks for MW frequency lock
  * @param  None
  * @retval Lock status
  */
static const bool lock_status(void) {
     318:	b580      	push	{r7, lr}
     31a:	b082      	sub	sp, #8
     31c:	af00      	add	r7, sp, #0

	bool locked = synth_readreg(GPOLD_REGISTER) & (1UL << 1);
     31e:	2012      	movs	r0, #18
     320:	f7ff fee8 	bl	f4 <synth_readreg>
     324:	4603      	mov	r3, r0
     326:	f003 0302 	and.w	r3, r3, #2
     32a:	2b00      	cmp	r3, #0
     32c:	bf14      	ite	ne
     32e:	2301      	movne	r3, #1
     330:	2300      	moveq	r3, #0
     332:	71fb      	strb	r3, [r7, #7]
	return locked;
     334:	79fb      	ldrb	r3, [r7, #7]

}
     336:	4618      	mov	r0, r3
     338:	3708      	adds	r7, #8
     33a:	46bd      	mov	sp, r7
     33c:	bd80      	pop	{r7, pc}

0000033e <set_frequency_hz>:
/**
  * @brief  Translate a frequency into register values for programming to HMC835
  * @param  Frequency
  * @retval None
  */
void set_frequency_hz(const double fo) {
     33e:	b580      	push	{r7, lr}
     340:	b088      	sub	sp, #32
     342:	af00      	add	r7, sp, #0
     344:	ed87 0b00 	vstr	d0, [r7]

#ifdef OPTIMISED_FOR_3_035GHZ_GENERATION
	/* Code optimisation for Generation of frequencies close to 3.035GHz
	 * k always equals 1
	 */
	uint32_t k = 1;
     348:	2301      	movs	r3, #1
     34a:	61fb      	str	r3, [r7, #28]
		}
	}
#endif //OPTIMISED_FOR_3_035GHZ_GENERATION

	/* Calculate the N division ratio */
	const double N = ((fo * k) / REF_FREQ);
     34c:	69fb      	ldr	r3, [r7, #28]
     34e:	ee07 3a90 	vmov	s15, r3
     352:	eeb8 6b67 	vcvt.f64.u32	d6, s15
     356:	ed97 7b00 	vldr	d7, [r7]
     35a:	ee26 6b07 	vmul.f64	d6, d6, d7
     35e:	ed9f 5b2a 	vldr	d5, [pc, #168]	; 408 <_Min_Stack_Size+0x8>
     362:	ee86 7b05 	vdiv.f64	d7, d6, d5
     366:	ed87 7b04 	vstr	d7, [r7, #16]

	/* Extract the fractional and integer parts */
	const uint32_t NINT = N;
     36a:	ed97 7b04 	vldr	d7, [r7, #16]
     36e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
     372:	ee17 3a90 	vmov	r3, s15
     376:	60fb      	str	r3, [r7, #12]
	const uint32_t NFRAC = ((N - NINT) * (1 << 24)) + 0.5;
     378:	68fb      	ldr	r3, [r7, #12]
     37a:	ee07 3a90 	vmov	s15, r3
     37e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
     382:	ed97 6b04 	vldr	d6, [r7, #16]
     386:	ee36 7b47 	vsub.f64	d7, d6, d7
     38a:	ed9f 6b21 	vldr	d6, [pc, #132]	; 410 <_Min_Stack_Size+0x10>
     38e:	ee27 7b06 	vmul.f64	d7, d7, d6
     392:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
     396:	ee37 7b06 	vadd.f64	d7, d7, d6
     39a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
     39e:	ee17 3a90 	vmov	r3, s15
     3a2:	60bb      	str	r3, [r7, #8]
		printf("Failed to establish synthesiser frequency accurately\r\n");
		Error_Handler();
	}
#endif

	HAL_GPIO_WritePin(MW_INVALID_GPIO_Port, MW_INVALID_Pin, GPIO_PIN_SET); //Sets MW_invalid pin high
     3a4:	2201      	movs	r2, #1
     3a6:	2102      	movs	r1, #2
     3a8:	481b      	ldr	r0, [pc, #108]	; (418 <_Min_Stack_Size+0x18>)
     3aa:	f001 f8d5 	bl	1558 <__HAL_GPIO_WritePin_veneer>
	//set_frequency(NINT, NFRAC, k, MANUAL_MUTE); //Sets only the necessary Hittite registers
	set_freq_regs(NINT, NFRAC, k); //Sets only the necessary Hittite registers
     3ae:	69fa      	ldr	r2, [r7, #28]
     3b0:	68b9      	ldr	r1, [r7, #8]
     3b2:	68f8      	ldr	r0, [r7, #12]
     3b4:	f000 f838 	bl	428 <set_freq_regs>

	//MW stabilisation delay and check for lock
	timer_delay(MW_TIMER, MW_STABILISE_TIME_US);
     3b8:	4b18      	ldr	r3, [pc, #96]	; (41c <_Min_Stack_Size+0x1c>)
     3ba:	681b      	ldr	r3, [r3, #0]
     3bc:	f241 7270 	movw	r2, #6000	; 0x1770
     3c0:	4611      	mov	r1, r2
     3c2:	4618      	mov	r0, r3
     3c4:	f000 ffbe 	bl	1344 <timer_delay>
	//if (!poll_until_locked(LOCK_WAIT_US)) {
	if (!lock_status()) {
     3c8:	f7ff ffa6 	bl	318 <lock_status>
     3cc:	4603      	mov	r3, r0
     3ce:	f083 0301 	eor.w	r3, r3, #1
     3d2:	b2db      	uxtb	r3, r3
     3d4:	2b00      	cmp	r3, #0
     3d6:	d011      	beq.n	3fc <set_frequency_hz+0xbe>
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET); //turn off amber LED
     3d8:	2200      	movs	r2, #0
     3da:	2102      	movs	r1, #2
     3dc:	4810      	ldr	r0, [pc, #64]	; (420 <_Min_Stack_Size+0x20>)
     3de:	f001 f8bb 	bl	1558 <__HAL_GPIO_WritePin_veneer>
		printf("Failed to establish MW Lock within %ld us of setting frequency!\r\n", MW_STABILISE_TIME_US);
     3e2:	f241 7370 	movw	r3, #6000	; 0x1770
     3e6:	4619      	mov	r1, r3
     3e8:	480e      	ldr	r0, [pc, #56]	; (424 <_Min_Stack_Size+0x24>)
     3ea:	f001 f8a9 	bl	1540 <__printf_veneer>
#ifdef HALT_ON_LOSS_OF_LOCK
		Error_Handler();
     3ee:	f001 f8b7 	bl	1560 <__Error_Handler_veneer>
#endif //HALT_ON_LOSS_OF_LOCK
		HAL_GPIO_WritePin(MW_INVALID_GPIO_Port, MW_INVALID_Pin, GPIO_PIN_RESET); //Sets MW_invalid pin low
     3f2:	2200      	movs	r2, #0
     3f4:	2102      	movs	r1, #2
     3f6:	4808      	ldr	r0, [pc, #32]	; (418 <_Min_Stack_Size+0x18>)
     3f8:	f001 f8ae 	bl	1558 <__HAL_GPIO_WritePin_veneer>
	}

}
     3fc:	bf00      	nop
     3fe:	3720      	adds	r7, #32
     400:	46bd      	mov	sp, r7
     402:	bd80      	pop	{r7, pc}
     404:	f3af 8000 	nop.w
     408:	00000000 	.word	0x00000000
     40c:	4187d784 	.word	0x4187d784
     410:	00000000 	.word	0x00000000
     414:	41700000 	.word	0x41700000
     418:	58020400 	.word	0x58020400
     41c:	2000001c 	.word	0x2000001c
     420:	58021000 	.word	0x58021000
     424:	0801baf4 	.word	0x0801baf4

00000428 <set_freq_regs>:
static void set_freq_regs(const uint32_t integer, const uint32_t fraction, const uint32_t vco_divider) {
     428:	b580      	push	{r7, lr}
     42a:	b086      	sub	sp, #24
     42c:	af00      	add	r7, sp, #0
     42e:	60f8      	str	r0, [r7, #12]
     430:	60b9      	str	r1, [r7, #8]
     432:	607a      	str	r2, [r7, #4]
	uint32_t read_data = 0x0;
     434:	2300      	movs	r3, #0
     436:	617b      	str	r3, [r7, #20]
	if (last_vcodiv == -1 || (last_vcodiv != vco_divider)) {
     438:	4b24      	ldr	r3, [pc, #144]	; (4cc <set_freq_regs+0xa4>)
     43a:	681b      	ldr	r3, [r3, #0]
     43c:	f1b3 3fff 	cmp.w	r3, #4294967295
     440:	d004      	beq.n	44c <set_freq_regs+0x24>
     442:	4b22      	ldr	r3, [pc, #136]	; (4cc <set_freq_regs+0xa4>)
     444:	681b      	ldr	r3, [r3, #0]
     446:	687a      	ldr	r2, [r7, #4]
     448:	429a      	cmp	r2, r3
     44a:	d014      	beq.n	476 <set_freq_regs+0x4e>
		read_data = synth_readreg(GAIN_DIVIDER_REGISTER); // Get the current value.
     44c:	2016      	movs	r0, #22
     44e:	f7ff fe51 	bl	f4 <synth_readreg>
     452:	6178      	str	r0, [r7, #20]
		read_data &= 0xFFFFFFC0; // Zero the first 6 LSBs (VCO division value - mute).
     454:	697b      	ldr	r3, [r7, #20]
     456:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
     45a:	617b      	str	r3, [r7, #20]
		read_data |= vco_divider; // This will set k which will un-mute the outputs */
     45c:	697a      	ldr	r2, [r7, #20]
     45e:	687b      	ldr	r3, [r7, #4]
     460:	4313      	orrs	r3, r2
     462:	617b      	str	r3, [r7, #20]
		synth_writereg(read_data, GAIN_DIVIDER_REGISTER, 0x0, VERIFY); // Update the VCO divide register.
     464:	2301      	movs	r3, #1
     466:	2200      	movs	r2, #0
     468:	2116      	movs	r1, #22
     46a:	6978      	ldr	r0, [r7, #20]
     46c:	f7ff fdc8 	bl	0 <synth_writereg>
		last_vcodiv = vco_divider;
     470:	4a16      	ldr	r2, [pc, #88]	; (4cc <set_freq_regs+0xa4>)
     472:	687b      	ldr	r3, [r7, #4]
     474:	6013      	str	r3, [r2, #0]
	if (last_integer == -1 || (last_integer != integer)) {
     476:	4b16      	ldr	r3, [pc, #88]	; (4d0 <set_freq_regs+0xa8>)
     478:	681b      	ldr	r3, [r3, #0]
     47a:	f1b3 3fff 	cmp.w	r3, #4294967295
     47e:	d004      	beq.n	48a <set_freq_regs+0x62>
     480:	4b13      	ldr	r3, [pc, #76]	; (4d0 <set_freq_regs+0xa8>)
     482:	681b      	ldr	r3, [r3, #0]
     484:	68fa      	ldr	r2, [r7, #12]
     486:	429a      	cmp	r2, r3
     488:	d008      	beq.n	49c <set_freq_regs+0x74>
		synth_writereg(integer, INTEGER_FREQUENCY_REGISTER, 0x0, VERIFY);   // Integer register.
     48a:	2301      	movs	r3, #1
     48c:	2200      	movs	r2, #0
     48e:	2103      	movs	r1, #3
     490:	68f8      	ldr	r0, [r7, #12]
     492:	f7ff fdb5 	bl	0 <synth_writereg>
		last_integer = integer;
     496:	4a0e      	ldr	r2, [pc, #56]	; (4d0 <set_freq_regs+0xa8>)
     498:	68fb      	ldr	r3, [r7, #12]
     49a:	6013      	str	r3, [r2, #0]
	if (last_fraction == -1 || (last_fraction != fraction)) {
     49c:	4b0d      	ldr	r3, [pc, #52]	; (4d4 <set_freq_regs+0xac>)
     49e:	681b      	ldr	r3, [r3, #0]
     4a0:	f1b3 3fff 	cmp.w	r3, #4294967295
     4a4:	d004      	beq.n	4b0 <set_freq_regs+0x88>
     4a6:	4b0b      	ldr	r3, [pc, #44]	; (4d4 <set_freq_regs+0xac>)
     4a8:	681b      	ldr	r3, [r3, #0]
     4aa:	68ba      	ldr	r2, [r7, #8]
     4ac:	429a      	cmp	r2, r3
     4ae:	d008      	beq.n	4c2 <set_freq_regs+0x9a>
		synth_writereg(fraction, FRACTIONAL_FREQUENCY_REGISTER, 0x0, VERIFY);  // Fractional register.
     4b0:	2301      	movs	r3, #1
     4b2:	2200      	movs	r2, #0
     4b4:	2104      	movs	r1, #4
     4b6:	68b8      	ldr	r0, [r7, #8]
     4b8:	f7ff fda2 	bl	0 <synth_writereg>
		last_fraction = fraction;
     4bc:	4a05      	ldr	r2, [pc, #20]	; (4d4 <set_freq_regs+0xac>)
     4be:	68bb      	ldr	r3, [r7, #8]
     4c0:	6013      	str	r3, [r2, #0]
}
     4c2:	bf00      	nop
     4c4:	3718      	adds	r7, #24
     4c6:	46bd      	mov	sp, r7
     4c8:	bd80      	pop	{r7, pc}
     4ca:	bf00      	nop
     4cc:	20000004 	.word	0x20000004
     4d0:	20000008 	.word	0x20000008
     4d4:	2000000c 	.word	0x2000000c

000004d8 <print_mw_sweep_settings>:
/**
  * @brief  Print out the contents of the mw_sweep_settings structure
  * @param  None
  * @retval None
  */
  static void print_mw_sweep_settings (void) {
     4d8:	b580      	push	{r7, lr}
     4da:	af00      	add	r7, sp, #0
  	// Check that I've populated everything
    printf("state: %u \r\n", mw_sweep_settings.state);
     4dc:	4b34      	ldr	r3, [pc, #208]	; (5b0 <print_mw_sweep_settings+0xd8>)
     4de:	781b      	ldrb	r3, [r3, #0]
     4e0:	4619      	mov	r1, r3
     4e2:	4834      	ldr	r0, [pc, #208]	; (5b4 <print_mw_sweep_settings+0xdc>)
     4e4:	f001 f82c 	bl	1540 <__printf_veneer>
  	printf("k: %u \r\n", mw_sweep_settings.k);
     4e8:	4b31      	ldr	r3, [pc, #196]	; (5b0 <print_mw_sweep_settings+0xd8>)
     4ea:	785b      	ldrb	r3, [r3, #1]
     4ec:	4619      	mov	r1, r3
     4ee:	4832      	ldr	r0, [pc, #200]	; (5b8 <print_mw_sweep_settings+0xe0>)
     4f0:	f001 f826 	bl	1540 <__printf_veneer>
  	printf("NINT: %lu \r\n", mw_sweep_settings.NINT);
     4f4:	4b2e      	ldr	r3, [pc, #184]	; (5b0 <print_mw_sweep_settings+0xd8>)
     4f6:	685b      	ldr	r3, [r3, #4]
     4f8:	4619      	mov	r1, r3
     4fa:	4830      	ldr	r0, [pc, #192]	; (5bc <print_mw_sweep_settings+0xe4>)
     4fc:	f001 f820 	bl	1540 <__printf_veneer>
  	printf("NFRAC_start: %lu \r\n", mw_sweep_settings.NFRAC_start);
     500:	4b2b      	ldr	r3, [pc, #172]	; (5b0 <print_mw_sweep_settings+0xd8>)
     502:	689b      	ldr	r3, [r3, #8]
     504:	4619      	mov	r1, r3
     506:	482e      	ldr	r0, [pc, #184]	; (5c0 <print_mw_sweep_settings+0xe8>)
     508:	f001 f81a 	bl	1540 <__printf_veneer>
  	printf("num_steps: %lu \r\n", mw_sweep_settings.num_steps);
     50c:	4b28      	ldr	r3, [pc, #160]	; (5b0 <print_mw_sweep_settings+0xd8>)
     50e:	68db      	ldr	r3, [r3, #12]
     510:	4619      	mov	r1, r3
     512:	482c      	ldr	r0, [pc, #176]	; (5c4 <print_mw_sweep_settings+0xec>)
     514:	f001 f814 	bl	1540 <__printf_veneer>
  	printf("step_size: %lu \r\n", mw_sweep_settings.step_size);
     518:	4b25      	ldr	r3, [pc, #148]	; (5b0 <print_mw_sweep_settings+0xd8>)
     51a:	691b      	ldr	r3, [r3, #16]
     51c:	4619      	mov	r1, r3
     51e:	482a      	ldr	r0, [pc, #168]	; (5c8 <print_mw_sweep_settings+0xf0>)
     520:	f001 f80e 	bl	1540 <__printf_veneer>
  	printf("pop_cycles_per_point: %lu \r\n", mw_sweep_settings.pop_cycles_per_point);
     524:	4b22      	ldr	r3, [pc, #136]	; (5b0 <print_mw_sweep_settings+0xd8>)
     526:	695b      	ldr	r3, [r3, #20]
     528:	4619      	mov	r1, r3
     52a:	4828      	ldr	r0, [pc, #160]	; (5cc <print_mw_sweep_settings+0xf4>)
     52c:	f001 f808 	bl	1540 <__printf_veneer>
  	printf("stabilise_time: %lu us\r\n", mw_sweep_settings.stabilise_time);
     530:	4b1f      	ldr	r3, [pc, #124]	; (5b0 <print_mw_sweep_settings+0xd8>)
     532:	699b      	ldr	r3, [r3, #24]
     534:	4619      	mov	r1, r3
     536:	4826      	ldr	r0, [pc, #152]	; (5d0 <print_mw_sweep_settings+0xf8>)
     538:	f001 f802 	bl	1540 <__printf_veneer>
  	printf("dwell_time: %lu us\r\n", mw_sweep_settings.dwell_time);
     53c:	4b1c      	ldr	r3, [pc, #112]	; (5b0 <print_mw_sweep_settings+0xd8>)
     53e:	69db      	ldr	r3, [r3, #28]
     540:	4619      	mov	r1, r3
     542:	4824      	ldr	r0, [pc, #144]	; (5d4 <print_mw_sweep_settings+0xfc>)
     544:	f000 fffc 	bl	1540 <__printf_veneer>
  	printf("MW_processing_time: %lu us\r\n", mw_sweep_settings.MW_processing_time);
     548:	4b19      	ldr	r3, [pc, #100]	; (5b0 <print_mw_sweep_settings+0xd8>)
     54a:	6a1b      	ldr	r3, [r3, #32]
     54c:	4619      	mov	r1, r3
     54e:	4822      	ldr	r0, [pc, #136]	; (5d8 <print_mw_sweep_settings+0x100>)
     550:	f000 fff6 	bl	1540 <__printf_veneer>
  	printf("current_point: %lu\r\n", mw_sweep_settings.current_point);
     554:	4b16      	ldr	r3, [pc, #88]	; (5b0 <print_mw_sweep_settings+0xd8>)
     556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
     558:	4619      	mov	r1, r3
     55a:	4820      	ldr	r0, [pc, #128]	; (5dc <print_mw_sweep_settings+0x104>)
     55c:	f000 fff0 	bl	1540 <__printf_veneer>
  	printf("centre_freq: %f Hz\r\n", mw_sweep_settings.centre_freq);
     560:	4b13      	ldr	r3, [pc, #76]	; (5b0 <print_mw_sweep_settings+0xd8>)
     562:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
     566:	481e      	ldr	r0, [pc, #120]	; (5e0 <print_mw_sweep_settings+0x108>)
     568:	f000 ffea 	bl	1540 <__printf_veneer>
  	printf("span: %f Hz\r\n", mw_sweep_settings.span);
     56c:	4b10      	ldr	r3, [pc, #64]	; (5b0 <print_mw_sweep_settings+0xd8>)
     56e:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
     572:	481c      	ldr	r0, [pc, #112]	; (5e4 <print_mw_sweep_settings+0x10c>)
     574:	f000 ffe4 	bl	1540 <__printf_veneer>
  	printf("sweep_period: %f s\r\n", mw_sweep_settings.sweep_period);
     578:	4b0d      	ldr	r3, [pc, #52]	; (5b0 <print_mw_sweep_settings+0xd8>)
     57a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
     57e:	481a      	ldr	r0, [pc, #104]	; (5e8 <print_mw_sweep_settings+0x110>)
     580:	f000 ffde 	bl	1540 <__printf_veneer>
    printf("sweep_type: %s \r\n", mw_sweep_settings.sweep_type ? "FIXED_TIME" : "FIXED_STEPS");
     584:	4b0a      	ldr	r3, [pc, #40]	; (5b0 <print_mw_sweep_settings+0xd8>)
     586:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
     58a:	2b00      	cmp	r3, #0
     58c:	d001      	beq.n	592 <print_mw_sweep_settings+0xba>
     58e:	4b17      	ldr	r3, [pc, #92]	; (5ec <print_mw_sweep_settings+0x114>)
     590:	e000      	b.n	594 <print_mw_sweep_settings+0xbc>
     592:	4b17      	ldr	r3, [pc, #92]	; (5f0 <print_mw_sweep_settings+0x118>)
     594:	4619      	mov	r1, r3
     596:	4817      	ldr	r0, [pc, #92]	; (5f4 <print_mw_sweep_settings+0x11c>)
     598:	f000 ffd2 	bl	1540 <__printf_veneer>
    printf("sweep_mode: %d\r\n", mw_sweep_settings.sweep_mode);
     59c:	4b04      	ldr	r3, [pc, #16]	; (5b0 <print_mw_sweep_settings+0xd8>)
     59e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
     5a2:	4619      	mov	r1, r3
     5a4:	4814      	ldr	r0, [pc, #80]	; (5f8 <print_mw_sweep_settings+0x120>)
     5a6:	f000 ffcb 	bl	1540 <__printf_veneer>
}
     5aa:	bf00      	nop
     5ac:	bd80      	pop	{r7, pc}
     5ae:	bf00      	nop
     5b0:	200005f8 	.word	0x200005f8
     5b4:	0801bb38 	.word	0x0801bb38
     5b8:	0801bb48 	.word	0x0801bb48
     5bc:	0801bb54 	.word	0x0801bb54
     5c0:	0801bb64 	.word	0x0801bb64
     5c4:	0801bb78 	.word	0x0801bb78
     5c8:	0801bb8c 	.word	0x0801bb8c
     5cc:	0801bba0 	.word	0x0801bba0
     5d0:	0801bbc0 	.word	0x0801bbc0
     5d4:	0801bbdc 	.word	0x0801bbdc
     5d8:	0801bbf4 	.word	0x0801bbf4
     5dc:	0801bc14 	.word	0x0801bc14
     5e0:	0801bc2c 	.word	0x0801bc2c
     5e4:	0801bc44 	.word	0x0801bc44
     5e8:	0801bc54 	.word	0x0801bc54
     5ec:	0801bc6c 	.word	0x0801bc6c
     5f0:	0801bc78 	.word	0x0801bc78
     5f4:	0801bc84 	.word	0x0801bc84
     5f8:	0801bc98 	.word	0x0801bc98

000005fc <calc_defined_step_MW_sweep>:
  * @param  POP cycles per point
  * @param  Number of points
  * @param	POP_period in us
  * @retval Success/failure or early termination
  */
bool calc_defined_step_MW_sweep(const double centre_freq, const double span, const uint32_t pop_cycles_per_point, const uint32_t num_points_req) {
     5fc:	b580      	push	{r7, lr}
     5fe:	b094      	sub	sp, #80	; 0x50
     600:	af02      	add	r7, sp, #8
     602:	ed87 0b04 	vstr	d0, [r7, #16]
     606:	ed87 1b02 	vstr	d1, [r7, #8]
     60a:	6078      	str	r0, [r7, #4]
     60c:	6039      	str	r1, [r7, #0]
	printf("MW sweep will have %.10g GHz centre frequency with %.5g Hz span\r\n", centre_freq/1000000000, span);
     60e:	ed97 7b04 	vldr	d7, [r7, #16]
     612:	ed9f 6b8d 	vldr	d6, [pc, #564]	; 848 <calc_defined_step_MW_sweep+0x24c>
     616:	ee87 5b06 	vdiv.f64	d5, d7, d6
     61a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
     61e:	e9cd 2300 	strd	r2, r3, [sp]
     622:	ec53 2b15 	vmov	r2, r3, d5
     626:	4892      	ldr	r0, [pc, #584]	; (870 <calc_defined_step_MW_sweep+0x274>)
     628:	f000 ff8a 	bl	1540 <__printf_veneer>
	printf("and %ld POP cycles per point\r\n", pop_cycles_per_point);
     62c:	6879      	ldr	r1, [r7, #4]
     62e:	4891      	ldr	r0, [pc, #580]	; (874 <calc_defined_step_MW_sweep+0x278>)
     630:	f000 ff86 	bl	1540 <__printf_veneer>
	mw_sweep_settings.sweep_type = FIXED_STEPS;
     634:	4b90      	ldr	r3, [pc, #576]	; (878 <calc_defined_step_MW_sweep+0x27c>)
     636:	2200      	movs	r2, #0
     638:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	mw_sweep_settings.pop_cycles_per_point = pop_cycles_per_point;
     63c:	4a8e      	ldr	r2, [pc, #568]	; (878 <calc_defined_step_MW_sweep+0x27c>)
     63e:	687b      	ldr	r3, [r7, #4]
     640:	6153      	str	r3, [r2, #20]
	mw_sweep_settings.centre_freq = centre_freq;
     642:	498d      	ldr	r1, [pc, #564]	; (878 <calc_defined_step_MW_sweep+0x27c>)
     644:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
     648:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	mw_sweep_settings.span = span;
     64c:	498a      	ldr	r1, [pc, #552]	; (878 <calc_defined_step_MW_sweep+0x27c>)
     64e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
     652:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30

	/* Calculate start frequency */
	double start_freq = centre_freq - 0.5* span;
     656:	ed97 7b02 	vldr	d7, [r7, #8]
     65a:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
     65e:	ee27 7b06 	vmul.f64	d7, d7, d6
     662:	ed97 6b04 	vldr	d6, [r7, #16]
     666:	ee36 7b47 	vsub.f64	d7, d6, d7
     66a:	ed87 7b10 	vstr	d7, [r7, #64]	; 0x40
	mw_sweep_settings.k = calculate_k(start_freq);
     66e:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
     672:	f000 fb1f 	bl	cb4 <calculate_k>
     676:	4603      	mov	r3, r0
     678:	b2da      	uxtb	r2, r3
     67a:	4b7f      	ldr	r3, [pc, #508]	; (878 <calc_defined_step_MW_sweep+0x27c>)
     67c:	705a      	strb	r2, [r3, #1]

	/* Extrapolate step size requested versus achievable  */
	const double step_size_Hz = span / (num_points_req - 1);
     67e:	683b      	ldr	r3, [r7, #0]
     680:	3b01      	subs	r3, #1
     682:	ee07 3a90 	vmov	s15, r3
     686:	eeb8 6b67 	vcvt.f64.u32	d6, s15
     68a:	ed97 5b02 	vldr	d5, [r7, #8]
     68e:	ee85 7b06 	vdiv.f64	d7, d5, d6
     692:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
	printf("Requested %ld steps, therefore step size of %.3g Hz\r\n", num_points_req, step_size_Hz);
     696:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
     69a:	6839      	ldr	r1, [r7, #0]
     69c:	4877      	ldr	r0, [pc, #476]	; (87c <calc_defined_step_MW_sweep+0x280>)
     69e:	f000 ff4f 	bl	1540 <__printf_veneer>
	const double unit_step_size_Hz = REF_FREQ / (double) (mw_sweep_settings.k * (1 << 24)); //minimum step size possible
     6a2:	ed9f 5b6b 	vldr	d5, [pc, #428]	; 850 <calc_defined_step_MW_sweep+0x254>
     6a6:	4b74      	ldr	r3, [pc, #464]	; (878 <calc_defined_step_MW_sweep+0x27c>)
     6a8:	785b      	ldrb	r3, [r3, #1]
     6aa:	061b      	lsls	r3, r3, #24
     6ac:	ee07 3a90 	vmov	s15, r3
     6b0:	eeb8 6be7 	vcvt.f64.s32	d6, s15
     6b4:	ee85 7b06 	vdiv.f64	d7, d5, d6
     6b8:	ed87 7b0c 	vstr	d7, [r7, #48]	; 0x30
	//printf("Unit step size: %.3g Hz\r\n", unit_step_size_Hz);
	mw_sweep_settings.step_size = (step_size_Hz / unit_step_size_Hz + 0.5);
     6bc:	ed97 5b0e 	vldr	d5, [r7, #56]	; 0x38
     6c0:	ed97 6b0c 	vldr	d6, [r7, #48]	; 0x30
     6c4:	ee85 7b06 	vdiv.f64	d7, d5, d6
     6c8:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
     6cc:	ee37 7b06 	vadd.f64	d7, d7, d6
     6d0:	eefc 7bc7 	vcvt.u32.f64	s15, d7
     6d4:	ee17 2a90 	vmov	r2, s15
     6d8:	4b67      	ldr	r3, [pc, #412]	; (878 <calc_defined_step_MW_sweep+0x27c>)
     6da:	611a      	str	r2, [r3, #16]
	if (!mw_sweep_settings.step_size) { //step_size must be a positive non-zero integer
     6dc:	4b66      	ldr	r3, [pc, #408]	; (878 <calc_defined_step_MW_sweep+0x27c>)
     6de:	691b      	ldr	r3, [r3, #16]
     6e0:	2b00      	cmp	r3, #0
     6e2:	d104      	bne.n	6ee <calc_defined_step_MW_sweep+0xf2>
		mw_sweep_settings.step_size++;
     6e4:	4b64      	ldr	r3, [pc, #400]	; (878 <calc_defined_step_MW_sweep+0x27c>)
     6e6:	691b      	ldr	r3, [r3, #16]
     6e8:	3301      	adds	r3, #1
     6ea:	4a63      	ldr	r2, [pc, #396]	; (878 <calc_defined_step_MW_sweep+0x27c>)
     6ec:	6113      	str	r3, [r2, #16]
	}
	const double achieved_step_size = (double) (mw_sweep_settings.step_size * unit_step_size_Hz);
     6ee:	4b62      	ldr	r3, [pc, #392]	; (878 <calc_defined_step_MW_sweep+0x27c>)
     6f0:	691b      	ldr	r3, [r3, #16]
     6f2:	ee07 3a90 	vmov	s15, r3
     6f6:	eeb8 7b67 	vcvt.f64.u32	d7, s15
     6fa:	ed97 6b0c 	vldr	d6, [r7, #48]	; 0x30
     6fe:	ee26 7b07 	vmul.f64	d7, d6, d7
     702:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28
	printf("Step size achieved: %.3g Hz\r\n", achieved_step_size);
     706:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
     70a:	485d      	ldr	r0, [pc, #372]	; (880 <calc_defined_step_MW_sweep+0x284>)
     70c:	f000 ff18 	bl	1540 <__printf_veneer>
	mw_sweep_settings.num_steps = span / achieved_step_size;
     710:	ed97 5b02 	vldr	d5, [r7, #8]
     714:	ed97 6b0a 	vldr	d6, [r7, #40]	; 0x28
     718:	ee85 7b06 	vdiv.f64	d7, d5, d6
     71c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
     720:	ee17 2a90 	vmov	r2, s15
     724:	4b54      	ldr	r3, [pc, #336]	; (878 <calc_defined_step_MW_sweep+0x27c>)
     726:	60da      	str	r2, [r3, #12]

	/* Can avoid spurs if frequency requested can be encoded exactly  */
	start_freq = ((long)(start_freq/unit_step_size_Hz)) * unit_step_size_Hz;
     728:	ed97 5b10 	vldr	d5, [r7, #64]	; 0x40
     72c:	ed97 6b0c 	vldr	d6, [r7, #48]	; 0x30
     730:	ee85 7b06 	vdiv.f64	d7, d5, d6
     734:	eefd 7bc7 	vcvt.s32.f64	s15, d7
     738:	eeb8 7be7 	vcvt.f64.s32	d7, s15
     73c:	ed97 6b0c 	vldr	d6, [r7, #48]	; 0x30
     740:	ee26 7b07 	vmul.f64	d7, d6, d7
     744:	ed87 7b10 	vstr	d7, [r7, #64]	; 0x40

	/* Calculate the N division ratio, extracting the fractional and integer parts */
	const double N = ((start_freq * mw_sweep_settings.k) / REF_FREQ);
     748:	4b4b      	ldr	r3, [pc, #300]	; (878 <calc_defined_step_MW_sweep+0x27c>)
     74a:	785b      	ldrb	r3, [r3, #1]
     74c:	ee07 3a90 	vmov	s15, r3
     750:	eeb8 6be7 	vcvt.f64.s32	d6, s15
     754:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
     758:	ee26 6b07 	vmul.f64	d6, d6, d7
     75c:	ed9f 5b3c 	vldr	d5, [pc, #240]	; 850 <calc_defined_step_MW_sweep+0x254>
     760:	ee86 7b05 	vdiv.f64	d7, d6, d5
     764:	ed87 7b08 	vstr	d7, [r7, #32]
	mw_sweep_settings.NINT = N;
     768:	ed97 7b08 	vldr	d7, [r7, #32]
     76c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
     770:	ee17 2a90 	vmov	r2, s15
     774:	4b40      	ldr	r3, [pc, #256]	; (878 <calc_defined_step_MW_sweep+0x27c>)
     776:	605a      	str	r2, [r3, #4]
	mw_sweep_settings.NFRAC_start = ((N - mw_sweep_settings.NINT) * (1 << 24)) + 0.5;
     778:	4b3f      	ldr	r3, [pc, #252]	; (878 <calc_defined_step_MW_sweep+0x27c>)
     77a:	685b      	ldr	r3, [r3, #4]
     77c:	ee07 3a90 	vmov	s15, r3
     780:	eeb8 7b67 	vcvt.f64.u32	d7, s15
     784:	ed97 6b08 	vldr	d6, [r7, #32]
     788:	ee36 7b47 	vsub.f64	d7, d6, d7
     78c:	ed9f 6b32 	vldr	d6, [pc, #200]	; 858 <calc_defined_step_MW_sweep+0x25c>
     790:	ee27 7b06 	vmul.f64	d7, d7, d6
     794:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
     798:	ee37 7b06 	vadd.f64	d7, d7, d6
     79c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
     7a0:	ee17 2a90 	vmov	r2, s15
     7a4:	4b34      	ldr	r3, [pc, #208]	; (878 <calc_defined_step_MW_sweep+0x27c>)
     7a6:	609a      	str	r2, [r3, #8]

	/* Calculate dwell time at each MW frequency */
	mw_sweep_settings.stabilise_time = MW_STABILISE_TIME_US; //Global MW stabilisation time
     7a8:	f241 7270 	movw	r2, #6000	; 0x1770
     7ac:	4b32      	ldr	r3, [pc, #200]	; (878 <calc_defined_step_MW_sweep+0x27c>)
     7ae:	619a      	str	r2, [r3, #24]
	mw_sweep_settings.dwell_time = pop_cycles_per_point * POP_period_us + TIMING_MARGIN_US;
     7b0:	4b34      	ldr	r3, [pc, #208]	; (884 <calc_defined_step_MW_sweep+0x288>)
     7b2:	681b      	ldr	r3, [r3, #0]
     7b4:	687a      	ldr	r2, [r7, #4]
     7b6:	fb02 f303 	mul.w	r3, r2, r3
     7ba:	2264      	movs	r2, #100	; 0x64
     7bc:	4413      	add	r3, r2
     7be:	4a2e      	ldr	r2, [pc, #184]	; (878 <calc_defined_step_MW_sweep+0x27c>)
     7c0:	61d3      	str	r3, [r2, #28]

	/* Calculate the period of a sweep */
	const double calc_sweep_time = (double)(MW_STABILISE_TIME_US + MW_PROCESSING_TIME_US + mw_sweep_settings.dwell_time) * (double)(mw_sweep_settings.num_steps+1)/1000000;
     7c2:	f241 7270 	movw	r2, #6000	; 0x1770
     7c6:	2301      	movs	r3, #1
     7c8:	441a      	add	r2, r3
     7ca:	4b2b      	ldr	r3, [pc, #172]	; (878 <calc_defined_step_MW_sweep+0x27c>)
     7cc:	69db      	ldr	r3, [r3, #28]
     7ce:	4413      	add	r3, r2
     7d0:	ee07 3a90 	vmov	s15, r3
     7d4:	eeb8 6b67 	vcvt.f64.u32	d6, s15
     7d8:	4b27      	ldr	r3, [pc, #156]	; (878 <calc_defined_step_MW_sweep+0x27c>)
     7da:	68db      	ldr	r3, [r3, #12]
     7dc:	3301      	adds	r3, #1
     7de:	ee07 3a90 	vmov	s15, r3
     7e2:	eeb8 7b67 	vcvt.f64.u32	d7, s15
     7e6:	ee26 6b07 	vmul.f64	d6, d6, d7
     7ea:	ed9f 5b1d 	vldr	d5, [pc, #116]	; 860 <calc_defined_step_MW_sweep+0x264>
     7ee:	ee86 7b05 	vdiv.f64	d7, d6, d5
     7f2:	ed87 7b06 	vstr	d7, [r7, #24]
	printf("Sweep period: %.3g s\r\n", calc_sweep_time);
     7f6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
     7fa:	4823      	ldr	r0, [pc, #140]	; (888 <calc_defined_step_MW_sweep+0x28c>)
     7fc:	f000 fea0 	bl	1540 <__printf_veneer>
	printf("%ld points, %.3g ms each\r\n", mw_sweep_settings.num_steps, 1000 * calc_sweep_time / (mw_sweep_settings.num_steps + 1));
     800:	4b1d      	ldr	r3, [pc, #116]	; (878 <calc_defined_step_MW_sweep+0x27c>)
     802:	68d9      	ldr	r1, [r3, #12]
     804:	ed97 7b06 	vldr	d7, [r7, #24]
     808:	ed9f 6b17 	vldr	d6, [pc, #92]	; 868 <calc_defined_step_MW_sweep+0x26c>
     80c:	ee27 6b06 	vmul.f64	d6, d7, d6
     810:	4b19      	ldr	r3, [pc, #100]	; (878 <calc_defined_step_MW_sweep+0x27c>)
     812:	68db      	ldr	r3, [r3, #12]
     814:	3301      	adds	r3, #1
     816:	ee07 3a90 	vmov	s15, r3
     81a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
     81e:	ee86 5b07 	vdiv.f64	d5, d6, d7
     822:	ec53 2b15 	vmov	r2, r3, d5
     826:	4819      	ldr	r0, [pc, #100]	; (88c <calc_defined_step_MW_sweep+0x290>)
     828:	f000 fe8a 	bl	1540 <__printf_veneer>

	mw_sweep_settings.current_point = 0;
     82c:	4b12      	ldr	r3, [pc, #72]	; (878 <calc_defined_step_MW_sweep+0x27c>)
     82e:	2200      	movs	r2, #0
     830:	625a      	str	r2, [r3, #36]	; 0x24
	mw_sweep_settings.sweep_period = calc_sweep_time;
     832:	4911      	ldr	r1, [pc, #68]	; (878 <calc_defined_step_MW_sweep+0x27c>)
     834:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
     838:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

	//print_mw_sweep_settings();
	return(true);
     83c:	2301      	movs	r3, #1
}
     83e:	4618      	mov	r0, r3
     840:	3748      	adds	r7, #72	; 0x48
     842:	46bd      	mov	sp, r7
     844:	bd80      	pop	{r7, pc}
     846:	bf00      	nop
     848:	00000000 	.word	0x00000000
     84c:	41cdcd65 	.word	0x41cdcd65
     850:	00000000 	.word	0x00000000
     854:	4187d784 	.word	0x4187d784
     858:	00000000 	.word	0x00000000
     85c:	41700000 	.word	0x41700000
     860:	00000000 	.word	0x00000000
     864:	412e8480 	.word	0x412e8480
     868:	00000000 	.word	0x00000000
     86c:	408f4000 	.word	0x408f4000
     870:	0801bcac 	.word	0x0801bcac
     874:	0801bcf0 	.word	0x0801bcf0
     878:	200005f8 	.word	0x200005f8
     87c:	0801bd10 	.word	0x0801bd10
     880:	0801bd48 	.word	0x0801bd48
     884:	200005ec 	.word	0x200005ec
     888:	0801bd68 	.word	0x0801bd68
     88c:	0801bd80 	.word	0x0801bd80

00000890 <calc_fixed_time_MW_sweep>:
  * @param  Span in Hz
  * @param  Sweep period in s
  * @param  Additional time for scope sync
  * @retval Success/failure or early termination
  */
bool calc_fixed_time_MW_sweep(const double centre_freq, const double span, const double requested_sweep_period, const bool scope_sync_time) {
     890:	b580      	push	{r7, lr}
     892:	b09e      	sub	sp, #120	; 0x78
     894:	af04      	add	r7, sp, #16
     896:	ed87 0b06 	vstr	d0, [r7, #24]
     89a:	ed87 1b04 	vstr	d1, [r7, #16]
     89e:	ed87 2b02 	vstr	d2, [r7, #8]
     8a2:	4603      	mov	r3, r0
     8a4:	71fb      	strb	r3, [r7, #7]
	//Dwell time must be a minimum of one POP cycle
	//Overall dwell time should be at least 50% of sweep time
	//Number of points shall be maximised within the available time

	printf("MW sweep will have %.10g GHz centre frequency with %.5g Hz span, over %.3g s\r\n", centre_freq/1000000000, span, requested_sweep_period);
     8a6:	ed97 7b06 	vldr	d7, [r7, #24]
     8aa:	ed9f 6b97 	vldr	d6, [pc, #604]	; b08 <calc_fixed_time_MW_sweep+0x278>
     8ae:	ee87 5b06 	vdiv.f64	d5, d7, d6
     8b2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
     8b6:	e9cd 2302 	strd	r2, r3, [sp, #8]
     8ba:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
     8be:	e9cd 2300 	strd	r2, r3, [sp]
     8c2:	ec53 2b15 	vmov	r2, r3, d5
     8c6:	4898      	ldr	r0, [pc, #608]	; (b28 <calc_fixed_time_MW_sweep+0x298>)
     8c8:	f000 fe3a 	bl	1540 <__printf_veneer>
	mw_sweep_settings.sweep_type = FIXED_TIME;
     8cc:	4b97      	ldr	r3, [pc, #604]	; (b2c <calc_fixed_time_MW_sweep+0x29c>)
     8ce:	2201      	movs	r2, #1
     8d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	mw_sweep_settings.centre_freq = centre_freq;
     8d4:	4995      	ldr	r1, [pc, #596]	; (b2c <calc_fixed_time_MW_sweep+0x29c>)
     8d6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
     8da:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	mw_sweep_settings.span = span;
     8de:	4993      	ldr	r1, [pc, #588]	; (b2c <calc_fixed_time_MW_sweep+0x29c>)
     8e0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
     8e4:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30

	mw_sweep_settings.dwell_time = POP_period_us + TIMING_MARGIN_US; //minimum possible value of dwell_time in us
     8e8:	4b91      	ldr	r3, [pc, #580]	; (b30 <calc_fixed_time_MW_sweep+0x2a0>)
     8ea:	681b      	ldr	r3, [r3, #0]
     8ec:	2264      	movs	r2, #100	; 0x64
     8ee:	4413      	add	r3, r2
     8f0:	4a8e      	ldr	r2, [pc, #568]	; (b2c <calc_fixed_time_MW_sweep+0x29c>)
     8f2:	61d3      	str	r3, [r2, #28]
	uint32_t point_time = MW_STABILISE_TIME_US + MW_PROCESSING_TIME_US + mw_sweep_settings.dwell_time; //minimum possible value in us
     8f4:	f241 7270 	movw	r2, #6000	; 0x1770
     8f8:	2301      	movs	r3, #1
     8fa:	441a      	add	r2, r3
     8fc:	4b8b      	ldr	r3, [pc, #556]	; (b2c <calc_fixed_time_MW_sweep+0x29c>)
     8fe:	69db      	ldr	r3, [r3, #28]
     900:	4413      	add	r3, r2
     902:	65fb      	str	r3, [r7, #92]	; 0x5c
	uint32_t points_in_sweep = requested_sweep_period * (double)(1000000 / point_time); //maximum possible number of steps in sweep, rounded down to an integer
     904:	4a8b      	ldr	r2, [pc, #556]	; (b34 <calc_fixed_time_MW_sweep+0x2a4>)
     906:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
     908:	fbb2 f3f3 	udiv	r3, r2, r3
     90c:	ee07 3a90 	vmov	s15, r3
     910:	eeb8 6b67 	vcvt.f64.u32	d6, s15
     914:	ed97 7b02 	vldr	d7, [r7, #8]
     918:	ee26 7b07 	vmul.f64	d7, d6, d7
     91c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
     920:	ee17 3a90 	vmov	r3, s15
     924:	65bb      	str	r3, [r7, #88]	; 0x58
	//printf("%lu points in sweep, maximum\r\n", points_in_sweep);

	/* now figure out the unit_step_size and how many steps will be taken in the span */

	/* Calculate start frequency */
	double start_freq = centre_freq - 0.5* span;
     926:	ed97 7b04 	vldr	d7, [r7, #16]
     92a:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
     92e:	ee27 7b06 	vmul.f64	d7, d7, d6
     932:	ed97 6b06 	vldr	d6, [r7, #24]
     936:	ee36 7b47 	vsub.f64	d7, d6, d7
     93a:	ed87 7b14 	vstr	d7, [r7, #80]	; 0x50
	mw_sweep_settings.k = calculate_k(start_freq);
     93e:	ed97 0b14 	vldr	d0, [r7, #80]	; 0x50
     942:	f000 f9b7 	bl	cb4 <calculate_k>
     946:	4603      	mov	r3, r0
     948:	b2da      	uxtb	r2, r3
     94a:	4b78      	ldr	r3, [pc, #480]	; (b2c <calc_fixed_time_MW_sweep+0x29c>)
     94c:	705a      	strb	r2, [r3, #1]

	//steps should be evenly sized
	//selected step size should be an integer multiple of the unit step size
	//increase the step_size value until the sweep fits into the available period
	const double unit_step_size_Hz = REF_FREQ / (double) (mw_sweep_settings.k * (1 << 24)); //minimum step size possible
     94e:	ed9f 5b70 	vldr	d5, [pc, #448]	; b10 <calc_fixed_time_MW_sweep+0x280>
     952:	4b76      	ldr	r3, [pc, #472]	; (b2c <calc_fixed_time_MW_sweep+0x29c>)
     954:	785b      	ldrb	r3, [r3, #1]
     956:	061b      	lsls	r3, r3, #24
     958:	ee07 3a90 	vmov	s15, r3
     95c:	eeb8 6be7 	vcvt.f64.s32	d6, s15
     960:	ee85 7b06 	vdiv.f64	d7, d5, d6
     964:	ed87 7b12 	vstr	d7, [r7, #72]	; 0x48
	//printf("Unit step size: %.3g Hz\r\n", unit_step_size_Hz);
	mw_sweep_settings.step_size = 1;
     968:	4b70      	ldr	r3, [pc, #448]	; (b2c <calc_fixed_time_MW_sweep+0x29c>)
     96a:	2201      	movs	r2, #1
     96c:	611a      	str	r2, [r3, #16]
	while ((mw_sweep_settings.step_size * points_in_sweep) < (span / unit_step_size_Hz)) {
     96e:	e004      	b.n	97a <calc_fixed_time_MW_sweep+0xea>
		mw_sweep_settings.step_size++;
     970:	4b6e      	ldr	r3, [pc, #440]	; (b2c <calc_fixed_time_MW_sweep+0x29c>)
     972:	691b      	ldr	r3, [r3, #16]
     974:	3301      	adds	r3, #1
     976:	4a6d      	ldr	r2, [pc, #436]	; (b2c <calc_fixed_time_MW_sweep+0x29c>)
     978:	6113      	str	r3, [r2, #16]
	while ((mw_sweep_settings.step_size * points_in_sweep) < (span / unit_step_size_Hz)) {
     97a:	4b6c      	ldr	r3, [pc, #432]	; (b2c <calc_fixed_time_MW_sweep+0x29c>)
     97c:	691b      	ldr	r3, [r3, #16]
     97e:	6dba      	ldr	r2, [r7, #88]	; 0x58
     980:	fb02 f303 	mul.w	r3, r2, r3
     984:	ee07 3a90 	vmov	s15, r3
     988:	eeb8 6b67 	vcvt.f64.u32	d6, s15
     98c:	ed97 4b04 	vldr	d4, [r7, #16]
     990:	ed97 5b12 	vldr	d5, [r7, #72]	; 0x48
     994:	ee84 7b05 	vdiv.f64	d7, d4, d5
     998:	eeb4 6bc7 	vcmpe.f64	d6, d7
     99c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     9a0:	d4e6      	bmi.n	970 <calc_fixed_time_MW_sweep+0xe0>
	}
	const double achieved_step_size = (double) (mw_sweep_settings.step_size * unit_step_size_Hz);
     9a2:	4b62      	ldr	r3, [pc, #392]	; (b2c <calc_fixed_time_MW_sweep+0x29c>)
     9a4:	691b      	ldr	r3, [r3, #16]
     9a6:	ee07 3a90 	vmov	s15, r3
     9aa:	eeb8 7b67 	vcvt.f64.u32	d7, s15
     9ae:	ed97 6b12 	vldr	d6, [r7, #72]	; 0x48
     9b2:	ee26 7b07 	vmul.f64	d7, d6, d7
     9b6:	ed87 7b10 	vstr	d7, [r7, #64]	; 0x40
	printf("Step size: %lu x unit step i.e. %.3g Hz\r\n", mw_sweep_settings.step_size, achieved_step_size);
     9ba:	4b5c      	ldr	r3, [pc, #368]	; (b2c <calc_fixed_time_MW_sweep+0x29c>)
     9bc:	6919      	ldr	r1, [r3, #16]
     9be:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
     9c2:	485d      	ldr	r0, [pc, #372]	; (b38 <calc_fixed_time_MW_sweep+0x2a8>)
     9c4:	f000 fdbc 	bl	1540 <__printf_veneer>

	//calculate number of steps in sweep and round down to an integer (must fit in time available)
	mw_sweep_settings.num_steps = (span / achieved_step_size);
     9c8:	ed97 5b04 	vldr	d5, [r7, #16]
     9cc:	ed97 6b10 	vldr	d6, [r7, #64]	; 0x40
     9d0:	ee85 7b06 	vdiv.f64	d7, d5, d6
     9d4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
     9d8:	ee17 2a90 	vmov	r2, s15
     9dc:	4b53      	ldr	r3, [pc, #332]	; (b2c <calc_fixed_time_MW_sweep+0x29c>)
     9de:	60da      	str	r2, [r3, #12]

	const uint32_t point_time_us = 1000000 * requested_sweep_period / (mw_sweep_settings.num_steps + 1); //period of each point in us
     9e0:	ed97 7b02 	vldr	d7, [r7, #8]
     9e4:	ed9f 6b4c 	vldr	d6, [pc, #304]	; b18 <calc_fixed_time_MW_sweep+0x288>
     9e8:	ee27 5b06 	vmul.f64	d5, d7, d6
     9ec:	4b4f      	ldr	r3, [pc, #316]	; (b2c <calc_fixed_time_MW_sweep+0x29c>)
     9ee:	68db      	ldr	r3, [r3, #12]
     9f0:	3301      	adds	r3, #1
     9f2:	ee07 3a90 	vmov	s15, r3
     9f6:	eeb8 6b67 	vcvt.f64.u32	d6, s15
     9fa:	ee85 7b06 	vdiv.f64	d7, d5, d6
     9fe:	eefc 7bc7 	vcvt.u32.f64	s15, d7
     a02:	ee17 3a90 	vmov	r3, s15
     a06:	63fb      	str	r3, [r7, #60]	; 0x3c
//	printf("DEBUG point_time_us: %lu \r\n", point_time_us);
//	printf("DEBUG sweep time in us: %lu \r\n", point_time_us * (mw_sweep_settings.num_steps + 1));
	mw_sweep_settings.pop_cycles_per_point = (point_time_us - MW_STABILISE_TIME_US - TIMING_MARGIN_US - MW_PROCESSING_TIME_US)/POP_period_us;
     a08:	f241 7270 	movw	r2, #6000	; 0x1770
     a0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     a0e:	1a9b      	subs	r3, r3, r2
     a10:	2264      	movs	r2, #100	; 0x64
     a12:	1a9b      	subs	r3, r3, r2
     a14:	2201      	movs	r2, #1
     a16:	1a9a      	subs	r2, r3, r2
     a18:	4b45      	ldr	r3, [pc, #276]	; (b30 <calc_fixed_time_MW_sweep+0x2a0>)
     a1a:	681b      	ldr	r3, [r3, #0]
     a1c:	fbb2 f3f3 	udiv	r3, r2, r3
     a20:	4a42      	ldr	r2, [pc, #264]	; (b2c <calc_fixed_time_MW_sweep+0x29c>)
     a22:	6153      	str	r3, [r2, #20]
	printf("%lu points in sweep, %lu ms and %lu POP cycles each\r\n", mw_sweep_settings.num_steps + 1, point_time_us / 1000, mw_sweep_settings.pop_cycles_per_point);
     a24:	4b41      	ldr	r3, [pc, #260]	; (b2c <calc_fixed_time_MW_sweep+0x29c>)
     a26:	68db      	ldr	r3, [r3, #12]
     a28:	1c59      	adds	r1, r3, #1
     a2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     a2c:	4a43      	ldr	r2, [pc, #268]	; (b3c <calc_fixed_time_MW_sweep+0x2ac>)
     a2e:	fba2 2303 	umull	r2, r3, r2, r3
     a32:	099a      	lsrs	r2, r3, #6
     a34:	4b3d      	ldr	r3, [pc, #244]	; (b2c <calc_fixed_time_MW_sweep+0x29c>)
     a36:	695b      	ldr	r3, [r3, #20]
     a38:	4841      	ldr	r0, [pc, #260]	; (b40 <calc_fixed_time_MW_sweep+0x2b0>)
     a3a:	f000 fd81 	bl	1540 <__printf_veneer>
	uint32_t min_dwell_required_us = mw_sweep_settings.pop_cycles_per_point * POP_period_us + TIMING_MARGIN_US; //minimum dwell_time to achieve above
     a3e:	4b3b      	ldr	r3, [pc, #236]	; (b2c <calc_fixed_time_MW_sweep+0x29c>)
     a40:	695b      	ldr	r3, [r3, #20]
     a42:	4a3b      	ldr	r2, [pc, #236]	; (b30 <calc_fixed_time_MW_sweep+0x2a0>)
     a44:	6812      	ldr	r2, [r2, #0]
     a46:	fb02 f303 	mul.w	r3, r2, r3
     a4a:	2264      	movs	r2, #100	; 0x64
     a4c:	4413      	add	r3, r2
     a4e:	63bb      	str	r3, [r7, #56]	; 0x38
	mw_sweep_settings.dwell_time = point_time_us - MW_STABILISE_TIME_US - MW_PROCESSING_TIME_US; //actual programmed dwell time
     a50:	f241 7270 	movw	r2, #6000	; 0x1770
     a54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     a56:	1a9b      	subs	r3, r3, r2
     a58:	2201      	movs	r2, #1
     a5a:	1a9b      	subs	r3, r3, r2
     a5c:	4a33      	ldr	r2, [pc, #204]	; (b2c <calc_fixed_time_MW_sweep+0x29c>)
     a5e:	61d3      	str	r3, [r2, #28]
	if (mw_sweep_settings.dwell_time < min_dwell_required_us) {
     a60:	4b32      	ldr	r3, [pc, #200]	; (b2c <calc_fixed_time_MW_sweep+0x29c>)
     a62:	69db      	ldr	r3, [r3, #28]
     a64:	6bba      	ldr	r2, [r7, #56]	; 0x38
     a66:	429a      	cmp	r2, r3
     a68:	d902      	bls.n	a70 <calc_fixed_time_MW_sweep+0x1e0>
		mw_sweep_settings.dwell_time = min_dwell_required_us;
     a6a:	4a30      	ldr	r2, [pc, #192]	; (b2c <calc_fixed_time_MW_sweep+0x29c>)
     a6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     a6e:	61d3      	str	r3, [r2, #28]
	}
//	printf("DEBUG dwell_time: %lu \r\n", mw_sweep_settings.dwell_time);
//	printf("DEBUG sweep time in us: %lu \r\n", (mw_sweep_settings.dwell_time + MW_STABILISE_TIME_US + MW_PROCESSING_TIME_US) * (mw_sweep_settings.num_steps + 1));

	/* Double check - calculate the period of a sweep */
	double point_period = (double)(MW_STABILISE_TIME_US + MW_PROCESSING_TIME_US + mw_sweep_settings.dwell_time)/1000000;
     a70:	f241 7270 	movw	r2, #6000	; 0x1770
     a74:	2301      	movs	r3, #1
     a76:	441a      	add	r2, r3
     a78:	4b2c      	ldr	r3, [pc, #176]	; (b2c <calc_fixed_time_MW_sweep+0x29c>)
     a7a:	69db      	ldr	r3, [r3, #28]
     a7c:	4413      	add	r3, r2
     a7e:	ee07 3a90 	vmov	s15, r3
     a82:	eeb8 6b67 	vcvt.f64.u32	d6, s15
     a86:	ed9f 5b24 	vldr	d5, [pc, #144]	; b18 <calc_fixed_time_MW_sweep+0x288>
     a8a:	ee86 7b05 	vdiv.f64	d7, d6, d5
     a8e:	ed87 7b0c 	vstr	d7, [r7, #48]	; 0x30
//	printf("Point period %f\r\n", point_period);
	double calc_sweep_time = point_period * (mw_sweep_settings.num_steps + 1);
     a92:	4b26      	ldr	r3, [pc, #152]	; (b2c <calc_fixed_time_MW_sweep+0x29c>)
     a94:	68db      	ldr	r3, [r3, #12]
     a96:	3301      	adds	r3, #1
     a98:	ee07 3a90 	vmov	s15, r3
     a9c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
     aa0:	ed97 6b0c 	vldr	d6, [r7, #48]	; 0x30
     aa4:	ee26 7b07 	vmul.f64	d7, d6, d7
     aa8:	ed87 7b18 	vstr	d7, [r7, #96]	; 0x60
//	printf("calc_sweep_time %f\r\n", calc_sweep_time);
	double min_sweep_time = (double)((min_dwell_required_us + MW_STABILISE_TIME_US + MW_PROCESSING_TIME_US) * (mw_sweep_settings.num_steps + 1)) / 1000000;
     aac:	f241 7270 	movw	r2, #6000	; 0x1770
     ab0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     ab2:	4413      	add	r3, r2
     ab4:	2201      	movs	r2, #1
     ab6:	4413      	add	r3, r2
     ab8:	4a1c      	ldr	r2, [pc, #112]	; (b2c <calc_fixed_time_MW_sweep+0x29c>)
     aba:	68d2      	ldr	r2, [r2, #12]
     abc:	3201      	adds	r2, #1
     abe:	fb02 f303 	mul.w	r3, r2, r3
     ac2:	ee07 3a90 	vmov	s15, r3
     ac6:	eeb8 6b67 	vcvt.f64.u32	d6, s15
     aca:	ed9f 5b13 	vldr	d5, [pc, #76]	; b18 <calc_fixed_time_MW_sweep+0x288>
     ace:	ee86 7b05 	vdiv.f64	d7, d6, d5
     ad2:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28
	if (calc_sweep_time/min_sweep_time > 1.02) {
     ad6:	ed97 5b18 	vldr	d5, [r7, #96]	; 0x60
     ada:	ed97 6b0a 	vldr	d6, [r7, #40]	; 0x28
     ade:	ee85 7b06 	vdiv.f64	d7, d5, d6
     ae2:	ed9f 6b0f 	vldr	d6, [pc, #60]	; b20 <calc_fixed_time_MW_sweep+0x290>
     ae6:	eeb4 7bc6 	vcmpe.f64	d7, d6
     aea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     aee:	dd2b      	ble.n	b48 <calc_fixed_time_MW_sweep+0x2b8>
		printf("Sweep period %.4g s but could be reduced to %.4g s\r\n", calc_sweep_time, min_sweep_time);
     af0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
     af4:	e9cd 2300 	strd	r2, r3, [sp]
     af8:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
     afc:	4811      	ldr	r0, [pc, #68]	; (b44 <calc_fixed_time_MW_sweep+0x2b4>)
     afe:	f000 fd1f 	bl	1540 <__printf_veneer>
     b02:	e029      	b.n	b58 <calc_fixed_time_MW_sweep+0x2c8>
     b04:	f3af 8000 	nop.w
     b08:	00000000 	.word	0x00000000
     b0c:	41cdcd65 	.word	0x41cdcd65
     b10:	00000000 	.word	0x00000000
     b14:	4187d784 	.word	0x4187d784
     b18:	00000000 	.word	0x00000000
     b1c:	412e8480 	.word	0x412e8480
     b20:	851eb852 	.word	0x851eb852
     b24:	3ff051eb 	.word	0x3ff051eb
     b28:	0801bd9c 	.word	0x0801bd9c
     b2c:	200005f8 	.word	0x200005f8
     b30:	200005ec 	.word	0x200005ec
     b34:	000f4240 	.word	0x000f4240
     b38:	0801bdec 	.word	0x0801bdec
     b3c:	10624dd3 	.word	0x10624dd3
     b40:	0801be18 	.word	0x0801be18
     b44:	0801be50 	.word	0x0801be50
	} else {
		printf("Sweep period %.4g s is pretty much optimal for %lu POP samples per point\r\n", calc_sweep_time, mw_sweep_settings.pop_cycles_per_point);
     b48:	4b57      	ldr	r3, [pc, #348]	; (ca8 <calc_fixed_time_MW_sweep+0x418>)
     b4a:	695b      	ldr	r3, [r3, #20]
     b4c:	9300      	str	r3, [sp, #0]
     b4e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
     b52:	4856      	ldr	r0, [pc, #344]	; (cac <calc_fixed_time_MW_sweep+0x41c>)
     b54:	f000 fcf4 	bl	1540 <__printf_veneer>

	//Period of MW sweep isn't precise as it's based on measured average processing time
	//Steps are increased by up to 10% to increase the sweep period to guarantee horizontal scope sync
	//These are added to the end of the sweep so that the centre frequency is still central
	//Sweep period will be increased by a maximum of 1s
	if (scope_sync_time) {
     b58:	79fb      	ldrb	r3, [r7, #7]
     b5a:	2b00      	cmp	r3, #0
     b5c:	d044      	beq.n	be8 <calc_fixed_time_MW_sweep+0x358>

		mw_sweep_settings.num_steps = mw_sweep_settings.num_steps * 1.1 + 0.5;
     b5e:	4b52      	ldr	r3, [pc, #328]	; (ca8 <calc_fixed_time_MW_sweep+0x418>)
     b60:	68db      	ldr	r3, [r3, #12]
     b62:	ee07 3a90 	vmov	s15, r3
     b66:	eeb8 7b67 	vcvt.f64.u32	d7, s15
     b6a:	ed9f 6b49 	vldr	d6, [pc, #292]	; c90 <calc_fixed_time_MW_sweep+0x400>
     b6e:	ee27 7b06 	vmul.f64	d7, d7, d6
     b72:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
     b76:	ee37 7b06 	vadd.f64	d7, d7, d6
     b7a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
     b7e:	ee17 2a90 	vmov	r2, s15
     b82:	4b49      	ldr	r3, [pc, #292]	; (ca8 <calc_fixed_time_MW_sweep+0x418>)
     b84:	60da      	str	r2, [r3, #12]
//		printf("DEBUG #steps: %lu \r\n", mw_sweep_settings.num_steps);
		calc_sweep_time = point_period * (mw_sweep_settings.num_steps + 1);
     b86:	4b48      	ldr	r3, [pc, #288]	; (ca8 <calc_fixed_time_MW_sweep+0x418>)
     b88:	68db      	ldr	r3, [r3, #12]
     b8a:	3301      	adds	r3, #1
     b8c:	ee07 3a90 	vmov	s15, r3
     b90:	eeb8 7b67 	vcvt.f64.u32	d7, s15
     b94:	ed97 6b0c 	vldr	d6, [r7, #48]	; 0x30
     b98:	ee26 7b07 	vmul.f64	d7, d6, d7
     b9c:	ed87 7b18 	vstr	d7, [r7, #96]	; 0x60

		/* Decrease number of steps if additional 10% is >1s */
//		printf("DEBUG calc_sweep_time - requested_sweep_period: %f \r\n", calc_sweep_time - requested_sweep_period);
		if ((calc_sweep_time - requested_sweep_period) > 1){
     ba0:	ed97 6b18 	vldr	d6, [r7, #96]	; 0x60
     ba4:	ed97 7b02 	vldr	d7, [r7, #8]
     ba8:	ee36 7b47 	vsub.f64	d7, d6, d7
     bac:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
     bb0:	eeb4 7bc6 	vcmpe.f64	d7, d6
     bb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     bb8:	dd11      	ble.n	bde <calc_fixed_time_MW_sweep+0x34e>
			mw_sweep_settings.num_steps--;
     bba:	4b3b      	ldr	r3, [pc, #236]	; (ca8 <calc_fixed_time_MW_sweep+0x418>)
     bbc:	68db      	ldr	r3, [r3, #12]
     bbe:	3b01      	subs	r3, #1
     bc0:	4a39      	ldr	r2, [pc, #228]	; (ca8 <calc_fixed_time_MW_sweep+0x418>)
     bc2:	60d3      	str	r3, [r2, #12]
			calc_sweep_time = point_period * (mw_sweep_settings.num_steps + 1);
     bc4:	4b38      	ldr	r3, [pc, #224]	; (ca8 <calc_fixed_time_MW_sweep+0x418>)
     bc6:	68db      	ldr	r3, [r3, #12]
     bc8:	3301      	adds	r3, #1
     bca:	ee07 3a90 	vmov	s15, r3
     bce:	eeb8 7b67 	vcvt.f64.u32	d7, s15
     bd2:	ed97 6b0c 	vldr	d6, [r7, #48]	; 0x30
     bd6:	ee26 7b07 	vmul.f64	d7, d6, d7
     bda:	ed87 7b18 	vstr	d7, [r7, #96]	; 0x60
		}
//		printf("DEBUG #steps: %lu \r\n", mw_sweep_settings.num_steps);

		//Double check of the sweep period selected
		printf("Final calculated sweep period, including scope sync: %.3g s\r\n", calc_sweep_time);
     bde:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
     be2:	4833      	ldr	r0, [pc, #204]	; (cb0 <calc_fixed_time_MW_sweep+0x420>)
     be4:	f000 fcac 	bl	1540 <__printf_veneer>
	}

	/* Can avoid spurs if frequency requested can be encoded exactly  */
	start_freq = ((long)(start_freq/unit_step_size_Hz)) * unit_step_size_Hz;
     be8:	ed97 5b14 	vldr	d5, [r7, #80]	; 0x50
     bec:	ed97 6b12 	vldr	d6, [r7, #72]	; 0x48
     bf0:	ee85 7b06 	vdiv.f64	d7, d5, d6
     bf4:	eefd 7bc7 	vcvt.s32.f64	s15, d7
     bf8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
     bfc:	ed97 6b12 	vldr	d6, [r7, #72]	; 0x48
     c00:	ee26 7b07 	vmul.f64	d7, d6, d7
     c04:	ed87 7b14 	vstr	d7, [r7, #80]	; 0x50

	/* Calculate the N division ratio, extracting the fractional and integer parts */
	const double N = ((start_freq * mw_sweep_settings.k) / REF_FREQ);
     c08:	4b27      	ldr	r3, [pc, #156]	; (ca8 <calc_fixed_time_MW_sweep+0x418>)
     c0a:	785b      	ldrb	r3, [r3, #1]
     c0c:	ee07 3a90 	vmov	s15, r3
     c10:	eeb8 6be7 	vcvt.f64.s32	d6, s15
     c14:	ed97 7b14 	vldr	d7, [r7, #80]	; 0x50
     c18:	ee26 6b07 	vmul.f64	d6, d6, d7
     c1c:	ed9f 5b1e 	vldr	d5, [pc, #120]	; c98 <calc_fixed_time_MW_sweep+0x408>
     c20:	ee86 7b05 	vdiv.f64	d7, d6, d5
     c24:	ed87 7b08 	vstr	d7, [r7, #32]
	mw_sweep_settings.NINT = N;
     c28:	ed97 7b08 	vldr	d7, [r7, #32]
     c2c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
     c30:	ee17 2a90 	vmov	r2, s15
     c34:	4b1c      	ldr	r3, [pc, #112]	; (ca8 <calc_fixed_time_MW_sweep+0x418>)
     c36:	605a      	str	r2, [r3, #4]
	mw_sweep_settings.NFRAC_start = ((N - mw_sweep_settings.NINT) * (1 << 24)) + 0.5;
     c38:	4b1b      	ldr	r3, [pc, #108]	; (ca8 <calc_fixed_time_MW_sweep+0x418>)
     c3a:	685b      	ldr	r3, [r3, #4]
     c3c:	ee07 3a90 	vmov	s15, r3
     c40:	eeb8 7b67 	vcvt.f64.u32	d7, s15
     c44:	ed97 6b08 	vldr	d6, [r7, #32]
     c48:	ee36 7b47 	vsub.f64	d7, d6, d7
     c4c:	ed9f 6b14 	vldr	d6, [pc, #80]	; ca0 <calc_fixed_time_MW_sweep+0x410>
     c50:	ee27 7b06 	vmul.f64	d7, d7, d6
     c54:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
     c58:	ee37 7b06 	vadd.f64	d7, d7, d6
     c5c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
     c60:	ee17 2a90 	vmov	r2, s15
     c64:	4b10      	ldr	r3, [pc, #64]	; (ca8 <calc_fixed_time_MW_sweep+0x418>)
     c66:	609a      	str	r2, [r3, #8]
	mw_sweep_settings.current_point = 0;
     c68:	4b0f      	ldr	r3, [pc, #60]	; (ca8 <calc_fixed_time_MW_sweep+0x418>)
     c6a:	2200      	movs	r2, #0
     c6c:	625a      	str	r2, [r3, #36]	; 0x24
	mw_sweep_settings.sweep_period = calc_sweep_time;
     c6e:	490e      	ldr	r1, [pc, #56]	; (ca8 <calc_fixed_time_MW_sweep+0x418>)
     c70:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
     c74:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	mw_sweep_settings.stabilise_time = MW_STABILISE_TIME_US; //Global MW stabilisation time
     c78:	f241 7270 	movw	r2, #6000	; 0x1770
     c7c:	4b0a      	ldr	r3, [pc, #40]	; (ca8 <calc_fixed_time_MW_sweep+0x418>)
     c7e:	619a      	str	r2, [r3, #24]
//	print_mw_sweep_settings();
	return(true);
     c80:	2301      	movs	r3, #1
}
     c82:	4618      	mov	r0, r3
     c84:	3768      	adds	r7, #104	; 0x68
     c86:	46bd      	mov	sp, r7
     c88:	bd80      	pop	{r7, pc}
     c8a:	bf00      	nop
     c8c:	f3af 8000 	nop.w
     c90:	9999999a 	.word	0x9999999a
     c94:	3ff19999 	.word	0x3ff19999
     c98:	00000000 	.word	0x00000000
     c9c:	4187d784 	.word	0x4187d784
     ca0:	00000000 	.word	0x00000000
     ca4:	41700000 	.word	0x41700000
     ca8:	200005f8 	.word	0x200005f8
     cac:	0801be88 	.word	0x0801be88
     cb0:	0801bed4 	.word	0x0801bed4

00000cb4 <calculate_k>:

/**
  * @brief  Calculates k value
  * @retval k
  */
static const uint32_t calculate_k(const double frequency) {
     cb4:	b480      	push	{r7}
     cb6:	b085      	sub	sp, #20
     cb8:	af00      	add	r7, sp, #0
     cba:	ed87 0b00 	vstr	d0, [r7]
	uint32_t k = VCO_MAX_FREQ / frequency;
     cbe:	ed9f 5b10 	vldr	d5, [pc, #64]	; d00 <calculate_k+0x4c>
     cc2:	ed97 6b00 	vldr	d6, [r7]
     cc6:	ee85 7b06 	vdiv.f64	d7, d5, d6
     cca:	eefc 7bc7 	vcvt.u32.f64	s15, d7
     cce:	ee17 3a90 	vmov	r3, s15
     cd2:	60fb      	str	r3, [r7, #12]

	if (k != 1) {
     cd4:	68fb      	ldr	r3, [r7, #12]
     cd6:	2b01      	cmp	r3, #1
     cd8:	d00b      	beq.n	cf2 <calculate_k+0x3e>
		while (k > 62 || k % 2) {
     cda:	e002      	b.n	ce2 <calculate_k+0x2e>
			k --;
     cdc:	68fb      	ldr	r3, [r7, #12]
     cde:	3b01      	subs	r3, #1
     ce0:	60fb      	str	r3, [r7, #12]
		while (k > 62 || k % 2) {
     ce2:	68fb      	ldr	r3, [r7, #12]
     ce4:	2b3e      	cmp	r3, #62	; 0x3e
     ce6:	d8f9      	bhi.n	cdc <calculate_k+0x28>
     ce8:	68fb      	ldr	r3, [r7, #12]
     cea:	f003 0301 	and.w	r3, r3, #1
     cee:	2b00      	cmp	r3, #0
     cf0:	d1f4      	bne.n	cdc <calculate_k+0x28>
		}
	}
	return (k);
     cf2:	68fb      	ldr	r3, [r7, #12]
}
     cf4:	4618      	mov	r0, r3
     cf6:	3714      	adds	r7, #20
     cf8:	46bd      	mov	sp, r7
     cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
     cfe:	4770      	bx	lr
     d00:	20000000 	.word	0x20000000
     d04:	41ee8c21 	.word	0x41ee8c21

00000d08 <start_POP_calibration>:

/**
  * @brief  Starts the process of measuring the POP period
  * @retval None
  */
void start_POP_calibration(const bool cal_only) {
     d08:	b580      	push	{r7, lr}
     d0a:	b082      	sub	sp, #8
     d0c:	af00      	add	r7, sp, #0
     d0e:	4603      	mov	r3, r0
     d10:	71fb      	strb	r3, [r7, #7]
	/* Requires ADC to be initialised and for HAL_ADC_ConvCpltCallback to be active */
	if (cal_only == true) {
     d12:	79fb      	ldrb	r3, [r7, #7]
     d14:	2b00      	cmp	r3, #0
     d16:	d003      	beq.n	d20 <start_POP_calibration+0x18>
		mw_sweep_settings.sweep_mode = POP_CAL_ONLY;
     d18:	4b0f      	ldr	r3, [pc, #60]	; (d58 <start_POP_calibration+0x50>)
     d1a:	2201      	movs	r2, #1
     d1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	}
	HAL_GPIO_WritePin(MW_INVALID_GPIO_Port, MW_INVALID_Pin, GPIO_PIN_SET); 	//Sets MW_invalid pin high to reset POP cycle
     d20:	2201      	movs	r2, #1
     d22:	2102      	movs	r1, #2
     d24:	480d      	ldr	r0, [pc, #52]	; (d5c <start_POP_calibration+0x54>)
     d26:	f000 fc17 	bl	1558 <__HAL_GPIO_WritePin_veneer>
	HAL_Delay(10); // 10ms in case ADC was part-way through a conversion
     d2a:	200a      	movs	r0, #10
     d2c:	f000 fbfc 	bl	1528 <__HAL_Delay_veneer>
	sample_count = 0; //reset sample count
     d30:	4b0b      	ldr	r3, [pc, #44]	; (d60 <start_POP_calibration+0x58>)
     d32:	2200      	movs	r2, #0
     d34:	801a      	strh	r2, [r3, #0]
	mw_sweep_settings.state = MW_CALIBRATE;
     d36:	4b08      	ldr	r3, [pc, #32]	; (d58 <start_POP_calibration+0x50>)
     d38:	2204      	movs	r2, #4
     d3a:	701a      	strb	r2, [r3, #0]
	start_timer(MW_TIMER); //reset MW_timer and start counting
     d3c:	4b09      	ldr	r3, [pc, #36]	; (d64 <start_POP_calibration+0x5c>)
     d3e:	681b      	ldr	r3, [r3, #0]
     d40:	4618      	mov	r0, r3
     d42:	f000 fac3 	bl	12cc <start_timer>
	HAL_GPIO_WritePin(MW_INVALID_GPIO_Port, MW_INVALID_Pin, GPIO_PIN_RESET); //Restart POP cycle
     d46:	2200      	movs	r2, #0
     d48:	2102      	movs	r1, #2
     d4a:	4804      	ldr	r0, [pc, #16]	; (d5c <start_POP_calibration+0x54>)
     d4c:	f000 fc04 	bl	1558 <__HAL_GPIO_WritePin_veneer>
	#ifdef MW_VERBOSE
		printf("POP calibration started\r\n");
	#endif //MW_VERBOSE
}
     d50:	bf00      	nop
     d52:	3708      	adds	r7, #8
     d54:	46bd      	mov	sp, r7
     d56:	bd80      	pop	{r7, pc}
     d58:	200005f8 	.word	0x200005f8
     d5c:	58020400 	.word	0x58020400
     d60:	200005ea 	.word	0x200005ea
     d64:	2000001c 	.word	0x2000001c

00000d68 <start_MW_sweep>:

/**
  * @brief  Starts a MW sweep
  * @retval Success/failure
  */
static const bool start_MW_sweep(const bool single_sweep) {
     d68:	b580      	push	{r7, lr}
     d6a:	b082      	sub	sp, #8
     d6c:	af00      	add	r7, sp, #0
     d6e:	4603      	mov	r3, r0
     d70:	71fb      	strb	r3, [r7, #7]
	//uses settings from the mw_sweep_settings structure
	if (single_sweep == true) {
     d72:	79fb      	ldrb	r3, [r7, #7]
     d74:	2b00      	cmp	r3, #0
     d76:	d003      	beq.n	d80 <start_MW_sweep+0x18>
		mw_sweep_settings.sweep_mode = SWEEP_ONCE;
     d78:	4b1c      	ldr	r3, [pc, #112]	; (dec <start_MW_sweep+0x84>)
     d7a:	2202      	movs	r2, #2
     d7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	}
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET); // Assume MW lock, the LED will be disabled if lock fails.
     d80:	2201      	movs	r2, #1
     d82:	2102      	movs	r1, #2
     d84:	481a      	ldr	r0, [pc, #104]	; (df0 <start_MW_sweep+0x88>)
     d86:	f000 fbe7 	bl	1558 <__HAL_GPIO_WritePin_veneer>

	#ifdef MW_VERBOSE
		printf("Setting trigger output low \r\n");
	#endif //MW_VERBOSE

	HAL_GPIO_WritePin(MW_INVALID_GPIO_Port, MW_INVALID_Pin, GPIO_PIN_SET); //Sets MW_invalid pin high
     d8a:	2201      	movs	r2, #1
     d8c:	2102      	movs	r1, #2
     d8e:	4819      	ldr	r0, [pc, #100]	; (df4 <start_MW_sweep+0x8c>)
     d90:	f000 fbe2 	bl	1558 <__HAL_GPIO_WritePin_veneer>
//	set_frequency(mw_sweep_settings.NINT, mw_sweep_settings.NFRAC_start, mw_sweep_settings.k, MANUAL_MUTE); //program initial MW frequency
	set_freq_regs(mw_sweep_settings.NINT, mw_sweep_settings.NFRAC_start, mw_sweep_settings.k); //program initial MW frequency
     d94:	4b15      	ldr	r3, [pc, #84]	; (dec <start_MW_sweep+0x84>)
     d96:	685b      	ldr	r3, [r3, #4]
     d98:	4a14      	ldr	r2, [pc, #80]	; (dec <start_MW_sweep+0x84>)
     d9a:	6891      	ldr	r1, [r2, #8]
     d9c:	4a13      	ldr	r2, [pc, #76]	; (dec <start_MW_sweep+0x84>)
     d9e:	7852      	ldrb	r2, [r2, #1]
     da0:	4618      	mov	r0, r3
     da2:	f7ff fb41 	bl	428 <set_freq_regs>
	mw_sweep_settings.state = MW_STABILISING; //waiting for MW output to stabilise
     da6:	4b11      	ldr	r3, [pc, #68]	; (dec <start_MW_sweep+0x84>)
     da8:	2202      	movs	r2, #2
     daa:	701a      	strb	r2, [r3, #0]
	mw_sweep_settings.current_point = 0; //currently on at start of ramp i.e. point 0
     dac:	4b0f      	ldr	r3, [pc, #60]	; (dec <start_MW_sweep+0x84>)
     dae:	2200      	movs	r2, #0
     db0:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_Delay(10); // 10ms in case ADC was part-way through a conversion
     db2:	200a      	movs	r0, #10
     db4:	f000 fbb8 	bl	1528 <__HAL_Delay_veneer>
	sample_count = 0; //reset sample count
     db8:	4b0f      	ldr	r3, [pc, #60]	; (df8 <start_MW_sweep+0x90>)
     dba:	2200      	movs	r2, #0
     dbc:	801a      	strh	r2, [r3, #0]
	/* Output used for triggering external scope */
	HAL_GPIO_WritePin(SCOPE_TRIG_OUT_GPIO_Port, SCOPE_TRIG_OUT_Pin, GPIO_PIN_RESET); // Sets trigger output low
     dbe:	2200      	movs	r2, #0
     dc0:	2101      	movs	r1, #1
     dc2:	480e      	ldr	r0, [pc, #56]	; (dfc <start_MW_sweep+0x94>)
     dc4:	f000 fbc8 	bl	1558 <__HAL_GPIO_WritePin_veneer>
	start_timer(MW_TIMER); //reset MW_timer (MW step timer) and start counting
     dc8:	4b0d      	ldr	r3, [pc, #52]	; (e00 <start_MW_sweep+0x98>)
     dca:	681b      	ldr	r3, [r3, #0]
     dcc:	4618      	mov	r0, r3
     dce:	f000 fa7d 	bl	12cc <start_timer>
	start_timer(SWEEP_TIMER); //reset general (sweep) timer and start counting
     dd2:	4b0c      	ldr	r3, [pc, #48]	; (e04 <start_MW_sweep+0x9c>)
     dd4:	681b      	ldr	r3, [r3, #0]
     dd6:	4618      	mov	r0, r3
     dd8:	f000 fa78 	bl	12cc <start_timer>
	sample_count = 0; //reset sample count
     ddc:	4b06      	ldr	r3, [pc, #24]	; (df8 <start_MW_sweep+0x90>)
     dde:	2200      	movs	r2, #0
     de0:	801a      	strh	r2, [r3, #0]
	//known limitation - if the ADC has been recently triggered and HAL_ADC_ConvCpltCallback will increment sample_count by 1
	return(true);
     de2:	2301      	movs	r3, #1
}
     de4:	4618      	mov	r0, r3
     de6:	3708      	adds	r7, #8
     de8:	46bd      	mov	sp, r7
     dea:	bd80      	pop	{r7, pc}
     dec:	200005f8 	.word	0x200005f8
     df0:	58021000 	.word	0x58021000
     df4:	58020400 	.word	0x58020400
     df8:	200005ea 	.word	0x200005ea
     dfc:	58021800 	.word	0x58021800
     e00:	2000001c 	.word	0x2000001c
     e04:	20000020 	.word	0x20000020

00000e08 <start_continuous_MW_sweep>:

/**
  * @brief  Starts a continuous MW calibrate/sweep cycle
  * @retval Success/failure
  */
void start_continuous_MW_sweep(void) {
     e08:	b580      	push	{r7, lr}
     e0a:	af00      	add	r7, sp, #0
	mw_sweep_settings.sweep_mode = CONTINUOUS_SWEEP;
     e0c:	4b04      	ldr	r3, [pc, #16]	; (e20 <start_continuous_MW_sweep+0x18>)
     e0e:	2200      	movs	r2, #0
     e10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	start_POP_calibration(false);
     e14:	2000      	movs	r0, #0
     e16:	f7ff ff77 	bl	d08 <start_POP_calibration>
}
     e1a:	bf00      	nop
     e1c:	bd80      	pop	{r7, pc}
     e1e:	bf00      	nop
     e20:	200005f8 	.word	0x200005f8

00000e24 <MW_update>:

/**
  * @brief  Checks MW status to see if a timer has elapsed and if frequency needs changing.
  * @retval True if an action was taken
  */
const bool MW_update(void) {
     e24:	b580      	push	{r7, lr}
     e26:	b08a      	sub	sp, #40	; 0x28
     e28:	af04      	add	r7, sp, #16
	uint8_t local_copy_of_MW_state = mw_sweep_settings.state; //hack to make switch statement behave
     e2a:	4b95      	ldr	r3, [pc, #596]	; (1080 <MW_update+0x25c>)
     e2c:	781b      	ldrb	r3, [r3, #0]
     e2e:	75bb      	strb	r3, [r7, #22]
	//switch (mw_sweep_settings.state)
	bool action_taken = false;
     e30:	2300      	movs	r3, #0
     e32:	75fb      	strb	r3, [r7, #23]
	uint32_t sweep_period_us;
	switch (local_copy_of_MW_state)
     e34:	7dbb      	ldrb	r3, [r7, #22]
     e36:	2b04      	cmp	r3, #4
     e38:	f200 8109 	bhi.w	104e <MW_update+0x22a>
     e3c:	a201      	add	r2, pc, #4	; (adr r2, e44 <MW_update+0x20>)
     e3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     e42:	bf00      	nop
     e44:	00001067 	.word	0x00001067
     e48:	00001067 	.word	0x00001067
     e4c:	00000e59 	.word	0x00000e59
     e50:	00000e9b 	.word	0x00000e9b
     e54:	00000fdb 	.word	0x00000fdb
		case MW_STOPPED:
		case MW_FIXED_FREQ:
			break; //no action to take

		case MW_STABILISING: //waiting for MW output to stabilise
			if (check_timer(MW_TIMER) < MW_STABILISE_TIME_US) return(false); //Still waiting, no action taken
     e58:	4b8a      	ldr	r3, [pc, #552]	; (1084 <MW_update+0x260>)
     e5a:	681b      	ldr	r3, [r3, #0]
     e5c:	4618      	mov	r0, r3
     e5e:	f000 fa65 	bl	132c <check_timer>
     e62:	4603      	mov	r3, r0
     e64:	f241 7270 	movw	r2, #6000	; 0x1770
     e68:	4293      	cmp	r3, r2
     e6a:	d201      	bcs.n	e70 <MW_update+0x4c>
     e6c:	2300      	movs	r3, #0
     e6e:	e0fe      	b.n	106e <MW_update+0x24a>
			//Otherwise MW stabilisation timer has elapsed
			stop_timer(MW_TIMER);
     e70:	4b84      	ldr	r3, [pc, #528]	; (1084 <MW_update+0x260>)
     e72:	681b      	ldr	r3, [r3, #0]
     e74:	4618      	mov	r0, r3
     e76:	f000 fa47 	bl	1308 <stop_timer>
			HAL_GPIO_WritePin(MW_INVALID_GPIO_Port, MW_INVALID_Pin, GPIO_PIN_RESET); //Sets MW_invalid pin low as MW now stable
     e7a:	2200      	movs	r2, #0
     e7c:	2102      	movs	r1, #2
     e7e:	4882      	ldr	r0, [pc, #520]	; (1088 <MW_update+0x264>)
     e80:	f000 fb6a 	bl	1558 <__HAL_GPIO_WritePin_veneer>
			mw_sweep_settings.state = MW_DWELL;
     e84:	4b7e      	ldr	r3, [pc, #504]	; (1080 <MW_update+0x25c>)
     e86:	2203      	movs	r2, #3
     e88:	701a      	strb	r2, [r3, #0]
			start_timer(MW_TIMER); //Restart timer for DWELL time
     e8a:	4b7e      	ldr	r3, [pc, #504]	; (1084 <MW_update+0x260>)
     e8c:	681b      	ldr	r3, [r3, #0]
     e8e:	4618      	mov	r0, r3
     e90:	f000 fa1c 	bl	12cc <start_timer>
			action_taken = true;
     e94:	2301      	movs	r3, #1
     e96:	75fb      	strb	r3, [r7, #23]
			break;
     e98:	e0e8      	b.n	106c <MW_update+0x248>

		case MW_DWELL: //valid MW output waiting for end of dwell time
			if (check_timer(MW_TIMER) < mw_sweep_settings.dwell_time) return(false); //Still waiting
     e9a:	4b7a      	ldr	r3, [pc, #488]	; (1084 <MW_update+0x260>)
     e9c:	681b      	ldr	r3, [r3, #0]
     e9e:	4618      	mov	r0, r3
     ea0:	f000 fa44 	bl	132c <check_timer>
     ea4:	4602      	mov	r2, r0
     ea6:	4b76      	ldr	r3, [pc, #472]	; (1080 <MW_update+0x25c>)
     ea8:	69db      	ldr	r3, [r3, #28]
     eaa:	429a      	cmp	r2, r3
     eac:	d201      	bcs.n	eb2 <MW_update+0x8e>
     eae:	2300      	movs	r3, #0
     eb0:	e0dd      	b.n	106e <MW_update+0x24a>
			//Otherwise dwell timer has elapsed
			action_taken = true;
     eb2:	2301      	movs	r3, #1
     eb4:	75fb      	strb	r3, [r7, #23]
			stop_timer(MW_TIMER);
     eb6:	4b73      	ldr	r3, [pc, #460]	; (1084 <MW_update+0x260>)
     eb8:	681b      	ldr	r3, [r3, #0]
     eba:	4618      	mov	r0, r3
     ebc:	f000 fa24 	bl	1308 <stop_timer>
			HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin); //toggles red LED
     ec0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
     ec4:	4870      	ldr	r0, [pc, #448]	; (1088 <MW_update+0x264>)
     ec6:	f000 fb3f 	bl	1548 <__HAL_GPIO_TogglePin_veneer>
			HAL_GPIO_WritePin(MW_INVALID_GPIO_Port, MW_INVALID_Pin, GPIO_PIN_SET); //Sets MW_invalid pin high as about to change frequency
     eca:	2201      	movs	r2, #1
     ecc:	2102      	movs	r1, #2
     ece:	486e      	ldr	r0, [pc, #440]	; (1088 <MW_update+0x264>)
     ed0:	f000 fb42 	bl	1558 <__HAL_GPIO_WritePin_veneer>
			mw_sweep_settings.state = MW_STABILISING;
     ed4:	4b6a      	ldr	r3, [pc, #424]	; (1080 <MW_update+0x25c>)
     ed6:	2202      	movs	r2, #2
     ed8:	701a      	strb	r2, [r3, #0]
			if (mw_sweep_settings.current_point == mw_sweep_settings.num_steps) { // All steps completed, tidy up and restart next sweep
     eda:	4b69      	ldr	r3, [pc, #420]	; (1080 <MW_update+0x25c>)
     edc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
     ede:	4b68      	ldr	r3, [pc, #416]	; (1080 <MW_update+0x25c>)
     ee0:	68db      	ldr	r3, [r3, #12]
     ee2:	429a      	cmp	r2, r3
     ee4:	d15c      	bne.n	fa0 <MW_update+0x17c>
				HAL_GPIO_WritePin(SCOPE_TRIG_OUT_GPIO_Port, SCOPE_TRIG_OUT_Pin, GPIO_PIN_SET); // Sets trigger output high
     ee6:	2201      	movs	r2, #1
     ee8:	2101      	movs	r1, #1
     eea:	4868      	ldr	r0, [pc, #416]	; (108c <MW_update+0x268>)
     eec:	f000 fb34 	bl	1558 <__HAL_GPIO_WritePin_veneer>
				sweep_period_us=check_timer(SWEEP_TIMER);
     ef0:	4b67      	ldr	r3, [pc, #412]	; (1090 <MW_update+0x26c>)
     ef2:	681b      	ldr	r3, [r3, #0]
     ef4:	4618      	mov	r0, r3
     ef6:	f000 fa19 	bl	132c <check_timer>
     efa:	60b8      	str	r0, [r7, #8]
				stop_timer(SWEEP_TIMER);
     efc:	4b64      	ldr	r3, [pc, #400]	; (1090 <MW_update+0x26c>)
     efe:	681b      	ldr	r3, [r3, #0]
     f00:	4618      	mov	r0, r3
     f02:	f000 fa01 	bl	1308 <stop_timer>
				printf("Sweep complete in %.4g s. Expected %.4g s. %u samples\r\n", (double)(sweep_period_us)/1000000, mw_sweep_settings.sweep_period, sample_count);
     f06:	68bb      	ldr	r3, [r7, #8]
     f08:	ee07 3a90 	vmov	s15, r3
     f0c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
     f10:	ed9f 6b59 	vldr	d6, [pc, #356]	; 1078 <MW_update+0x254>
     f14:	ee87 5b06 	vdiv.f64	d5, d7, d6
     f18:	4b59      	ldr	r3, [pc, #356]	; (1080 <MW_update+0x25c>)
     f1a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
     f1e:	495d      	ldr	r1, [pc, #372]	; (1094 <MW_update+0x270>)
     f20:	8809      	ldrh	r1, [r1, #0]
     f22:	b289      	uxth	r1, r1
     f24:	9102      	str	r1, [sp, #8]
     f26:	e9cd 2300 	strd	r2, r3, [sp]
     f2a:	ec53 2b15 	vmov	r2, r3, d5
     f2e:	485a      	ldr	r0, [pc, #360]	; (1098 <MW_update+0x274>)
     f30:	f000 fb06 	bl	1540 <__printf_veneer>
				/* Check if the ADC registered the correct number of samples */
				uint16_t expected_samples = mw_sweep_settings.pop_cycles_per_point * (mw_sweep_settings.num_steps + 1);
     f34:	4b52      	ldr	r3, [pc, #328]	; (1080 <MW_update+0x25c>)
     f36:	695b      	ldr	r3, [r3, #20]
     f38:	b29a      	uxth	r2, r3
     f3a:	4b51      	ldr	r3, [pc, #324]	; (1080 <MW_update+0x25c>)
     f3c:	68db      	ldr	r3, [r3, #12]
     f3e:	3301      	adds	r3, #1
     f40:	b29b      	uxth	r3, r3
     f42:	fb12 f303 	smulbb	r3, r2, r3
     f46:	80fb      	strh	r3, [r7, #6]
				uint16_t possible_samples = expected_samples + mw_sweep_settings.num_steps + 1;
     f48:	4b4d      	ldr	r3, [pc, #308]	; (1080 <MW_update+0x25c>)
     f4a:	68db      	ldr	r3, [r3, #12]
     f4c:	b29a      	uxth	r2, r3
     f4e:	88fb      	ldrh	r3, [r7, #6]
     f50:	4413      	add	r3, r2
     f52:	b29b      	uxth	r3, r3
     f54:	3301      	adds	r3, #1
     f56:	80bb      	strh	r3, [r7, #4]
//				printf("Sweep generated %u full POP cycles and registered %u samples\r\n", expected_samples, sample_count);
				if ((sample_count == expected_samples) || (sample_count == possible_samples)) {
     f58:	4b4e      	ldr	r3, [pc, #312]	; (1094 <MW_update+0x270>)
     f5a:	881b      	ldrh	r3, [r3, #0]
     f5c:	b29b      	uxth	r3, r3
     f5e:	88fa      	ldrh	r2, [r7, #6]
     f60:	429a      	cmp	r2, r3
     f62:	d010      	beq.n	f86 <MW_update+0x162>
     f64:	4b4b      	ldr	r3, [pc, #300]	; (1094 <MW_update+0x270>)
     f66:	881b      	ldrh	r3, [r3, #0]
     f68:	b29b      	uxth	r3, r3
     f6a:	88ba      	ldrh	r2, [r7, #4]
     f6c:	429a      	cmp	r2, r3
     f6e:	d00a      	beq.n	f86 <MW_update+0x162>
					#ifdef MW_VERBOSE
					printf("Sweep generated and successfully registered %u samples\r\n", sample_count);
					#endif //MW_VERBOSE
				} else {
					printf("Warning - sweep generated %u samples but %u registered\r\n", expected_samples, sample_count);
     f70:	88fb      	ldrh	r3, [r7, #6]
     f72:	4a48      	ldr	r2, [pc, #288]	; (1094 <MW_update+0x270>)
     f74:	8812      	ldrh	r2, [r2, #0]
     f76:	b292      	uxth	r2, r2
     f78:	4619      	mov	r1, r3
     f7a:	4848      	ldr	r0, [pc, #288]	; (109c <MW_update+0x278>)
     f7c:	f000 fae0 	bl	1540 <__printf_veneer>
					printf("Timing of last sample is marginal\r\n");
     f80:	4847      	ldr	r0, [pc, #284]	; (10a0 <MW_update+0x27c>)
     f82:	f000 fae5 	bl	1550 <__puts_veneer>
//				printf("MW processing time: %lu us\r\n", measured_processing_time_us);
//				if ((double)(measured_processing_time_us)/MW_PROCESSING_TIME_US > 1.1) {
//					printf("Warning - measured MW processing time (%lu us)is larger than the %lu us expected\r\n", measured_processing_time_us, MW_PROCESSING_TIME_US);
//				}
				#endif //MW_VERBOSE
				if (mw_sweep_settings.sweep_mode == SWEEP_ONCE) {//have reached the end of a single sweep and should stop
     f86:	4b3e      	ldr	r3, [pc, #248]	; (1080 <MW_update+0x25c>)
     f88:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
     f8c:	2b02      	cmp	r3, #2
     f8e:	d103      	bne.n	f98 <MW_update+0x174>
					mw_sweep_settings.state = MW_STOPPED;
     f90:	4b3b      	ldr	r3, [pc, #236]	; (1080 <MW_update+0x25c>)
     f92:	2200      	movs	r2, #0
     f94:	701a      	strb	r2, [r3, #0]
						printf("Failure to program value to DAC \r\n");
						Error_Handler();
					}
				#endif //RAMP_DAC
			}
			break;
     f96:	e069      	b.n	106c <MW_update+0x248>
					start_MW_sweep(false); //restart the next MW sweep without updating mw_sweep_settings.sweep_mode
     f98:	2000      	movs	r0, #0
     f9a:	f7ff fee5 	bl	d68 <start_MW_sweep>
			break;
     f9e:	e065      	b.n	106c <MW_update+0x248>
				mw_sweep_settings.current_point++; //increment point counter
     fa0:	4b37      	ldr	r3, [pc, #220]	; (1080 <MW_update+0x25c>)
     fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
     fa4:	3301      	adds	r3, #1
     fa6:	4a36      	ldr	r2, [pc, #216]	; (1080 <MW_update+0x25c>)
     fa8:	6253      	str	r3, [r2, #36]	; 0x24
				uint32_t local_NFRAC = mw_sweep_settings.NFRAC_start + mw_sweep_settings.step_size * mw_sweep_settings.current_point;
     faa:	4b35      	ldr	r3, [pc, #212]	; (1080 <MW_update+0x25c>)
     fac:	689a      	ldr	r2, [r3, #8]
     fae:	4b34      	ldr	r3, [pc, #208]	; (1080 <MW_update+0x25c>)
     fb0:	691b      	ldr	r3, [r3, #16]
     fb2:	4933      	ldr	r1, [pc, #204]	; (1080 <MW_update+0x25c>)
     fb4:	6a49      	ldr	r1, [r1, #36]	; 0x24
     fb6:	fb01 f303 	mul.w	r3, r1, r3
     fba:	4413      	add	r3, r2
     fbc:	60fb      	str	r3, [r7, #12]
				set_freq_regs(mw_sweep_settings.NINT, local_NFRAC, mw_sweep_settings.k); //program new MW frequency
     fbe:	4b30      	ldr	r3, [pc, #192]	; (1080 <MW_update+0x25c>)
     fc0:	685b      	ldr	r3, [r3, #4]
     fc2:	4a2f      	ldr	r2, [pc, #188]	; (1080 <MW_update+0x25c>)
     fc4:	7852      	ldrb	r2, [r2, #1]
     fc6:	68f9      	ldr	r1, [r7, #12]
     fc8:	4618      	mov	r0, r3
     fca:	f7ff fa2d 	bl	428 <set_freq_regs>
				start_timer(MW_TIMER); //Restart timer for MW stabilisation time
     fce:	4b2d      	ldr	r3, [pc, #180]	; (1084 <MW_update+0x260>)
     fd0:	681b      	ldr	r3, [r3, #0]
     fd2:	4618      	mov	r0, r3
     fd4:	f000 f97a 	bl	12cc <start_timer>
			break;
     fd8:	e048      	b.n	106c <MW_update+0x248>

		case MW_CALIBRATE: //Measures the elapsed time taken for 101 samples (100 POP cycles)
			if (sample_count >= 100) {//100 or more POP cycles have elapsed
     fda:	4b2e      	ldr	r3, [pc, #184]	; (1094 <MW_update+0x270>)
     fdc:	881b      	ldrh	r3, [r3, #0]
     fde:	b29b      	uxth	r3, r3
     fe0:	2b63      	cmp	r3, #99	; 0x63
     fe2:	d942      	bls.n	106a <MW_update+0x246>
				uint32_t total_POP_cal_period = check_timer(MW_TIMER);
     fe4:	4b27      	ldr	r3, [pc, #156]	; (1084 <MW_update+0x260>)
     fe6:	681b      	ldr	r3, [r3, #0]
     fe8:	4618      	mov	r0, r3
     fea:	f000 f99f 	bl	132c <check_timer>
     fee:	6138      	str	r0, [r7, #16]
				POP_period_us = (float)(total_POP_cal_period) / 100 + 0.5;
     ff0:	693b      	ldr	r3, [r7, #16]
     ff2:	ee07 3a90 	vmov	s15, r3
     ff6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
     ffa:	eddf 6a2a 	vldr	s13, [pc, #168]	; 10a4 <MW_update+0x280>
     ffe:	eec7 7a26 	vdiv.f32	s15, s14, s13
    1002:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
    1006:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
    100a:	ee37 7b06 	vadd.f64	d7, d7, d6
    100e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
    1012:	ee17 2a90 	vmov	r2, s15
    1016:	4b24      	ldr	r3, [pc, #144]	; (10a8 <MW_update+0x284>)
    1018:	601a      	str	r2, [r3, #0]
				stop_timer(MW_TIMER);
    101a:	4b1a      	ldr	r3, [pc, #104]	; (1084 <MW_update+0x260>)
    101c:	681b      	ldr	r3, [r3, #0]
    101e:	4618      	mov	r0, r3
    1020:	f000 f972 	bl	1308 <stop_timer>
				printf("POP period, averaged over 100 cycles: %lu us\r\n", POP_period_us);
    1024:	4b20      	ldr	r3, [pc, #128]	; (10a8 <MW_update+0x284>)
    1026:	681b      	ldr	r3, [r3, #0]
    1028:	4619      	mov	r1, r3
    102a:	4820      	ldr	r0, [pc, #128]	; (10ac <MW_update+0x288>)
    102c:	f000 fa88 	bl	1540 <__printf_veneer>
				action_taken = true;
    1030:	2301      	movs	r3, #1
    1032:	75fb      	strb	r3, [r7, #23]
				if (mw_sweep_settings.sweep_mode == POP_CAL_ONLY) {//have reached the end of calibration and should stop
    1034:	4b12      	ldr	r3, [pc, #72]	; (1080 <MW_update+0x25c>)
    1036:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
    103a:	2b01      	cmp	r3, #1
    103c:	d103      	bne.n	1046 <MW_update+0x222>
					mw_sweep_settings.state = MW_STOPPED;
    103e:	4b10      	ldr	r3, [pc, #64]	; (1080 <MW_update+0x25c>)
    1040:	2200      	movs	r2, #0
    1042:	701a      	strb	r2, [r3, #0]
				} else {
						start_MW_sweep(false); //start MW_sweep without updating mw_sweep_settings.sweep_mode
				}
			}
			break;
    1044:	e011      	b.n	106a <MW_update+0x246>
						start_MW_sweep(false); //start MW_sweep without updating mw_sweep_settings.sweep_mode
    1046:	2000      	movs	r0, #0
    1048:	f7ff fe8e 	bl	d68 <start_MW_sweep>
			break;
    104c:	e00d      	b.n	106a <MW_update+0x246>

		default: // Other state
	       printf("MW_update has detected illegal state: %u \r\n", mw_sweep_settings.state);
    104e:	4b0c      	ldr	r3, [pc, #48]	; (1080 <MW_update+0x25c>)
    1050:	781b      	ldrb	r3, [r3, #0]
    1052:	4619      	mov	r1, r3
    1054:	4816      	ldr	r0, [pc, #88]	; (10b0 <MW_update+0x28c>)
    1056:	f000 fa73 	bl	1540 <__printf_veneer>
	       printf("local version: %u \r\n", local_copy_of_MW_state);
    105a:	7dbb      	ldrb	r3, [r7, #22]
    105c:	4619      	mov	r1, r3
    105e:	4815      	ldr	r0, [pc, #84]	; (10b4 <MW_update+0x290>)
    1060:	f000 fa6e 	bl	1540 <__printf_veneer>
    1064:	e002      	b.n	106c <MW_update+0x248>
			break; //no action to take
    1066:	bf00      	nop
    1068:	e000      	b.n	106c <MW_update+0x248>
			break;
    106a:	bf00      	nop
	}
    return(action_taken);
    106c:	7dfb      	ldrb	r3, [r7, #23]
}
    106e:	4618      	mov	r0, r3
    1070:	3718      	adds	r7, #24
    1072:	46bd      	mov	sp, r7
    1074:	bd80      	pop	{r7, pc}
    1076:	bf00      	nop
    1078:	00000000 	.word	0x00000000
    107c:	412e8480 	.word	0x412e8480
    1080:	200005f8 	.word	0x200005f8
    1084:	2000001c 	.word	0x2000001c
    1088:	58020400 	.word	0x58020400
    108c:	58021800 	.word	0x58021800
    1090:	20000020 	.word	0x20000020
    1094:	200005ea 	.word	0x200005ea
    1098:	0801bf14 	.word	0x0801bf14
    109c:	0801bf4c 	.word	0x0801bf4c
    10a0:	0801bf88 	.word	0x0801bf88
    10a4:	42c80000 	.word	0x42c80000
    10a8:	200005ec 	.word	0x200005ec
    10ac:	0801bfac 	.word	0x0801bfac
    10b0:	0801bfdc 	.word	0x0801bfdc
    10b4:	0801c008 	.word	0x0801c008

000010b8 <MW_frequency_toggle>:
//}

/* Function to check MW settling time
 * Toggles between two MW frequencies
 */
void MW_frequency_toggle (const double f_one, const double f_two) {
    10b8:	b580      	push	{r7, lr}
    10ba:	b090      	sub	sp, #64	; 0x40
    10bc:	af02      	add	r7, sp, #8
    10be:	ed87 0b02 	vstr	d0, [r7, #8]
    10c2:	ed87 1b00 	vstr	d1, [r7]
	printf("MW frequency toggling experiment\r\n");
    10c6:	486a      	ldr	r0, [pc, #424]	; (1270 <MW_frequency_toggle+0x1b8>)
    10c8:	f000 fa42 	bl	1550 <__puts_veneer>
	printf("Toggling between %.10g and %.10g GHz\r\n", f_one/1000000000, f_two/1000000000);
    10cc:	ed97 7b02 	vldr	d7, [r7, #8]
    10d0:	ed9f 6b5f 	vldr	d6, [pc, #380]	; 1250 <MW_frequency_toggle+0x198>
    10d4:	ee87 4b06 	vdiv.f64	d4, d7, d6
    10d8:	ed97 6b00 	vldr	d6, [r7]
    10dc:	ed9f 5b5c 	vldr	d5, [pc, #368]	; 1250 <MW_frequency_toggle+0x198>
    10e0:	ee86 7b05 	vdiv.f64	d7, d6, d5
    10e4:	ed8d 7b00 	vstr	d7, [sp]
    10e8:	ec53 2b14 	vmov	r2, r3, d4
    10ec:	4861      	ldr	r0, [pc, #388]	; (1274 <MW_frequency_toggle+0x1bc>)
    10ee:	f000 fa27 	bl	1540 <__printf_veneer>

	/* For the k divider we need to find the smallest even integer or use a max of 62*/
	uint32_t k_one = VCO_MAX_FREQ / f_one;
    10f2:	ed9f 5b59 	vldr	d5, [pc, #356]	; 1258 <MW_frequency_toggle+0x1a0>
    10f6:	ed97 6b02 	vldr	d6, [r7, #8]
    10fa:	ee85 7b06 	vdiv.f64	d7, d5, d6
    10fe:	eefc 7bc7 	vcvt.u32.f64	s15, d7
    1102:	ee17 3a90 	vmov	r3, s15
    1106:	637b      	str	r3, [r7, #52]	; 0x34
	if (k_one != 1) {
    1108:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    110a:	2b01      	cmp	r3, #1
    110c:	d00b      	beq.n	1126 <MW_frequency_toggle+0x6e>
		while (k_one > 62 || k_one % 2) {
    110e:	e002      	b.n	1116 <MW_frequency_toggle+0x5e>
			k_one--;
    1110:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1112:	3b01      	subs	r3, #1
    1114:	637b      	str	r3, [r7, #52]	; 0x34
		while (k_one > 62 || k_one % 2) {
    1116:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1118:	2b3e      	cmp	r3, #62	; 0x3e
    111a:	d8f9      	bhi.n	1110 <MW_frequency_toggle+0x58>
    111c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    111e:	f003 0301 	and.w	r3, r3, #1
    1122:	2b00      	cmp	r3, #0
    1124:	d1f4      	bne.n	1110 <MW_frequency_toggle+0x58>
		}
	}
	uint32_t k_two = VCO_MAX_FREQ / f_two;
    1126:	ed9f 5b4c 	vldr	d5, [pc, #304]	; 1258 <MW_frequency_toggle+0x1a0>
    112a:	ed97 6b00 	vldr	d6, [r7]
    112e:	ee85 7b06 	vdiv.f64	d7, d5, d6
    1132:	eefc 7bc7 	vcvt.u32.f64	s15, d7
    1136:	ee17 3a90 	vmov	r3, s15
    113a:	633b      	str	r3, [r7, #48]	; 0x30
	if (k_two != 1) {
    113c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    113e:	2b01      	cmp	r3, #1
    1140:	d00b      	beq.n	115a <MW_frequency_toggle+0xa2>
		while (k_two > 62 || k_two % 2) {
    1142:	e002      	b.n	114a <MW_frequency_toggle+0x92>
			k_two--;
    1144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    1146:	3b01      	subs	r3, #1
    1148:	633b      	str	r3, [r7, #48]	; 0x30
		while (k_two > 62 || k_two % 2) {
    114a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    114c:	2b3e      	cmp	r3, #62	; 0x3e
    114e:	d8f9      	bhi.n	1144 <MW_frequency_toggle+0x8c>
    1150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    1152:	f003 0301 	and.w	r3, r3, #1
    1156:	2b00      	cmp	r3, #0
    1158:	d1f4      	bne.n	1144 <MW_frequency_toggle+0x8c>
		}
	}

	const double N_one = ((f_one * k_one) / REF_FREQ);
    115a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    115c:	ee07 3a90 	vmov	s15, r3
    1160:	eeb8 6b67 	vcvt.f64.u32	d6, s15
    1164:	ed97 7b02 	vldr	d7, [r7, #8]
    1168:	ee26 6b07 	vmul.f64	d6, d6, d7
    116c:	ed9f 5b3c 	vldr	d5, [pc, #240]	; 1260 <MW_frequency_toggle+0x1a8>
    1170:	ee86 7b05 	vdiv.f64	d7, d6, d5
    1174:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28
	const double N_two = ((f_two * k_two) / REF_FREQ);
    1178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    117a:	ee07 3a90 	vmov	s15, r3
    117e:	eeb8 6b67 	vcvt.f64.u32	d6, s15
    1182:	ed97 7b00 	vldr	d7, [r7]
    1186:	ee26 6b07 	vmul.f64	d6, d6, d7
    118a:	ed9f 5b35 	vldr	d5, [pc, #212]	; 1260 <MW_frequency_toggle+0x1a8>
    118e:	ee86 7b05 	vdiv.f64	d7, d6, d5
    1192:	ed87 7b08 	vstr	d7, [r7, #32]

	/* Extract the fractional and integer parts */
	const uint32_t N_one_INT = N_one;
    1196:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
    119a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
    119e:	ee17 3a90 	vmov	r3, s15
    11a2:	61fb      	str	r3, [r7, #28]
	const uint32_t N_one_FRAC = ((N_one - N_one_INT) * (1 << 24)) + 0.5;
    11a4:	69fb      	ldr	r3, [r7, #28]
    11a6:	ee07 3a90 	vmov	s15, r3
    11aa:	eeb8 7b67 	vcvt.f64.u32	d7, s15
    11ae:	ed97 6b0a 	vldr	d6, [r7, #40]	; 0x28
    11b2:	ee36 7b47 	vsub.f64	d7, d6, d7
    11b6:	ed9f 6b2c 	vldr	d6, [pc, #176]	; 1268 <MW_frequency_toggle+0x1b0>
    11ba:	ee27 7b06 	vmul.f64	d7, d7, d6
    11be:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
    11c2:	ee37 7b06 	vadd.f64	d7, d7, d6
    11c6:	eefc 7bc7 	vcvt.u32.f64	s15, d7
    11ca:	ee17 3a90 	vmov	r3, s15
    11ce:	61bb      	str	r3, [r7, #24]
	const uint32_t N_two_INT = N_two;
    11d0:	ed97 7b08 	vldr	d7, [r7, #32]
    11d4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
    11d8:	ee17 3a90 	vmov	r3, s15
    11dc:	617b      	str	r3, [r7, #20]
	const uint32_t N_two_FRAC = ((N_two - N_two_INT) * (1 << 24)) + 0.5;
    11de:	697b      	ldr	r3, [r7, #20]
    11e0:	ee07 3a90 	vmov	s15, r3
    11e4:	eeb8 7b67 	vcvt.f64.u32	d7, s15
    11e8:	ed97 6b08 	vldr	d6, [r7, #32]
    11ec:	ee36 7b47 	vsub.f64	d7, d6, d7
    11f0:	ed9f 6b1d 	vldr	d6, [pc, #116]	; 1268 <MW_frequency_toggle+0x1b0>
    11f4:	ee27 7b06 	vmul.f64	d7, d7, d6
    11f8:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
    11fc:	ee37 7b06 	vadd.f64	d7, d7, d6
    1200:	eefc 7bc7 	vcvt.u32.f64	s15, d7
    1204:	ee17 3a90 	vmov	r3, s15
    1208:	613b      	str	r3, [r7, #16]

	while (1) {
	set_freq_regs(N_one_INT, N_one_FRAC, k_one); //Program necessary values for f_one
    120a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    120c:	69b9      	ldr	r1, [r7, #24]
    120e:	69f8      	ldr	r0, [r7, #28]
    1210:	f7ff f90a 	bl	428 <set_freq_regs>
	HAL_GPIO_WritePin(SCOPE_TRIG_OUT_GPIO_Port, SCOPE_TRIG_OUT_Pin, GPIO_PIN_RESET); // Sets trigger output low
    1214:	2200      	movs	r2, #0
    1216:	2101      	movs	r1, #1
    1218:	4817      	ldr	r0, [pc, #92]	; (1278 <MW_frequency_toggle+0x1c0>)
    121a:	f000 f99d 	bl	1558 <__HAL_GPIO_WritePin_veneer>
	timer_delay(SLOW_TIMER, 100); //10ms delay
    121e:	4b17      	ldr	r3, [pc, #92]	; (127c <MW_frequency_toggle+0x1c4>)
    1220:	681b      	ldr	r3, [r3, #0]
    1222:	2164      	movs	r1, #100	; 0x64
    1224:	4618      	mov	r0, r3
    1226:	f000 f88d 	bl	1344 <timer_delay>
	set_freq_regs(N_two_INT, N_two_FRAC, k_two); //Program necessary values for f_two
    122a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    122c:	6939      	ldr	r1, [r7, #16]
    122e:	6978      	ldr	r0, [r7, #20]
    1230:	f7ff f8fa 	bl	428 <set_freq_regs>
	HAL_GPIO_WritePin(SCOPE_TRIG_OUT_GPIO_Port, SCOPE_TRIG_OUT_Pin, GPIO_PIN_SET); // Sets trigger output high
    1234:	2201      	movs	r2, #1
    1236:	2101      	movs	r1, #1
    1238:	480f      	ldr	r0, [pc, #60]	; (1278 <MW_frequency_toggle+0x1c0>)
    123a:	f000 f98d 	bl	1558 <__HAL_GPIO_WritePin_veneer>
	timer_delay(SLOW_TIMER, 100); //10ms delay
    123e:	4b0f      	ldr	r3, [pc, #60]	; (127c <MW_frequency_toggle+0x1c4>)
    1240:	681b      	ldr	r3, [r3, #0]
    1242:	2164      	movs	r1, #100	; 0x64
    1244:	4618      	mov	r0, r3
    1246:	f000 f87d 	bl	1344 <timer_delay>
	set_freq_regs(N_one_INT, N_one_FRAC, k_one); //Program necessary values for f_one
    124a:	e7de      	b.n	120a <MW_frequency_toggle+0x152>
    124c:	f3af 8000 	nop.w
    1250:	00000000 	.word	0x00000000
    1254:	41cdcd65 	.word	0x41cdcd65
    1258:	20000000 	.word	0x20000000
    125c:	41ee8c21 	.word	0x41ee8c21
    1260:	00000000 	.word	0x00000000
    1264:	4187d784 	.word	0x4187d784
    1268:	00000000 	.word	0x00000000
    126c:	41700000 	.word	0x41700000
    1270:	0801c020 	.word	0x0801c020
    1274:	0801c044 	.word	0x0801c044
    1278:	58021800 	.word	0x58021800
    127c:	20000018 	.word	0x20000018

00001280 <set_SDO_output>:
/* Selects SDO pin connectivity/functionality
 * By default, the SDO pin will output 'Lock detect' but can be connected
 * to other internal signals. See table 2.15 of HMC835 datasheet (v04.1113)
 * for more details all options
 */
 void set_SDO_output(const uint32_t GPO_setting) {
    1280:	b580      	push	{r7, lr}
    1282:	b084      	sub	sp, #16
    1284:	af00      	add	r7, sp, #0
    1286:	6078      	str	r0, [r7, #4]
	//Default output on SDO pin is 'Lock detect output', value 0x01
	//VCO divider is 0x0A
	//See table 2.15 of HMC835 datasheet for more details (v04.1113)
	uint32_t read_data = 0x0;
    1288:	2300      	movs	r3, #0
    128a:	60fb      	str	r3, [r7, #12]

	if (GPO_setting > 31) {
    128c:	687b      	ldr	r3, [r7, #4]
    128e:	2b1f      	cmp	r3, #31
    1290:	d904      	bls.n	129c <set_SDO_output+0x1c>
		printf("SDO pin value must be less that 32\r\n");
    1292:	480d      	ldr	r0, [pc, #52]	; (12c8 <set_SDO_output+0x48>)
    1294:	f000 f95c 	bl	1550 <__puts_veneer>
		Error_Handler();
    1298:	f000 f962 	bl	1560 <__Error_Handler_veneer>
	}
	read_data = synth_readreg(GPO_REGISTER); // Get the current value.
    129c:	200f      	movs	r0, #15
    129e:	f7fe ff29 	bl	f4 <synth_readreg>
    12a2:	60f8      	str	r0, [r7, #12]
	read_data &= 0xFFFFFFE0; // Zero the first 5 LSBs.
    12a4:	68fb      	ldr	r3, [r7, #12]
    12a6:	f023 031f 	bic.w	r3, r3, #31
    12aa:	60fb      	str	r3, [r7, #12]
	//read_data |= 0x0A; //Select VCO divider output
	read_data |= GPO_setting; //Select GPO output dependent on function input value
    12ac:	68fa      	ldr	r2, [r7, #12]
    12ae:	687b      	ldr	r3, [r7, #4]
    12b0:	4313      	orrs	r3, r2
    12b2:	60fb      	str	r3, [r7, #12]
	synth_writereg(read_data, GPO_REGISTER, 0x0, VERIFY); // Update the GPO register.
    12b4:	2301      	movs	r3, #1
    12b6:	2200      	movs	r2, #0
    12b8:	210f      	movs	r1, #15
    12ba:	68f8      	ldr	r0, [r7, #12]
    12bc:	f7fe fea0 	bl	0 <synth_writereg>
}
    12c0:	bf00      	nop
    12c2:	3710      	adds	r7, #16
    12c4:	46bd      	mov	sp, r7
    12c6:	bd80      	pop	{r7, pc}
    12c8:	0801c06c 	.word	0x0801c06c

000012cc <start_timer>:

/**
  * @brief  Starts a timer.
  * @retval uint32_t
  */
uint32_t start_timer(TIM_TypeDef * timer) {
    12cc:	b480      	push	{r7}
    12ce:	b083      	sub	sp, #12
    12d0:	af00      	add	r7, sp, #0
    12d2:	6078      	str	r0, [r7, #4]

	timer->CR1 &= ~(TIM_CR1_CEN);
    12d4:	687b      	ldr	r3, [r7, #4]
    12d6:	681b      	ldr	r3, [r3, #0]
    12d8:	f023 0201 	bic.w	r2, r3, #1
    12dc:	687b      	ldr	r3, [r7, #4]
    12de:	601a      	str	r2, [r3, #0]
	timer->EGR |= TIM_EGR_UG;  // Reset CNT and PSC
    12e0:	687b      	ldr	r3, [r7, #4]
    12e2:	695b      	ldr	r3, [r3, #20]
    12e4:	f043 0201 	orr.w	r2, r3, #1
    12e8:	687b      	ldr	r3, [r7, #4]
    12ea:	615a      	str	r2, [r3, #20]
	timer->CR1 |= TIM_CR1_CEN;
    12ec:	687b      	ldr	r3, [r7, #4]
    12ee:	681b      	ldr	r3, [r3, #0]
    12f0:	f043 0201 	orr.w	r2, r3, #1
    12f4:	687b      	ldr	r3, [r7, #4]
    12f6:	601a      	str	r2, [r3, #0]
	//printf("Started timer with returned CNT value: %ld \r\n", timer->CNT);
	return timer->CNT;
    12f8:	687b      	ldr	r3, [r7, #4]
    12fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
    12fc:	4618      	mov	r0, r3
    12fe:	370c      	adds	r7, #12
    1300:	46bd      	mov	sp, r7
    1302:	f85d 7b04 	ldr.w	r7, [sp], #4
    1306:	4770      	bx	lr

00001308 <stop_timer>:

/**
  * @brief  Stops a timer.
  * @retval uint32_t
  */
uint32_t stop_timer(TIM_TypeDef *timer) {
    1308:	b480      	push	{r7}
    130a:	b083      	sub	sp, #12
    130c:	af00      	add	r7, sp, #0
    130e:	6078      	str	r0, [r7, #4]

	timer->CR1 &= ~(TIM_CR1_CEN);
    1310:	687b      	ldr	r3, [r7, #4]
    1312:	681b      	ldr	r3, [r3, #0]
    1314:	f023 0201 	bic.w	r2, r3, #1
    1318:	687b      	ldr	r3, [r7, #4]
    131a:	601a      	str	r2, [r3, #0]
	return timer->CNT;
    131c:	687b      	ldr	r3, [r7, #4]
    131e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
    1320:	4618      	mov	r0, r3
    1322:	370c      	adds	r7, #12
    1324:	46bd      	mov	sp, r7
    1326:	f85d 7b04 	ldr.w	r7, [sp], #4
    132a:	4770      	bx	lr

0000132c <check_timer>:
/**
  * @brief  Returns timer counter value
  * @param  Timer
  * @retval Counter value
  */
uint32_t check_timer(TIM_TypeDef *timer) {
    132c:	b480      	push	{r7}
    132e:	b083      	sub	sp, #12
    1330:	af00      	add	r7, sp, #0
    1332:	6078      	str	r0, [r7, #4]

	return timer->CNT;
    1334:	687b      	ldr	r3, [r7, #4]
    1336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
    1338:	4618      	mov	r0, r3
    133a:	370c      	adds	r7, #12
    133c:	46bd      	mov	sp, r7
    133e:	f85d 7b04 	ldr.w	r7, [sp], #4
    1342:	4770      	bx	lr

00001344 <timer_delay>:

/**
  * @brief  Uses a H/W timer to loop for the cycle count requested.
  */
void timer_delay(TIM_TypeDef *timer, const uint32_t delay_count){
    1344:	b580      	push	{r7, lr}
    1346:	b084      	sub	sp, #16
    1348:	af00      	add	r7, sp, #0
    134a:	6078      	str	r0, [r7, #4]
    134c:	6039      	str	r1, [r7, #0]
	/* Note that we don't consider overflow.
	 * FAST_TIMER will take approximately 65 ms to overflow.
	 * SLOW_TIMER will take 650ms
	 * MW_TIMER and SWEEP_TIMER will take 71 minutes */

	uint32_t start = start_timer(timer);
    134e:	6878      	ldr	r0, [r7, #4]
    1350:	f7ff ffbc 	bl	12cc <start_timer>
    1354:	60f8      	str	r0, [r7, #12]
//	timer->EGR |= TIM_EGR_UG;  // Reset CNT and PSC
//	timer->CR1 |= TIM_CR1_CEN; // Enable the timer
//	uint32_t start = timer->CNT; // Get the start value of the timer

//	while((timer->CNT - start) < delay_count){} // Loop until delay_us has expired
	while(timer->CNT < delay_count){} // Loop until delay_us has expired
    1356:	bf00      	nop
    1358:	687b      	ldr	r3, [r7, #4]
    135a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    135c:	683a      	ldr	r2, [r7, #0]
    135e:	429a      	cmp	r2, r3
    1360:	d8fa      	bhi.n	1358 <timer_delay+0x14>

	stop_timer(timer);
    1362:	6878      	ldr	r0, [r7, #4]
    1364:	f7ff ffd0 	bl	1308 <stop_timer>
//	timer->CR1 &= ~(TIM_CR1_CEN); // Disable the timer

}
    1368:	bf00      	nop
    136a:	3710      	adds	r7, #16
    136c:	46bd      	mov	sp, r7
    136e:	bd80      	pop	{r7, pc}

00001370 <measure_POP_cycle>:
/**
  * @brief  Returns the measured period of a POP cycle as averaged over 20 cycles
  * @param  None
  * @retval Period expressed as an integer number of microseconds
  */
uint32_t measure_POP_cycle(void){
    1370:	b580      	push	{r7, lr}
    1372:	b086      	sub	sp, #24
    1374:	af00      	add	r7, sp, #0

	/* Measures the elapsed time taken for 20 POP cycles
	 * Relies on the ADC value changing every time a sample is taken
	 * ADC must be initialised before running
	 */
	uint32_t adc_value = 0;
    1376:	2300      	movs	r3, #0
    1378:	617b      	str	r3, [r7, #20]
	uint32_t last_adc_value = 9999;
    137a:	f242 730f 	movw	r3, #9999	; 0x270f
    137e:	613b      	str	r3, [r7, #16]
	uint8_t cycle_count = 0;
    1380:	2300      	movs	r3, #0
    1382:	73fb      	strb	r3, [r7, #15]
	uint32_t period;
	const uint8_t iterations = 20;
    1384:	2314      	movs	r3, #20
    1386:	73bb      	strb	r3, [r7, #14]

	HAL_GPIO_WritePin(MW_INVALID_GPIO_Port, MW_INVALID_Pin, GPIO_PIN_SET); 	//Sets MW_invalid pin high to reset POP cycle
    1388:	2201      	movs	r2, #1
    138a:	2102      	movs	r1, #2
    138c:	4826      	ldr	r0, [pc, #152]	; (1428 <measure_POP_cycle+0xb8>)
    138e:	f000 f8e3 	bl	1558 <__HAL_GPIO_WritePin_veneer>
	start_timer(MW_TIMER); //reset MW_timer and start counting
    1392:	4b26      	ldr	r3, [pc, #152]	; (142c <measure_POP_cycle+0xbc>)
    1394:	681b      	ldr	r3, [r3, #0]
    1396:	4618      	mov	r0, r3
    1398:	f7ff ff98 	bl	12cc <start_timer>
	HAL_GPIO_WritePin(MW_INVALID_GPIO_Port, MW_INVALID_Pin, GPIO_PIN_RESET); //Start POP cycle
    139c:	2200      	movs	r2, #0
    139e:	2102      	movs	r1, #2
    13a0:	4821      	ldr	r0, [pc, #132]	; (1428 <measure_POP_cycle+0xb8>)
    13a2:	f000 f8d9 	bl	1558 <__HAL_GPIO_WritePin_veneer>

	// get the ADC conversion value
	adc_value = HAL_ADC_GetValue(&hadc3);
    13a6:	4822      	ldr	r0, [pc, #136]	; (1430 <measure_POP_cycle+0xc0>)
    13a8:	f000 f8ae 	bl	1508 <__HAL_ADC_GetValue_veneer>
    13ac:	6178      	str	r0, [r7, #20]
	while (cycle_count < iterations) {
    13ae:	e00c      	b.n	13ca <measure_POP_cycle+0x5a>
		while (adc_value == last_adc_value) {
			adc_value = HAL_ADC_GetValue(&hadc3); //keep reading ADC until value changes
    13b0:	481f      	ldr	r0, [pc, #124]	; (1430 <measure_POP_cycle+0xc0>)
    13b2:	f000 f8a9 	bl	1508 <__HAL_ADC_GetValue_veneer>
    13b6:	6178      	str	r0, [r7, #20]
		while (adc_value == last_adc_value) {
    13b8:	697a      	ldr	r2, [r7, #20]
    13ba:	693b      	ldr	r3, [r7, #16]
    13bc:	429a      	cmp	r2, r3
    13be:	d0f7      	beq.n	13b0 <measure_POP_cycle+0x40>
		}
		last_adc_value = adc_value;
    13c0:	697b      	ldr	r3, [r7, #20]
    13c2:	613b      	str	r3, [r7, #16]
		cycle_count++;
    13c4:	7bfb      	ldrb	r3, [r7, #15]
    13c6:	3301      	adds	r3, #1
    13c8:	73fb      	strb	r3, [r7, #15]
	while (cycle_count < iterations) {
    13ca:	7bfa      	ldrb	r2, [r7, #15]
    13cc:	7bbb      	ldrb	r3, [r7, #14]
    13ce:	429a      	cmp	r2, r3
    13d0:	d3f2      	bcc.n	13b8 <measure_POP_cycle+0x48>
	}

	uint32_t total_period = check_timer(MW_TIMER);
    13d2:	4b16      	ldr	r3, [pc, #88]	; (142c <measure_POP_cycle+0xbc>)
    13d4:	681b      	ldr	r3, [r3, #0]
    13d6:	4618      	mov	r0, r3
    13d8:	f7ff ffa8 	bl	132c <check_timer>
    13dc:	60b8      	str	r0, [r7, #8]
	period = (float)(check_timer(MW_TIMER)) / iterations + 0.5;
    13de:	4b13      	ldr	r3, [pc, #76]	; (142c <measure_POP_cycle+0xbc>)
    13e0:	681b      	ldr	r3, [r3, #0]
    13e2:	4618      	mov	r0, r3
    13e4:	f7ff ffa2 	bl	132c <check_timer>
    13e8:	ee07 0a90 	vmov	s15, r0
    13ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
    13f0:	7bbb      	ldrb	r3, [r7, #14]
    13f2:	ee07 3a90 	vmov	s15, r3
    13f6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    13fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
    13fe:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
    1402:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
    1406:	ee37 7b06 	vadd.f64	d7, d7, d6
    140a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
    140e:	ee17 3a90 	vmov	r3, s15
    1412:	607b      	str	r3, [r7, #4]
	stop_timer(MW_TIMER);
    1414:	4b05      	ldr	r3, [pc, #20]	; (142c <measure_POP_cycle+0xbc>)
    1416:	681b      	ldr	r3, [r3, #0]
    1418:	4618      	mov	r0, r3
    141a:	f7ff ff75 	bl	1308 <stop_timer>
	#ifdef TIMER_VERBOSE
		printf("Time for %u POP cycles: %lu us\r\n", iterations, total_period);
		printf("POP period: %lu us\r\n", period);
	#endif //TIMER_VERBOSE
	return (period);
    141e:	687b      	ldr	r3, [r7, #4]

}
    1420:	4618      	mov	r0, r3
    1422:	3718      	adds	r7, #24
    1424:	46bd      	mov	sp, r7
    1426:	bd80      	pop	{r7, pc}
    1428:	58020400 	.word	0x58020400
    142c:	2000001c 	.word	0x2000001c
    1430:	2000024c 	.word	0x2000024c

00001434 <start_pop>:

	printf("POP cycle stopped!\r\n");

}

void start_pop() {
    1434:	b580      	push	{r7, lr}
    1436:	af00      	add	r7, sp, #0

	/* Timer A is the LASER enable, Timer E is the microwave pulse */
	if (HAL_HRTIM_WaveformOutputStart(&hhrtim,
    1438:	f240 1103 	movw	r1, #259	; 0x103
    143c:	480f      	ldr	r0, [pc, #60]	; (147c <start_pop+0x48>)
    143e:	f000 f86f 	bl	1520 <__HAL_HRTIM_WaveformOutputStart_veneer>
    1442:	4603      	mov	r3, r0
    1444:	2b00      	cmp	r3, #0
    1446:	d004      	beq.n	1452 <start_pop+0x1e>
	HRTIM_OUTPUT_TA1 | HRTIM_OUTPUT_TA2 | HRTIM_OUTPUT_TE1) != HAL_OK) {
		printf("Failed to start POP!\r\n");
    1448:	480d      	ldr	r0, [pc, #52]	; (1480 <start_pop+0x4c>)
    144a:	f000 f881 	bl	1550 <__puts_veneer>
		Error_Handler();
    144e:	f000 f887 	bl	1560 <__Error_Handler_veneer>
		Error_Handler();
	}

#endif

	if (HAL_HRTIM_WaveformCounterStart_IT(&hhrtim,
    1452:	f44f 1108 	mov.w	r1, #2228224	; 0x220000
    1456:	4809      	ldr	r0, [pc, #36]	; (147c <start_pop+0x48>)
    1458:	f000 f86a 	bl	1530 <__HAL_HRTIM_WaveformCountStart_IT_veneer>
    145c:	4603      	mov	r3, r0
    145e:	2b00      	cmp	r3, #0
    1460:	d004      	beq.n	146c <start_pop+0x38>
	HRTIM_TIMERID_TIMER_A | HRTIM_TIMERID_TIMER_E) != HAL_OK) {
		printf("POP failure point E!\r\n");
    1462:	4808      	ldr	r0, [pc, #32]	; (1484 <start_pop+0x50>)
    1464:	f000 f874 	bl	1550 <__puts_veneer>
		Error_Handler();
    1468:	f000 f87a 	bl	1560 <__Error_Handler_veneer>
	}

	pop_running = true;
    146c:	4b06      	ldr	r3, [pc, #24]	; (1488 <start_pop+0x54>)
    146e:	2201      	movs	r2, #1
    1470:	701a      	strb	r2, [r3, #0]

	printf("POP cycle running!\r\n");
    1472:	4806      	ldr	r0, [pc, #24]	; (148c <start_pop+0x58>)
    1474:	f000 f86c 	bl	1550 <__puts_veneer>

}
    1478:	bf00      	nop
    147a:	bd80      	pop	{r7, pc}
    147c:	200002c4 	.word	0x200002c4
    1480:	0801c090 	.word	0x0801c090
    1484:	0801c0a8 	.word	0x0801c0a8
    1488:	20000648 	.word	0x20000648
    148c:	0801c0c0 	.word	0x0801c0c0

00001490 <stop_pop>:
void stop_pop() {
    1490:	b580      	push	{r7, lr}
    1492:	af00      	add	r7, sp, #0
	if (HAL_HRTIM_WaveformOutputStop(&hhrtim,
    1494:	f240 1103 	movw	r1, #259	; 0x103
    1498:	4813      	ldr	r0, [pc, #76]	; (14e8 <stop_pop+0x58>)
    149a:	f000 f839 	bl	1510 <__HAL_HRTIM_WaveformOutputStop_veneer>
    149e:	4603      	mov	r3, r0
    14a0:	2b00      	cmp	r3, #0
    14a2:	d004      	beq.n	14ae <stop_pop+0x1e>
		printf("POP failure point A!\r\n");
    14a4:	4811      	ldr	r0, [pc, #68]	; (14ec <stop_pop+0x5c>)
    14a6:	f000 f853 	bl	1550 <__puts_veneer>
		Error_Handler();
    14aa:	f000 f859 	bl	1560 <__Error_Handler_veneer>
	if (HAL_HRTIM_WaveformCounterStop_IT(&hhrtim,
    14ae:	f44f 1108 	mov.w	r1, #2228224	; 0x220000
    14b2:	480d      	ldr	r0, [pc, #52]	; (14e8 <stop_pop+0x58>)
    14b4:	f000 f830 	bl	1518 <__HAL_HRTIM_WaveformCountStop_IT_veneer>
    14b8:	4603      	mov	r3, r0
    14ba:	2b00      	cmp	r3, #0
    14bc:	d004      	beq.n	14c8 <stop_pop+0x38>
		printf("POP failure point B!\r\n");
    14be:	480c      	ldr	r0, [pc, #48]	; (14f0 <stop_pop+0x60>)
    14c0:	f000 f846 	bl	1550 <__puts_veneer>
		Error_Handler();
    14c4:	f000 f84c 	bl	1560 <__Error_Handler_veneer>
	pop_cycle_count = 0;
    14c8:	4b0a      	ldr	r3, [pc, #40]	; (14f4 <stop_pop+0x64>)
    14ca:	2200      	movs	r2, #0
    14cc:	601a      	str	r2, [r3, #0]
	pop_running = false;
    14ce:	4b0a      	ldr	r3, [pc, #40]	; (14f8 <stop_pop+0x68>)
    14d0:	2200      	movs	r2, #0
    14d2:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 0); //turn off amber LED
    14d4:	2200      	movs	r2, #0
    14d6:	2102      	movs	r1, #2
    14d8:	4808      	ldr	r0, [pc, #32]	; (14fc <stop_pop+0x6c>)
    14da:	f000 f83d 	bl	1558 <__HAL_GPIO_WritePin_veneer>
	printf("POP cycle stopped!\r\n");
    14de:	4808      	ldr	r0, [pc, #32]	; (1500 <stop_pop+0x70>)
    14e0:	f000 f836 	bl	1550 <__puts_veneer>
}
    14e4:	bf00      	nop
    14e6:	bd80      	pop	{r7, pc}
    14e8:	200002c4 	.word	0x200002c4
    14ec:	0801c0d4 	.word	0x0801c0d4
    14f0:	0801c0ec 	.word	0x0801c0ec
    14f4:	20000644 	.word	0x20000644
    14f8:	20000648 	.word	0x20000648
    14fc:	58021000 	.word	0x58021000
    1500:	0801c104 	.word	0x0801c104
    1504:	00000000 	.word	0x00000000

00001508 <__HAL_ADC_GetValue_veneer>:
    1508:	f85f f000 	ldr.w	pc, [pc]	; 150c <__HAL_ADC_GetValue_veneer+0x4>
    150c:	080045f9 	.word	0x080045f9

00001510 <__HAL_HRTIM_WaveformOutputStop_veneer>:
    1510:	f85f f000 	ldr.w	pc, [pc]	; 1514 <__HAL_HRTIM_WaveformOutputStop_veneer+0x4>
    1514:	08007e41 	.word	0x08007e41

00001518 <__HAL_HRTIM_WaveformCountStop_IT_veneer>:
    1518:	f85f f000 	ldr.w	pc, [pc]	; 151c <__HAL_HRTIM_WaveformCountStop_IT_veneer+0x4>
    151c:	08007f7d 	.word	0x08007f7d

00001520 <__HAL_HRTIM_WaveformOutputStart_veneer>:
    1520:	f85f f000 	ldr.w	pc, [pc]	; 1524 <__HAL_HRTIM_WaveformOutputStart_veneer+0x4>
    1524:	08007de7 	.word	0x08007de7

00001528 <__HAL_Delay_veneer>:
    1528:	f85f f000 	ldr.w	pc, [pc]	; 152c <__HAL_Delay_veneer+0x4>
    152c:	08003b4d 	.word	0x08003b4d

00001530 <__HAL_HRTIM_WaveformCountStart_IT_veneer>:
    1530:	f85f f000 	ldr.w	pc, [pc]	; 1534 <__HAL_HRTIM_WaveformCountStart_IT_veneer+0x4>
    1534:	08007e9d 	.word	0x08007e9d

00001538 <__HAL_GPIO_ReadPin_veneer>:
    1538:	f85f f000 	ldr.w	pc, [pc]	; 153c <__HAL_GPIO_ReadPin_veneer+0x4>
    153c:	080076f5 	.word	0x080076f5

00001540 <__printf_veneer>:
    1540:	f85f f000 	ldr.w	pc, [pc]	; 1544 <__printf_veneer+0x4>
    1544:	08019881 	.word	0x08019881

00001548 <__HAL_GPIO_TogglePin_veneer>:
    1548:	f85f f000 	ldr.w	pc, [pc]	; 154c <__HAL_GPIO_TogglePin_veneer+0x4>
    154c:	08007757 	.word	0x08007757

00001550 <__puts_veneer>:
    1550:	f85f f000 	ldr.w	pc, [pc]	; 1554 <__puts_veneer+0x4>
    1554:	0801994d 	.word	0x0801994d

00001558 <__HAL_GPIO_WritePin_veneer>:
    1558:	f85f f000 	ldr.w	pc, [pc]	; 155c <__HAL_GPIO_WritePin_veneer+0x4>
    155c:	08007725 	.word	0x08007725

00001560 <__Error_Handler_veneer>:
    1560:	f85f f000 	ldr.w	pc, [pc]	; 1564 <__Error_Handler_veneer+0x4>
    1564:	08002cb9 	.word	0x08002cb9

Disassembly of section .text:

08001800 <__do_global_dtors_aux>:
 8001800:	b510      	push	{r4, lr}
 8001802:	4c05      	ldr	r4, [pc, #20]	; (8001818 <__do_global_dtors_aux+0x18>)
 8001804:	7823      	ldrb	r3, [r4, #0]
 8001806:	b933      	cbnz	r3, 8001816 <__do_global_dtors_aux+0x16>
 8001808:	4b04      	ldr	r3, [pc, #16]	; (800181c <__do_global_dtors_aux+0x1c>)
 800180a:	b113      	cbz	r3, 8001812 <__do_global_dtors_aux+0x12>
 800180c:	4804      	ldr	r0, [pc, #16]	; (8001820 <__do_global_dtors_aux+0x20>)
 800180e:	f3af 8000 	nop.w
 8001812:	2301      	movs	r3, #1
 8001814:	7023      	strb	r3, [r4, #0]
 8001816:	bd10      	pop	{r4, pc}
 8001818:	20000230 	.word	0x20000230
 800181c:	00000000 	.word	0x00000000
 8001820:	0801b788 	.word	0x0801b788

08001824 <frame_dummy>:
 8001824:	b508      	push	{r3, lr}
 8001826:	4b03      	ldr	r3, [pc, #12]	; (8001834 <frame_dummy+0x10>)
 8001828:	b11b      	cbz	r3, 8001832 <frame_dummy+0xe>
 800182a:	4903      	ldr	r1, [pc, #12]	; (8001838 <frame_dummy+0x14>)
 800182c:	4803      	ldr	r0, [pc, #12]	; (800183c <frame_dummy+0x18>)
 800182e:	f3af 8000 	nop.w
 8001832:	bd08      	pop	{r3, pc}
 8001834:	00000000 	.word	0x00000000
 8001838:	20000234 	.word	0x20000234
 800183c:	0801b788 	.word	0x0801b788

08001840 <memchr>:
 8001840:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8001844:	2a10      	cmp	r2, #16
 8001846:	db2b      	blt.n	80018a0 <memchr+0x60>
 8001848:	f010 0f07 	tst.w	r0, #7
 800184c:	d008      	beq.n	8001860 <memchr+0x20>
 800184e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8001852:	3a01      	subs	r2, #1
 8001854:	428b      	cmp	r3, r1
 8001856:	d02d      	beq.n	80018b4 <memchr+0x74>
 8001858:	f010 0f07 	tst.w	r0, #7
 800185c:	b342      	cbz	r2, 80018b0 <memchr+0x70>
 800185e:	d1f6      	bne.n	800184e <memchr+0xe>
 8001860:	b4f0      	push	{r4, r5, r6, r7}
 8001862:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8001866:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800186a:	f022 0407 	bic.w	r4, r2, #7
 800186e:	f07f 0700 	mvns.w	r7, #0
 8001872:	2300      	movs	r3, #0
 8001874:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8001878:	3c08      	subs	r4, #8
 800187a:	ea85 0501 	eor.w	r5, r5, r1
 800187e:	ea86 0601 	eor.w	r6, r6, r1
 8001882:	fa85 f547 	uadd8	r5, r5, r7
 8001886:	faa3 f587 	sel	r5, r3, r7
 800188a:	fa86 f647 	uadd8	r6, r6, r7
 800188e:	faa5 f687 	sel	r6, r5, r7
 8001892:	b98e      	cbnz	r6, 80018b8 <memchr+0x78>
 8001894:	d1ee      	bne.n	8001874 <memchr+0x34>
 8001896:	bcf0      	pop	{r4, r5, r6, r7}
 8001898:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800189c:	f002 0207 	and.w	r2, r2, #7
 80018a0:	b132      	cbz	r2, 80018b0 <memchr+0x70>
 80018a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80018a6:	3a01      	subs	r2, #1
 80018a8:	ea83 0301 	eor.w	r3, r3, r1
 80018ac:	b113      	cbz	r3, 80018b4 <memchr+0x74>
 80018ae:	d1f8      	bne.n	80018a2 <memchr+0x62>
 80018b0:	2000      	movs	r0, #0
 80018b2:	4770      	bx	lr
 80018b4:	3801      	subs	r0, #1
 80018b6:	4770      	bx	lr
 80018b8:	2d00      	cmp	r5, #0
 80018ba:	bf06      	itte	eq
 80018bc:	4635      	moveq	r5, r6
 80018be:	3803      	subeq	r0, #3
 80018c0:	3807      	subne	r0, #7
 80018c2:	f015 0f01 	tst.w	r5, #1
 80018c6:	d107      	bne.n	80018d8 <memchr+0x98>
 80018c8:	3001      	adds	r0, #1
 80018ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80018ce:	bf02      	ittt	eq
 80018d0:	3001      	addeq	r0, #1
 80018d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80018d6:	3001      	addeq	r0, #1
 80018d8:	bcf0      	pop	{r4, r5, r6, r7}
 80018da:	3801      	subs	r0, #1
 80018dc:	4770      	bx	lr
 80018de:	bf00      	nop

080018e0 <strlen>:
 80018e0:	4603      	mov	r3, r0
 80018e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80018e6:	2a00      	cmp	r2, #0
 80018e8:	d1fb      	bne.n	80018e2 <strlen+0x2>
 80018ea:	1a18      	subs	r0, r3, r0
 80018ec:	3801      	subs	r0, #1
 80018ee:	4770      	bx	lr

080018f0 <__aeabi_uldivmod>:
 80018f0:	b953      	cbnz	r3, 8001908 <__aeabi_uldivmod+0x18>
 80018f2:	b94a      	cbnz	r2, 8001908 <__aeabi_uldivmod+0x18>
 80018f4:	2900      	cmp	r1, #0
 80018f6:	bf08      	it	eq
 80018f8:	2800      	cmpeq	r0, #0
 80018fa:	bf1c      	itt	ne
 80018fc:	f04f 31ff 	movne.w	r1, #4294967295
 8001900:	f04f 30ff 	movne.w	r0, #4294967295
 8001904:	f000 b970 	b.w	8001be8 <__aeabi_idiv0>
 8001908:	f1ad 0c08 	sub.w	ip, sp, #8
 800190c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8001910:	f000 f806 	bl	8001920 <__udivmoddi4>
 8001914:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001918:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800191c:	b004      	add	sp, #16
 800191e:	4770      	bx	lr

08001920 <__udivmoddi4>:
 8001920:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001924:	9e08      	ldr	r6, [sp, #32]
 8001926:	460d      	mov	r5, r1
 8001928:	4604      	mov	r4, r0
 800192a:	460f      	mov	r7, r1
 800192c:	2b00      	cmp	r3, #0
 800192e:	d14a      	bne.n	80019c6 <__udivmoddi4+0xa6>
 8001930:	428a      	cmp	r2, r1
 8001932:	4694      	mov	ip, r2
 8001934:	d965      	bls.n	8001a02 <__udivmoddi4+0xe2>
 8001936:	fab2 f382 	clz	r3, r2
 800193a:	b143      	cbz	r3, 800194e <__udivmoddi4+0x2e>
 800193c:	fa02 fc03 	lsl.w	ip, r2, r3
 8001940:	f1c3 0220 	rsb	r2, r3, #32
 8001944:	409f      	lsls	r7, r3
 8001946:	fa20 f202 	lsr.w	r2, r0, r2
 800194a:	4317      	orrs	r7, r2
 800194c:	409c      	lsls	r4, r3
 800194e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8001952:	fa1f f58c 	uxth.w	r5, ip
 8001956:	fbb7 f1fe 	udiv	r1, r7, lr
 800195a:	0c22      	lsrs	r2, r4, #16
 800195c:	fb0e 7711 	mls	r7, lr, r1, r7
 8001960:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8001964:	fb01 f005 	mul.w	r0, r1, r5
 8001968:	4290      	cmp	r0, r2
 800196a:	d90a      	bls.n	8001982 <__udivmoddi4+0x62>
 800196c:	eb1c 0202 	adds.w	r2, ip, r2
 8001970:	f101 37ff 	add.w	r7, r1, #4294967295
 8001974:	f080 811c 	bcs.w	8001bb0 <__udivmoddi4+0x290>
 8001978:	4290      	cmp	r0, r2
 800197a:	f240 8119 	bls.w	8001bb0 <__udivmoddi4+0x290>
 800197e:	3902      	subs	r1, #2
 8001980:	4462      	add	r2, ip
 8001982:	1a12      	subs	r2, r2, r0
 8001984:	b2a4      	uxth	r4, r4
 8001986:	fbb2 f0fe 	udiv	r0, r2, lr
 800198a:	fb0e 2210 	mls	r2, lr, r0, r2
 800198e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8001992:	fb00 f505 	mul.w	r5, r0, r5
 8001996:	42a5      	cmp	r5, r4
 8001998:	d90a      	bls.n	80019b0 <__udivmoddi4+0x90>
 800199a:	eb1c 0404 	adds.w	r4, ip, r4
 800199e:	f100 32ff 	add.w	r2, r0, #4294967295
 80019a2:	f080 8107 	bcs.w	8001bb4 <__udivmoddi4+0x294>
 80019a6:	42a5      	cmp	r5, r4
 80019a8:	f240 8104 	bls.w	8001bb4 <__udivmoddi4+0x294>
 80019ac:	4464      	add	r4, ip
 80019ae:	3802      	subs	r0, #2
 80019b0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80019b4:	1b64      	subs	r4, r4, r5
 80019b6:	2100      	movs	r1, #0
 80019b8:	b11e      	cbz	r6, 80019c2 <__udivmoddi4+0xa2>
 80019ba:	40dc      	lsrs	r4, r3
 80019bc:	2300      	movs	r3, #0
 80019be:	e9c6 4300 	strd	r4, r3, [r6]
 80019c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80019c6:	428b      	cmp	r3, r1
 80019c8:	d908      	bls.n	80019dc <__udivmoddi4+0xbc>
 80019ca:	2e00      	cmp	r6, #0
 80019cc:	f000 80ed 	beq.w	8001baa <__udivmoddi4+0x28a>
 80019d0:	2100      	movs	r1, #0
 80019d2:	e9c6 0500 	strd	r0, r5, [r6]
 80019d6:	4608      	mov	r0, r1
 80019d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80019dc:	fab3 f183 	clz	r1, r3
 80019e0:	2900      	cmp	r1, #0
 80019e2:	d149      	bne.n	8001a78 <__udivmoddi4+0x158>
 80019e4:	42ab      	cmp	r3, r5
 80019e6:	d302      	bcc.n	80019ee <__udivmoddi4+0xce>
 80019e8:	4282      	cmp	r2, r0
 80019ea:	f200 80f8 	bhi.w	8001bde <__udivmoddi4+0x2be>
 80019ee:	1a84      	subs	r4, r0, r2
 80019f0:	eb65 0203 	sbc.w	r2, r5, r3
 80019f4:	2001      	movs	r0, #1
 80019f6:	4617      	mov	r7, r2
 80019f8:	2e00      	cmp	r6, #0
 80019fa:	d0e2      	beq.n	80019c2 <__udivmoddi4+0xa2>
 80019fc:	e9c6 4700 	strd	r4, r7, [r6]
 8001a00:	e7df      	b.n	80019c2 <__udivmoddi4+0xa2>
 8001a02:	b902      	cbnz	r2, 8001a06 <__udivmoddi4+0xe6>
 8001a04:	deff      	udf	#255	; 0xff
 8001a06:	fab2 f382 	clz	r3, r2
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	f040 8090 	bne.w	8001b30 <__udivmoddi4+0x210>
 8001a10:	1a8a      	subs	r2, r1, r2
 8001a12:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001a16:	fa1f fe8c 	uxth.w	lr, ip
 8001a1a:	2101      	movs	r1, #1
 8001a1c:	fbb2 f5f7 	udiv	r5, r2, r7
 8001a20:	fb07 2015 	mls	r0, r7, r5, r2
 8001a24:	0c22      	lsrs	r2, r4, #16
 8001a26:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8001a2a:	fb0e f005 	mul.w	r0, lr, r5
 8001a2e:	4290      	cmp	r0, r2
 8001a30:	d908      	bls.n	8001a44 <__udivmoddi4+0x124>
 8001a32:	eb1c 0202 	adds.w	r2, ip, r2
 8001a36:	f105 38ff 	add.w	r8, r5, #4294967295
 8001a3a:	d202      	bcs.n	8001a42 <__udivmoddi4+0x122>
 8001a3c:	4290      	cmp	r0, r2
 8001a3e:	f200 80cb 	bhi.w	8001bd8 <__udivmoddi4+0x2b8>
 8001a42:	4645      	mov	r5, r8
 8001a44:	1a12      	subs	r2, r2, r0
 8001a46:	b2a4      	uxth	r4, r4
 8001a48:	fbb2 f0f7 	udiv	r0, r2, r7
 8001a4c:	fb07 2210 	mls	r2, r7, r0, r2
 8001a50:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8001a54:	fb0e fe00 	mul.w	lr, lr, r0
 8001a58:	45a6      	cmp	lr, r4
 8001a5a:	d908      	bls.n	8001a6e <__udivmoddi4+0x14e>
 8001a5c:	eb1c 0404 	adds.w	r4, ip, r4
 8001a60:	f100 32ff 	add.w	r2, r0, #4294967295
 8001a64:	d202      	bcs.n	8001a6c <__udivmoddi4+0x14c>
 8001a66:	45a6      	cmp	lr, r4
 8001a68:	f200 80bb 	bhi.w	8001be2 <__udivmoddi4+0x2c2>
 8001a6c:	4610      	mov	r0, r2
 8001a6e:	eba4 040e 	sub.w	r4, r4, lr
 8001a72:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8001a76:	e79f      	b.n	80019b8 <__udivmoddi4+0x98>
 8001a78:	f1c1 0720 	rsb	r7, r1, #32
 8001a7c:	408b      	lsls	r3, r1
 8001a7e:	fa22 fc07 	lsr.w	ip, r2, r7
 8001a82:	ea4c 0c03 	orr.w	ip, ip, r3
 8001a86:	fa05 f401 	lsl.w	r4, r5, r1
 8001a8a:	fa20 f307 	lsr.w	r3, r0, r7
 8001a8e:	40fd      	lsrs	r5, r7
 8001a90:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8001a94:	4323      	orrs	r3, r4
 8001a96:	fbb5 f8f9 	udiv	r8, r5, r9
 8001a9a:	fa1f fe8c 	uxth.w	lr, ip
 8001a9e:	fb09 5518 	mls	r5, r9, r8, r5
 8001aa2:	0c1c      	lsrs	r4, r3, #16
 8001aa4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8001aa8:	fb08 f50e 	mul.w	r5, r8, lr
 8001aac:	42a5      	cmp	r5, r4
 8001aae:	fa02 f201 	lsl.w	r2, r2, r1
 8001ab2:	fa00 f001 	lsl.w	r0, r0, r1
 8001ab6:	d90b      	bls.n	8001ad0 <__udivmoddi4+0x1b0>
 8001ab8:	eb1c 0404 	adds.w	r4, ip, r4
 8001abc:	f108 3aff 	add.w	sl, r8, #4294967295
 8001ac0:	f080 8088 	bcs.w	8001bd4 <__udivmoddi4+0x2b4>
 8001ac4:	42a5      	cmp	r5, r4
 8001ac6:	f240 8085 	bls.w	8001bd4 <__udivmoddi4+0x2b4>
 8001aca:	f1a8 0802 	sub.w	r8, r8, #2
 8001ace:	4464      	add	r4, ip
 8001ad0:	1b64      	subs	r4, r4, r5
 8001ad2:	b29d      	uxth	r5, r3
 8001ad4:	fbb4 f3f9 	udiv	r3, r4, r9
 8001ad8:	fb09 4413 	mls	r4, r9, r3, r4
 8001adc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8001ae0:	fb03 fe0e 	mul.w	lr, r3, lr
 8001ae4:	45a6      	cmp	lr, r4
 8001ae6:	d908      	bls.n	8001afa <__udivmoddi4+0x1da>
 8001ae8:	eb1c 0404 	adds.w	r4, ip, r4
 8001aec:	f103 35ff 	add.w	r5, r3, #4294967295
 8001af0:	d26c      	bcs.n	8001bcc <__udivmoddi4+0x2ac>
 8001af2:	45a6      	cmp	lr, r4
 8001af4:	d96a      	bls.n	8001bcc <__udivmoddi4+0x2ac>
 8001af6:	3b02      	subs	r3, #2
 8001af8:	4464      	add	r4, ip
 8001afa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8001afe:	fba3 9502 	umull	r9, r5, r3, r2
 8001b02:	eba4 040e 	sub.w	r4, r4, lr
 8001b06:	42ac      	cmp	r4, r5
 8001b08:	46c8      	mov	r8, r9
 8001b0a:	46ae      	mov	lr, r5
 8001b0c:	d356      	bcc.n	8001bbc <__udivmoddi4+0x29c>
 8001b0e:	d053      	beq.n	8001bb8 <__udivmoddi4+0x298>
 8001b10:	b156      	cbz	r6, 8001b28 <__udivmoddi4+0x208>
 8001b12:	ebb0 0208 	subs.w	r2, r0, r8
 8001b16:	eb64 040e 	sbc.w	r4, r4, lr
 8001b1a:	fa04 f707 	lsl.w	r7, r4, r7
 8001b1e:	40ca      	lsrs	r2, r1
 8001b20:	40cc      	lsrs	r4, r1
 8001b22:	4317      	orrs	r7, r2
 8001b24:	e9c6 7400 	strd	r7, r4, [r6]
 8001b28:	4618      	mov	r0, r3
 8001b2a:	2100      	movs	r1, #0
 8001b2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001b30:	f1c3 0120 	rsb	r1, r3, #32
 8001b34:	fa02 fc03 	lsl.w	ip, r2, r3
 8001b38:	fa20 f201 	lsr.w	r2, r0, r1
 8001b3c:	fa25 f101 	lsr.w	r1, r5, r1
 8001b40:	409d      	lsls	r5, r3
 8001b42:	432a      	orrs	r2, r5
 8001b44:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001b48:	fa1f fe8c 	uxth.w	lr, ip
 8001b4c:	fbb1 f0f7 	udiv	r0, r1, r7
 8001b50:	fb07 1510 	mls	r5, r7, r0, r1
 8001b54:	0c11      	lsrs	r1, r2, #16
 8001b56:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8001b5a:	fb00 f50e 	mul.w	r5, r0, lr
 8001b5e:	428d      	cmp	r5, r1
 8001b60:	fa04 f403 	lsl.w	r4, r4, r3
 8001b64:	d908      	bls.n	8001b78 <__udivmoddi4+0x258>
 8001b66:	eb1c 0101 	adds.w	r1, ip, r1
 8001b6a:	f100 38ff 	add.w	r8, r0, #4294967295
 8001b6e:	d22f      	bcs.n	8001bd0 <__udivmoddi4+0x2b0>
 8001b70:	428d      	cmp	r5, r1
 8001b72:	d92d      	bls.n	8001bd0 <__udivmoddi4+0x2b0>
 8001b74:	3802      	subs	r0, #2
 8001b76:	4461      	add	r1, ip
 8001b78:	1b49      	subs	r1, r1, r5
 8001b7a:	b292      	uxth	r2, r2
 8001b7c:	fbb1 f5f7 	udiv	r5, r1, r7
 8001b80:	fb07 1115 	mls	r1, r7, r5, r1
 8001b84:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001b88:	fb05 f10e 	mul.w	r1, r5, lr
 8001b8c:	4291      	cmp	r1, r2
 8001b8e:	d908      	bls.n	8001ba2 <__udivmoddi4+0x282>
 8001b90:	eb1c 0202 	adds.w	r2, ip, r2
 8001b94:	f105 38ff 	add.w	r8, r5, #4294967295
 8001b98:	d216      	bcs.n	8001bc8 <__udivmoddi4+0x2a8>
 8001b9a:	4291      	cmp	r1, r2
 8001b9c:	d914      	bls.n	8001bc8 <__udivmoddi4+0x2a8>
 8001b9e:	3d02      	subs	r5, #2
 8001ba0:	4462      	add	r2, ip
 8001ba2:	1a52      	subs	r2, r2, r1
 8001ba4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8001ba8:	e738      	b.n	8001a1c <__udivmoddi4+0xfc>
 8001baa:	4631      	mov	r1, r6
 8001bac:	4630      	mov	r0, r6
 8001bae:	e708      	b.n	80019c2 <__udivmoddi4+0xa2>
 8001bb0:	4639      	mov	r1, r7
 8001bb2:	e6e6      	b.n	8001982 <__udivmoddi4+0x62>
 8001bb4:	4610      	mov	r0, r2
 8001bb6:	e6fb      	b.n	80019b0 <__udivmoddi4+0x90>
 8001bb8:	4548      	cmp	r0, r9
 8001bba:	d2a9      	bcs.n	8001b10 <__udivmoddi4+0x1f0>
 8001bbc:	ebb9 0802 	subs.w	r8, r9, r2
 8001bc0:	eb65 0e0c 	sbc.w	lr, r5, ip
 8001bc4:	3b01      	subs	r3, #1
 8001bc6:	e7a3      	b.n	8001b10 <__udivmoddi4+0x1f0>
 8001bc8:	4645      	mov	r5, r8
 8001bca:	e7ea      	b.n	8001ba2 <__udivmoddi4+0x282>
 8001bcc:	462b      	mov	r3, r5
 8001bce:	e794      	b.n	8001afa <__udivmoddi4+0x1da>
 8001bd0:	4640      	mov	r0, r8
 8001bd2:	e7d1      	b.n	8001b78 <__udivmoddi4+0x258>
 8001bd4:	46d0      	mov	r8, sl
 8001bd6:	e77b      	b.n	8001ad0 <__udivmoddi4+0x1b0>
 8001bd8:	3d02      	subs	r5, #2
 8001bda:	4462      	add	r2, ip
 8001bdc:	e732      	b.n	8001a44 <__udivmoddi4+0x124>
 8001bde:	4608      	mov	r0, r1
 8001be0:	e70a      	b.n	80019f8 <__udivmoddi4+0xd8>
 8001be2:	4464      	add	r4, ip
 8001be4:	3802      	subs	r0, #2
 8001be6:	e742      	b.n	8001a6e <__udivmoddi4+0x14e>

08001be8 <__aeabi_idiv0>:
 8001be8:	4770      	bx	lr
 8001bea:	bf00      	nop

08001bec <__io_putchar>:
/**
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE {
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b082      	sub	sp, #8
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t*) &ch, 1, 0xFFFF);
 8001bf4:	1d39      	adds	r1, r7, #4
 8001bf6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	4803      	ldr	r0, [pc, #12]	; (8001c0c <__io_putchar+0x20>)
 8001bfe:	f00b fe01 	bl	800d804 <HAL_UART_Transmit>
	return ch;
 8001c02:	687b      	ldr	r3, [r7, #4]
}
 8001c04:	4618      	mov	r0, r3
 8001c06:	3708      	adds	r7, #8
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}
 8001c0c:	20000554 	.word	0x20000554

08001c10 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b084      	sub	sp, #16
 8001c14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* Copy from FLASH to itcm */
  memcpy(&_sitcm, &_siitcm, ((void*) &_eitcm - (void*) &_sitcm));
 8001c16:	4ab2      	ldr	r2, [pc, #712]	; (8001ee0 <main+0x2d0>)
 8001c18:	4bb2      	ldr	r3, [pc, #712]	; (8001ee4 <main+0x2d4>)
 8001c1a:	1ad3      	subs	r3, r2, r3
 8001c1c:	461a      	mov	r2, r3
 8001c1e:	49b2      	ldr	r1, [pc, #712]	; (8001ee8 <main+0x2d8>)
 8001c20:	48b0      	ldr	r0, [pc, #704]	; (8001ee4 <main+0x2d4>)
 8001c22:	f017 fffc 	bl	8019c1e <memcpy>

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8001c26:	f000 fff5 	bl	8002c14 <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001c2a:	4bb0      	ldr	r3, [pc, #704]	; (8001eec <main+0x2dc>)
 8001c2c:	695b      	ldr	r3, [r3, #20]
 8001c2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d11b      	bne.n	8001c6e <main+0x5e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001c36:	f3bf 8f4f 	dsb	sy
}
 8001c3a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001c3c:	f3bf 8f6f 	isb	sy
}
 8001c40:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001c42:	4baa      	ldr	r3, [pc, #680]	; (8001eec <main+0x2dc>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001c4a:	f3bf 8f4f 	dsb	sy
}
 8001c4e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001c50:	f3bf 8f6f 	isb	sy
}
 8001c54:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001c56:	4ba5      	ldr	r3, [pc, #660]	; (8001eec <main+0x2dc>)
 8001c58:	695b      	ldr	r3, [r3, #20]
 8001c5a:	4aa4      	ldr	r2, [pc, #656]	; (8001eec <main+0x2dc>)
 8001c5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c60:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001c62:	f3bf 8f4f 	dsb	sy
}
 8001c66:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001c68:	f3bf 8f6f 	isb	sy
}
 8001c6c:	e000      	b.n	8001c70 <main+0x60>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001c6e:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8001c70:	4b9e      	ldr	r3, [pc, #632]	; (8001eec <main+0x2dc>)
 8001c72:	695b      	ldr	r3, [r3, #20]
 8001c74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d138      	bne.n	8001cee <main+0xde>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8001c7c:	4b9b      	ldr	r3, [pc, #620]	; (8001eec <main+0x2dc>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001c84:	f3bf 8f4f 	dsb	sy
}
 8001c88:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8001c8a:	4b98      	ldr	r3, [pc, #608]	; (8001eec <main+0x2dc>)
 8001c8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001c90:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	0b5b      	lsrs	r3, r3, #13
 8001c96:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001c9a:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	08db      	lsrs	r3, r3, #3
 8001ca0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001ca4:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001ca6:	68bb      	ldr	r3, [r7, #8]
 8001ca8:	015a      	lsls	r2, r3, #5
 8001caa:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8001cae:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8001cb0:	687a      	ldr	r2, [r7, #4]
 8001cb2:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001cb4:	498d      	ldr	r1, [pc, #564]	; (8001eec <main+0x2dc>)
 8001cb6:	4313      	orrs	r3, r2
 8001cb8:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	1e5a      	subs	r2, r3, #1
 8001cc0:	607a      	str	r2, [r7, #4]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d1ef      	bne.n	8001ca6 <main+0x96>
    } while(sets-- != 0U);
 8001cc6:	68bb      	ldr	r3, [r7, #8]
 8001cc8:	1e5a      	subs	r2, r3, #1
 8001cca:	60ba      	str	r2, [r7, #8]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d1e5      	bne.n	8001c9c <main+0x8c>
  __ASM volatile ("dsb 0xF":::"memory");
 8001cd0:	f3bf 8f4f 	dsb	sy
}
 8001cd4:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8001cd6:	4b85      	ldr	r3, [pc, #532]	; (8001eec <main+0x2dc>)
 8001cd8:	695b      	ldr	r3, [r3, #20]
 8001cda:	4a84      	ldr	r2, [pc, #528]	; (8001eec <main+0x2dc>)
 8001cdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ce0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001ce2:	f3bf 8f4f 	dsb	sy
}
 8001ce6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001ce8:	f3bf 8f6f 	isb	sy
}
 8001cec:	e000      	b.n	8001cf0 <main+0xe0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8001cee:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001cf0:	f001 fe9a 	bl	8003a28 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001cf4:	f000 f958 	bl	8001fa8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001cf8:	f000 fe04 	bl	8002904 <MX_GPIO_Init>
  MX_LPTIM1_Init();
 8001cfc:	f000 fbf8 	bl	80024f0 <MX_LPTIM1_Init>
  MX_DAC1_Init();
 8001d00:	f000 fa72 	bl	80021e8 <MX_DAC1_Init>
  MX_USART3_UART_Init();
 8001d04:	f000 fdb0 	bl	8002868 <MX_USART3_UART_Init>
  MX_TIM3_Init();
 8001d08:	f000 fcc2 	bl	8002690 <MX_TIM3_Init>
  MX_TIM1_Init();
 8001d0c:	f000 fc1e 	bl	800254c <MX_TIM1_Init>
  MX_HRTIM_Init();
 8001d10:	f000 fa9c 	bl	800224c <MX_HRTIM_Init>
  MX_ADC3_Init();
 8001d14:	f000 fa06 	bl	8002124 <MX_ADC3_Init>
  MX_LWIP_Init();
 8001d18:	f00c fe88 	bl	800ea2c <MX_LWIP_Init>
  MX_TIM2_Init();
 8001d1c:	f000 fc6a 	bl	80025f4 <MX_TIM2_Init>
  MX_TIM5_Init();
 8001d20:	f000 fd54 	bl	80027cc <MX_TIM5_Init>
  MX_TIM4_Init();
 8001d24:	f000 fd02 	bl	800272c <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  printf("\033c"); //clears screen
 8001d28:	4871      	ldr	r0, [pc, #452]	; (8001ef0 <main+0x2e0>)
 8001d2a:	f017 fda9 	bl	8019880 <iprintf>
  printf("Atomic Clock - Source __TIMESTAMP__: %s\r\n", __TIMESTAMP__);
 8001d2e:	4971      	ldr	r1, [pc, #452]	; (8001ef4 <main+0x2e4>)
 8001d30:	4871      	ldr	r0, [pc, #452]	; (8001ef8 <main+0x2e8>)
 8001d32:	f017 fda5 	bl	8019880 <iprintf>
		}
		#ifdef MW_VERBOSE
			printf("MW power setting (LO2GAIN): 0x%x \r\n", MW_power);
		#endif	//MW_VERBOSE
	#else //SYNTH_ENABLE
		printf("WARNING - MW Synthesiser is disabled\r\n");
 8001d36:	4871      	ldr	r0, [pc, #452]	; (8001efc <main+0x2ec>)
 8001d38:	f017 fe08 	bl	801994c <puts>
	#endif //SYNTH_ENABLE

	/* Start a low power timer to flash an LED approximately every second */
	if (HAL_LPTIM_Counter_Start_IT(&hlptim1, 1024) != HAL_OK) {
 8001d3c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001d40:	486f      	ldr	r0, [pc, #444]	; (8001f00 <main+0x2f0>)
 8001d42:	f007 f8fb 	bl	8008f3c <HAL_LPTIM_Counter_Start_IT>
 8001d46:	4603      	mov	r3, r0
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d004      	beq.n	8001d56 <main+0x146>
		printf("Failed to start slow flashing LED!\r\n");
 8001d4c:	486d      	ldr	r0, [pc, #436]	; (8001f04 <main+0x2f4>)
 8001d4e:	f017 fdfd 	bl	801994c <puts>
		Error_Handler();
 8001d52:	f000 ffb1 	bl	8002cb8 <Error_Handler>
	}

	/* Start the DAC and zero its output */
	if (HAL_DAC_Start(&hdac1, DAC_CHANNEL_1) != HAL_OK) {
 8001d56:	2100      	movs	r1, #0
 8001d58:	486b      	ldr	r0, [pc, #428]	; (8001f08 <main+0x2f8>)
 8001d5a:	f003 fe65 	bl	8005a28 <HAL_DAC_Start>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d004      	beq.n	8001d6e <main+0x15e>
		printf("Failure to initialise DAC \r\n");
 8001d64:	4869      	ldr	r0, [pc, #420]	; (8001f0c <main+0x2fc>)
 8001d66:	f017 fdf1 	bl	801994c <puts>
		Error_Handler();
 8001d6a:	f000 ffa5 	bl	8002cb8 <Error_Handler>
	}
	printf("Setting DAC output to 1.00V \r\n");
 8001d6e:	4868      	ldr	r0, [pc, #416]	; (8001f10 <main+0x300>)
 8001d70:	f017 fdec 	bl	801994c <puts>
	if(HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 1241) != HAL_OK){
 8001d74:	f240 43d9 	movw	r3, #1241	; 0x4d9
 8001d78:	2200      	movs	r2, #0
 8001d7a:	2100      	movs	r1, #0
 8001d7c:	4862      	ldr	r0, [pc, #392]	; (8001f08 <main+0x2f8>)
 8001d7e:	f003 fea5 	bl	8005acc <HAL_DAC_SetValue>
 8001d82:	4603      	mov	r3, r0
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d004      	beq.n	8001d92 <main+0x182>
			printf("DAC setup failed!\r\n");
 8001d88:	4862      	ldr	r0, [pc, #392]	; (8001f14 <main+0x304>)
 8001d8a:	f017 fddf 	bl	801994c <puts>
		Error_Handler();
 8001d8e:	f000 ff93 	bl	8002cb8 <Error_Handler>
	}

	HAL_GPIO_WritePin(LASER_TUNING_GPIO_Port, LASER_TUNING_Pin, GPIO_PIN_SET); // Laser_tuning output high
 8001d92:	2201      	movs	r2, #1
 8001d94:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d98:	485f      	ldr	r0, [pc, #380]	; (8001f18 <main+0x308>)
 8001d9a:	f005 fcc3 	bl	8007724 <HAL_GPIO_WritePin>

	/* Fire up the ADC
	 * external trigger, single conversion selected in ioc file
	 * calibrate ADC for better accuracy and start it w/ interrupt
	 */
	if(HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED) != HAL_OK){
 8001d9e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8001da2:	2100      	movs	r1, #0
 8001da4:	485d      	ldr	r0, [pc, #372]	; (8001f1c <main+0x30c>)
 8001da6:	f003 fbfb 	bl	80055a0 <HAL_ADCEx_Calibration_Start>
 8001daa:	4603      	mov	r3, r0
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d004      	beq.n	8001dba <main+0x1aa>
		printf("ADC calibration failure \r\n");
 8001db0:	485b      	ldr	r0, [pc, #364]	; (8001f20 <main+0x310>)
 8001db2:	f017 fdcb 	bl	801994c <puts>
		Error_Handler();
 8001db6:	f000 ff7f 	bl	8002cb8 <Error_Handler>
	}
	//Start the ADC with interrupts enabled
	if(HAL_ADC_Start_IT(&hadc3) != HAL_OK){
 8001dba:	4858      	ldr	r0, [pc, #352]	; (8001f1c <main+0x30c>)
 8001dbc:	f002 fade 	bl	800437c <HAL_ADC_Start_IT>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d004      	beq.n	8001dd0 <main+0x1c0>
		printf("Failed to start ADC with interrupt capability \r\n");
 8001dc6:	4857      	ldr	r0, [pc, #348]	; (8001f24 <main+0x314>)
 8001dc8:	f017 fdc0 	bl	801994c <puts>
	                Error_Handler();
 8001dcc:	f000 ff74 	bl	8002cb8 <Error_Handler>
	}
	printf("ADC calibrated successfully and interrupt callback enabled \r\n");
 8001dd0:	4855      	ldr	r0, [pc, #340]	; (8001f28 <main+0x318>)
 8001dd2:	f017 fdbb 	bl	801994c <puts>
	/* Calculate the MW sweep settings
	 * Notes:
	 * Measure the period of a POP cycle *AFTER* the ADC has been initialised
	 * Calculate sweep settings after first POP calibration routine
	 */
	start_timer(SWEEP_TIMER); //reset SWEEP_TIMER and start counting
 8001dd6:	4b55      	ldr	r3, [pc, #340]	; (8001f2c <main+0x31c>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f019 fcfc 	bl	801b7d8 <__start_timer_veneer>
	start_POP_calibration(true);
 8001de0:	2001      	movs	r0, #1
 8001de2:	f019 fcf1 	bl	801b7c8 <__start_POP_calibration_veneer>
	//loop here until period of POP cycle has been measured or 3s has elapsed
	//When correctly connected, POP cycle measurement should take 1.3s
	while (!POP_period_us && (check_timer(SWEEP_TIMER) < 3000000)) {
 8001de6:	e001      	b.n	8001dec <main+0x1dc>
		MW_update();
 8001de8:	f019 fcf2 	bl	801b7d0 <__MW_update_veneer>
	while (!POP_period_us && (check_timer(SWEEP_TIMER) < 3000000)) {
 8001dec:	4b50      	ldr	r3, [pc, #320]	; (8001f30 <main+0x320>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d108      	bne.n	8001e06 <main+0x1f6>
 8001df4:	4b4d      	ldr	r3, [pc, #308]	; (8001f2c <main+0x31c>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f019 fcd5 	bl	801b7a8 <__check_timer_veneer>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	4a4c      	ldr	r2, [pc, #304]	; (8001f34 <main+0x324>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d9f0      	bls.n	8001de8 <main+0x1d8>
//		printf("POP_period_us %lu, SWEEP_TIMER value %lu \r\n", POP_period_us, check_timer(SWEEP_TIMER));
	}
//	printf("Finished loop - POP_period_us %lu, SWEEP_TIMER value %lu \r\n", POP_period_us, check_timer(SWEEP_TIMER));
	stop_timer(SWEEP_TIMER); //stop SWEEP_TIMER
 8001e06:	4b49      	ldr	r3, [pc, #292]	; (8001f2c <main+0x31c>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f019 fcc8 	bl	801b7a0 <__stop_timer_veneer>
	if (!POP_period_us) {//if the calibration loop timed out
 8001e10:	4b47      	ldr	r3, [pc, #284]	; (8001f30 <main+0x320>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d102      	bne.n	8001e1e <main+0x20e>
		printf("WARNING - STM32 is not receiving a periodic sample from the FPGA \r\n");
 8001e18:	4847      	ldr	r0, [pc, #284]	; (8001f38 <main+0x328>)
 8001e1a:	f017 fd97 	bl	801994c <puts>
	}

//	initiate_MW_calibration_sweep(POP_period);
//	calc_fixed_time_MW_sweep(3035735122, 1000, 20, ADD_SCOPE_SYNC_TIME); //1.5kHz sweep, 20s re-centred
//	calc_fixed_time_MW_sweep(HYPERFINE + MW_DELTA, 10, 3600, ADD_SCOPE_SYNC_TIME); //10Hz sweep, 1hr
	calc_fixed_time_MW_sweep(HYPERFINE + MW_DELTA, 10000, 50, ADD_SCOPE_SYNC_TIME); //10kHz sweep, 50s
 8001e1e:	ed9f 6b28 	vldr	d6, [pc, #160]	; 8001ec0 <main+0x2b0>
 8001e22:	ed9f 7b29 	vldr	d7, [pc, #164]	; 8001ec8 <main+0x2b8>
 8001e26:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001e2a:	2000      	movs	r0, #0
 8001e2c:	ed9f 2b28 	vldr	d2, [pc, #160]	; 8001ed0 <main+0x2c0>
 8001e30:	ed9f 1b29 	vldr	d1, [pc, #164]	; 8001ed8 <main+0x2c8>
 8001e34:	eeb0 0b47 	vmov.f64	d0, d7
 8001e38:	f019 fcd6 	bl	801b7e8 <__calc_fixed_time_MW_sweep_veneer>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	printf("Entering main while loop\r\n");
 8001e3c:	483f      	ldr	r0, [pc, #252]	; (8001f3c <main+0x32c>)
 8001e3e:	f017 fd85 	bl	801994c <puts>
//		if (pin_status != last_pin_status) {
//			printf("Blue button status: %u \r\n", pin_status);
//			last_pin_status = pin_status;
//		}

		blue_button_status = HAL_GPIO_ReadPin(BLUE_BUTTON_GPIO_Port, BLUE_BUTTON_Pin);
 8001e42:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001e46:	483e      	ldr	r0, [pc, #248]	; (8001f40 <main+0x330>)
 8001e48:	f005 fc54 	bl	80076f4 <HAL_GPIO_ReadPin>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	bf14      	ite	ne
 8001e52:	2301      	movne	r3, #1
 8001e54:	2300      	moveq	r3, #0
 8001e56:	b2da      	uxtb	r2, r3
 8001e58:	4b3a      	ldr	r3, [pc, #232]	; (8001f44 <main+0x334>)
 8001e5a:	701a      	strb	r2, [r3, #0]
		if (blue_button_status) {// If blue button is pressed
 8001e5c:	4b39      	ldr	r3, [pc, #228]	; (8001f44 <main+0x334>)
 8001e5e:	781b      	ldrb	r3, [r3, #0]
 8001e60:	b2db      	uxtb	r3, r3
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	f000 8092 	beq.w	8001f8c <main+0x37c>
			printf("Blue button pressed....\r\n");
 8001e68:	4837      	ldr	r0, [pc, #220]	; (8001f48 <main+0x338>)
 8001e6a:	f017 fd6f 	bl	801994c <puts>
//			//set_MW_power(0x03); //set maximum MW power to improve contrast
//			//MW_frequency_toggle (3035733689, 3035733789); //infinite loop toggling 100Hz on left of DR dip
//			//MW_frequency_toggle (3035733689, 3035733699); //infinite loop toggling 10Hz on left of DR dip
//
			//change the MW power each time the button is pressed, unless it's the first time round this loop
			if (mw_sweep_started) {
 8001e6e:	4b37      	ldr	r3, [pc, #220]	; (8001f4c <main+0x33c>)
 8001e70:	781b      	ldrb	r3, [r3, #0]
 8001e72:	b2db      	uxtb	r3, r3
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d018      	beq.n	8001eaa <main+0x29a>
				++MW_power; //increase MW_power value by 1
 8001e78:	4b35      	ldr	r3, [pc, #212]	; (8001f50 <main+0x340>)
 8001e7a:	781b      	ldrb	r3, [r3, #0]
 8001e7c:	3301      	adds	r3, #1
 8001e7e:	b2da      	uxtb	r2, r3
 8001e80:	4b33      	ldr	r3, [pc, #204]	; (8001f50 <main+0x340>)
 8001e82:	701a      	strb	r2, [r3, #0]
				if (MW_power>3) { //Loop MW_power back round to 0 if above maximum permissible value i.e. 3
 8001e84:	4b32      	ldr	r3, [pc, #200]	; (8001f50 <main+0x340>)
 8001e86:	781b      	ldrb	r3, [r3, #0]
 8001e88:	2b03      	cmp	r3, #3
 8001e8a:	d902      	bls.n	8001e92 <main+0x282>
					MW_power = 0;
 8001e8c:	4b30      	ldr	r3, [pc, #192]	; (8001f50 <main+0x340>)
 8001e8e:	2200      	movs	r2, #0
 8001e90:	701a      	strb	r2, [r3, #0]
				}
				set_MW_power(MW_power);
 8001e92:	4b2f      	ldr	r3, [pc, #188]	; (8001f50 <main+0x340>)
 8001e94:	781b      	ldrb	r3, [r3, #0]
 8001e96:	4618      	mov	r0, r3
 8001e98:	f019 fca2 	bl	801b7e0 <__set_MW_power_veneer>
			#ifdef MW_VERBOSE
				printf("LO2GAIN changed to: 0x%x \r\n", MW_power);
 8001e9c:	4b2c      	ldr	r3, [pc, #176]	; (8001f50 <main+0x340>)
 8001e9e:	781b      	ldrb	r3, [r3, #0]
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	482c      	ldr	r0, [pc, #176]	; (8001f54 <main+0x344>)
 8001ea4:	f017 fcec 	bl	8019880 <iprintf>
 8001ea8:	e06b      	b.n	8001f82 <main+0x372>
			#endif //MW_VERBOSE
			} else {
				printf("Initiating sweep.\r\n");
 8001eaa:	482b      	ldr	r0, [pc, #172]	; (8001f58 <main+0x348>)
 8001eac:	f017 fd4e 	bl	801994c <puts>
				mw_sweep_started = true;
 8001eb0:	4b26      	ldr	r3, [pc, #152]	; (8001f4c <main+0x33c>)
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	701a      	strb	r2, [r3, #0]
				start_continuous_MW_sweep();
 8001eb6:	f019 fc83 	bl	801b7c0 <__start_continuous_MW_sweep_veneer>
			}
			while(blue_button_status) {//remain here polling button until it is released
 8001eba:	e062      	b.n	8001f82 <main+0x372>
 8001ebc:	f3af 8000 	nop.w
 8001ec0:	6d600000 	.word	0x6d600000
 8001ec4:	41e69e35 	.word	0x41e69e35
 8001ec8:	00000000 	.word	0x00000000
 8001ecc:	408f4000 	.word	0x408f4000
 8001ed0:	00000000 	.word	0x00000000
 8001ed4:	40490000 	.word	0x40490000
 8001ed8:	00000000 	.word	0x00000000
 8001edc:	40c38800 	.word	0x40c38800
 8001ee0:	00001568 	.word	0x00001568
 8001ee4:	00000000 	.word	0x00000000
 8001ee8:	08000298 	.word	0x08000298
 8001eec:	e000ed00 	.word	0xe000ed00
 8001ef0:	0801b7f8 	.word	0x0801b7f8
 8001ef4:	0801b7fc 	.word	0x0801b7fc
 8001ef8:	0801b818 	.word	0x0801b818
 8001efc:	0801b844 	.word	0x0801b844
 8001f00:	200003a0 	.word	0x200003a0
 8001f04:	0801b86c 	.word	0x0801b86c
 8001f08:	200002b0 	.word	0x200002b0
 8001f0c:	0801b890 	.word	0x0801b890
 8001f10:	0801b8ac 	.word	0x0801b8ac
 8001f14:	0801b8cc 	.word	0x0801b8cc
 8001f18:	58020400 	.word	0x58020400
 8001f1c:	2000024c 	.word	0x2000024c
 8001f20:	0801b8e0 	.word	0x0801b8e0
 8001f24:	0801b8fc 	.word	0x0801b8fc
 8001f28:	0801b92c 	.word	0x0801b92c
 8001f2c:	20000020 	.word	0x20000020
 8001f30:	200005ec 	.word	0x200005ec
 8001f34:	002dc6bf 	.word	0x002dc6bf
 8001f38:	0801b96c 	.word	0x0801b96c
 8001f3c:	0801b9b0 	.word	0x0801b9b0
 8001f40:	58020800 	.word	0x58020800
 8001f44:	200005e9 	.word	0x200005e9
 8001f48:	0801b9cc 	.word	0x0801b9cc
 8001f4c:	200005e8 	.word	0x200005e8
 8001f50:	20000000 	.word	0x20000000
 8001f54:	0801b9e8 	.word	0x0801b9e8
 8001f58:	0801ba04 	.word	0x0801ba04
				timer_delay(SLOW_TIMER, 100); //10ms delay
 8001f5c:	4b0e      	ldr	r3, [pc, #56]	; (8001f98 <main+0x388>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	2164      	movs	r1, #100	; 0x64
 8001f62:	4618      	mov	r0, r3
 8001f64:	f019 fc24 	bl	801b7b0 <__timer_delay_veneer>
				blue_button_status = HAL_GPIO_ReadPin(BLUE_BUTTON_GPIO_Port, BLUE_BUTTON_Pin);
 8001f68:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001f6c:	480b      	ldr	r0, [pc, #44]	; (8001f9c <main+0x38c>)
 8001f6e:	f005 fbc1 	bl	80076f4 <HAL_GPIO_ReadPin>
 8001f72:	4603      	mov	r3, r0
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	bf14      	ite	ne
 8001f78:	2301      	movne	r3, #1
 8001f7a:	2300      	moveq	r3, #0
 8001f7c:	b2da      	uxtb	r2, r3
 8001f7e:	4b08      	ldr	r3, [pc, #32]	; (8001fa0 <main+0x390>)
 8001f80:	701a      	strb	r2, [r3, #0]
			while(blue_button_status) {//remain here polling button until it is released
 8001f82:	4b07      	ldr	r3, [pc, #28]	; (8001fa0 <main+0x390>)
 8001f84:	781b      	ldrb	r3, [r3, #0]
 8001f86:	b2db      	uxtb	r3, r3
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d1e7      	bne.n	8001f5c <main+0x34c>
			}
		}

		if (mw_sweep_started) {//won't execute until the first time the blue button is pressed
 8001f8c:	4b05      	ldr	r3, [pc, #20]	; (8001fa4 <main+0x394>)
 8001f8e:	781b      	ldrb	r3, [r3, #0]
//			run_sweep();
//			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET); //turn off red LED
			//printf("Sweep complete.\r\n");
			//printf("LO2GAIN: 0x%x \r\n", MW_power);
		}
		MW_update();
 8001f90:	f019 fc1e 	bl	801b7d0 <__MW_update_veneer>
		blue_button_status = HAL_GPIO_ReadPin(BLUE_BUTTON_GPIO_Port, BLUE_BUTTON_Pin);
 8001f94:	e755      	b.n	8001e42 <main+0x232>
 8001f96:	bf00      	nop
 8001f98:	20000018 	.word	0x20000018
 8001f9c:	58020800 	.word	0x58020800
 8001fa0:	200005e9 	.word	0x200005e9
 8001fa4:	200005e8 	.word	0x200005e8

08001fa8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b0a4      	sub	sp, #144	; 0x90
 8001fac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001fae:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001fb2:	224c      	movs	r2, #76	; 0x4c
 8001fb4:	2100      	movs	r1, #0
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f017 fdb8 	bl	8019b2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001fbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fc0:	2220      	movs	r2, #32
 8001fc2:	2100      	movs	r1, #0
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f017 fdb1 	bl	8019b2c <memset>
  RCC_CRSInitTypeDef RCC_CRSInitStruct = {0};
 8001fca:	f107 030c 	add.w	r3, r7, #12
 8001fce:	2200      	movs	r2, #0
 8001fd0:	601a      	str	r2, [r3, #0]
 8001fd2:	605a      	str	r2, [r3, #4]
 8001fd4:	609a      	str	r2, [r3, #8]
 8001fd6:	60da      	str	r2, [r3, #12]
 8001fd8:	611a      	str	r2, [r3, #16]
 8001fda:	615a      	str	r2, [r3, #20]

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001fdc:	2002      	movs	r0, #2
 8001fde:	f007 fb0b 	bl	80095f8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	60bb      	str	r3, [r7, #8]
 8001fe6:	4b4c      	ldr	r3, [pc, #304]	; (8002118 <SystemClock_Config+0x170>)
 8001fe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fea:	4a4b      	ldr	r2, [pc, #300]	; (8002118 <SystemClock_Config+0x170>)
 8001fec:	f023 0301 	bic.w	r3, r3, #1
 8001ff0:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001ff2:	4b49      	ldr	r3, [pc, #292]	; (8002118 <SystemClock_Config+0x170>)
 8001ff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ff6:	f003 0301 	and.w	r3, r3, #1
 8001ffa:	60bb      	str	r3, [r7, #8]
 8001ffc:	4b47      	ldr	r3, [pc, #284]	; (800211c <SystemClock_Config+0x174>)
 8001ffe:	699b      	ldr	r3, [r3, #24]
 8002000:	4a46      	ldr	r2, [pc, #280]	; (800211c <SystemClock_Config+0x174>)
 8002002:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002006:	6193      	str	r3, [r2, #24]
 8002008:	4b44      	ldr	r3, [pc, #272]	; (800211c <SystemClock_Config+0x174>)
 800200a:	699b      	ldr	r3, [r3, #24]
 800200c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002010:	60bb      	str	r3, [r7, #8]
 8002012:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8002014:	bf00      	nop
 8002016:	4b41      	ldr	r3, [pc, #260]	; (800211c <SystemClock_Config+0x174>)
 8002018:	699b      	ldr	r3, [r3, #24]
 800201a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800201e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002022:	d1f8      	bne.n	8002016 <SystemClock_Config+0x6e>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002024:	f007 fad8 	bl	80095d8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8002028:	f001 fdb4 	bl	8003b94 <HAL_GetREVID>
 800202c:	4b3c      	ldr	r3, [pc, #240]	; (8002120 <SystemClock_Config+0x178>)
 800202e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002030:	4a3b      	ldr	r2, [pc, #236]	; (8002120 <SystemClock_Config+0x178>)
 8002032:	f023 0318 	bic.w	r3, r3, #24
 8002036:	6713      	str	r3, [r2, #112]	; 0x70

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE
 8002038:	2325      	movs	r3, #37	; 0x25
 800203a:	647b      	str	r3, [r7, #68]	; 0x44
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800203c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8002040:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002042:	2301      	movs	r3, #1
 8002044:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8002046:	2301      	movs	r3, #1
 8002048:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800204a:	2302      	movs	r3, #2
 800204c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800204e:	2302      	movs	r3, #2
 8002050:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8002052:	2301      	movs	r3, #1
 8002054:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLN = 96;
 8002056:	2360      	movs	r3, #96	; 0x60
 8002058:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLP = 2;
 800205a:	2302      	movs	r3, #2
 800205c:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800205e:	2304      	movs	r3, #4
 8002060:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002062:	2302      	movs	r3, #2
 8002064:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8002068:	230c      	movs	r3, #12
 800206a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800206e:	2300      	movs	r3, #0
 8002070:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8002074:	2300      	movs	r3, #0
 8002076:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800207a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800207e:	4618      	mov	r0, r3
 8002080:	f007 faf4 	bl	800966c <HAL_RCC_OscConfig>
 8002084:	4603      	mov	r3, r0
 8002086:	2b00      	cmp	r3, #0
 8002088:	d001      	beq.n	800208e <SystemClock_Config+0xe6>
  {
    Error_Handler();
 800208a:	f000 fe15 	bl	8002cb8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800208e:	233f      	movs	r3, #63	; 0x3f
 8002090:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002092:	2303      	movs	r3, #3
 8002094:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8002096:	2300      	movs	r3, #0
 8002098:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV4;
 800209a:	2309      	movs	r3, #9
 800209c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800209e:	2300      	movs	r3, #0
 80020a0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80020a2:	2300      	movs	r3, #0
 80020a4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV16;
 80020a6:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80020aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80020ac:	2300      	movs	r3, #0
 80020ae:	643b      	str	r3, [r7, #64]	; 0x40

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80020b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020b4:	2101      	movs	r1, #1
 80020b6:	4618      	mov	r0, r3
 80020b8:	f007 ff32 	bl	8009f20 <HAL_RCC_ClockConfig>
 80020bc:	4603      	mov	r3, r0
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d001      	beq.n	80020c6 <SystemClock_Config+0x11e>
  {
    Error_Handler();
 80020c2:	f000 fdf9 	bl	8002cb8 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 80020c6:	f008 f8e1 	bl	800a28c <HAL_RCC_EnableCSS>

  /** Enable the SYSCFG APB clock
  */
  __HAL_RCC_CRS_CLK_ENABLE();
 80020ca:	4b15      	ldr	r3, [pc, #84]	; (8002120 <SystemClock_Config+0x178>)
 80020cc:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80020d0:	4a13      	ldr	r2, [pc, #76]	; (8002120 <SystemClock_Config+0x178>)
 80020d2:	f043 0302 	orr.w	r3, r3, #2
 80020d6:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 80020da:	4b11      	ldr	r3, [pc, #68]	; (8002120 <SystemClock_Config+0x178>)
 80020dc:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80020e0:	f003 0302 	and.w	r3, r3, #2
 80020e4:	607b      	str	r3, [r7, #4]
 80020e6:	687b      	ldr	r3, [r7, #4]

  /** Configures CRS
  */
  RCC_CRSInitStruct.Prescaler = RCC_CRS_SYNC_DIV1;
 80020e8:	2300      	movs	r3, #0
 80020ea:	60fb      	str	r3, [r7, #12]
  RCC_CRSInitStruct.Source = RCC_CRS_SYNC_SOURCE_LSE;
 80020ec:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80020f0:	613b      	str	r3, [r7, #16]
  RCC_CRSInitStruct.Polarity = RCC_CRS_SYNC_POLARITY_RISING;
 80020f2:	2300      	movs	r3, #0
 80020f4:	617b      	str	r3, [r7, #20]
  RCC_CRSInitStruct.ReloadValue = __HAL_RCC_CRS_RELOADVALUE_CALCULATE(48000000,32768);
 80020f6:	f240 53b7 	movw	r3, #1463	; 0x5b7
 80020fa:	61bb      	str	r3, [r7, #24]
  RCC_CRSInitStruct.ErrorLimitValue = 34;
 80020fc:	2322      	movs	r3, #34	; 0x22
 80020fe:	61fb      	str	r3, [r7, #28]
  RCC_CRSInitStruct.HSI48CalibrationValue = 32;
 8002100:	2320      	movs	r3, #32
 8002102:	623b      	str	r3, [r7, #32]

  HAL_RCCEx_CRSConfig(&RCC_CRSInitStruct);
 8002104:	f107 030c 	add.w	r3, r7, #12
 8002108:	4618      	mov	r0, r3
 800210a:	f00a fe5b 	bl	800cdc4 <HAL_RCCEx_CRSConfig>
}
 800210e:	bf00      	nop
 8002110:	3790      	adds	r7, #144	; 0x90
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}
 8002116:	bf00      	nop
 8002118:	58000400 	.word	0x58000400
 800211c:	58024800 	.word	0x58024800
 8002120:	58024400 	.word	0x58024400

08002124 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b088      	sub	sp, #32
 8002128:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800212a:	1d3b      	adds	r3, r7, #4
 800212c:	2200      	movs	r2, #0
 800212e:	601a      	str	r2, [r3, #0]
 8002130:	605a      	str	r2, [r3, #4]
 8002132:	609a      	str	r2, [r3, #8]
 8002134:	60da      	str	r2, [r3, #12]
 8002136:	611a      	str	r2, [r3, #16]
 8002138:	615a      	str	r2, [r3, #20]
 800213a:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 800213c:	4b28      	ldr	r3, [pc, #160]	; (80021e0 <MX_ADC3_Init+0xbc>)
 800213e:	4a29      	ldr	r2, [pc, #164]	; (80021e4 <MX_ADC3_Init+0xc0>)
 8002140:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 8002142:	4b27      	ldr	r3, [pc, #156]	; (80021e0 <MX_ADC3_Init+0xbc>)
 8002144:	2200      	movs	r2, #0
 8002146:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002148:	4b25      	ldr	r3, [pc, #148]	; (80021e0 <MX_ADC3_Init+0xbc>)
 800214a:	2200      	movs	r2, #0
 800214c:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800214e:	4b24      	ldr	r3, [pc, #144]	; (80021e0 <MX_ADC3_Init+0xbc>)
 8002150:	2204      	movs	r2, #4
 8002152:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8002154:	4b22      	ldr	r3, [pc, #136]	; (80021e0 <MX_ADC3_Init+0xbc>)
 8002156:	2200      	movs	r2, #0
 8002158:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 800215a:	4b21      	ldr	r3, [pc, #132]	; (80021e0 <MX_ADC3_Init+0xbc>)
 800215c:	2200      	movs	r2, #0
 800215e:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 8002160:	4b1f      	ldr	r3, [pc, #124]	; (80021e0 <MX_ADC3_Init+0xbc>)
 8002162:	2201      	movs	r2, #1
 8002164:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8002166:	4b1e      	ldr	r3, [pc, #120]	; (80021e0 <MX_ADC3_Init+0xbc>)
 8002168:	2200      	movs	r2, #0
 800216a:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIG_EXT_IT11;
 800216c:	4b1c      	ldr	r3, [pc, #112]	; (80021e0 <MX_ADC3_Init+0xbc>)
 800216e:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8002172:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8002174:	4b1a      	ldr	r3, [pc, #104]	; (80021e0 <MX_ADC3_Init+0xbc>)
 8002176:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800217a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 800217c:	4b18      	ldr	r3, [pc, #96]	; (80021e0 <MX_ADC3_Init+0xbc>)
 800217e:	2200      	movs	r2, #0
 8002180:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002182:	4b17      	ldr	r3, [pc, #92]	; (80021e0 <MX_ADC3_Init+0xbc>)
 8002184:	2200      	movs	r2, #0
 8002186:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8002188:	4b15      	ldr	r3, [pc, #84]	; (80021e0 <MX_ADC3_Init+0xbc>)
 800218a:	2200      	movs	r2, #0
 800218c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 800218e:	4b14      	ldr	r3, [pc, #80]	; (80021e0 <MX_ADC3_Init+0xbc>)
 8002190:	2200      	movs	r2, #0
 8002192:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8002196:	4812      	ldr	r0, [pc, #72]	; (80021e0 <MX_ADC3_Init+0xbc>)
 8002198:	f001 ff4e 	bl	8004038 <HAL_ADC_Init>
 800219c:	4603      	mov	r3, r0
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d001      	beq.n	80021a6 <MX_ADC3_Init+0x82>
  {
    Error_Handler();
 80021a2:	f000 fd89 	bl	8002cb8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80021a6:	2301      	movs	r3, #1
 80021a8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80021aa:	2306      	movs	r3, #6
 80021ac:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80021ae:	2300      	movs	r3, #0
 80021b0:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80021b2:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80021b6:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80021b8:	2304      	movs	r3, #4
 80021ba:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80021bc:	2300      	movs	r3, #0
 80021be:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 80021c0:	2300      	movs	r3, #0
 80021c2:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80021c4:	1d3b      	adds	r3, r7, #4
 80021c6:	4619      	mov	r1, r3
 80021c8:	4805      	ldr	r0, [pc, #20]	; (80021e0 <MX_ADC3_Init+0xbc>)
 80021ca:	f002 fc71 	bl	8004ab0 <HAL_ADC_ConfigChannel>
 80021ce:	4603      	mov	r3, r0
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d001      	beq.n	80021d8 <MX_ADC3_Init+0xb4>
  {
    Error_Handler();
 80021d4:	f000 fd70 	bl	8002cb8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80021d8:	bf00      	nop
 80021da:	3720      	adds	r7, #32
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd80      	pop	{r7, pc}
 80021e0:	2000024c 	.word	0x2000024c
 80021e4:	58026000 	.word	0x58026000

080021e8 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b08a      	sub	sp, #40	; 0x28
 80021ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80021ee:	1d3b      	adds	r3, r7, #4
 80021f0:	2224      	movs	r2, #36	; 0x24
 80021f2:	2100      	movs	r1, #0
 80021f4:	4618      	mov	r0, r3
 80021f6:	f017 fc99 	bl	8019b2c <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80021fa:	4b12      	ldr	r3, [pc, #72]	; (8002244 <MX_DAC1_Init+0x5c>)
 80021fc:	4a12      	ldr	r2, [pc, #72]	; (8002248 <MX_DAC1_Init+0x60>)
 80021fe:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8002200:	4810      	ldr	r0, [pc, #64]	; (8002244 <MX_DAC1_Init+0x5c>)
 8002202:	f003 fbef 	bl	80059e4 <HAL_DAC_Init>
 8002206:	4603      	mov	r3, r0
 8002208:	2b00      	cmp	r3, #0
 800220a:	d001      	beq.n	8002210 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 800220c:	f000 fd54 	bl	8002cb8 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8002210:	2300      	movs	r3, #0
 8002212:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8002214:	2300      	movs	r3, #0
 8002216:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8002218:	2300      	movs	r3, #0
 800221a:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 800221c:	2301      	movs	r3, #1
 800221e:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8002220:	2300      	movs	r3, #0
 8002222:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8002224:	1d3b      	adds	r3, r7, #4
 8002226:	2200      	movs	r2, #0
 8002228:	4619      	mov	r1, r3
 800222a:	4806      	ldr	r0, [pc, #24]	; (8002244 <MX_DAC1_Init+0x5c>)
 800222c:	f003 fc74 	bl	8005b18 <HAL_DAC_ConfigChannel>
 8002230:	4603      	mov	r3, r0
 8002232:	2b00      	cmp	r3, #0
 8002234:	d001      	beq.n	800223a <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8002236:	f000 fd3f 	bl	8002cb8 <Error_Handler>
//    Error_Handler();
//  }

  /* USER CODE END DAC1_Init 2 */

}
 800223a:	bf00      	nop
 800223c:	3728      	adds	r7, #40	; 0x28
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	200002b0 	.word	0x200002b0
 8002248:	40007400 	.word	0x40007400

0800224c <MX_HRTIM_Init>:
  * @brief HRTIM Initialization Function
  * @param None
  * @retval None
  */
static void MX_HRTIM_Init(void)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b0a4      	sub	sp, #144	; 0x90
 8002250:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN HRTIM_Init 0 */

  /* USER CODE END HRTIM_Init 0 */

  HRTIM_TimeBaseCfgTypeDef pTimeBaseCfg = {0};
 8002252:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002256:	2200      	movs	r2, #0
 8002258:	601a      	str	r2, [r3, #0]
 800225a:	605a      	str	r2, [r3, #4]
 800225c:	609a      	str	r2, [r3, #8]
 800225e:	60da      	str	r2, [r3, #12]
  HRTIM_TimerCfgTypeDef pTimerCfg = {0};
 8002260:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002264:	2254      	movs	r2, #84	; 0x54
 8002266:	2100      	movs	r1, #0
 8002268:	4618      	mov	r0, r3
 800226a:	f017 fc5f 	bl	8019b2c <memset>
  HRTIM_CompareCfgTypeDef pCompareCfg = {0};
 800226e:	f107 0320 	add.w	r3, r7, #32
 8002272:	2200      	movs	r2, #0
 8002274:	601a      	str	r2, [r3, #0]
 8002276:	605a      	str	r2, [r3, #4]
 8002278:	609a      	str	r2, [r3, #8]
  HRTIM_OutputCfgTypeDef pOutputCfg = {0};
 800227a:	463b      	mov	r3, r7
 800227c:	2220      	movs	r2, #32
 800227e:	2100      	movs	r1, #0
 8002280:	4618      	mov	r0, r3
 8002282:	f017 fc53 	bl	8019b2c <memset>

  /* USER CODE BEGIN HRTIM_Init 1 */

  /* USER CODE END HRTIM_Init 1 */
  hhrtim.Instance = HRTIM1;
 8002286:	4b98      	ldr	r3, [pc, #608]	; (80024e8 <MX_HRTIM_Init+0x29c>)
 8002288:	4a98      	ldr	r2, [pc, #608]	; (80024ec <MX_HRTIM_Init+0x2a0>)
 800228a:	601a      	str	r2, [r3, #0]
  hhrtim.Init.HRTIMInterruptResquests = HRTIM_IT_NONE;
 800228c:	4b96      	ldr	r3, [pc, #600]	; (80024e8 <MX_HRTIM_Init+0x29c>)
 800228e:	2200      	movs	r2, #0
 8002290:	605a      	str	r2, [r3, #4]
  hhrtim.Init.SyncOptions = HRTIM_SYNCOPTION_NONE;
 8002292:	4b95      	ldr	r3, [pc, #596]	; (80024e8 <MX_HRTIM_Init+0x29c>)
 8002294:	2200      	movs	r2, #0
 8002296:	609a      	str	r2, [r3, #8]
  if (HAL_HRTIM_Init(&hhrtim) != HAL_OK)
 8002298:	4893      	ldr	r0, [pc, #588]	; (80024e8 <MX_HRTIM_Init+0x29c>)
 800229a:	f005 fa9b 	bl	80077d4 <HAL_HRTIM_Init>
 800229e:	4603      	mov	r3, r0
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d001      	beq.n	80022a8 <MX_HRTIM_Init+0x5c>
  {
    Error_Handler();
 80022a4:	f000 fd08 	bl	8002cb8 <Error_Handler>
  }
  pTimeBaseCfg.Period = PUMP_WIDTH+(2*MICROWAVE_DELAY)+(2*MICROWAVE_WIDTH)+RAMSEY_TIME+PROBE_WIDTH+POP_CYCLE_DELAY;
 80022a8:	f24c 2318 	movw	r3, #49688	; 0xc218
 80022ac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  pTimeBaseCfg.RepetitionCounter = 0x00;
 80022b0:	2300      	movs	r3, #0
 80022b2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  pTimeBaseCfg.PrescalerRatio = HRTIM_PRESCALERRATIO_DIV4;
 80022b6:	2307      	movs	r3, #7
 80022b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  pTimeBaseCfg.Mode = HRTIM_MODE_CONTINUOUS;
 80022bc:	2308      	movs	r3, #8
 80022be:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, &pTimeBaseCfg) != HAL_OK)
 80022c2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80022c6:	461a      	mov	r2, r3
 80022c8:	2100      	movs	r1, #0
 80022ca:	4887      	ldr	r0, [pc, #540]	; (80024e8 <MX_HRTIM_Init+0x29c>)
 80022cc:	f005 fb52 	bl	8007974 <HAL_HRTIM_TimeBaseConfig>
 80022d0:	4603      	mov	r3, r0
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d001      	beq.n	80022da <MX_HRTIM_Init+0x8e>
  {
    Error_Handler();
 80022d6:	f000 fcef 	bl	8002cb8 <Error_Handler>
  }
  pTimerCfg.InterruptRequests = HRTIM_TIM_IT_CMP3|HRTIM_TIM_IT_REP;
 80022da:	2314      	movs	r3, #20
 80022dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  pTimerCfg.DMARequests = HRTIM_TIM_DMA_NONE;
 80022de:	2300      	movs	r3, #0
 80022e0:	633b      	str	r3, [r7, #48]	; 0x30
  pTimerCfg.DMASrcAddress = 0x0000;
 80022e2:	2300      	movs	r3, #0
 80022e4:	637b      	str	r3, [r7, #52]	; 0x34
  pTimerCfg.DMADstAddress = 0x0000;
 80022e6:	2300      	movs	r3, #0
 80022e8:	63bb      	str	r3, [r7, #56]	; 0x38
  pTimerCfg.DMASize = 0x1;
 80022ea:	2301      	movs	r3, #1
 80022ec:	63fb      	str	r3, [r7, #60]	; 0x3c
  pTimerCfg.HalfModeEnable = HRTIM_HALFMODE_DISABLED;
 80022ee:	2300      	movs	r3, #0
 80022f0:	643b      	str	r3, [r7, #64]	; 0x40
  pTimerCfg.StartOnSync = HRTIM_SYNCSTART_DISABLED;
 80022f2:	2300      	movs	r3, #0
 80022f4:	647b      	str	r3, [r7, #68]	; 0x44
  pTimerCfg.ResetOnSync = HRTIM_SYNCRESET_DISABLED;
 80022f6:	2300      	movs	r3, #0
 80022f8:	64bb      	str	r3, [r7, #72]	; 0x48
  pTimerCfg.DACSynchro = HRTIM_DACSYNC_NONE;
 80022fa:	2300      	movs	r3, #0
 80022fc:	64fb      	str	r3, [r7, #76]	; 0x4c
  pTimerCfg.PreloadEnable = HRTIM_PRELOAD_DISABLED;
 80022fe:	2300      	movs	r3, #0
 8002300:	653b      	str	r3, [r7, #80]	; 0x50
  pTimerCfg.UpdateGating = HRTIM_UPDATEGATING_INDEPENDENT;
 8002302:	2300      	movs	r3, #0
 8002304:	657b      	str	r3, [r7, #84]	; 0x54
  pTimerCfg.BurstMode = HRTIM_TIMERBURSTMODE_MAINTAINCLOCK;
 8002306:	2300      	movs	r3, #0
 8002308:	65bb      	str	r3, [r7, #88]	; 0x58
  pTimerCfg.RepetitionUpdate = HRTIM_UPDATEONREPETITION_DISABLED;
 800230a:	2300      	movs	r3, #0
 800230c:	65fb      	str	r3, [r7, #92]	; 0x5c
  pTimerCfg.PushPull = HRTIM_TIMPUSHPULLMODE_DISABLED;
 800230e:	2300      	movs	r3, #0
 8002310:	663b      	str	r3, [r7, #96]	; 0x60
  pTimerCfg.FaultEnable = HRTIM_TIMFAULTENABLE_NONE;
 8002312:	2300      	movs	r3, #0
 8002314:	667b      	str	r3, [r7, #100]	; 0x64
  pTimerCfg.FaultLock = HRTIM_TIMFAULTLOCK_READWRITE;
 8002316:	2300      	movs	r3, #0
 8002318:	66bb      	str	r3, [r7, #104]	; 0x68
  pTimerCfg.DeadTimeInsertion = HRTIM_TIMDEADTIMEINSERTION_DISABLED;
 800231a:	2300      	movs	r3, #0
 800231c:	66fb      	str	r3, [r7, #108]	; 0x6c
  pTimerCfg.DelayedProtectionMode = HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_DISABLED;
 800231e:	2300      	movs	r3, #0
 8002320:	673b      	str	r3, [r7, #112]	; 0x70
  pTimerCfg.UpdateTrigger = HRTIM_TIMUPDATETRIGGER_NONE;
 8002322:	2300      	movs	r3, #0
 8002324:	677b      	str	r3, [r7, #116]	; 0x74
  pTimerCfg.ResetTrigger = HRTIM_TIMRESETTRIGGER_NONE;
 8002326:	2300      	movs	r3, #0
 8002328:	67bb      	str	r3, [r7, #120]	; 0x78
  pTimerCfg.ResetUpdate = HRTIM_TIMUPDATEONRESET_DISABLED;
 800232a:	2300      	movs	r3, #0
 800232c:	67fb      	str	r3, [r7, #124]	; 0x7c
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, &pTimerCfg) != HAL_OK)
 800232e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002332:	461a      	mov	r2, r3
 8002334:	2100      	movs	r1, #0
 8002336:	486c      	ldr	r0, [pc, #432]	; (80024e8 <MX_HRTIM_Init+0x29c>)
 8002338:	f005 fb44 	bl	80079c4 <HAL_HRTIM_WaveformTimerConfig>
 800233c:	4603      	mov	r3, r0
 800233e:	2b00      	cmp	r3, #0
 8002340:	d001      	beq.n	8002346 <MX_HRTIM_Init+0xfa>
  {
    Error_Handler();
 8002342:	f000 fcb9 	bl	8002cb8 <Error_Handler>
  }
  pTimerCfg.InterruptRequests = HRTIM_TIM_IT_CMP2|HRTIM_TIM_IT_CMP3;
 8002346:	2306      	movs	r3, #6
 8002348:	62fb      	str	r3, [r7, #44]	; 0x2c
  pTimerCfg.DelayedProtectionMode = HRTIM_TIMER_D_E_DELAYEDPROTECTION_DISABLED;
 800234a:	2300      	movs	r3, #0
 800234c:	673b      	str	r3, [r7, #112]	; 0x70
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_E, &pTimerCfg) != HAL_OK)
 800234e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002352:	461a      	mov	r2, r3
 8002354:	2104      	movs	r1, #4
 8002356:	4864      	ldr	r0, [pc, #400]	; (80024e8 <MX_HRTIM_Init+0x29c>)
 8002358:	f005 fb34 	bl	80079c4 <HAL_HRTIM_WaveformTimerConfig>
 800235c:	4603      	mov	r3, r0
 800235e:	2b00      	cmp	r3, #0
 8002360:	d001      	beq.n	8002366 <MX_HRTIM_Init+0x11a>
  {
    Error_Handler();
 8002362:	f000 fca9 	bl	8002cb8 <Error_Handler>
  }
  pCompareCfg.CompareValue = PUMP_WIDTH;
 8002366:	f240 631b 	movw	r3, #1563	; 0x61b
 800236a:	623b      	str	r3, [r7, #32]
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_1, &pCompareCfg) != HAL_OK)
 800236c:	f107 0320 	add.w	r3, r7, #32
 8002370:	2201      	movs	r2, #1
 8002372:	2100      	movs	r1, #0
 8002374:	485c      	ldr	r0, [pc, #368]	; (80024e8 <MX_HRTIM_Init+0x29c>)
 8002376:	f005 fb97 	bl	8007aa8 <HAL_HRTIM_WaveformCompareConfig>
 800237a:	4603      	mov	r3, r0
 800237c:	2b00      	cmp	r3, #0
 800237e:	d001      	beq.n	8002384 <MX_HRTIM_Init+0x138>
  {
    Error_Handler();
 8002380:	f000 fc9a 	bl	8002cb8 <Error_Handler>
  }
  pCompareCfg.CompareValue = PUMP_WIDTH+(2*MICROWAVE_DELAY)+(2*MICROWAVE_WIDTH)+RAMSEY_TIME;
 8002384:	f244 5395 	movw	r3, #17813	; 0x4595
 8002388:	623b      	str	r3, [r7, #32]
  pCompareCfg.AutoDelayedMode = HRTIM_AUTODELAYEDMODE_REGULAR;
 800238a:	2300      	movs	r3, #0
 800238c:	627b      	str	r3, [r7, #36]	; 0x24
  pCompareCfg.AutoDelayedTimeout = 0x0000;
 800238e:	2300      	movs	r3, #0
 8002390:	62bb      	str	r3, [r7, #40]	; 0x28

  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_2, &pCompareCfg) != HAL_OK)
 8002392:	f107 0320 	add.w	r3, r7, #32
 8002396:	2202      	movs	r2, #2
 8002398:	2100      	movs	r1, #0
 800239a:	4853      	ldr	r0, [pc, #332]	; (80024e8 <MX_HRTIM_Init+0x29c>)
 800239c:	f005 fb84 	bl	8007aa8 <HAL_HRTIM_WaveformCompareConfig>
 80023a0:	4603      	mov	r3, r0
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d001      	beq.n	80023aa <MX_HRTIM_Init+0x15e>
  {
    Error_Handler();
 80023a6:	f000 fc87 	bl	8002cb8 <Error_Handler>
  }
  pCompareCfg.CompareValue = PUMP_WIDTH+MICROWAVE_DELAY+MICROWAVE_WIDTH;
 80023aa:	f640 536e 	movw	r3, #3438	; 0xd6e
 80023ae:	623b      	str	r3, [r7, #32]

  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_E, HRTIM_COMPAREUNIT_2, &pCompareCfg) != HAL_OK)
 80023b0:	f107 0320 	add.w	r3, r7, #32
 80023b4:	2202      	movs	r2, #2
 80023b6:	2104      	movs	r1, #4
 80023b8:	484b      	ldr	r0, [pc, #300]	; (80024e8 <MX_HRTIM_Init+0x29c>)
 80023ba:	f005 fb75 	bl	8007aa8 <HAL_HRTIM_WaveformCompareConfig>
 80023be:	4603      	mov	r3, r0
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d001      	beq.n	80023c8 <MX_HRTIM_Init+0x17c>
  {
    Error_Handler();
 80023c4:	f000 fc78 	bl	8002cb8 <Error_Handler>
  }
  pCompareCfg.CompareValue = PUMP_WIDTH+(2*MICROWAVE_DELAY)+(2*MICROWAVE_WIDTH)+RAMSEY_TIME+PROBE_WIDTH;
 80023c8:	f644 0306 	movw	r3, #18438	; 0x4806
 80023cc:	623b      	str	r3, [r7, #32]
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_3, &pCompareCfg) != HAL_OK)
 80023ce:	f107 0320 	add.w	r3, r7, #32
 80023d2:	2204      	movs	r2, #4
 80023d4:	2100      	movs	r1, #0
 80023d6:	4844      	ldr	r0, [pc, #272]	; (80024e8 <MX_HRTIM_Init+0x29c>)
 80023d8:	f005 fb66 	bl	8007aa8 <HAL_HRTIM_WaveformCompareConfig>
 80023dc:	4603      	mov	r3, r0
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d001      	beq.n	80023e6 <MX_HRTIM_Init+0x19a>
  {
    Error_Handler();
 80023e2:	f000 fc69 	bl	8002cb8 <Error_Handler>
  }
  pCompareCfg.CompareValue = PUMP_WIDTH+MICROWAVE_DELAY+MICROWAVE_WIDTH+RAMSEY_TIME+MICROWAVE_WIDTH;
 80023e6:	f244 435d 	movw	r3, #17501	; 0x445d
 80023ea:	623b      	str	r3, [r7, #32]

  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_E, HRTIM_COMPAREUNIT_4, &pCompareCfg) != HAL_OK)
 80023ec:	f107 0320 	add.w	r3, r7, #32
 80023f0:	2208      	movs	r2, #8
 80023f2:	2104      	movs	r1, #4
 80023f4:	483c      	ldr	r0, [pc, #240]	; (80024e8 <MX_HRTIM_Init+0x29c>)
 80023f6:	f005 fb57 	bl	8007aa8 <HAL_HRTIM_WaveformCompareConfig>
 80023fa:	4603      	mov	r3, r0
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d001      	beq.n	8002404 <MX_HRTIM_Init+0x1b8>
  {
    Error_Handler();
 8002400:	f000 fc5a 	bl	8002cb8 <Error_Handler>
  }
  pOutputCfg.Polarity = HRTIM_OUTPUTPOLARITY_LOW;
 8002404:	2302      	movs	r3, #2
 8002406:	603b      	str	r3, [r7, #0]
  pOutputCfg.SetSource = HRTIM_OUTPUTSET_TIMCMP1|HRTIM_OUTPUTSET_TIMCMP3;
 8002408:	2328      	movs	r3, #40	; 0x28
 800240a:	607b      	str	r3, [r7, #4]
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_TIMCMP2|HRTIM_OUTPUTRESET_TIMPER;
 800240c:	2314      	movs	r3, #20
 800240e:	60bb      	str	r3, [r7, #8]
  pOutputCfg.IdleMode = HRTIM_OUTPUTIDLEMODE_NONE;
 8002410:	2300      	movs	r3, #0
 8002412:	60fb      	str	r3, [r7, #12]
  pOutputCfg.IdleLevel = HRTIM_OUTPUTIDLELEVEL_ACTIVE;
 8002414:	2308      	movs	r3, #8
 8002416:	613b      	str	r3, [r7, #16]
  pOutputCfg.FaultLevel = HRTIM_OUTPUTFAULTLEVEL_NONE;
 8002418:	2300      	movs	r3, #0
 800241a:	617b      	str	r3, [r7, #20]
  pOutputCfg.ChopperModeEnable = HRTIM_OUTPUTCHOPPERMODE_DISABLED;
 800241c:	2300      	movs	r3, #0
 800241e:	61bb      	str	r3, [r7, #24]
  pOutputCfg.BurstModeEntryDelayed = HRTIM_OUTPUTBURSTMODEENTRY_REGULAR;
 8002420:	2300      	movs	r3, #0
 8002422:	61fb      	str	r3, [r7, #28]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, HRTIM_OUTPUT_TA1, &pOutputCfg) != HAL_OK)
 8002424:	463b      	mov	r3, r7
 8002426:	2201      	movs	r2, #1
 8002428:	2100      	movs	r1, #0
 800242a:	482f      	ldr	r0, [pc, #188]	; (80024e8 <MX_HRTIM_Init+0x29c>)
 800242c:	f005 fcaa 	bl	8007d84 <HAL_HRTIM_WaveformOutputConfig>
 8002430:	4603      	mov	r3, r0
 8002432:	2b00      	cmp	r3, #0
 8002434:	d001      	beq.n	800243a <MX_HRTIM_Init+0x1ee>
  {
    Error_Handler();
 8002436:	f000 fc3f 	bl	8002cb8 <Error_Handler>
  }
  pOutputCfg.Polarity = HRTIM_OUTPUTPOLARITY_HIGH;
 800243a:	2300      	movs	r3, #0
 800243c:	603b      	str	r3, [r7, #0]
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_TIMCMP2|HRTIM_OUTPUTRESET_TIMCMP4;
 800243e:	2350      	movs	r3, #80	; 0x50
 8002440:	60bb      	str	r3, [r7, #8]
  pOutputCfg.IdleLevel = HRTIM_OUTPUTIDLELEVEL_INACTIVE;
 8002442:	2300      	movs	r3, #0
 8002444:	613b      	str	r3, [r7, #16]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_E, HRTIM_OUTPUT_TE1, &pOutputCfg) != HAL_OK)
 8002446:	463b      	mov	r3, r7
 8002448:	f44f 7280 	mov.w	r2, #256	; 0x100
 800244c:	2104      	movs	r1, #4
 800244e:	4826      	ldr	r0, [pc, #152]	; (80024e8 <MX_HRTIM_Init+0x29c>)
 8002450:	f005 fc98 	bl	8007d84 <HAL_HRTIM_WaveformOutputConfig>
 8002454:	4603      	mov	r3, r0
 8002456:	2b00      	cmp	r3, #0
 8002458:	d001      	beq.n	800245e <MX_HRTIM_Init+0x212>
  {
    Error_Handler();
 800245a:	f000 fc2d 	bl	8002cb8 <Error_Handler>
  }
  pOutputCfg.Polarity = HRTIM_OUTPUTPOLARITY_LOW;
 800245e:	2302      	movs	r3, #2
 8002460:	603b      	str	r3, [r7, #0]
  pOutputCfg.SetSource = HRTIM_OUTPUTSET_TIMCMP3;
 8002462:	2320      	movs	r3, #32
 8002464:	607b      	str	r3, [r7, #4]
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_TIMCMP2;
 8002466:	2310      	movs	r3, #16
 8002468:	60bb      	str	r3, [r7, #8]
  pOutputCfg.IdleLevel = HRTIM_OUTPUTIDLELEVEL_ACTIVE;
 800246a:	2308      	movs	r3, #8
 800246c:	613b      	str	r3, [r7, #16]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, HRTIM_OUTPUT_TA2, &pOutputCfg) != HAL_OK)
 800246e:	463b      	mov	r3, r7
 8002470:	2202      	movs	r2, #2
 8002472:	2100      	movs	r1, #0
 8002474:	481c      	ldr	r0, [pc, #112]	; (80024e8 <MX_HRTIM_Init+0x29c>)
 8002476:	f005 fc85 	bl	8007d84 <HAL_HRTIM_WaveformOutputConfig>
 800247a:	4603      	mov	r3, r0
 800247c:	2b00      	cmp	r3, #0
 800247e:	d001      	beq.n	8002484 <MX_HRTIM_Init+0x238>
  {
    Error_Handler();
 8002480:	f000 fc1a 	bl	8002cb8 <Error_Handler>
  }
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_E, &pTimeBaseCfg) != HAL_OK)
 8002484:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002488:	461a      	mov	r2, r3
 800248a:	2104      	movs	r1, #4
 800248c:	4816      	ldr	r0, [pc, #88]	; (80024e8 <MX_HRTIM_Init+0x29c>)
 800248e:	f005 fa71 	bl	8007974 <HAL_HRTIM_TimeBaseConfig>
 8002492:	4603      	mov	r3, r0
 8002494:	2b00      	cmp	r3, #0
 8002496:	d001      	beq.n	800249c <MX_HRTIM_Init+0x250>
  {
    Error_Handler();
 8002498:	f000 fc0e 	bl	8002cb8 <Error_Handler>
  }
  pCompareCfg.CompareValue = PUMP_WIDTH+MICROWAVE_DELAY;
 800249c:	f240 7353 	movw	r3, #1875	; 0x753
 80024a0:	623b      	str	r3, [r7, #32]
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_E, HRTIM_COMPAREUNIT_1, &pCompareCfg) != HAL_OK)
 80024a2:	f107 0320 	add.w	r3, r7, #32
 80024a6:	2201      	movs	r2, #1
 80024a8:	2104      	movs	r1, #4
 80024aa:	480f      	ldr	r0, [pc, #60]	; (80024e8 <MX_HRTIM_Init+0x29c>)
 80024ac:	f005 fafc 	bl	8007aa8 <HAL_HRTIM_WaveformCompareConfig>
 80024b0:	4603      	mov	r3, r0
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d001      	beq.n	80024ba <MX_HRTIM_Init+0x26e>
  {
    Error_Handler();
 80024b6:	f000 fbff 	bl	8002cb8 <Error_Handler>
  }
  pCompareCfg.CompareValue = PUMP_WIDTH+MICROWAVE_DELAY+MICROWAVE_WIDTH+RAMSEY_TIME;
 80024ba:	f643 6342 	movw	r3, #15938	; 0x3e42
 80024be:	623b      	str	r3, [r7, #32]
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_E, HRTIM_COMPAREUNIT_3, &pCompareCfg) != HAL_OK)
 80024c0:	f107 0320 	add.w	r3, r7, #32
 80024c4:	2204      	movs	r2, #4
 80024c6:	2104      	movs	r1, #4
 80024c8:	4807      	ldr	r0, [pc, #28]	; (80024e8 <MX_HRTIM_Init+0x29c>)
 80024ca:	f005 faed 	bl	8007aa8 <HAL_HRTIM_WaveformCompareConfig>
 80024ce:	4603      	mov	r3, r0
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d001      	beq.n	80024d8 <MX_HRTIM_Init+0x28c>
  {
    Error_Handler();
 80024d4:	f000 fbf0 	bl	8002cb8 <Error_Handler>
  }
  /* USER CODE BEGIN HRTIM_Init 2 */

  /* USER CODE END HRTIM_Init 2 */
  HAL_HRTIM_MspPostInit(&hhrtim);
 80024d8:	4803      	ldr	r0, [pc, #12]	; (80024e8 <MX_HRTIM_Init+0x29c>)
 80024da:	f000 fd2f 	bl	8002f3c <HAL_HRTIM_MspPostInit>

}
 80024de:	bf00      	nop
 80024e0:	3790      	adds	r7, #144	; 0x90
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}
 80024e6:	bf00      	nop
 80024e8:	200002c4 	.word	0x200002c4
 80024ec:	40017400 	.word	0x40017400

080024f0 <MX_LPTIM1_Init>:
  * @brief LPTIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPTIM1_Init(void)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 80024f4:	4b13      	ldr	r3, [pc, #76]	; (8002544 <MX_LPTIM1_Init+0x54>)
 80024f6:	4a14      	ldr	r2, [pc, #80]	; (8002548 <MX_LPTIM1_Init+0x58>)
 80024f8:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 80024fa:	4b12      	ldr	r3, [pc, #72]	; (8002544 <MX_LPTIM1_Init+0x54>)
 80024fc:	2200      	movs	r2, #0
 80024fe:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV32;
 8002500:	4b10      	ldr	r3, [pc, #64]	; (8002544 <MX_LPTIM1_Init+0x54>)
 8002502:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8002506:	609a      	str	r2, [r3, #8]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8002508:	4b0e      	ldr	r3, [pc, #56]	; (8002544 <MX_LPTIM1_Init+0x54>)
 800250a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800250e:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 8002510:	4b0c      	ldr	r3, [pc, #48]	; (8002544 <MX_LPTIM1_Init+0x54>)
 8002512:	2200      	movs	r2, #0
 8002514:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 8002516:	4b0b      	ldr	r3, [pc, #44]	; (8002544 <MX_LPTIM1_Init+0x54>)
 8002518:	2200      	movs	r2, #0
 800251a:	625a      	str	r2, [r3, #36]	; 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 800251c:	4b09      	ldr	r3, [pc, #36]	; (8002544 <MX_LPTIM1_Init+0x54>)
 800251e:	2200      	movs	r2, #0
 8002520:	629a      	str	r2, [r3, #40]	; 0x28
  hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 8002522:	4b08      	ldr	r3, [pc, #32]	; (8002544 <MX_LPTIM1_Init+0x54>)
 8002524:	2200      	movs	r2, #0
 8002526:	62da      	str	r2, [r3, #44]	; 0x2c
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 8002528:	4b06      	ldr	r3, [pc, #24]	; (8002544 <MX_LPTIM1_Init+0x54>)
 800252a:	2200      	movs	r2, #0
 800252c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 800252e:	4805      	ldr	r0, [pc, #20]	; (8002544 <MX_LPTIM1_Init+0x54>)
 8002530:	f006 fc54 	bl	8008ddc <HAL_LPTIM_Init>
 8002534:	4603      	mov	r3, r0
 8002536:	2b00      	cmp	r3, #0
 8002538:	d001      	beq.n	800253e <MX_LPTIM1_Init+0x4e>
  {
    Error_Handler();
 800253a:	f000 fbbd 	bl	8002cb8 <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

}
 800253e:	bf00      	nop
 8002540:	bd80      	pop	{r7, pc}
 8002542:	bf00      	nop
 8002544:	200003a0 	.word	0x200003a0
 8002548:	40002400 	.word	0x40002400

0800254c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b088      	sub	sp, #32
 8002550:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002552:	f107 0310 	add.w	r3, r7, #16
 8002556:	2200      	movs	r2, #0
 8002558:	601a      	str	r2, [r3, #0]
 800255a:	605a      	str	r2, [r3, #4]
 800255c:	609a      	str	r2, [r3, #8]
 800255e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002560:	1d3b      	adds	r3, r7, #4
 8002562:	2200      	movs	r2, #0
 8002564:	601a      	str	r2, [r3, #0]
 8002566:	605a      	str	r2, [r3, #4]
 8002568:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800256a:	4b20      	ldr	r3, [pc, #128]	; (80025ec <MX_TIM1_Init+0xa0>)
 800256c:	4a20      	ldr	r2, [pc, #128]	; (80025f0 <MX_TIM1_Init+0xa4>)
 800256e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1249;
 8002570:	4b1e      	ldr	r3, [pc, #120]	; (80025ec <MX_TIM1_Init+0xa0>)
 8002572:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8002576:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002578:	4b1c      	ldr	r3, [pc, #112]	; (80025ec <MX_TIM1_Init+0xa0>)
 800257a:	2200      	movs	r2, #0
 800257c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800257e:	4b1b      	ldr	r3, [pc, #108]	; (80025ec <MX_TIM1_Init+0xa0>)
 8002580:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002584:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002586:	4b19      	ldr	r3, [pc, #100]	; (80025ec <MX_TIM1_Init+0xa0>)
 8002588:	2200      	movs	r2, #0
 800258a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800258c:	4b17      	ldr	r3, [pc, #92]	; (80025ec <MX_TIM1_Init+0xa0>)
 800258e:	2200      	movs	r2, #0
 8002590:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002592:	4b16      	ldr	r3, [pc, #88]	; (80025ec <MX_TIM1_Init+0xa0>)
 8002594:	2200      	movs	r2, #0
 8002596:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002598:	4814      	ldr	r0, [pc, #80]	; (80025ec <MX_TIM1_Init+0xa0>)
 800259a:	f00a fdcd 	bl	800d138 <HAL_TIM_Base_Init>
 800259e:	4603      	mov	r3, r0
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d001      	beq.n	80025a8 <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 80025a4:	f000 fb88 	bl	8002cb8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80025a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80025ac:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80025ae:	f107 0310 	add.w	r3, r7, #16
 80025b2:	4619      	mov	r1, r3
 80025b4:	480d      	ldr	r0, [pc, #52]	; (80025ec <MX_TIM1_Init+0xa0>)
 80025b6:	f00a fe17 	bl	800d1e8 <HAL_TIM_ConfigClockSource>
 80025ba:	4603      	mov	r3, r0
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d001      	beq.n	80025c4 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 80025c0:	f000 fb7a 	bl	8002cb8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025c4:	2300      	movs	r3, #0
 80025c6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80025c8:	2300      	movs	r3, #0
 80025ca:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025cc:	2300      	movs	r3, #0
 80025ce:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80025d0:	1d3b      	adds	r3, r7, #4
 80025d2:	4619      	mov	r1, r3
 80025d4:	4805      	ldr	r0, [pc, #20]	; (80025ec <MX_TIM1_Init+0xa0>)
 80025d6:	f00b f837 	bl	800d648 <HAL_TIMEx_MasterConfigSynchronization>
 80025da:	4603      	mov	r3, r0
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d001      	beq.n	80025e4 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80025e0:	f000 fb6a 	bl	8002cb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80025e4:	bf00      	nop
 80025e6:	3720      	adds	r7, #32
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bd80      	pop	{r7, pc}
 80025ec:	200003d8 	.word	0x200003d8
 80025f0:	40010000 	.word	0x40010000

080025f4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b088      	sub	sp, #32
 80025f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80025fa:	f107 0310 	add.w	r3, r7, #16
 80025fe:	2200      	movs	r2, #0
 8002600:	601a      	str	r2, [r3, #0]
 8002602:	605a      	str	r2, [r3, #4]
 8002604:	609a      	str	r2, [r3, #8]
 8002606:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002608:	1d3b      	adds	r3, r7, #4
 800260a:	2200      	movs	r2, #0
 800260c:	601a      	str	r2, [r3, #0]
 800260e:	605a      	str	r2, [r3, #4]
 8002610:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002612:	4b1e      	ldr	r3, [pc, #120]	; (800268c <MX_TIM2_Init+0x98>)
 8002614:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002618:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 124;
 800261a:	4b1c      	ldr	r3, [pc, #112]	; (800268c <MX_TIM2_Init+0x98>)
 800261c:	227c      	movs	r2, #124	; 0x7c
 800261e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002620:	4b1a      	ldr	r3, [pc, #104]	; (800268c <MX_TIM2_Init+0x98>)
 8002622:	2200      	movs	r2, #0
 8002624:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002626:	4b19      	ldr	r3, [pc, #100]	; (800268c <MX_TIM2_Init+0x98>)
 8002628:	f04f 32ff 	mov.w	r2, #4294967295
 800262c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800262e:	4b17      	ldr	r3, [pc, #92]	; (800268c <MX_TIM2_Init+0x98>)
 8002630:	2200      	movs	r2, #0
 8002632:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002634:	4b15      	ldr	r3, [pc, #84]	; (800268c <MX_TIM2_Init+0x98>)
 8002636:	2200      	movs	r2, #0
 8002638:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800263a:	4814      	ldr	r0, [pc, #80]	; (800268c <MX_TIM2_Init+0x98>)
 800263c:	f00a fd7c 	bl	800d138 <HAL_TIM_Base_Init>
 8002640:	4603      	mov	r3, r0
 8002642:	2b00      	cmp	r3, #0
 8002644:	d001      	beq.n	800264a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8002646:	f000 fb37 	bl	8002cb8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800264a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800264e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002650:	f107 0310 	add.w	r3, r7, #16
 8002654:	4619      	mov	r1, r3
 8002656:	480d      	ldr	r0, [pc, #52]	; (800268c <MX_TIM2_Init+0x98>)
 8002658:	f00a fdc6 	bl	800d1e8 <HAL_TIM_ConfigClockSource>
 800265c:	4603      	mov	r3, r0
 800265e:	2b00      	cmp	r3, #0
 8002660:	d001      	beq.n	8002666 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8002662:	f000 fb29 	bl	8002cb8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002666:	2300      	movs	r3, #0
 8002668:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800266a:	2300      	movs	r3, #0
 800266c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800266e:	1d3b      	adds	r3, r7, #4
 8002670:	4619      	mov	r1, r3
 8002672:	4806      	ldr	r0, [pc, #24]	; (800268c <MX_TIM2_Init+0x98>)
 8002674:	f00a ffe8 	bl	800d648 <HAL_TIMEx_MasterConfigSynchronization>
 8002678:	4603      	mov	r3, r0
 800267a:	2b00      	cmp	r3, #0
 800267c:	d001      	beq.n	8002682 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800267e:	f000 fb1b 	bl	8002cb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002682:	bf00      	nop
 8002684:	3720      	adds	r7, #32
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}
 800268a:	bf00      	nop
 800268c:	20000424 	.word	0x20000424

08002690 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b088      	sub	sp, #32
 8002694:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002696:	f107 0310 	add.w	r3, r7, #16
 800269a:	2200      	movs	r2, #0
 800269c:	601a      	str	r2, [r3, #0]
 800269e:	605a      	str	r2, [r3, #4]
 80026a0:	609a      	str	r2, [r3, #8]
 80026a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026a4:	1d3b      	adds	r3, r7, #4
 80026a6:	2200      	movs	r2, #0
 80026a8:	601a      	str	r2, [r3, #0]
 80026aa:	605a      	str	r2, [r3, #4]
 80026ac:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80026ae:	4b1d      	ldr	r3, [pc, #116]	; (8002724 <MX_TIM3_Init+0x94>)
 80026b0:	4a1d      	ldr	r2, [pc, #116]	; (8002728 <MX_TIM3_Init+0x98>)
 80026b2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 124;
 80026b4:	4b1b      	ldr	r3, [pc, #108]	; (8002724 <MX_TIM3_Init+0x94>)
 80026b6:	227c      	movs	r2, #124	; 0x7c
 80026b8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026ba:	4b1a      	ldr	r3, [pc, #104]	; (8002724 <MX_TIM3_Init+0x94>)
 80026bc:	2200      	movs	r2, #0
 80026be:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80026c0:	4b18      	ldr	r3, [pc, #96]	; (8002724 <MX_TIM3_Init+0x94>)
 80026c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80026c6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026c8:	4b16      	ldr	r3, [pc, #88]	; (8002724 <MX_TIM3_Init+0x94>)
 80026ca:	2200      	movs	r2, #0
 80026cc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026ce:	4b15      	ldr	r3, [pc, #84]	; (8002724 <MX_TIM3_Init+0x94>)
 80026d0:	2200      	movs	r2, #0
 80026d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80026d4:	4813      	ldr	r0, [pc, #76]	; (8002724 <MX_TIM3_Init+0x94>)
 80026d6:	f00a fd2f 	bl	800d138 <HAL_TIM_Base_Init>
 80026da:	4603      	mov	r3, r0
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d001      	beq.n	80026e4 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80026e0:	f000 faea 	bl	8002cb8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80026e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80026e8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80026ea:	f107 0310 	add.w	r3, r7, #16
 80026ee:	4619      	mov	r1, r3
 80026f0:	480c      	ldr	r0, [pc, #48]	; (8002724 <MX_TIM3_Init+0x94>)
 80026f2:	f00a fd79 	bl	800d1e8 <HAL_TIM_ConfigClockSource>
 80026f6:	4603      	mov	r3, r0
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d001      	beq.n	8002700 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80026fc:	f000 fadc 	bl	8002cb8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002700:	2300      	movs	r3, #0
 8002702:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002704:	2300      	movs	r3, #0
 8002706:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002708:	1d3b      	adds	r3, r7, #4
 800270a:	4619      	mov	r1, r3
 800270c:	4805      	ldr	r0, [pc, #20]	; (8002724 <MX_TIM3_Init+0x94>)
 800270e:	f00a ff9b 	bl	800d648 <HAL_TIMEx_MasterConfigSynchronization>
 8002712:	4603      	mov	r3, r0
 8002714:	2b00      	cmp	r3, #0
 8002716:	d001      	beq.n	800271c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8002718:	f000 face 	bl	8002cb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800271c:	bf00      	nop
 800271e:	3720      	adds	r7, #32
 8002720:	46bd      	mov	sp, r7
 8002722:	bd80      	pop	{r7, pc}
 8002724:	20000470 	.word	0x20000470
 8002728:	40000400 	.word	0x40000400

0800272c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b088      	sub	sp, #32
 8002730:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002732:	f107 0310 	add.w	r3, r7, #16
 8002736:	2200      	movs	r2, #0
 8002738:	601a      	str	r2, [r3, #0]
 800273a:	605a      	str	r2, [r3, #4]
 800273c:	609a      	str	r2, [r3, #8]
 800273e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002740:	1d3b      	adds	r3, r7, #4
 8002742:	2200      	movs	r2, #0
 8002744:	601a      	str	r2, [r3, #0]
 8002746:	605a      	str	r2, [r3, #4]
 8002748:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800274a:	4b1e      	ldr	r3, [pc, #120]	; (80027c4 <MX_TIM4_Init+0x98>)
 800274c:	4a1e      	ldr	r2, [pc, #120]	; (80027c8 <MX_TIM4_Init+0x9c>)
 800274e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 62499;
 8002750:	4b1c      	ldr	r3, [pc, #112]	; (80027c4 <MX_TIM4_Init+0x98>)
 8002752:	f24f 4223 	movw	r2, #62499	; 0xf423
 8002756:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002758:	4b1a      	ldr	r3, [pc, #104]	; (80027c4 <MX_TIM4_Init+0x98>)
 800275a:	2200      	movs	r2, #0
 800275c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800275e:	4b19      	ldr	r3, [pc, #100]	; (80027c4 <MX_TIM4_Init+0x98>)
 8002760:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002764:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002766:	4b17      	ldr	r3, [pc, #92]	; (80027c4 <MX_TIM4_Init+0x98>)
 8002768:	2200      	movs	r2, #0
 800276a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800276c:	4b15      	ldr	r3, [pc, #84]	; (80027c4 <MX_TIM4_Init+0x98>)
 800276e:	2200      	movs	r2, #0
 8002770:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002772:	4814      	ldr	r0, [pc, #80]	; (80027c4 <MX_TIM4_Init+0x98>)
 8002774:	f00a fce0 	bl	800d138 <HAL_TIM_Base_Init>
 8002778:	4603      	mov	r3, r0
 800277a:	2b00      	cmp	r3, #0
 800277c:	d001      	beq.n	8002782 <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 800277e:	f000 fa9b 	bl	8002cb8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002782:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002786:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002788:	f107 0310 	add.w	r3, r7, #16
 800278c:	4619      	mov	r1, r3
 800278e:	480d      	ldr	r0, [pc, #52]	; (80027c4 <MX_TIM4_Init+0x98>)
 8002790:	f00a fd2a 	bl	800d1e8 <HAL_TIM_ConfigClockSource>
 8002794:	4603      	mov	r3, r0
 8002796:	2b00      	cmp	r3, #0
 8002798:	d001      	beq.n	800279e <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 800279a:	f000 fa8d 	bl	8002cb8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800279e:	2300      	movs	r3, #0
 80027a0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80027a2:	2300      	movs	r3, #0
 80027a4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80027a6:	1d3b      	adds	r3, r7, #4
 80027a8:	4619      	mov	r1, r3
 80027aa:	4806      	ldr	r0, [pc, #24]	; (80027c4 <MX_TIM4_Init+0x98>)
 80027ac:	f00a ff4c 	bl	800d648 <HAL_TIMEx_MasterConfigSynchronization>
 80027b0:	4603      	mov	r3, r0
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d001      	beq.n	80027ba <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 80027b6:	f000 fa7f 	bl	8002cb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80027ba:	bf00      	nop
 80027bc:	3720      	adds	r7, #32
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}
 80027c2:	bf00      	nop
 80027c4:	200004bc 	.word	0x200004bc
 80027c8:	40000800 	.word	0x40000800

080027cc <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b088      	sub	sp, #32
 80027d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80027d2:	f107 0310 	add.w	r3, r7, #16
 80027d6:	2200      	movs	r2, #0
 80027d8:	601a      	str	r2, [r3, #0]
 80027da:	605a      	str	r2, [r3, #4]
 80027dc:	609a      	str	r2, [r3, #8]
 80027de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027e0:	1d3b      	adds	r3, r7, #4
 80027e2:	2200      	movs	r2, #0
 80027e4:	601a      	str	r2, [r3, #0]
 80027e6:	605a      	str	r2, [r3, #4]
 80027e8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80027ea:	4b1d      	ldr	r3, [pc, #116]	; (8002860 <MX_TIM5_Init+0x94>)
 80027ec:	4a1d      	ldr	r2, [pc, #116]	; (8002864 <MX_TIM5_Init+0x98>)
 80027ee:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 124;
 80027f0:	4b1b      	ldr	r3, [pc, #108]	; (8002860 <MX_TIM5_Init+0x94>)
 80027f2:	227c      	movs	r2, #124	; 0x7c
 80027f4:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027f6:	4b1a      	ldr	r3, [pc, #104]	; (8002860 <MX_TIM5_Init+0x94>)
 80027f8:	2200      	movs	r2, #0
 80027fa:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80027fc:	4b18      	ldr	r3, [pc, #96]	; (8002860 <MX_TIM5_Init+0x94>)
 80027fe:	f04f 32ff 	mov.w	r2, #4294967295
 8002802:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002804:	4b16      	ldr	r3, [pc, #88]	; (8002860 <MX_TIM5_Init+0x94>)
 8002806:	2200      	movs	r2, #0
 8002808:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800280a:	4b15      	ldr	r3, [pc, #84]	; (8002860 <MX_TIM5_Init+0x94>)
 800280c:	2200      	movs	r2, #0
 800280e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002810:	4813      	ldr	r0, [pc, #76]	; (8002860 <MX_TIM5_Init+0x94>)
 8002812:	f00a fc91 	bl	800d138 <HAL_TIM_Base_Init>
 8002816:	4603      	mov	r3, r0
 8002818:	2b00      	cmp	r3, #0
 800281a:	d001      	beq.n	8002820 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 800281c:	f000 fa4c 	bl	8002cb8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002820:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002824:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002826:	f107 0310 	add.w	r3, r7, #16
 800282a:	4619      	mov	r1, r3
 800282c:	480c      	ldr	r0, [pc, #48]	; (8002860 <MX_TIM5_Init+0x94>)
 800282e:	f00a fcdb 	bl	800d1e8 <HAL_TIM_ConfigClockSource>
 8002832:	4603      	mov	r3, r0
 8002834:	2b00      	cmp	r3, #0
 8002836:	d001      	beq.n	800283c <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8002838:	f000 fa3e 	bl	8002cb8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800283c:	2300      	movs	r3, #0
 800283e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002840:	2300      	movs	r3, #0
 8002842:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002844:	1d3b      	adds	r3, r7, #4
 8002846:	4619      	mov	r1, r3
 8002848:	4805      	ldr	r0, [pc, #20]	; (8002860 <MX_TIM5_Init+0x94>)
 800284a:	f00a fefd 	bl	800d648 <HAL_TIMEx_MasterConfigSynchronization>
 800284e:	4603      	mov	r3, r0
 8002850:	2b00      	cmp	r3, #0
 8002852:	d001      	beq.n	8002858 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8002854:	f000 fa30 	bl	8002cb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8002858:	bf00      	nop
 800285a:	3720      	adds	r7, #32
 800285c:	46bd      	mov	sp, r7
 800285e:	bd80      	pop	{r7, pc}
 8002860:	20000508 	.word	0x20000508
 8002864:	40000c00 	.word	0x40000c00

08002868 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800286c:	4b22      	ldr	r3, [pc, #136]	; (80028f8 <MX_USART3_UART_Init+0x90>)
 800286e:	4a23      	ldr	r2, [pc, #140]	; (80028fc <MX_USART3_UART_Init+0x94>)
 8002870:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 1000000;
 8002872:	4b21      	ldr	r3, [pc, #132]	; (80028f8 <MX_USART3_UART_Init+0x90>)
 8002874:	4a22      	ldr	r2, [pc, #136]	; (8002900 <MX_USART3_UART_Init+0x98>)
 8002876:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002878:	4b1f      	ldr	r3, [pc, #124]	; (80028f8 <MX_USART3_UART_Init+0x90>)
 800287a:	2200      	movs	r2, #0
 800287c:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800287e:	4b1e      	ldr	r3, [pc, #120]	; (80028f8 <MX_USART3_UART_Init+0x90>)
 8002880:	2200      	movs	r2, #0
 8002882:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002884:	4b1c      	ldr	r3, [pc, #112]	; (80028f8 <MX_USART3_UART_Init+0x90>)
 8002886:	2200      	movs	r2, #0
 8002888:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800288a:	4b1b      	ldr	r3, [pc, #108]	; (80028f8 <MX_USART3_UART_Init+0x90>)
 800288c:	220c      	movs	r2, #12
 800288e:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002890:	4b19      	ldr	r3, [pc, #100]	; (80028f8 <MX_USART3_UART_Init+0x90>)
 8002892:	2200      	movs	r2, #0
 8002894:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002896:	4b18      	ldr	r3, [pc, #96]	; (80028f8 <MX_USART3_UART_Init+0x90>)
 8002898:	2200      	movs	r2, #0
 800289a:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800289c:	4b16      	ldr	r3, [pc, #88]	; (80028f8 <MX_USART3_UART_Init+0x90>)
 800289e:	2200      	movs	r2, #0
 80028a0:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80028a2:	4b15      	ldr	r3, [pc, #84]	; (80028f8 <MX_USART3_UART_Init+0x90>)
 80028a4:	2200      	movs	r2, #0
 80028a6:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80028a8:	4b13      	ldr	r3, [pc, #76]	; (80028f8 <MX_USART3_UART_Init+0x90>)
 80028aa:	2200      	movs	r2, #0
 80028ac:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80028ae:	4812      	ldr	r0, [pc, #72]	; (80028f8 <MX_USART3_UART_Init+0x90>)
 80028b0:	f00a ff58 	bl	800d764 <HAL_UART_Init>
 80028b4:	4603      	mov	r3, r0
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d001      	beq.n	80028be <MX_USART3_UART_Init+0x56>
  {
    Error_Handler();
 80028ba:	f000 f9fd 	bl	8002cb8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80028be:	2100      	movs	r1, #0
 80028c0:	480d      	ldr	r0, [pc, #52]	; (80028f8 <MX_USART3_UART_Init+0x90>)
 80028c2:	f00b ffe8 	bl	800e896 <HAL_UARTEx_SetTxFifoThreshold>
 80028c6:	4603      	mov	r3, r0
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d001      	beq.n	80028d0 <MX_USART3_UART_Init+0x68>
  {
    Error_Handler();
 80028cc:	f000 f9f4 	bl	8002cb8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80028d0:	2100      	movs	r1, #0
 80028d2:	4809      	ldr	r0, [pc, #36]	; (80028f8 <MX_USART3_UART_Init+0x90>)
 80028d4:	f00c f81d 	bl	800e912 <HAL_UARTEx_SetRxFifoThreshold>
 80028d8:	4603      	mov	r3, r0
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d001      	beq.n	80028e2 <MX_USART3_UART_Init+0x7a>
  {
    Error_Handler();
 80028de:	f000 f9eb 	bl	8002cb8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80028e2:	4805      	ldr	r0, [pc, #20]	; (80028f8 <MX_USART3_UART_Init+0x90>)
 80028e4:	f00b ff9e 	bl	800e824 <HAL_UARTEx_DisableFifoMode>
 80028e8:	4603      	mov	r3, r0
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d001      	beq.n	80028f2 <MX_USART3_UART_Init+0x8a>
  {
    Error_Handler();
 80028ee:	f000 f9e3 	bl	8002cb8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80028f2:	bf00      	nop
 80028f4:	bd80      	pop	{r7, pc}
 80028f6:	bf00      	nop
 80028f8:	20000554 	.word	0x20000554
 80028fc:	40004800 	.word	0x40004800
 8002900:	000f4240 	.word	0x000f4240

08002904 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b08e      	sub	sp, #56	; 0x38
 8002908:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800290a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800290e:	2200      	movs	r2, #0
 8002910:	601a      	str	r2, [r3, #0]
 8002912:	605a      	str	r2, [r3, #4]
 8002914:	609a      	str	r2, [r3, #8]
 8002916:	60da      	str	r2, [r3, #12]
 8002918:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800291a:	4ba0      	ldr	r3, [pc, #640]	; (8002b9c <MX_GPIO_Init+0x298>)
 800291c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002920:	4a9e      	ldr	r2, [pc, #632]	; (8002b9c <MX_GPIO_Init+0x298>)
 8002922:	f043 0310 	orr.w	r3, r3, #16
 8002926:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800292a:	4b9c      	ldr	r3, [pc, #624]	; (8002b9c <MX_GPIO_Init+0x298>)
 800292c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002930:	f003 0310 	and.w	r3, r3, #16
 8002934:	623b      	str	r3, [r7, #32]
 8002936:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002938:	4b98      	ldr	r3, [pc, #608]	; (8002b9c <MX_GPIO_Init+0x298>)
 800293a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800293e:	4a97      	ldr	r2, [pc, #604]	; (8002b9c <MX_GPIO_Init+0x298>)
 8002940:	f043 0304 	orr.w	r3, r3, #4
 8002944:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002948:	4b94      	ldr	r3, [pc, #592]	; (8002b9c <MX_GPIO_Init+0x298>)
 800294a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800294e:	f003 0304 	and.w	r3, r3, #4
 8002952:	61fb      	str	r3, [r7, #28]
 8002954:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002956:	4b91      	ldr	r3, [pc, #580]	; (8002b9c <MX_GPIO_Init+0x298>)
 8002958:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800295c:	4a8f      	ldr	r2, [pc, #572]	; (8002b9c <MX_GPIO_Init+0x298>)
 800295e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002962:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002966:	4b8d      	ldr	r3, [pc, #564]	; (8002b9c <MX_GPIO_Init+0x298>)
 8002968:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800296c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002970:	61bb      	str	r3, [r7, #24]
 8002972:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002974:	4b89      	ldr	r3, [pc, #548]	; (8002b9c <MX_GPIO_Init+0x298>)
 8002976:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800297a:	4a88      	ldr	r2, [pc, #544]	; (8002b9c <MX_GPIO_Init+0x298>)
 800297c:	f043 0301 	orr.w	r3, r3, #1
 8002980:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002984:	4b85      	ldr	r3, [pc, #532]	; (8002b9c <MX_GPIO_Init+0x298>)
 8002986:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800298a:	f003 0301 	and.w	r3, r3, #1
 800298e:	617b      	str	r3, [r7, #20]
 8002990:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002992:	4b82      	ldr	r3, [pc, #520]	; (8002b9c <MX_GPIO_Init+0x298>)
 8002994:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002998:	4a80      	ldr	r2, [pc, #512]	; (8002b9c <MX_GPIO_Init+0x298>)
 800299a:	f043 0302 	orr.w	r3, r3, #2
 800299e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80029a2:	4b7e      	ldr	r3, [pc, #504]	; (8002b9c <MX_GPIO_Init+0x298>)
 80029a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029a8:	f003 0302 	and.w	r3, r3, #2
 80029ac:	613b      	str	r3, [r7, #16]
 80029ae:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80029b0:	4b7a      	ldr	r3, [pc, #488]	; (8002b9c <MX_GPIO_Init+0x298>)
 80029b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029b6:	4a79      	ldr	r2, [pc, #484]	; (8002b9c <MX_GPIO_Init+0x298>)
 80029b8:	f043 0320 	orr.w	r3, r3, #32
 80029bc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80029c0:	4b76      	ldr	r3, [pc, #472]	; (8002b9c <MX_GPIO_Init+0x298>)
 80029c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029c6:	f003 0320 	and.w	r3, r3, #32
 80029ca:	60fb      	str	r3, [r7, #12]
 80029cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80029ce:	4b73      	ldr	r3, [pc, #460]	; (8002b9c <MX_GPIO_Init+0x298>)
 80029d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029d4:	4a71      	ldr	r2, [pc, #452]	; (8002b9c <MX_GPIO_Init+0x298>)
 80029d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80029da:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80029de:	4b6f      	ldr	r3, [pc, #444]	; (8002b9c <MX_GPIO_Init+0x298>)
 80029e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029e8:	60bb      	str	r3, [r7, #8]
 80029ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80029ec:	4b6b      	ldr	r3, [pc, #428]	; (8002b9c <MX_GPIO_Init+0x298>)
 80029ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029f2:	4a6a      	ldr	r2, [pc, #424]	; (8002b9c <MX_GPIO_Init+0x298>)
 80029f4:	f043 0308 	orr.w	r3, r3, #8
 80029f8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80029fc:	4b67      	ldr	r3, [pc, #412]	; (8002b9c <MX_GPIO_Init+0x298>)
 80029fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a02:	f003 0308 	and.w	r3, r3, #8
 8002a06:	607b      	str	r3, [r7, #4]
 8002a08:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ATT_4_Pin|ATT_8_Pin|ATT_16_Pin, GPIO_PIN_SET);
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	2134      	movs	r1, #52	; 0x34
 8002a0e:	4864      	ldr	r0, [pc, #400]	; (8002ba0 <MX_GPIO_Init+0x29c>)
 8002a10:	f004 fe88 	bl	8007724 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|MW_INVALID_Pin|LASER_TUNING_Pin|LD3_Pin
 8002a14:	2200      	movs	r2, #0
 8002a16:	f245 1103 	movw	r1, #20739	; 0x5103
 8002a1a:	4862      	ldr	r0, [pc, #392]	; (8002ba4 <MX_GPIO_Init+0x2a0>)
 8002a1c:	f004 fe82 	bl	8007724 <HAL_GPIO_WritePin>
                          |SPARE_OUT_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SCOPE_TRIG_OUT_GPIO_Port, SCOPE_TRIG_OUT_Pin, GPIO_PIN_RESET);
 8002a20:	2200      	movs	r2, #0
 8002a22:	2101      	movs	r1, #1
 8002a24:	4860      	ldr	r0, [pc, #384]	; (8002ba8 <MX_GPIO_Init+0x2a4>)
 8002a26:	f004 fe7d 	bl	8007724 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002a30:	485e      	ldr	r0, [pc, #376]	; (8002bac <MX_GPIO_Init+0x2a8>)
 8002a32:	f004 fe77 	bl	8007724 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SCLK_Pin|MOSI_Pin|REG_EN_Pin, GPIO_PIN_RESET);
 8002a36:	2200      	movs	r2, #0
 8002a38:	f44f 5198 	mov.w	r1, #4864	; 0x1300
 8002a3c:	485c      	ldr	r0, [pc, #368]	; (8002bb0 <MX_GPIO_Init+0x2ac>)
 8002a3e:	f004 fe71 	bl	8007724 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SEN_GPIO_Port, SEN_Pin, GPIO_PIN_SET);
 8002a42:	2201      	movs	r2, #1
 8002a44:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002a48:	4859      	ldr	r0, [pc, #356]	; (8002bb0 <MX_GPIO_Init+0x2ac>)
 8002a4a:	f004 fe6b 	bl	8007724 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, ATT_2_Pin|ATT_1_Pin|ATT_05_Pin|ATT_025_Pin
 8002a4e:	2201      	movs	r2, #1
 8002a50:	21f8      	movs	r1, #248	; 0xf8
 8002a52:	4856      	ldr	r0, [pc, #344]	; (8002bac <MX_GPIO_Init+0x2a8>)
 8002a54:	f004 fe66 	bl	8007724 <HAL_GPIO_WritePin>
                          |ATT_LE_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002a58:	2200      	movs	r2, #0
 8002a5a:	2102      	movs	r1, #2
 8002a5c:	4850      	ldr	r0, [pc, #320]	; (8002ba0 <MX_GPIO_Init+0x29c>)
 8002a5e:	f004 fe61 	bl	8007724 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ATT_4_Pin ATT_8_Pin ATT_16_Pin LD2_Pin */
  GPIO_InitStruct.Pin = ATT_4_Pin|ATT_8_Pin|ATT_16_Pin|LD2_Pin;
 8002a62:	2336      	movs	r3, #54	; 0x36
 8002a64:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a66:	2301      	movs	r3, #1
 8002a68:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002a72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a76:	4619      	mov	r1, r3
 8002a78:	4849      	ldr	r0, [pc, #292]	; (8002ba0 <MX_GPIO_Init+0x29c>)
 8002a7a:	f004 fc8b 	bl	8007394 <HAL_GPIO_Init>

  /*Configure GPIO pin : BLUE_BUTTON_Pin */
  GPIO_InitStruct.Pin = BLUE_BUTTON_Pin;
 8002a7e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002a82:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002a84:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002a88:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BLUE_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8002a8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a92:	4619      	mov	r1, r3
 8002a94:	4846      	ldr	r0, [pc, #280]	; (8002bb0 <MX_GPIO_Init+0x2ac>)
 8002a96:	f004 fc7d 	bl	8007394 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin MW_INVALID_Pin LASER_TUNING_Pin LD3_Pin
                           SPARE_OUT_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|MW_INVALID_Pin|LASER_TUNING_Pin|LD3_Pin
 8002a9a:	f245 1303 	movw	r3, #20739	; 0x5103
 8002a9e:	627b      	str	r3, [r7, #36]	; 0x24
                          |SPARE_OUT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002aac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ab0:	4619      	mov	r1, r3
 8002ab2:	483c      	ldr	r0, [pc, #240]	; (8002ba4 <MX_GPIO_Init+0x2a0>)
 8002ab4:	f004 fc6e 	bl	8007394 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002ab8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002abc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002abe:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002ac2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002ac8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002acc:	4619      	mov	r1, r3
 8002ace:	4839      	ldr	r0, [pc, #228]	; (8002bb4 <MX_GPIO_Init+0x2b0>)
 8002ad0:	f004 fc60 	bl	8007394 <HAL_GPIO_Init>

  /*Configure GPIO pin : SCOPE_TRIG_OUT_Pin */
  GPIO_InitStruct.Pin = SCOPE_TRIG_OUT_Pin;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002adc:	2300      	movs	r3, #0
 8002ade:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(SCOPE_TRIG_OUT_GPIO_Port, &GPIO_InitStruct);
 8002ae4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ae8:	4619      	mov	r1, r3
 8002aea:	482f      	ldr	r0, [pc, #188]	; (8002ba8 <MX_GPIO_Init+0x2a4>)
 8002aec:	f004 fc52 	bl	8007394 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin ATT_2_Pin ATT_1_Pin ATT_05_Pin
                           ATT_025_Pin ATT_LE_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|ATT_2_Pin|ATT_1_Pin|ATT_05_Pin
 8002af0:	f44f 639f 	mov.w	r3, #1272	; 0x4f8
 8002af4:	627b      	str	r3, [r7, #36]	; 0x24
                          |ATT_025_Pin|ATT_LE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002af6:	2301      	movs	r3, #1
 8002af8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002afa:	2300      	movs	r3, #0
 8002afc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002afe:	2300      	movs	r3, #0
 8002b00:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002b02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b06:	4619      	mov	r1, r3
 8002b08:	4828      	ldr	r0, [pc, #160]	; (8002bac <MX_GPIO_Init+0x2a8>)
 8002b0a:	f004 fc43 	bl	8007394 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8002b0e:	2380      	movs	r3, #128	; 0x80
 8002b10:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002b12:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002b16:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8002b1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b20:	4619      	mov	r1, r3
 8002b22:	4821      	ldr	r0, [pc, #132]	; (8002ba8 <MX_GPIO_Init+0x2a4>)
 8002b24:	f004 fc36 	bl	8007394 <HAL_GPIO_Init>

  /*Configure GPIO pins : SCLK_Pin MOSI_Pin SEN_Pin REG_EN_Pin */
  GPIO_InitStruct.Pin = SCLK_Pin|MOSI_Pin|SEN_Pin|REG_EN_Pin;
 8002b28:	f44f 53d8 	mov.w	r3, #6912	; 0x1b00
 8002b2c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002b32:	2302      	movs	r3, #2
 8002b34:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b36:	2300      	movs	r3, #0
 8002b38:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b3e:	4619      	mov	r1, r3
 8002b40:	481b      	ldr	r0, [pc, #108]	; (8002bb0 <MX_GPIO_Init+0x2ac>)
 8002b42:	f004 fc27 	bl	8007394 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8002b46:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8002b4a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b4c:	2302      	movs	r3, #2
 8002b4e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b50:	2300      	movs	r3, #0
 8002b52:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b54:	2300      	movs	r3, #0
 8002b56:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8002b58:	230a      	movs	r3, #10
 8002b5a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b60:	4619      	mov	r1, r3
 8002b62:	4815      	ldr	r0, [pc, #84]	; (8002bb8 <MX_GPIO_Init+0x2b4>)
 8002b64:	f004 fc16 	bl	8007394 <HAL_GPIO_Init>

  /*Configure GPIO pin : MISO_Pin */
  GPIO_InitStruct.Pin = MISO_Pin;
 8002b68:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b6c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b72:	2300      	movs	r3, #0
 8002b74:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(MISO_GPIO_Port, &GPIO_InitStruct);
 8002b76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b7a:	4619      	mov	r1, r3
 8002b7c:	480c      	ldr	r0, [pc, #48]	; (8002bb0 <MX_GPIO_Init+0x2ac>)
 8002b7e:	f004 fc09 	bl	8007394 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002b82:	2200      	movs	r2, #0
 8002b84:	2100      	movs	r1, #0
 8002b86:	2028      	movs	r0, #40	; 0x28
 8002b88:	f002 fe7b 	bl	8005882 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002b8c:	2028      	movs	r0, #40	; 0x28
 8002b8e:	f002 fe92 	bl	80058b6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002b92:	bf00      	nop
 8002b94:	3738      	adds	r7, #56	; 0x38
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}
 8002b9a:	bf00      	nop
 8002b9c:	58024400 	.word	0x58024400
 8002ba0:	58021000 	.word	0x58021000
 8002ba4:	58020400 	.word	0x58020400
 8002ba8:	58021800 	.word	0x58021800
 8002bac:	58020c00 	.word	0x58020c00
 8002bb0:	58020800 	.word	0x58020800
 8002bb4:	58021400 	.word	0x58021400
 8002bb8:	58020000 	.word	0x58020000

08002bbc <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b082      	sub	sp, #8
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  adc_val = HAL_ADC_GetValue(&hadc3);
 8002bc4:	480e      	ldr	r0, [pc, #56]	; (8002c00 <HAL_ADC_ConvCpltCallback+0x44>)
 8002bc6:	f001 fd17 	bl	80045f8 <HAL_ADC_GetValue>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	4a0d      	ldr	r2, [pc, #52]	; (8002c04 <HAL_ADC_ConvCpltCallback+0x48>)
 8002bce:	6013      	str	r3, [r2, #0]
  //printf("ADC value: %lu \r\n", adc_val);
  dac_val = adc_val >> 4;
 8002bd0:	4b0c      	ldr	r3, [pc, #48]	; (8002c04 <HAL_ADC_ConvCpltCallback+0x48>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	091b      	lsrs	r3, r3, #4
 8002bd6:	4a0c      	ldr	r2, [pc, #48]	; (8002c08 <HAL_ADC_ConvCpltCallback+0x4c>)
 8002bd8:	6013      	str	r3, [r2, #0]
  sample_count++;
 8002bda:	4b0c      	ldr	r3, [pc, #48]	; (8002c0c <HAL_ADC_ConvCpltCallback+0x50>)
 8002bdc:	881b      	ldrh	r3, [r3, #0]
 8002bde:	b29b      	uxth	r3, r3
 8002be0:	3301      	adds	r3, #1
 8002be2:	b29a      	uxth	r2, r3
 8002be4:	4b09      	ldr	r3, [pc, #36]	; (8002c0c <HAL_ADC_ConvCpltCallback+0x50>)
 8002be6:	801a      	strh	r2, [r3, #0]
	  printf("ADC reading: %lu, max: %lu, min: %lu \r\n", adc_val, adc_max, adc_min);
  }
  //printf("ADC reading: %lu, max: %lu, min: %lu \r\n", adc_val, adc_max, adc_min);
#endif //QUANTIFY_ADC_NOISE
  //printf("ADC value: %lu, DAC value: %lu \r\n", adc_val, dac_val);
  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, dac_val);
 8002be8:	4b07      	ldr	r3, [pc, #28]	; (8002c08 <HAL_ADC_ConvCpltCallback+0x4c>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	2200      	movs	r2, #0
 8002bee:	2100      	movs	r1, #0
 8002bf0:	4807      	ldr	r0, [pc, #28]	; (8002c10 <HAL_ADC_ConvCpltCallback+0x54>)
 8002bf2:	f002 ff6b 	bl	8005acc <HAL_DAC_SetValue>
  //HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 2048);
}
 8002bf6:	bf00      	nop
 8002bf8:	3708      	adds	r7, #8
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}
 8002bfe:	bf00      	nop
 8002c00:	2000024c 	.word	0x2000024c
 8002c04:	200005f0 	.word	0x200005f0
 8002c08:	200005f4 	.word	0x200005f4
 8002c0c:	200005ea 	.word	0x200005ea
 8002c10:	200002b0 	.word	0x200002b0

08002c14 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b084      	sub	sp, #16
 8002c18:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8002c1a:	463b      	mov	r3, r7
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	601a      	str	r2, [r3, #0]
 8002c20:	605a      	str	r2, [r3, #4]
 8002c22:	609a      	str	r2, [r3, #8]
 8002c24:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8002c26:	f002 fe61 	bl	80058ec <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8002c32:	2300      	movs	r3, #0
 8002c34:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8002c36:	231f      	movs	r3, #31
 8002c38:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8002c3a:	2387      	movs	r3, #135	; 0x87
 8002c3c:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8002c42:	2300      	movs	r3, #0
 8002c44:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8002c46:	2301      	movs	r3, #1
 8002c48:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8002c52:	2300      	movs	r3, #0
 8002c54:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8002c56:	463b      	mov	r3, r7
 8002c58:	4618      	mov	r0, r3
 8002c5a:	f002 fe7f 	bl	800595c <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30020000;
 8002c62:	4b13      	ldr	r3, [pc, #76]	; (8002cb0 <MPU_Config+0x9c>)
 8002c64:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_128KB;
 8002c66:	2310      	movs	r3, #16
 8002c68:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8002c72:	2303      	movs	r3, #3
 8002c74:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8002c76:	2300      	movs	r3, #0
 8002c78:	737b      	strb	r3, [r7, #13]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8002c7a:	463b      	mov	r3, r7
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f002 fe6d 	bl	800595c <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8002c82:	2302      	movs	r3, #2
 8002c84:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30040000;
 8002c86:	4b0b      	ldr	r3, [pc, #44]	; (8002cb4 <MPU_Config+0xa0>)
 8002c88:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_512B;
 8002c8a:	2308      	movs	r3, #8
 8002c8c:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8002c8e:	2300      	movs	r3, #0
 8002c90:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8002c92:	2301      	movs	r3, #1
 8002c94:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8002c96:	2301      	movs	r3, #1
 8002c98:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8002c9a:	463b      	mov	r3, r7
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	f002 fe5d 	bl	800595c <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8002ca2:	2004      	movs	r0, #4
 8002ca4:	f002 fe3a 	bl	800591c <HAL_MPU_Enable>

}
 8002ca8:	bf00      	nop
 8002caa:	3710      	adds	r7, #16
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bd80      	pop	{r7, pc}
 8002cb0:	30020000 	.word	0x30020000
 8002cb4:	30040000 	.word	0x30040000

08002cb8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002cbc:	b672      	cpsid	i
}
 8002cbe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	__disable_irq();

	printf("Error handler routine called\r\n");
 8002cc0:	4810      	ldr	r0, [pc, #64]	; (8002d04 <Error_Handler+0x4c>)
 8002cc2:	f016 fe43 	bl	801994c <puts>

	/* Disable the AOM */
	HAL_HRTIM_WaveformOutputStop(&hhrtim, HRTIM_OUTPUT_TA1 | HRTIM_OUTPUT_TA2 | HRTIM_OUTPUT_TE1);
 8002cc6:	f240 1103 	movw	r1, #259	; 0x103
 8002cca:	480f      	ldr	r0, [pc, #60]	; (8002d08 <Error_Handler+0x50>)
 8002ccc:	f005 f8b8 	bl	8007e40 <HAL_HRTIM_WaveformOutputStop>
	HAL_HRTIM_WaveformCounterStop_IT(&hhrtim, HRTIM_TIMERID_TIMER_A | HRTIM_TIMERID_TIMER_E);
 8002cd0:	f44f 1108 	mov.w	r1, #2228224	; 0x220000
 8002cd4:	480c      	ldr	r0, [pc, #48]	; (8002d08 <Error_Handler+0x50>)
 8002cd6:	f005 f951 	bl	8007f7c <HAL_HRTIM_WaveformCountStop_IT>

	/* Power down the synthesiser */
	HAL_GPIO_WritePin(REG_EN_GPIO_Port, REG_EN_Pin, 0);
 8002cda:	2200      	movs	r2, #0
 8002cdc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002ce0:	480a      	ldr	r0, [pc, #40]	; (8002d0c <Error_Handler+0x54>)
 8002ce2:	f004 fd1f 	bl	8007724 <HAL_GPIO_WritePin>

	while (1) {
		HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin); //toggle red LED
 8002ce6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002cea:	4809      	ldr	r0, [pc, #36]	; (8002d10 <Error_Handler+0x58>)
 8002cec:	f004 fd33 	bl	8007756 <HAL_GPIO_TogglePin>
		timer_delay(SLOW_TIMER, ERROR_LED_DELAY);
 8002cf0:	4b08      	ldr	r3, [pc, #32]	; (8002d14 <Error_Handler+0x5c>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002cf8:	4611      	mov	r1, r2
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f018 fd58 	bl	801b7b0 <__timer_delay_veneer>
		HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin); //toggle red LED
 8002d00:	e7f1      	b.n	8002ce6 <Error_Handler+0x2e>
 8002d02:	bf00      	nop
 8002d04:	0801ba18 	.word	0x0801ba18
 8002d08:	200002c4 	.word	0x200002c4
 8002d0c:	58020800 	.word	0x58020800
 8002d10:	58020400 	.word	0x58020400
 8002d14:	20000018 	.word	0x20000018

08002d18 <HAL_MspInit>:
void HAL_HRTIM_MspPostInit(HRTIM_HandleTypeDef *hhrtim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b083      	sub	sp, #12
 8002d1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d1e:	4b0a      	ldr	r3, [pc, #40]	; (8002d48 <HAL_MspInit+0x30>)
 8002d20:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002d24:	4a08      	ldr	r2, [pc, #32]	; (8002d48 <HAL_MspInit+0x30>)
 8002d26:	f043 0302 	orr.w	r3, r3, #2
 8002d2a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002d2e:	4b06      	ldr	r3, [pc, #24]	; (8002d48 <HAL_MspInit+0x30>)
 8002d30:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002d34:	f003 0302 	and.w	r3, r3, #2
 8002d38:	607b      	str	r3, [r7, #4]
 8002d3a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d3c:	bf00      	nop
 8002d3e:	370c      	adds	r7, #12
 8002d40:	46bd      	mov	sp, r7
 8002d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d46:	4770      	bx	lr
 8002d48:	58024400 	.word	0x58024400

08002d4c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b0b4      	sub	sp, #208	; 0xd0
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002d54:	f107 0310 	add.w	r3, r7, #16
 8002d58:	22c0      	movs	r2, #192	; 0xc0
 8002d5a:	2100      	movs	r1, #0
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	f016 fee5 	bl	8019b2c <memset>
  if(hadc->Instance==ADC3)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a2b      	ldr	r2, [pc, #172]	; (8002e14 <HAL_ADC_MspInit+0xc8>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d14e      	bne.n	8002e0a <HAL_ADC_MspInit+0xbe>

  /* USER CODE END ADC3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002d6c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002d70:	f04f 0300 	mov.w	r3, #0
 8002d74:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 8002d78:	2301      	movs	r3, #1
 8002d7a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 19;
 8002d7c:	2313      	movs	r3, #19
 8002d7e:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 79;
 8002d80:	234f      	movs	r3, #79	; 0x4f
 8002d82:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8002d84:	2302      	movs	r3, #2
 8002d86:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8002d88:	2302      	movs	r3, #2
 8002d8a:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8002d8c:	23c0      	movs	r3, #192	; 0xc0
 8002d8e:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8002d90:	2320      	movs	r3, #32
 8002d92:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8002d94:	2300      	movs	r3, #0
 8002d96:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002d9e:	f107 0310 	add.w	r3, r7, #16
 8002da2:	4618      	mov	r0, r3
 8002da4:	f007 fc74 	bl	800a690 <HAL_RCCEx_PeriphCLKConfig>
 8002da8:	4603      	mov	r3, r0
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d001      	beq.n	8002db2 <HAL_ADC_MspInit+0x66>
    {
      Error_Handler();
 8002dae:	f7ff ff83 	bl	8002cb8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8002db2:	4b19      	ldr	r3, [pc, #100]	; (8002e18 <HAL_ADC_MspInit+0xcc>)
 8002db4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002db8:	4a17      	ldr	r2, [pc, #92]	; (8002e18 <HAL_ADC_MspInit+0xcc>)
 8002dba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002dbe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002dc2:	4b15      	ldr	r3, [pc, #84]	; (8002e18 <HAL_ADC_MspInit+0xcc>)
 8002dc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002dc8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002dcc:	60fb      	str	r3, [r7, #12]
 8002dce:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002dd0:	4b11      	ldr	r3, [pc, #68]	; (8002e18 <HAL_ADC_MspInit+0xcc>)
 8002dd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002dd6:	4a10      	ldr	r2, [pc, #64]	; (8002e18 <HAL_ADC_MspInit+0xcc>)
 8002dd8:	f043 0304 	orr.w	r3, r3, #4
 8002ddc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002de0:	4b0d      	ldr	r3, [pc, #52]	; (8002e18 <HAL_ADC_MspInit+0xcc>)
 8002de2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002de6:	f003 0304 	and.w	r3, r3, #4
 8002dea:	60bb      	str	r3, [r7, #8]
 8002dec:	68bb      	ldr	r3, [r7, #8]
    /**ADC3 GPIO Configuration
    PC2_C     ------> ADC3_INP0
    */
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8002dee:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8002df2:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8002df6:	f000 feed 	bl	8003bd4 <HAL_SYSCFG_AnalogSwitchConfig>

    /* ADC3 interrupt Init */
    HAL_NVIC_SetPriority(ADC3_IRQn, 0, 0);
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	2100      	movs	r1, #0
 8002dfe:	207f      	movs	r0, #127	; 0x7f
 8002e00:	f002 fd3f 	bl	8005882 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
 8002e04:	207f      	movs	r0, #127	; 0x7f
 8002e06:	f002 fd56 	bl	80058b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8002e0a:	bf00      	nop
 8002e0c:	37d0      	adds	r7, #208	; 0xd0
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}
 8002e12:	bf00      	nop
 8002e14:	58026000 	.word	0x58026000
 8002e18:	58024400 	.word	0x58024400

08002e1c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b08a      	sub	sp, #40	; 0x28
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e24:	f107 0314 	add.w	r3, r7, #20
 8002e28:	2200      	movs	r2, #0
 8002e2a:	601a      	str	r2, [r3, #0]
 8002e2c:	605a      	str	r2, [r3, #4]
 8002e2e:	609a      	str	r2, [r3, #8]
 8002e30:	60da      	str	r2, [r3, #12]
 8002e32:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a18      	ldr	r2, [pc, #96]	; (8002e9c <HAL_DAC_MspInit+0x80>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d129      	bne.n	8002e92 <HAL_DAC_MspInit+0x76>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8002e3e:	4b18      	ldr	r3, [pc, #96]	; (8002ea0 <HAL_DAC_MspInit+0x84>)
 8002e40:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002e44:	4a16      	ldr	r2, [pc, #88]	; (8002ea0 <HAL_DAC_MspInit+0x84>)
 8002e46:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002e4a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002e4e:	4b14      	ldr	r3, [pc, #80]	; (8002ea0 <HAL_DAC_MspInit+0x84>)
 8002e50:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002e54:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002e58:	613b      	str	r3, [r7, #16]
 8002e5a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e5c:	4b10      	ldr	r3, [pc, #64]	; (8002ea0 <HAL_DAC_MspInit+0x84>)
 8002e5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e62:	4a0f      	ldr	r2, [pc, #60]	; (8002ea0 <HAL_DAC_MspInit+0x84>)
 8002e64:	f043 0301 	orr.w	r3, r3, #1
 8002e68:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002e6c:	4b0c      	ldr	r3, [pc, #48]	; (8002ea0 <HAL_DAC_MspInit+0x84>)
 8002e6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e72:	f003 0301 	and.w	r3, r3, #1
 8002e76:	60fb      	str	r3, [r7, #12]
 8002e78:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002e7a:	2310      	movs	r3, #16
 8002e7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002e7e:	2303      	movs	r3, #3
 8002e80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e82:	2300      	movs	r3, #0
 8002e84:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e86:	f107 0314 	add.w	r3, r7, #20
 8002e8a:	4619      	mov	r1, r3
 8002e8c:	4805      	ldr	r0, [pc, #20]	; (8002ea4 <HAL_DAC_MspInit+0x88>)
 8002e8e:	f004 fa81 	bl	8007394 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8002e92:	bf00      	nop
 8002e94:	3728      	adds	r7, #40	; 0x28
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}
 8002e9a:	bf00      	nop
 8002e9c:	40007400 	.word	0x40007400
 8002ea0:	58024400 	.word	0x58024400
 8002ea4:	58020000 	.word	0x58020000

08002ea8 <HAL_HRTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hhrtim: HRTIM handle pointer
* @retval None
*/
void HAL_HRTIM_MspInit(HRTIM_HandleTypeDef* hhrtim)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b0b4      	sub	sp, #208	; 0xd0
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002eb0:	f107 0310 	add.w	r3, r7, #16
 8002eb4:	22c0      	movs	r2, #192	; 0xc0
 8002eb6:	2100      	movs	r1, #0
 8002eb8:	4618      	mov	r0, r3
 8002eba:	f016 fe37 	bl	8019b2c <memset>
  if(hhrtim->Instance==HRTIM1)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a1c      	ldr	r2, [pc, #112]	; (8002f34 <HAL_HRTIM_MspInit+0x8c>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d131      	bne.n	8002f2c <HAL_HRTIM_MspInit+0x84>

  /* USER CODE END HRTIM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_HRTIM1;
 8002ec8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ecc:	f04f 0300 	mov.w	r3, #0
 8002ed0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Hrtim1ClockSelection = RCC_HRTIM1CLK_TIMCLK;
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002eda:	f107 0310 	add.w	r3, r7, #16
 8002ede:	4618      	mov	r0, r3
 8002ee0:	f007 fbd6 	bl	800a690 <HAL_RCCEx_PeriphCLKConfig>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d001      	beq.n	8002eee <HAL_HRTIM_MspInit+0x46>
    {
      Error_Handler();
 8002eea:	f7ff fee5 	bl	8002cb8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_HRTIM1_CLK_ENABLE();
 8002eee:	4b12      	ldr	r3, [pc, #72]	; (8002f38 <HAL_HRTIM_MspInit+0x90>)
 8002ef0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002ef4:	4a10      	ldr	r2, [pc, #64]	; (8002f38 <HAL_HRTIM_MspInit+0x90>)
 8002ef6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002efa:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002efe:	4b0e      	ldr	r3, [pc, #56]	; (8002f38 <HAL_HRTIM_MspInit+0x90>)
 8002f00:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002f04:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002f08:	60fb      	str	r3, [r7, #12]
 8002f0a:	68fb      	ldr	r3, [r7, #12]
    /* HRTIM1 interrupt Init */
    HAL_NVIC_SetPriority(HRTIM1_TIMA_IRQn, 0, 0);
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	2100      	movs	r1, #0
 8002f10:	2068      	movs	r0, #104	; 0x68
 8002f12:	f002 fcb6 	bl	8005882 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(HRTIM1_TIMA_IRQn);
 8002f16:	2068      	movs	r0, #104	; 0x68
 8002f18:	f002 fccd 	bl	80058b6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(HRTIM1_TIME_IRQn, 0, 0);
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	2100      	movs	r1, #0
 8002f20:	206c      	movs	r0, #108	; 0x6c
 8002f22:	f002 fcae 	bl	8005882 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(HRTIM1_TIME_IRQn);
 8002f26:	206c      	movs	r0, #108	; 0x6c
 8002f28:	f002 fcc5 	bl	80058b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN HRTIM1_MspInit 1 */

  /* USER CODE END HRTIM1_MspInit 1 */
  }

}
 8002f2c:	bf00      	nop
 8002f2e:	37d0      	adds	r7, #208	; 0xd0
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd80      	pop	{r7, pc}
 8002f34:	40017400 	.word	0x40017400
 8002f38:	58024400 	.word	0x58024400

08002f3c <HAL_HRTIM_MspPostInit>:

void HAL_HRTIM_MspPostInit(HRTIM_HandleTypeDef* hhrtim)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b08a      	sub	sp, #40	; 0x28
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f44:	f107 0314 	add.w	r3, r7, #20
 8002f48:	2200      	movs	r2, #0
 8002f4a:	601a      	str	r2, [r3, #0]
 8002f4c:	605a      	str	r2, [r3, #4]
 8002f4e:	609a      	str	r2, [r3, #8]
 8002f50:	60da      	str	r2, [r3, #12]
 8002f52:	611a      	str	r2, [r3, #16]
  if(hhrtim->Instance==HRTIM1)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a22      	ldr	r2, [pc, #136]	; (8002fe4 <HAL_HRTIM_MspPostInit+0xa8>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d13d      	bne.n	8002fda <HAL_HRTIM_MspPostInit+0x9e>
  {
  /* USER CODE BEGIN HRTIM1_MspPostInit 0 */

  /* USER CODE END HRTIM1_MspPostInit 0 */

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002f5e:	4b22      	ldr	r3, [pc, #136]	; (8002fe8 <HAL_HRTIM_MspPostInit+0xac>)
 8002f60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f64:	4a20      	ldr	r2, [pc, #128]	; (8002fe8 <HAL_HRTIM_MspPostInit+0xac>)
 8002f66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002f6a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002f6e:	4b1e      	ldr	r3, [pc, #120]	; (8002fe8 <HAL_HRTIM_MspPostInit+0xac>)
 8002f70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f78:	613b      	str	r3, [r7, #16]
 8002f7a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f7c:	4b1a      	ldr	r3, [pc, #104]	; (8002fe8 <HAL_HRTIM_MspPostInit+0xac>)
 8002f7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f82:	4a19      	ldr	r2, [pc, #100]	; (8002fe8 <HAL_HRTIM_MspPostInit+0xac>)
 8002f84:	f043 0304 	orr.w	r3, r3, #4
 8002f88:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002f8c:	4b16      	ldr	r3, [pc, #88]	; (8002fe8 <HAL_HRTIM_MspPostInit+0xac>)
 8002f8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f92:	f003 0304 	and.w	r3, r3, #4
 8002f96:	60fb      	str	r3, [r7, #12]
 8002f98:	68fb      	ldr	r3, [r7, #12]
    /**HRTIM GPIO Configuration
    PG6     ------> HRTIM_CHE1
    PC6     ------> HRTIM_CHA1
    PC7     ------> HRTIM_CHA2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002f9a:	2340      	movs	r3, #64	; 0x40
 8002f9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f9e:	2302      	movs	r3, #2
 8002fa0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fa6:	2303      	movs	r3, #3
 8002fa8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_HRTIM1;
 8002faa:	2302      	movs	r3, #2
 8002fac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002fae:	f107 0314 	add.w	r3, r7, #20
 8002fb2:	4619      	mov	r1, r3
 8002fb4:	480d      	ldr	r0, [pc, #52]	; (8002fec <HAL_HRTIM_MspPostInit+0xb0>)
 8002fb6:	f004 f9ed 	bl	8007394 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002fba:	23c0      	movs	r3, #192	; 0xc0
 8002fbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fbe:	2302      	movs	r3, #2
 8002fc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fc6:	2303      	movs	r3, #3
 8002fc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_HRTIM1;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002fce:	f107 0314 	add.w	r3, r7, #20
 8002fd2:	4619      	mov	r1, r3
 8002fd4:	4806      	ldr	r0, [pc, #24]	; (8002ff0 <HAL_HRTIM_MspPostInit+0xb4>)
 8002fd6:	f004 f9dd 	bl	8007394 <HAL_GPIO_Init>
  /* USER CODE BEGIN HRTIM1_MspPostInit 1 */

  /* USER CODE END HRTIM1_MspPostInit 1 */
  }

}
 8002fda:	bf00      	nop
 8002fdc:	3728      	adds	r7, #40	; 0x28
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}
 8002fe2:	bf00      	nop
 8002fe4:	40017400 	.word	0x40017400
 8002fe8:	58024400 	.word	0x58024400
 8002fec:	58021800 	.word	0x58021800
 8002ff0:	58020800 	.word	0x58020800

08002ff4 <HAL_LPTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hlptim: LPTIM handle pointer
* @retval None
*/
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b0b4      	sub	sp, #208	; 0xd0
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002ffc:	f107 0310 	add.w	r3, r7, #16
 8003000:	22c0      	movs	r2, #192	; 0xc0
 8003002:	2100      	movs	r1, #0
 8003004:	4618      	mov	r0, r3
 8003006:	f016 fd91 	bl	8019b2c <memset>
  if(hlptim->Instance==LPTIM1)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4a19      	ldr	r2, [pc, #100]	; (8003074 <HAL_LPTIM_MspInit+0x80>)
 8003010:	4293      	cmp	r3, r2
 8003012:	d12a      	bne.n	800306a <HAL_LPTIM_MspInit+0x76>

  /* USER CODE END LPTIM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1;
 8003014:	f04f 0220 	mov.w	r2, #32
 8003018:	f04f 0300 	mov.w	r3, #0
 800301c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_LSE;
 8003020:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8003024:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003028:	f107 0310 	add.w	r3, r7, #16
 800302c:	4618      	mov	r0, r3
 800302e:	f007 fb2f 	bl	800a690 <HAL_RCCEx_PeriphCLKConfig>
 8003032:	4603      	mov	r3, r0
 8003034:	2b00      	cmp	r3, #0
 8003036:	d001      	beq.n	800303c <HAL_LPTIM_MspInit+0x48>
    {
      Error_Handler();
 8003038:	f7ff fe3e 	bl	8002cb8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 800303c:	4b0e      	ldr	r3, [pc, #56]	; (8003078 <HAL_LPTIM_MspInit+0x84>)
 800303e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003042:	4a0d      	ldr	r2, [pc, #52]	; (8003078 <HAL_LPTIM_MspInit+0x84>)
 8003044:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003048:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800304c:	4b0a      	ldr	r3, [pc, #40]	; (8003078 <HAL_LPTIM_MspInit+0x84>)
 800304e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003052:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003056:	60fb      	str	r3, [r7, #12]
 8003058:	68fb      	ldr	r3, [r7, #12]
    /* LPTIM1 interrupt Init */
    HAL_NVIC_SetPriority(LPTIM1_IRQn, 0, 0);
 800305a:	2200      	movs	r2, #0
 800305c:	2100      	movs	r1, #0
 800305e:	205d      	movs	r0, #93	; 0x5d
 8003060:	f002 fc0f 	bl	8005882 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
 8003064:	205d      	movs	r0, #93	; 0x5d
 8003066:	f002 fc26 	bl	80058b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPTIM1_MspInit 1 */

  /* USER CODE END LPTIM1_MspInit 1 */
  }

}
 800306a:	bf00      	nop
 800306c:	37d0      	adds	r7, #208	; 0xd0
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}
 8003072:	bf00      	nop
 8003074:	40002400 	.word	0x40002400
 8003078:	58024400 	.word	0x58024400

0800307c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800307c:	b480      	push	{r7}
 800307e:	b089      	sub	sp, #36	; 0x24
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a35      	ldr	r2, [pc, #212]	; (8003160 <HAL_TIM_Base_MspInit+0xe4>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d10f      	bne.n	80030ae <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800308e:	4b35      	ldr	r3, [pc, #212]	; (8003164 <HAL_TIM_Base_MspInit+0xe8>)
 8003090:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003094:	4a33      	ldr	r2, [pc, #204]	; (8003164 <HAL_TIM_Base_MspInit+0xe8>)
 8003096:	f043 0301 	orr.w	r3, r3, #1
 800309a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800309e:	4b31      	ldr	r3, [pc, #196]	; (8003164 <HAL_TIM_Base_MspInit+0xe8>)
 80030a0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80030a4:	f003 0301 	and.w	r3, r3, #1
 80030a8:	61fb      	str	r3, [r7, #28]
 80030aa:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80030ac:	e052      	b.n	8003154 <HAL_TIM_Base_MspInit+0xd8>
  else if(htim_base->Instance==TIM2)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030b6:	d10f      	bne.n	80030d8 <HAL_TIM_Base_MspInit+0x5c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80030b8:	4b2a      	ldr	r3, [pc, #168]	; (8003164 <HAL_TIM_Base_MspInit+0xe8>)
 80030ba:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80030be:	4a29      	ldr	r2, [pc, #164]	; (8003164 <HAL_TIM_Base_MspInit+0xe8>)
 80030c0:	f043 0301 	orr.w	r3, r3, #1
 80030c4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80030c8:	4b26      	ldr	r3, [pc, #152]	; (8003164 <HAL_TIM_Base_MspInit+0xe8>)
 80030ca:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80030ce:	f003 0301 	and.w	r3, r3, #1
 80030d2:	61bb      	str	r3, [r7, #24]
 80030d4:	69bb      	ldr	r3, [r7, #24]
}
 80030d6:	e03d      	b.n	8003154 <HAL_TIM_Base_MspInit+0xd8>
  else if(htim_base->Instance==TIM3)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a22      	ldr	r2, [pc, #136]	; (8003168 <HAL_TIM_Base_MspInit+0xec>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d10f      	bne.n	8003102 <HAL_TIM_Base_MspInit+0x86>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80030e2:	4b20      	ldr	r3, [pc, #128]	; (8003164 <HAL_TIM_Base_MspInit+0xe8>)
 80030e4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80030e8:	4a1e      	ldr	r2, [pc, #120]	; (8003164 <HAL_TIM_Base_MspInit+0xe8>)
 80030ea:	f043 0302 	orr.w	r3, r3, #2
 80030ee:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80030f2:	4b1c      	ldr	r3, [pc, #112]	; (8003164 <HAL_TIM_Base_MspInit+0xe8>)
 80030f4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80030f8:	f003 0302 	and.w	r3, r3, #2
 80030fc:	617b      	str	r3, [r7, #20]
 80030fe:	697b      	ldr	r3, [r7, #20]
}
 8003100:	e028      	b.n	8003154 <HAL_TIM_Base_MspInit+0xd8>
  else if(htim_base->Instance==TIM4)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a19      	ldr	r2, [pc, #100]	; (800316c <HAL_TIM_Base_MspInit+0xf0>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d10f      	bne.n	800312c <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800310c:	4b15      	ldr	r3, [pc, #84]	; (8003164 <HAL_TIM_Base_MspInit+0xe8>)
 800310e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003112:	4a14      	ldr	r2, [pc, #80]	; (8003164 <HAL_TIM_Base_MspInit+0xe8>)
 8003114:	f043 0304 	orr.w	r3, r3, #4
 8003118:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800311c:	4b11      	ldr	r3, [pc, #68]	; (8003164 <HAL_TIM_Base_MspInit+0xe8>)
 800311e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003122:	f003 0304 	and.w	r3, r3, #4
 8003126:	613b      	str	r3, [r7, #16]
 8003128:	693b      	ldr	r3, [r7, #16]
}
 800312a:	e013      	b.n	8003154 <HAL_TIM_Base_MspInit+0xd8>
  else if(htim_base->Instance==TIM5)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a0f      	ldr	r2, [pc, #60]	; (8003170 <HAL_TIM_Base_MspInit+0xf4>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d10e      	bne.n	8003154 <HAL_TIM_Base_MspInit+0xd8>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003136:	4b0b      	ldr	r3, [pc, #44]	; (8003164 <HAL_TIM_Base_MspInit+0xe8>)
 8003138:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800313c:	4a09      	ldr	r2, [pc, #36]	; (8003164 <HAL_TIM_Base_MspInit+0xe8>)
 800313e:	f043 0308 	orr.w	r3, r3, #8
 8003142:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003146:	4b07      	ldr	r3, [pc, #28]	; (8003164 <HAL_TIM_Base_MspInit+0xe8>)
 8003148:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800314c:	f003 0308 	and.w	r3, r3, #8
 8003150:	60fb      	str	r3, [r7, #12]
 8003152:	68fb      	ldr	r3, [r7, #12]
}
 8003154:	bf00      	nop
 8003156:	3724      	adds	r7, #36	; 0x24
 8003158:	46bd      	mov	sp, r7
 800315a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315e:	4770      	bx	lr
 8003160:	40010000 	.word	0x40010000
 8003164:	58024400 	.word	0x58024400
 8003168:	40000400 	.word	0x40000400
 800316c:	40000800 	.word	0x40000800
 8003170:	40000c00 	.word	0x40000c00

08003174 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b0ba      	sub	sp, #232	; 0xe8
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800317c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003180:	2200      	movs	r2, #0
 8003182:	601a      	str	r2, [r3, #0]
 8003184:	605a      	str	r2, [r3, #4]
 8003186:	609a      	str	r2, [r3, #8]
 8003188:	60da      	str	r2, [r3, #12]
 800318a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800318c:	f107 0310 	add.w	r3, r7, #16
 8003190:	22c0      	movs	r2, #192	; 0xc0
 8003192:	2100      	movs	r1, #0
 8003194:	4618      	mov	r0, r3
 8003196:	f016 fcc9 	bl	8019b2c <memset>
  if(huart->Instance==USART3)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4a27      	ldr	r2, [pc, #156]	; (800323c <HAL_UART_MspInit+0xc8>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d146      	bne.n	8003232 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80031a4:	f04f 0202 	mov.w	r2, #2
 80031a8:	f04f 0300 	mov.w	r3, #0
 80031ac:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80031b0:	2300      	movs	r3, #0
 80031b2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80031b6:	f107 0310 	add.w	r3, r7, #16
 80031ba:	4618      	mov	r0, r3
 80031bc:	f007 fa68 	bl	800a690 <HAL_RCCEx_PeriphCLKConfig>
 80031c0:	4603      	mov	r3, r0
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d001      	beq.n	80031ca <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80031c6:	f7ff fd77 	bl	8002cb8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80031ca:	4b1d      	ldr	r3, [pc, #116]	; (8003240 <HAL_UART_MspInit+0xcc>)
 80031cc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80031d0:	4a1b      	ldr	r2, [pc, #108]	; (8003240 <HAL_UART_MspInit+0xcc>)
 80031d2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80031d6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80031da:	4b19      	ldr	r3, [pc, #100]	; (8003240 <HAL_UART_MspInit+0xcc>)
 80031dc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80031e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80031e4:	60fb      	str	r3, [r7, #12]
 80031e6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80031e8:	4b15      	ldr	r3, [pc, #84]	; (8003240 <HAL_UART_MspInit+0xcc>)
 80031ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80031ee:	4a14      	ldr	r2, [pc, #80]	; (8003240 <HAL_UART_MspInit+0xcc>)
 80031f0:	f043 0308 	orr.w	r3, r3, #8
 80031f4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80031f8:	4b11      	ldr	r3, [pc, #68]	; (8003240 <HAL_UART_MspInit+0xcc>)
 80031fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80031fe:	f003 0308 	and.w	r3, r3, #8
 8003202:	60bb      	str	r3, [r7, #8]
 8003204:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8003206:	f44f 7340 	mov.w	r3, #768	; 0x300
 800320a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800320e:	2302      	movs	r3, #2
 8003210:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003214:	2300      	movs	r3, #0
 8003216:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800321a:	2300      	movs	r3, #0
 800321c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003220:	2307      	movs	r3, #7
 8003222:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003226:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800322a:	4619      	mov	r1, r3
 800322c:	4805      	ldr	r0, [pc, #20]	; (8003244 <HAL_UART_MspInit+0xd0>)
 800322e:	f004 f8b1 	bl	8007394 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003232:	bf00      	nop
 8003234:	37e8      	adds	r7, #232	; 0xe8
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}
 800323a:	bf00      	nop
 800323c:	40004800 	.word	0x40004800
 8003240:	58024400 	.word	0x58024400
 8003244:	58020c00 	.word	0x58020c00

08003248 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 800324c:	f007 fa04 	bl	800a658 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
		Error_Handler();
 8003250:	f7ff fd32 	bl	8002cb8 <Error_Handler>
 8003254:	e7fc      	b.n	8003250 <NMI_Handler+0x8>

08003256 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003256:	b580      	push	{r7, lr}
 8003258:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  Error_Handler();
 800325a:	f7ff fd2d 	bl	8002cb8 <Error_Handler>
 800325e:	e7fc      	b.n	800325a <HardFault_Handler+0x4>

08003260 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	af00      	add	r7, sp, #0

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_MemoryManagement_IRQn 0 */
	  Error_Handler();
 8003264:	f7ff fd28 	bl	8002cb8 <Error_Handler>
 8003268:	e7fc      	b.n	8003264 <MemManage_Handler+0x4>

0800326a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800326a:	b580      	push	{r7, lr}
 800326c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */
  /* USER CODE END BusFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_BusFault_IRQn 0 */
	  Error_Handler();
 800326e:	f7ff fd23 	bl	8002cb8 <Error_Handler>
 8003272:	e7fc      	b.n	800326e <BusFault_Handler+0x4>

08003274 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	af00      	add	r7, sp, #0

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_UsageFault_IRQn 0 */
	  Error_Handler();
 8003278:	f7ff fd1e 	bl	8002cb8 <Error_Handler>
 800327c:	e7fc      	b.n	8003278 <UsageFault_Handler+0x4>

0800327e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800327e:	b480      	push	{r7}
 8003280:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003282:	bf00      	nop
 8003284:	46bd      	mov	sp, r7
 8003286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328a:	4770      	bx	lr

0800328c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800328c:	b480      	push	{r7}
 800328e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003290:	bf00      	nop
 8003292:	46bd      	mov	sp, r7
 8003294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003298:	4770      	bx	lr

0800329a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800329a:	b480      	push	{r7}
 800329c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800329e:	bf00      	nop
 80032a0:	46bd      	mov	sp, r7
 80032a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a6:	4770      	bx	lr

080032a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80032ac:	f000 fc2e 	bl	8003b0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80032b0:	bf00      	nop
 80032b2:	bd80      	pop	{r7, pc}

080032b4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 80032b8:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80032bc:	f004 fa65 	bl	800778a <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BLUE_BUTTON_Pin);
 80032c0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80032c4:	f004 fa61 	bl	800778a <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80032c8:	bf00      	nop
 80032ca:	bd80      	pop	{r7, pc}

080032cc <LPTIM1_IRQHandler>:

/**
  * @brief This function handles LPTIM1 global interrupt.
  */
void LPTIM1_IRQHandler(void)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPTIM1_IRQn 0 */
  /* USER CODE END LPTIM1_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim1);
 80032d0:	4802      	ldr	r0, [pc, #8]	; (80032dc <LPTIM1_IRQHandler+0x10>)
 80032d2:	f005 fe9a 	bl	800900a <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN LPTIM1_IRQn 1 */
  /* USER CODE END LPTIM1_IRQn 1 */
}
 80032d6:	bf00      	nop
 80032d8:	bd80      	pop	{r7, pc}
 80032da:	bf00      	nop
 80032dc:	200003a0 	.word	0x200003a0

080032e0 <HRTIM1_TIMA_IRQHandler>:

/**
  * @brief This function handles HRTIM timer A global interrupt.
  */
void HRTIM1_TIMA_IRQHandler(void)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HRTIM1_TIMA_IRQn 0 */

  /* USER CODE END HRTIM1_TIMA_IRQn 0 */
  HAL_HRTIM_IRQHandler(&hhrtim,HRTIM_TIMERINDEX_TIMER_A);
 80032e4:	2100      	movs	r1, #0
 80032e6:	4802      	ldr	r0, [pc, #8]	; (80032f0 <HRTIM1_TIMA_IRQHandler+0x10>)
 80032e8:	f004 fec6 	bl	8008078 <HAL_HRTIM_IRQHandler>
  /* USER CODE BEGIN HRTIM1_TIMA_IRQn 1 */

  /* USER CODE END HRTIM1_TIMA_IRQn 1 */
}
 80032ec:	bf00      	nop
 80032ee:	bd80      	pop	{r7, pc}
 80032f0:	200002c4 	.word	0x200002c4

080032f4 <HRTIM1_TIME_IRQHandler>:

/**
  * @brief This function handles HRTIM timer E global interrupt.
  */
void HRTIM1_TIME_IRQHandler(void)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HRTIM1_TIME_IRQn 0 */

  /* USER CODE END HRTIM1_TIME_IRQn 0 */
  HAL_HRTIM_IRQHandler(&hhrtim,HRTIM_TIMERINDEX_TIMER_E);
 80032f8:	2104      	movs	r1, #4
 80032fa:	4802      	ldr	r0, [pc, #8]	; (8003304 <HRTIM1_TIME_IRQHandler+0x10>)
 80032fc:	f004 febc 	bl	8008078 <HAL_HRTIM_IRQHandler>
  /* USER CODE BEGIN HRTIM1_TIME_IRQn 1 */

  /* USER CODE END HRTIM1_TIME_IRQn 1 */
}
 8003300:	bf00      	nop
 8003302:	bd80      	pop	{r7, pc}
 8003304:	200002c4 	.word	0x200002c4

08003308 <ADC3_IRQHandler>:

/**
  * @brief This function handles ADC3 global interrupt.
  */
void ADC3_IRQHandler(void)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC3_IRQn 0 */

  /* USER CODE END ADC3_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 800330c:	4802      	ldr	r0, [pc, #8]	; (8003318 <ADC3_IRQHandler+0x10>)
 800330e:	f001 f981 	bl	8004614 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC3_IRQn 1 */

  /* USER CODE END ADC3_IRQn 1 */
}
 8003312:	bf00      	nop
 8003314:	bd80      	pop	{r7, pc}
 8003316:	bf00      	nop
 8003318:	2000024c 	.word	0x2000024c

0800331c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800331c:	b480      	push	{r7}
 800331e:	af00      	add	r7, sp, #0
	return 1;
 8003320:	2301      	movs	r3, #1
}
 8003322:	4618      	mov	r0, r3
 8003324:	46bd      	mov	sp, r7
 8003326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332a:	4770      	bx	lr

0800332c <_kill>:

int _kill(int pid, int sig)
{
 800332c:	b480      	push	{r7}
 800332e:	b083      	sub	sp, #12
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
 8003334:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003336:	4b05      	ldr	r3, [pc, #20]	; (800334c <_kill+0x20>)
 8003338:	2216      	movs	r2, #22
 800333a:	601a      	str	r2, [r3, #0]
	return -1;
 800333c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003340:	4618      	mov	r0, r3
 8003342:	370c      	adds	r7, #12
 8003344:	46bd      	mov	sp, r7
 8003346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334a:	4770      	bx	lr
 800334c:	20007324 	.word	0x20007324

08003350 <_exit>:

void _exit (int status)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b082      	sub	sp, #8
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003358:	f04f 31ff 	mov.w	r1, #4294967295
 800335c:	6878      	ldr	r0, [r7, #4]
 800335e:	f7ff ffe5 	bl	800332c <_kill>
	while (1) {}		/* Make sure we hang here */
 8003362:	e7fe      	b.n	8003362 <_exit+0x12>

08003364 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b086      	sub	sp, #24
 8003368:	af00      	add	r7, sp, #0
 800336a:	60f8      	str	r0, [r7, #12]
 800336c:	60b9      	str	r1, [r7, #8]
 800336e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003370:	2300      	movs	r3, #0
 8003372:	617b      	str	r3, [r7, #20]
 8003374:	e00a      	b.n	800338c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003376:	f3af 8000 	nop.w
 800337a:	4601      	mov	r1, r0
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	1c5a      	adds	r2, r3, #1
 8003380:	60ba      	str	r2, [r7, #8]
 8003382:	b2ca      	uxtb	r2, r1
 8003384:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003386:	697b      	ldr	r3, [r7, #20]
 8003388:	3301      	adds	r3, #1
 800338a:	617b      	str	r3, [r7, #20]
 800338c:	697a      	ldr	r2, [r7, #20]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	429a      	cmp	r2, r3
 8003392:	dbf0      	blt.n	8003376 <_read+0x12>
	}

return len;
 8003394:	687b      	ldr	r3, [r7, #4]
}
 8003396:	4618      	mov	r0, r3
 8003398:	3718      	adds	r7, #24
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}

0800339e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800339e:	b580      	push	{r7, lr}
 80033a0:	b086      	sub	sp, #24
 80033a2:	af00      	add	r7, sp, #0
 80033a4:	60f8      	str	r0, [r7, #12]
 80033a6:	60b9      	str	r1, [r7, #8]
 80033a8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80033aa:	2300      	movs	r3, #0
 80033ac:	617b      	str	r3, [r7, #20]
 80033ae:	e009      	b.n	80033c4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80033b0:	68bb      	ldr	r3, [r7, #8]
 80033b2:	1c5a      	adds	r2, r3, #1
 80033b4:	60ba      	str	r2, [r7, #8]
 80033b6:	781b      	ldrb	r3, [r3, #0]
 80033b8:	4618      	mov	r0, r3
 80033ba:	f7fe fc17 	bl	8001bec <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80033be:	697b      	ldr	r3, [r7, #20]
 80033c0:	3301      	adds	r3, #1
 80033c2:	617b      	str	r3, [r7, #20]
 80033c4:	697a      	ldr	r2, [r7, #20]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	429a      	cmp	r2, r3
 80033ca:	dbf1      	blt.n	80033b0 <_write+0x12>
	}
	return len;
 80033cc:	687b      	ldr	r3, [r7, #4]
}
 80033ce:	4618      	mov	r0, r3
 80033d0:	3718      	adds	r7, #24
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bd80      	pop	{r7, pc}

080033d6 <_close>:

int _close(int file)
{
 80033d6:	b480      	push	{r7}
 80033d8:	b083      	sub	sp, #12
 80033da:	af00      	add	r7, sp, #0
 80033dc:	6078      	str	r0, [r7, #4]
	return -1;
 80033de:	f04f 33ff 	mov.w	r3, #4294967295
}
 80033e2:	4618      	mov	r0, r3
 80033e4:	370c      	adds	r7, #12
 80033e6:	46bd      	mov	sp, r7
 80033e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ec:	4770      	bx	lr

080033ee <_fstat>:


int _fstat(int file, struct stat *st)
{
 80033ee:	b480      	push	{r7}
 80033f0:	b083      	sub	sp, #12
 80033f2:	af00      	add	r7, sp, #0
 80033f4:	6078      	str	r0, [r7, #4]
 80033f6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80033fe:	605a      	str	r2, [r3, #4]
	return 0;
 8003400:	2300      	movs	r3, #0
}
 8003402:	4618      	mov	r0, r3
 8003404:	370c      	adds	r7, #12
 8003406:	46bd      	mov	sp, r7
 8003408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340c:	4770      	bx	lr

0800340e <_isatty>:

int _isatty(int file)
{
 800340e:	b480      	push	{r7}
 8003410:	b083      	sub	sp, #12
 8003412:	af00      	add	r7, sp, #0
 8003414:	6078      	str	r0, [r7, #4]
	return 1;
 8003416:	2301      	movs	r3, #1
}
 8003418:	4618      	mov	r0, r3
 800341a:	370c      	adds	r7, #12
 800341c:	46bd      	mov	sp, r7
 800341e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003422:	4770      	bx	lr

08003424 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003424:	b480      	push	{r7}
 8003426:	b085      	sub	sp, #20
 8003428:	af00      	add	r7, sp, #0
 800342a:	60f8      	str	r0, [r7, #12]
 800342c:	60b9      	str	r1, [r7, #8]
 800342e:	607a      	str	r2, [r7, #4]
	return 0;
 8003430:	2300      	movs	r3, #0
}
 8003432:	4618      	mov	r0, r3
 8003434:	3714      	adds	r7, #20
 8003436:	46bd      	mov	sp, r7
 8003438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343c:	4770      	bx	lr
	...

08003440 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003440:	b480      	push	{r7}
 8003442:	b087      	sub	sp, #28
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003448:	4a14      	ldr	r2, [pc, #80]	; (800349c <_sbrk+0x5c>)
 800344a:	4b15      	ldr	r3, [pc, #84]	; (80034a0 <_sbrk+0x60>)
 800344c:	1ad3      	subs	r3, r2, r3
 800344e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003450:	697b      	ldr	r3, [r7, #20]
 8003452:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003454:	4b13      	ldr	r3, [pc, #76]	; (80034a4 <_sbrk+0x64>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d102      	bne.n	8003462 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800345c:	4b11      	ldr	r3, [pc, #68]	; (80034a4 <_sbrk+0x64>)
 800345e:	4a12      	ldr	r2, [pc, #72]	; (80034a8 <_sbrk+0x68>)
 8003460:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003462:	4b10      	ldr	r3, [pc, #64]	; (80034a4 <_sbrk+0x64>)
 8003464:	681a      	ldr	r2, [r3, #0]
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	4413      	add	r3, r2
 800346a:	693a      	ldr	r2, [r7, #16]
 800346c:	429a      	cmp	r2, r3
 800346e:	d205      	bcs.n	800347c <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8003470:	4b0e      	ldr	r3, [pc, #56]	; (80034ac <_sbrk+0x6c>)
 8003472:	220c      	movs	r2, #12
 8003474:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003476:	f04f 33ff 	mov.w	r3, #4294967295
 800347a:	e009      	b.n	8003490 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 800347c:	4b09      	ldr	r3, [pc, #36]	; (80034a4 <_sbrk+0x64>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003482:	4b08      	ldr	r3, [pc, #32]	; (80034a4 <_sbrk+0x64>)
 8003484:	681a      	ldr	r2, [r3, #0]
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	4413      	add	r3, r2
 800348a:	4a06      	ldr	r2, [pc, #24]	; (80034a4 <_sbrk+0x64>)
 800348c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800348e:	68fb      	ldr	r3, [r7, #12]
}
 8003490:	4618      	mov	r0, r3
 8003492:	371c      	adds	r7, #28
 8003494:	46bd      	mov	sp, r7
 8003496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349a:	4770      	bx	lr
 800349c:	20020000 	.word	0x20020000
 80034a0:	00000400 	.word	0x00000400
 80034a4:	20000640 	.word	0x20000640
 80034a8:	20007338 	.word	0x20007338
 80034ac:	20007324 	.word	0x20007324

080034b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80034b0:	b480      	push	{r7}
 80034b2:	b083      	sub	sp, #12
 80034b4:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80034b6:	4b3f      	ldr	r3, [pc, #252]	; (80035b4 <SystemInit+0x104>)
 80034b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034bc:	4a3d      	ldr	r2, [pc, #244]	; (80035b4 <SystemInit+0x104>)
 80034be:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80034c2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80034c6:	4b3c      	ldr	r3, [pc, #240]	; (80035b8 <SystemInit+0x108>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f003 030f 	and.w	r3, r3, #15
 80034ce:	2b06      	cmp	r3, #6
 80034d0:	d807      	bhi.n	80034e2 <SystemInit+0x32>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */

	  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80034d2:	4b39      	ldr	r3, [pc, #228]	; (80035b8 <SystemInit+0x108>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f023 030f 	bic.w	r3, r3, #15
 80034da:	4a37      	ldr	r2, [pc, #220]	; (80035b8 <SystemInit+0x108>)
 80034dc:	f043 0307 	orr.w	r3, r3, #7
 80034e0:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80034e2:	4b36      	ldr	r3, [pc, #216]	; (80035bc <SystemInit+0x10c>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4a35      	ldr	r2, [pc, #212]	; (80035bc <SystemInit+0x10c>)
 80034e8:	f043 0301 	orr.w	r3, r3, #1
 80034ec:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80034ee:	4b33      	ldr	r3, [pc, #204]	; (80035bc <SystemInit+0x10c>)
 80034f0:	2200      	movs	r2, #0
 80034f2:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80034f4:	4b31      	ldr	r3, [pc, #196]	; (80035bc <SystemInit+0x10c>)
 80034f6:	681a      	ldr	r2, [r3, #0]
 80034f8:	4930      	ldr	r1, [pc, #192]	; (80035bc <SystemInit+0x10c>)
 80034fa:	4b31      	ldr	r3, [pc, #196]	; (80035c0 <SystemInit+0x110>)
 80034fc:	4013      	ands	r3, r2
 80034fe:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003500:	4b2d      	ldr	r3, [pc, #180]	; (80035b8 <SystemInit+0x108>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f003 0308 	and.w	r3, r3, #8
 8003508:	2b00      	cmp	r3, #0
 800350a:	d007      	beq.n	800351c <SystemInit+0x6c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800350c:	4b2a      	ldr	r3, [pc, #168]	; (80035b8 <SystemInit+0x108>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f023 030f 	bic.w	r3, r3, #15
 8003514:	4a28      	ldr	r2, [pc, #160]	; (80035b8 <SystemInit+0x108>)
 8003516:	f043 0307 	orr.w	r3, r3, #7
 800351a:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800351c:	4b27      	ldr	r3, [pc, #156]	; (80035bc <SystemInit+0x10c>)
 800351e:	2200      	movs	r2, #0
 8003520:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8003522:	4b26      	ldr	r3, [pc, #152]	; (80035bc <SystemInit+0x10c>)
 8003524:	2200      	movs	r2, #0
 8003526:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8003528:	4b24      	ldr	r3, [pc, #144]	; (80035bc <SystemInit+0x10c>)
 800352a:	2200      	movs	r2, #0
 800352c:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800352e:	4b23      	ldr	r3, [pc, #140]	; (80035bc <SystemInit+0x10c>)
 8003530:	4a24      	ldr	r2, [pc, #144]	; (80035c4 <SystemInit+0x114>)
 8003532:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8003534:	4b21      	ldr	r3, [pc, #132]	; (80035bc <SystemInit+0x10c>)
 8003536:	4a24      	ldr	r2, [pc, #144]	; (80035c8 <SystemInit+0x118>)
 8003538:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800353a:	4b20      	ldr	r3, [pc, #128]	; (80035bc <SystemInit+0x10c>)
 800353c:	4a23      	ldr	r2, [pc, #140]	; (80035cc <SystemInit+0x11c>)
 800353e:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8003540:	4b1e      	ldr	r3, [pc, #120]	; (80035bc <SystemInit+0x10c>)
 8003542:	2200      	movs	r2, #0
 8003544:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8003546:	4b1d      	ldr	r3, [pc, #116]	; (80035bc <SystemInit+0x10c>)
 8003548:	4a20      	ldr	r2, [pc, #128]	; (80035cc <SystemInit+0x11c>)
 800354a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800354c:	4b1b      	ldr	r3, [pc, #108]	; (80035bc <SystemInit+0x10c>)
 800354e:	2200      	movs	r2, #0
 8003550:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8003552:	4b1a      	ldr	r3, [pc, #104]	; (80035bc <SystemInit+0x10c>)
 8003554:	4a1d      	ldr	r2, [pc, #116]	; (80035cc <SystemInit+0x11c>)
 8003556:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8003558:	4b18      	ldr	r3, [pc, #96]	; (80035bc <SystemInit+0x10c>)
 800355a:	2200      	movs	r2, #0
 800355c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800355e:	4b17      	ldr	r3, [pc, #92]	; (80035bc <SystemInit+0x10c>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a16      	ldr	r2, [pc, #88]	; (80035bc <SystemInit+0x10c>)
 8003564:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003568:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800356a:	4b14      	ldr	r3, [pc, #80]	; (80035bc <SystemInit+0x10c>)
 800356c:	2200      	movs	r2, #0
 800356e:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8003570:	4b17      	ldr	r3, [pc, #92]	; (80035d0 <SystemInit+0x120>)
 8003572:	681a      	ldr	r2, [r3, #0]
 8003574:	4b17      	ldr	r3, [pc, #92]	; (80035d4 <SystemInit+0x124>)
 8003576:	4013      	ands	r3, r2
 8003578:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800357c:	d202      	bcs.n	8003584 <SystemInit+0xd4>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800357e:	4b16      	ldr	r3, [pc, #88]	; (80035d8 <SystemInit+0x128>)
 8003580:	2201      	movs	r2, #1
 8003582:	601a      	str	r2, [r3, #0]
#endif /* STM32H7_DEV_ID */

#if defined(DATA_IN_D2_SRAM)
  /* in case of initialized data in D2 SRAM (AHB SRAM), enable the D2 SRAM clock (AHB SRAM clock) */
#if defined(RCC_AHB2ENR_D2SRAM3EN)
  RCC->AHB2ENR |= (RCC_AHB2ENR_D2SRAM1EN | RCC_AHB2ENR_D2SRAM2EN | RCC_AHB2ENR_D2SRAM3EN);
 8003584:	4b0d      	ldr	r3, [pc, #52]	; (80035bc <SystemInit+0x10c>)
 8003586:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800358a:	4a0c      	ldr	r2, [pc, #48]	; (80035bc <SystemInit+0x10c>)
 800358c:	f043 4360 	orr.w	r3, r3, #3758096384	; 0xe0000000
 8003590:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
  RCC->AHB2ENR |= (RCC_AHB2ENR_D2SRAM1EN | RCC_AHB2ENR_D2SRAM2EN);
#else
  RCC->AHB2ENR |= (RCC_AHB2ENR_AHBSRAM1EN | RCC_AHB2ENR_AHBSRAM2EN);
#endif /* RCC_AHB2ENR_D2SRAM3EN */

  tmpreg = RCC->AHB2ENR;
 8003594:	4b09      	ldr	r3, [pc, #36]	; (80035bc <SystemInit+0x10c>)
 8003596:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800359a:	607b      	str	r3, [r7, #4]
  (void) tmpreg;
 800359c:	687b      	ldr	r3, [r7, #4]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800359e:	4b0f      	ldr	r3, [pc, #60]	; (80035dc <SystemInit+0x12c>)
 80035a0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80035a4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80035a6:	bf00      	nop
 80035a8:	370c      	adds	r7, #12
 80035aa:	46bd      	mov	sp, r7
 80035ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b0:	4770      	bx	lr
 80035b2:	bf00      	nop
 80035b4:	e000ed00 	.word	0xe000ed00
 80035b8:	52002000 	.word	0x52002000
 80035bc:	58024400 	.word	0x58024400
 80035c0:	eaf6ed7f 	.word	0xeaf6ed7f
 80035c4:	02020200 	.word	0x02020200
 80035c8:	01ff0000 	.word	0x01ff0000
 80035cc:	01010280 	.word	0x01010280
 80035d0:	5c001000 	.word	0x5c001000
 80035d4:	ffff0000 	.word	0xffff0000
 80035d8:	51008108 	.word	0x51008108
 80035dc:	52004000 	.word	0x52004000

080035e0 <HAL_LPTIM_AutoReloadMatchCallback>:
//		}
//
//	}
//}

void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim){
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b082      	sub	sp, #8
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin); //toggle green LED
 80035e8:	2101      	movs	r1, #1
 80035ea:	4803      	ldr	r0, [pc, #12]	; (80035f8 <HAL_LPTIM_AutoReloadMatchCallback+0x18>)
 80035ec:	f004 f8b3 	bl	8007756 <HAL_GPIO_TogglePin>
}
 80035f0:	bf00      	nop
 80035f2:	3708      	adds	r7, #8
 80035f4:	46bd      	mov	sp, r7
 80035f6:	bd80      	pop	{r7, pc}
 80035f8:	58020400 	.word	0x58020400

080035fc <HAL_HRTIM_Compare2EventCallback>:

void HAL_HRTIM_Compare2EventCallback(HRTIM_HandleTypeDef *hhrtim, uint32_t TimerIdx) {
 80035fc:	b480      	push	{r7}
 80035fe:	b083      	sub	sp, #12
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
 8003604:	6039      	str	r1, [r7, #0]
		const struct AttenuatorSettings a = {0,0,0,0,0,1,0}; // 8 dB
		set_aom_atten(a);
#endif //ATTENUATOR_CODE
	}

}
 8003606:	bf00      	nop
 8003608:	370c      	adds	r7, #12
 800360a:	46bd      	mov	sp, r7
 800360c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003610:	4770      	bx	lr
	...

08003614 <HAL_HRTIM_Compare3EventCallback>:

void HAL_HRTIM_Compare3EventCallback(HRTIM_HandleTypeDef *hhrtim, uint32_t TimerIdx) {
 8003614:	b580      	push	{r7, lr}
 8003616:	b088      	sub	sp, #32
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
 800361c:	6039      	str	r1, [r7, #0]

	/* Called at the end of a POP cycle */
	if (TimerIdx == HRTIM_TIMERINDEX_TIMER_A) {
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d15d      	bne.n	80036e0 <HAL_HRTIM_Compare3EventCallback+0xcc>
		/* Reset the attenuator to 0 dB */
		const struct AttenuatorSettings a = { 0, 0, 0, 0, 0, 0, 0 }; // 0 dB
		set_aom_atten(a);
#endif //ATTENUATOR_CODE

		const double start_freq = ((long)(sweep_settings.req_start_freq/sweep_settings.step_size)) * sweep_settings.step_size;
 8003624:	4b30      	ldr	r3, [pc, #192]	; (80036e8 <HAL_HRTIM_Compare3EventCallback+0xd4>)
 8003626:	ed93 5b00 	vldr	d5, [r3]
 800362a:	4b2f      	ldr	r3, [pc, #188]	; (80036e8 <HAL_HRTIM_Compare3EventCallback+0xd4>)
 800362c:	ed93 6b04 	vldr	d6, [r3, #16]
 8003630:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8003634:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8003638:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800363c:	4b2a      	ldr	r3, [pc, #168]	; (80036e8 <HAL_HRTIM_Compare3EventCallback+0xd4>)
 800363e:	ed93 7b04 	vldr	d7, [r3, #16]
 8003642:	ee26 7b07 	vmul.f64	d7, d6, d7
 8003646:	ed87 7b06 	vstr	d7, [r7, #24]
		const double stop_freq = ((long)((sweep_settings.req_stop_freq/sweep_settings.step_size) + 0.5)) * sweep_settings.step_size;
 800364a:	4b27      	ldr	r3, [pc, #156]	; (80036e8 <HAL_HRTIM_Compare3EventCallback+0xd4>)
 800364c:	ed93 5b02 	vldr	d5, [r3, #8]
 8003650:	4b25      	ldr	r3, [pc, #148]	; (80036e8 <HAL_HRTIM_Compare3EventCallback+0xd4>)
 8003652:	ed93 6b04 	vldr	d6, [r3, #16]
 8003656:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800365a:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800365e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003662:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8003666:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800366a:	4b1f      	ldr	r3, [pc, #124]	; (80036e8 <HAL_HRTIM_Compare3EventCallback+0xd4>)
 800366c:	ed93 7b04 	vldr	d7, [r3, #16]
 8003670:	ee26 7b07 	vmul.f64	d7, d6, d7
 8003674:	ed87 7b04 	vstr	d7, [r7, #16]
		const uint32_t num_points = ((stop_freq - start_freq)/sweep_settings.step_size) + 1;
 8003678:	ed97 6b04 	vldr	d6, [r7, #16]
 800367c:	ed97 7b06 	vldr	d7, [r7, #24]
 8003680:	ee36 5b47 	vsub.f64	d5, d6, d7
 8003684:	4b18      	ldr	r3, [pc, #96]	; (80036e8 <HAL_HRTIM_Compare3EventCallback+0xd4>)
 8003686:	ed93 6b04 	vldr	d6, [r3, #16]
 800368a:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800368e:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8003692:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003696:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800369a:	ee17 3a90 	vmov	r3, s15
 800369e:	60fb      	str	r3, [r7, #12]
		static uint32_t i = 0;

		/* Configure the Microwave frequency */
		if (i == num_points) {
 80036a0:	4b12      	ldr	r3, [pc, #72]	; (80036ec <HAL_HRTIM_Compare3EventCallback+0xd8>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	68fa      	ldr	r2, [r7, #12]
 80036a6:	429a      	cmp	r2, r3
 80036a8:	d106      	bne.n	80036b8 <HAL_HRTIM_Compare3EventCallback+0xa4>
			stop_pop();
 80036aa:	f018 f8a1 	bl	801b7f0 <__stop_pop_veneer>
			i = 0;
 80036ae:	4b0f      	ldr	r3, [pc, #60]	; (80036ec <HAL_HRTIM_Compare3EventCallback+0xd8>)
 80036b0:	2200      	movs	r2, #0
 80036b2:	601a      	str	r2, [r3, #0]
			start_pop();
 80036b4:	f018 f880 	bl	801b7b8 <__start_pop_veneer>

#ifdef SYNTH_ENABLE
		set_frequency_hz(start_freq + (i * sweep_settings.step_size));
#endif

		i = i + 1;
 80036b8:	4b0c      	ldr	r3, [pc, #48]	; (80036ec <HAL_HRTIM_Compare3EventCallback+0xd8>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	3301      	adds	r3, #1
 80036be:	4a0b      	ldr	r2, [pc, #44]	; (80036ec <HAL_HRTIM_Compare3EventCallback+0xd8>)
 80036c0:	6013      	str	r3, [r2, #0]

		pop_cycle_count = pop_cycle_count + 1;
 80036c2:	4b0b      	ldr	r3, [pc, #44]	; (80036f0 <HAL_HRTIM_Compare3EventCallback+0xdc>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	3301      	adds	r3, #1
 80036c8:	4a09      	ldr	r2, [pc, #36]	; (80036f0 <HAL_HRTIM_Compare3EventCallback+0xdc>)
 80036ca:	6013      	str	r3, [r2, #0]
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin); //toggle amber LED
 80036cc:	2102      	movs	r1, #2
 80036ce:	4809      	ldr	r0, [pc, #36]	; (80036f4 <HAL_HRTIM_Compare3EventCallback+0xe0>)
 80036d0:	f004 f841 	bl	8007756 <HAL_GPIO_TogglePin>
		printf("POP Cycle %lu done.\r\n", pop_cycle_count);
 80036d4:	4b06      	ldr	r3, [pc, #24]	; (80036f0 <HAL_HRTIM_Compare3EventCallback+0xdc>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4619      	mov	r1, r3
 80036da:	4807      	ldr	r0, [pc, #28]	; (80036f8 <HAL_HRTIM_Compare3EventCallback+0xe4>)
 80036dc:	f016 f8d0 	bl	8019880 <iprintf>

	/* Called when the second microwave pulse goes high */
	if (TimerIdx == HRTIM_TIMERINDEX_TIMER_E) {
	}

}
 80036e0:	bf00      	nop
 80036e2:	3720      	adds	r7, #32
 80036e4:	46bd      	mov	sp, r7
 80036e6:	bd80      	pop	{r7, pc}
 80036e8:	0801eb18 	.word	0x0801eb18
 80036ec:	2000064c 	.word	0x2000064c
 80036f0:	20000644 	.word	0x20000644
 80036f4:	58021000 	.word	0x58021000
 80036f8:	0801c118 	.word	0x0801c118

080036fc <HAL_HRTIM_RepetitionEventCallback>:

void HAL_HRTIM_RepetitionEventCallback(HRTIM_HandleTypeDef *hhrtim,
		uint32_t TimerIdx) {
 80036fc:	b480      	push	{r7}
 80036fe:	b083      	sub	sp, #12
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
 8003704:	6039      	str	r1, [r7, #0]

	/* Called at the start of the next POP cycle */
	if (TimerIdx == HRTIM_TIMERINDEX_TIMER_A) {
	}
}
 8003706:	bf00      	nop
 8003708:	370c      	adds	r7, #12
 800370a:	46bd      	mov	sp, r7
 800370c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003710:	4770      	bx	lr
	...

08003714 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8003714:	f8df d034 	ldr.w	sp, [pc, #52]	; 800374c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003718:	f7ff feca 	bl	80034b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800371c:	480c      	ldr	r0, [pc, #48]	; (8003750 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800371e:	490d      	ldr	r1, [pc, #52]	; (8003754 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003720:	4a0d      	ldr	r2, [pc, #52]	; (8003758 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003722:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003724:	e002      	b.n	800372c <LoopCopyDataInit>

08003726 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003726:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003728:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800372a:	3304      	adds	r3, #4

0800372c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800372c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800372e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003730:	d3f9      	bcc.n	8003726 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003732:	4a0a      	ldr	r2, [pc, #40]	; (800375c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003734:	4c0a      	ldr	r4, [pc, #40]	; (8003760 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003736:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003738:	e001      	b.n	800373e <LoopFillZerobss>

0800373a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800373a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800373c:	3204      	adds	r2, #4

0800373e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800373e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003740:	d3fb      	bcc.n	800373a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003742:	f016 fa45 	bl	8019bd0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003746:	f7fe fa63 	bl	8001c10 <main>
  bx  lr
 800374a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800374c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003750:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003754:	2000022c 	.word	0x2000022c
  ldr r2, =_sidata
 8003758:	0801f030 	.word	0x0801f030
  ldr r2, =_sbss
 800375c:	20000230 	.word	0x20000230
  ldr r4, =_ebss
 8003760:	20007334 	.word	0x20007334

08003764 <ADC_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003764:	e7fe      	b.n	8003764 <ADC_IRQHandler>

08003766 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8003766:	b480      	push	{r7}
 8003768:	b083      	sub	sp, #12
 800376a:	af00      	add	r7, sp, #0
 800376c:	6078      	str	r0, [r7, #4]
 800376e:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d00b      	beq.n	800378e <LAN8742_RegisterBusIO+0x28>
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	68db      	ldr	r3, [r3, #12]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d007      	beq.n	800378e <LAN8742_RegisterBusIO+0x28>
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	689b      	ldr	r3, [r3, #8]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d003      	beq.n	800378e <LAN8742_RegisterBusIO+0x28>
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	691b      	ldr	r3, [r3, #16]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d102      	bne.n	8003794 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 800378e:	f04f 33ff 	mov.w	r3, #4294967295
 8003792:	e014      	b.n	80037be <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	681a      	ldr	r2, [r3, #0]
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	685a      	ldr	r2, [r3, #4]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	68da      	ldr	r2, [r3, #12]
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	689a      	ldr	r2, [r3, #8]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	691a      	ldr	r2, [r3, #16]
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 80037bc:	2300      	movs	r3, #0
}
 80037be:	4618      	mov	r0, r3
 80037c0:	370c      	adds	r7, #12
 80037c2:	46bd      	mov	sp, r7
 80037c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c8:	4770      	bx	lr

080037ca <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 80037ca:	b580      	push	{r7, lr}
 80037cc:	b086      	sub	sp, #24
 80037ce:	af00      	add	r7, sp, #0
 80037d0:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 80037d2:	2300      	movs	r3, #0
 80037d4:	60fb      	str	r3, [r7, #12]
 80037d6:	2300      	movs	r3, #0
 80037d8:	60bb      	str	r3, [r7, #8]
 80037da:	2300      	movs	r3, #0
 80037dc:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 80037de:	2300      	movs	r3, #0
 80037e0:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d17c      	bne.n	80038e4 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	689b      	ldr	r3, [r3, #8]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d002      	beq.n	80037f8 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	689b      	ldr	r3, [r3, #8]
 80037f6:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2220      	movs	r2, #32
 80037fc:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80037fe:	2300      	movs	r3, #0
 8003800:	617b      	str	r3, [r7, #20]
 8003802:	e01c      	b.n	800383e <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	695b      	ldr	r3, [r3, #20]
 8003808:	f107 0208 	add.w	r2, r7, #8
 800380c:	2112      	movs	r1, #18
 800380e:	6978      	ldr	r0, [r7, #20]
 8003810:	4798      	blx	r3
 8003812:	4603      	mov	r3, r0
 8003814:	2b00      	cmp	r3, #0
 8003816:	da03      	bge.n	8003820 <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 8003818:	f06f 0304 	mvn.w	r3, #4
 800381c:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 800381e:	e00b      	b.n	8003838 <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8003820:	68bb      	ldr	r3, [r7, #8]
 8003822:	f003 031f 	and.w	r3, r3, #31
 8003826:	697a      	ldr	r2, [r7, #20]
 8003828:	429a      	cmp	r2, r3
 800382a:	d105      	bne.n	8003838 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	697a      	ldr	r2, [r7, #20]
 8003830:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8003832:	2300      	movs	r3, #0
 8003834:	613b      	str	r3, [r7, #16]
         break;
 8003836:	e005      	b.n	8003844 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8003838:	697b      	ldr	r3, [r7, #20]
 800383a:	3301      	adds	r3, #1
 800383c:	617b      	str	r3, [r7, #20]
 800383e:	697b      	ldr	r3, [r7, #20]
 8003840:	2b1f      	cmp	r3, #31
 8003842:	d9df      	bls.n	8003804 <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	2b1f      	cmp	r3, #31
 800384a:	d902      	bls.n	8003852 <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 800384c:	f06f 0302 	mvn.w	r3, #2
 8003850:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d145      	bne.n	80038e4 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	691b      	ldr	r3, [r3, #16]
 800385c:	687a      	ldr	r2, [r7, #4]
 800385e:	6810      	ldr	r0, [r2, #0]
 8003860:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003864:	2100      	movs	r1, #0
 8003866:	4798      	blx	r3
 8003868:	4603      	mov	r3, r0
 800386a:	2b00      	cmp	r3, #0
 800386c:	db37      	blt.n	80038de <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	695b      	ldr	r3, [r3, #20]
 8003872:	687a      	ldr	r2, [r7, #4]
 8003874:	6810      	ldr	r0, [r2, #0]
 8003876:	f107 0208 	add.w	r2, r7, #8
 800387a:	2100      	movs	r1, #0
 800387c:	4798      	blx	r3
 800387e:	4603      	mov	r3, r0
 8003880:	2b00      	cmp	r3, #0
 8003882:	db28      	blt.n	80038d6 <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	699b      	ldr	r3, [r3, #24]
 8003888:	4798      	blx	r3
 800388a:	4603      	mov	r3, r0
 800388c:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 800388e:	e01c      	b.n	80038ca <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	699b      	ldr	r3, [r3, #24]
 8003894:	4798      	blx	r3
 8003896:	4603      	mov	r3, r0
 8003898:	461a      	mov	r2, r3
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	1ad3      	subs	r3, r2, r3
 800389e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80038a2:	d80e      	bhi.n	80038c2 <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	695b      	ldr	r3, [r3, #20]
 80038a8:	687a      	ldr	r2, [r7, #4]
 80038aa:	6810      	ldr	r0, [r2, #0]
 80038ac:	f107 0208 	add.w	r2, r7, #8
 80038b0:	2100      	movs	r1, #0
 80038b2:	4798      	blx	r3
 80038b4:	4603      	mov	r3, r0
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	da07      	bge.n	80038ca <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 80038ba:	f06f 0304 	mvn.w	r3, #4
 80038be:	613b      	str	r3, [r7, #16]
                 break;
 80038c0:	e010      	b.n	80038e4 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 80038c2:	f06f 0301 	mvn.w	r3, #1
 80038c6:	613b      	str	r3, [r7, #16]
               break;
 80038c8:	e00c      	b.n	80038e4 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 80038ca:	68bb      	ldr	r3, [r7, #8]
 80038cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d1dd      	bne.n	8003890 <LAN8742_Init+0xc6>
 80038d4:	e006      	b.n	80038e4 <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 80038d6:	f06f 0304 	mvn.w	r3, #4
 80038da:	613b      	str	r3, [r7, #16]
 80038dc:	e002      	b.n	80038e4 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 80038de:	f06f 0303 	mvn.w	r3, #3
 80038e2:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 80038e4:	693b      	ldr	r3, [r7, #16]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d112      	bne.n	8003910 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	699b      	ldr	r3, [r3, #24]
 80038ee:	4798      	blx	r3
 80038f0:	4603      	mov	r3, r0
 80038f2:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 80038f4:	bf00      	nop
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	699b      	ldr	r3, [r3, #24]
 80038fa:	4798      	blx	r3
 80038fc:	4603      	mov	r3, r0
 80038fe:	461a      	mov	r2, r3
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	1ad3      	subs	r3, r2, r3
 8003904:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8003908:	d9f5      	bls.n	80038f6 <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2201      	movs	r2, #1
 800390e:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 8003910:	693b      	ldr	r3, [r7, #16]
 }
 8003912:	4618      	mov	r0, r3
 8003914:	3718      	adds	r7, #24
 8003916:	46bd      	mov	sp, r7
 8003918:	bd80      	pop	{r7, pc}

0800391a <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 800391a:	b580      	push	{r7, lr}
 800391c:	b084      	sub	sp, #16
 800391e:	af00      	add	r7, sp, #0
 8003920:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8003922:	2300      	movs	r3, #0
 8003924:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	695b      	ldr	r3, [r3, #20]
 800392a:	687a      	ldr	r2, [r7, #4]
 800392c:	6810      	ldr	r0, [r2, #0]
 800392e:	f107 020c 	add.w	r2, r7, #12
 8003932:	2101      	movs	r1, #1
 8003934:	4798      	blx	r3
 8003936:	4603      	mov	r3, r0
 8003938:	2b00      	cmp	r3, #0
 800393a:	da02      	bge.n	8003942 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 800393c:	f06f 0304 	mvn.w	r3, #4
 8003940:	e06e      	b.n	8003a20 <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	695b      	ldr	r3, [r3, #20]
 8003946:	687a      	ldr	r2, [r7, #4]
 8003948:	6810      	ldr	r0, [r2, #0]
 800394a:	f107 020c 	add.w	r2, r7, #12
 800394e:	2101      	movs	r1, #1
 8003950:	4798      	blx	r3
 8003952:	4603      	mov	r3, r0
 8003954:	2b00      	cmp	r3, #0
 8003956:	da02      	bge.n	800395e <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8003958:	f06f 0304 	mvn.w	r3, #4
 800395c:	e060      	b.n	8003a20 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	f003 0304 	and.w	r3, r3, #4
 8003964:	2b00      	cmp	r3, #0
 8003966:	d101      	bne.n	800396c <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 8003968:	2301      	movs	r3, #1
 800396a:	e059      	b.n	8003a20 <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	695b      	ldr	r3, [r3, #20]
 8003970:	687a      	ldr	r2, [r7, #4]
 8003972:	6810      	ldr	r0, [r2, #0]
 8003974:	f107 020c 	add.w	r2, r7, #12
 8003978:	2100      	movs	r1, #0
 800397a:	4798      	blx	r3
 800397c:	4603      	mov	r3, r0
 800397e:	2b00      	cmp	r3, #0
 8003980:	da02      	bge.n	8003988 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8003982:	f06f 0304 	mvn.w	r3, #4
 8003986:	e04b      	b.n	8003a20 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800398e:	2b00      	cmp	r3, #0
 8003990:	d11b      	bne.n	80039ca <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003998:	2b00      	cmp	r3, #0
 800399a:	d006      	beq.n	80039aa <LAN8742_GetLinkState+0x90>
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d001      	beq.n	80039aa <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80039a6:	2302      	movs	r3, #2
 80039a8:	e03a      	b.n	8003a20 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d001      	beq.n	80039b8 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80039b4:	2303      	movs	r3, #3
 80039b6:	e033      	b.n	8003a20 <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d001      	beq.n	80039c6 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80039c2:	2304      	movs	r3, #4
 80039c4:	e02c      	b.n	8003a20 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80039c6:	2305      	movs	r3, #5
 80039c8:	e02a      	b.n	8003a20 <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	695b      	ldr	r3, [r3, #20]
 80039ce:	687a      	ldr	r2, [r7, #4]
 80039d0:	6810      	ldr	r0, [r2, #0]
 80039d2:	f107 020c 	add.w	r2, r7, #12
 80039d6:	211f      	movs	r1, #31
 80039d8:	4798      	blx	r3
 80039da:	4603      	mov	r3, r0
 80039dc:	2b00      	cmp	r3, #0
 80039de:	da02      	bge.n	80039e6 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 80039e0:	f06f 0304 	mvn.w	r3, #4
 80039e4:	e01c      	b.n	8003a20 <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d101      	bne.n	80039f4 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 80039f0:	2306      	movs	r3, #6
 80039f2:	e015      	b.n	8003a20 <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	f003 031c 	and.w	r3, r3, #28
 80039fa:	2b18      	cmp	r3, #24
 80039fc:	d101      	bne.n	8003a02 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80039fe:	2302      	movs	r3, #2
 8003a00:	e00e      	b.n	8003a20 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	f003 031c 	and.w	r3, r3, #28
 8003a08:	2b08      	cmp	r3, #8
 8003a0a:	d101      	bne.n	8003a10 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8003a0c:	2303      	movs	r3, #3
 8003a0e:	e007      	b.n	8003a20 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	f003 031c 	and.w	r3, r3, #28
 8003a16:	2b14      	cmp	r3, #20
 8003a18:	d101      	bne.n	8003a1e <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8003a1a:	2304      	movs	r3, #4
 8003a1c:	e000      	b.n	8003a20 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8003a1e:	2305      	movs	r3, #5
    }				
  }
}
 8003a20:	4618      	mov	r0, r3
 8003a22:	3710      	adds	r7, #16
 8003a24:	46bd      	mov	sp, r7
 8003a26:	bd80      	pop	{r7, pc}

08003a28 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b082      	sub	sp, #8
 8003a2c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003a2e:	2003      	movs	r0, #3
 8003a30:	f001 ff1c 	bl	800586c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003a34:	f006 fc3a 	bl	800a2ac <HAL_RCC_GetSysClockFreq>
 8003a38:	4602      	mov	r2, r0
 8003a3a:	4b15      	ldr	r3, [pc, #84]	; (8003a90 <HAL_Init+0x68>)
 8003a3c:	699b      	ldr	r3, [r3, #24]
 8003a3e:	0a1b      	lsrs	r3, r3, #8
 8003a40:	f003 030f 	and.w	r3, r3, #15
 8003a44:	4913      	ldr	r1, [pc, #76]	; (8003a94 <HAL_Init+0x6c>)
 8003a46:	5ccb      	ldrb	r3, [r1, r3]
 8003a48:	f003 031f 	and.w	r3, r3, #31
 8003a4c:	fa22 f303 	lsr.w	r3, r2, r3
 8003a50:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003a52:	4b0f      	ldr	r3, [pc, #60]	; (8003a90 <HAL_Init+0x68>)
 8003a54:	699b      	ldr	r3, [r3, #24]
 8003a56:	f003 030f 	and.w	r3, r3, #15
 8003a5a:	4a0e      	ldr	r2, [pc, #56]	; (8003a94 <HAL_Init+0x6c>)
 8003a5c:	5cd3      	ldrb	r3, [r2, r3]
 8003a5e:	f003 031f 	and.w	r3, r3, #31
 8003a62:	687a      	ldr	r2, [r7, #4]
 8003a64:	fa22 f303 	lsr.w	r3, r2, r3
 8003a68:	4a0b      	ldr	r2, [pc, #44]	; (8003a98 <HAL_Init+0x70>)
 8003a6a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003a6c:	4a0b      	ldr	r2, [pc, #44]	; (8003a9c <HAL_Init+0x74>)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003a72:	2000      	movs	r0, #0
 8003a74:	f000 f814 	bl	8003aa0 <HAL_InitTick>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d001      	beq.n	8003a82 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	e002      	b.n	8003a88 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003a82:	f7ff f949 	bl	8002d18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003a86:	2300      	movs	r3, #0
}
 8003a88:	4618      	mov	r0, r3
 8003a8a:	3708      	adds	r7, #8
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bd80      	pop	{r7, pc}
 8003a90:	58024400 	.word	0x58024400
 8003a94:	0801eb30 	.word	0x0801eb30
 8003a98:	20000014 	.word	0x20000014
 8003a9c:	20000010 	.word	0x20000010

08003aa0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b082      	sub	sp, #8
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8003aa8:	4b15      	ldr	r3, [pc, #84]	; (8003b00 <HAL_InitTick+0x60>)
 8003aaa:	781b      	ldrb	r3, [r3, #0]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d101      	bne.n	8003ab4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	e021      	b.n	8003af8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8003ab4:	4b13      	ldr	r3, [pc, #76]	; (8003b04 <HAL_InitTick+0x64>)
 8003ab6:	681a      	ldr	r2, [r3, #0]
 8003ab8:	4b11      	ldr	r3, [pc, #68]	; (8003b00 <HAL_InitTick+0x60>)
 8003aba:	781b      	ldrb	r3, [r3, #0]
 8003abc:	4619      	mov	r1, r3
 8003abe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003ac2:	fbb3 f3f1 	udiv	r3, r3, r1
 8003ac6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003aca:	4618      	mov	r0, r3
 8003acc:	f001 ff01 	bl	80058d2 <HAL_SYSTICK_Config>
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d001      	beq.n	8003ada <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	e00e      	b.n	8003af8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2b0f      	cmp	r3, #15
 8003ade:	d80a      	bhi.n	8003af6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	6879      	ldr	r1, [r7, #4]
 8003ae4:	f04f 30ff 	mov.w	r0, #4294967295
 8003ae8:	f001 fecb 	bl	8005882 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003aec:	4a06      	ldr	r2, [pc, #24]	; (8003b08 <HAL_InitTick+0x68>)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003af2:	2300      	movs	r3, #0
 8003af4:	e000      	b.n	8003af8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8003af6:	2301      	movs	r3, #1
}
 8003af8:	4618      	mov	r0, r3
 8003afa:	3708      	adds	r7, #8
 8003afc:	46bd      	mov	sp, r7
 8003afe:	bd80      	pop	{r7, pc}
 8003b00:	20000028 	.word	0x20000028
 8003b04:	20000010 	.word	0x20000010
 8003b08:	20000024 	.word	0x20000024

08003b0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003b10:	4b06      	ldr	r3, [pc, #24]	; (8003b2c <HAL_IncTick+0x20>)
 8003b12:	781b      	ldrb	r3, [r3, #0]
 8003b14:	461a      	mov	r2, r3
 8003b16:	4b06      	ldr	r3, [pc, #24]	; (8003b30 <HAL_IncTick+0x24>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4413      	add	r3, r2
 8003b1c:	4a04      	ldr	r2, [pc, #16]	; (8003b30 <HAL_IncTick+0x24>)
 8003b1e:	6013      	str	r3, [r2, #0]
}
 8003b20:	bf00      	nop
 8003b22:	46bd      	mov	sp, r7
 8003b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b28:	4770      	bx	lr
 8003b2a:	bf00      	nop
 8003b2c:	20000028 	.word	0x20000028
 8003b30:	20000650 	.word	0x20000650

08003b34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003b34:	b480      	push	{r7}
 8003b36:	af00      	add	r7, sp, #0
  return uwTick;
 8003b38:	4b03      	ldr	r3, [pc, #12]	; (8003b48 <HAL_GetTick+0x14>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
}
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b44:	4770      	bx	lr
 8003b46:	bf00      	nop
 8003b48:	20000650 	.word	0x20000650

08003b4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b084      	sub	sp, #16
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003b54:	f7ff ffee 	bl	8003b34 <HAL_GetTick>
 8003b58:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b64:	d005      	beq.n	8003b72 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003b66:	4b0a      	ldr	r3, [pc, #40]	; (8003b90 <HAL_Delay+0x44>)
 8003b68:	781b      	ldrb	r3, [r3, #0]
 8003b6a:	461a      	mov	r2, r3
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	4413      	add	r3, r2
 8003b70:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003b72:	bf00      	nop
 8003b74:	f7ff ffde 	bl	8003b34 <HAL_GetTick>
 8003b78:	4602      	mov	r2, r0
 8003b7a:	68bb      	ldr	r3, [r7, #8]
 8003b7c:	1ad3      	subs	r3, r2, r3
 8003b7e:	68fa      	ldr	r2, [r7, #12]
 8003b80:	429a      	cmp	r2, r3
 8003b82:	d8f7      	bhi.n	8003b74 <HAL_Delay+0x28>
  {
  }
}
 8003b84:	bf00      	nop
 8003b86:	bf00      	nop
 8003b88:	3710      	adds	r7, #16
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bd80      	pop	{r7, pc}
 8003b8e:	bf00      	nop
 8003b90:	20000028 	.word	0x20000028

08003b94 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8003b94:	b480      	push	{r7}
 8003b96:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8003b98:	4b03      	ldr	r3, [pc, #12]	; (8003ba8 <HAL_GetREVID+0x14>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	0c1b      	lsrs	r3, r3, #16
}
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba6:	4770      	bx	lr
 8003ba8:	5c001000 	.word	0x5c001000

08003bac <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8003bac:	b480      	push	{r7}
 8003bae:	b083      	sub	sp, #12
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8003bb4:	4b06      	ldr	r3, [pc, #24]	; (8003bd0 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8003bbc:	4904      	ldr	r1, [pc, #16]	; (8003bd0 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	604b      	str	r3, [r1, #4]
}
 8003bc4:	bf00      	nop
 8003bc6:	370c      	adds	r7, #12
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bce:	4770      	bx	lr
 8003bd0:	58000400 	.word	0x58000400

08003bd4 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	b083      	sub	sp, #12
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
 8003bdc:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8003bde:	4b07      	ldr	r3, [pc, #28]	; (8003bfc <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8003be0:	685a      	ldr	r2, [r3, #4]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	43db      	mvns	r3, r3
 8003be6:	401a      	ands	r2, r3
 8003be8:	4904      	ldr	r1, [pc, #16]	; (8003bfc <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	4313      	orrs	r3, r2
 8003bee:	604b      	str	r3, [r1, #4]
}
 8003bf0:	bf00      	nop
 8003bf2:	370c      	adds	r7, #12
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfa:	4770      	bx	lr
 8003bfc:	58000400 	.word	0x58000400

08003c00 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b083      	sub	sp, #12
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
 8003c08:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	689b      	ldr	r3, [r3, #8]
 8003c0e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	431a      	orrs	r2, r3
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	609a      	str	r2, [r3, #8]
}
 8003c1a:	bf00      	nop
 8003c1c:	370c      	adds	r7, #12
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c24:	4770      	bx	lr

08003c26 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003c26:	b480      	push	{r7}
 8003c28:	b083      	sub	sp, #12
 8003c2a:	af00      	add	r7, sp, #0
 8003c2c:	6078      	str	r0, [r7, #4]
 8003c2e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	689b      	ldr	r3, [r3, #8]
 8003c34:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	431a      	orrs	r2, r3
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	609a      	str	r2, [r3, #8]
}
 8003c40:	bf00      	nop
 8003c42:	370c      	adds	r7, #12
 8003c44:	46bd      	mov	sp, r7
 8003c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4a:	4770      	bx	lr

08003c4c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	b083      	sub	sp, #12
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	689b      	ldr	r3, [r3, #8]
 8003c58:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	370c      	adds	r7, #12
 8003c60:	46bd      	mov	sp, r7
 8003c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c66:	4770      	bx	lr

08003c68 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	b087      	sub	sp, #28
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	60f8      	str	r0, [r7, #12]
 8003c70:	60b9      	str	r1, [r7, #8]
 8003c72:	607a      	str	r2, [r7, #4]
 8003c74:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	3360      	adds	r3, #96	; 0x60
 8003c7a:	461a      	mov	r2, r3
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	009b      	lsls	r3, r3, #2
 8003c80:	4413      	add	r3, r2
 8003c82:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8003c84:	697b      	ldr	r3, [r7, #20]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	430b      	orrs	r3, r1
 8003c96:	431a      	orrs	r2, r3
 8003c98:	697b      	ldr	r3, [r7, #20]
 8003c9a:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8003c9c:	bf00      	nop
 8003c9e:	371c      	adds	r7, #28
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca6:	4770      	bx	lr

08003ca8 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8003ca8:	b480      	push	{r7}
 8003caa:	b085      	sub	sp, #20
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	60f8      	str	r0, [r7, #12]
 8003cb0:	60b9      	str	r1, [r7, #8]
 8003cb2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	691b      	ldr	r3, [r3, #16]
 8003cb8:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8003cbc:	68bb      	ldr	r3, [r7, #8]
 8003cbe:	f003 031f 	and.w	r3, r3, #31
 8003cc2:	6879      	ldr	r1, [r7, #4]
 8003cc4:	fa01 f303 	lsl.w	r3, r1, r3
 8003cc8:	431a      	orrs	r2, r3
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	611a      	str	r2, [r3, #16]
}
 8003cce:	bf00      	nop
 8003cd0:	3714      	adds	r7, #20
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd8:	4770      	bx	lr

08003cda <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8003cda:	b480      	push	{r7}
 8003cdc:	b087      	sub	sp, #28
 8003cde:	af00      	add	r7, sp, #0
 8003ce0:	60f8      	str	r0, [r7, #12]
 8003ce2:	60b9      	str	r1, [r7, #8]
 8003ce4:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	3360      	adds	r3, #96	; 0x60
 8003cea:	461a      	mov	r2, r3
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	009b      	lsls	r3, r3, #2
 8003cf0:	4413      	add	r3, r2
 8003cf2:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8003cf4:	697b      	ldr	r3, [r7, #20]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	431a      	orrs	r2, r3
 8003d00:	697b      	ldr	r3, [r7, #20]
 8003d02:	601a      	str	r2, [r3, #0]
  }
}
 8003d04:	bf00      	nop
 8003d06:	371c      	adds	r7, #28
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0e:	4770      	bx	lr

08003d10 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003d10:	b480      	push	{r7}
 8003d12:	b083      	sub	sp, #12
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	68db      	ldr	r3, [r3, #12]
 8003d1c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d101      	bne.n	8003d28 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003d24:	2301      	movs	r3, #1
 8003d26:	e000      	b.n	8003d2a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003d28:	2300      	movs	r3, #0
}
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	370c      	adds	r7, #12
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d34:	4770      	bx	lr

08003d36 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003d36:	b480      	push	{r7}
 8003d38:	b087      	sub	sp, #28
 8003d3a:	af00      	add	r7, sp, #0
 8003d3c:	60f8      	str	r0, [r7, #12]
 8003d3e:	60b9      	str	r1, [r7, #8]
 8003d40:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	3330      	adds	r3, #48	; 0x30
 8003d46:	461a      	mov	r2, r3
 8003d48:	68bb      	ldr	r3, [r7, #8]
 8003d4a:	0a1b      	lsrs	r3, r3, #8
 8003d4c:	009b      	lsls	r3, r3, #2
 8003d4e:	f003 030c 	and.w	r3, r3, #12
 8003d52:	4413      	add	r3, r2
 8003d54:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003d56:	697b      	ldr	r3, [r7, #20]
 8003d58:	681a      	ldr	r2, [r3, #0]
 8003d5a:	68bb      	ldr	r3, [r7, #8]
 8003d5c:	f003 031f 	and.w	r3, r3, #31
 8003d60:	211f      	movs	r1, #31
 8003d62:	fa01 f303 	lsl.w	r3, r1, r3
 8003d66:	43db      	mvns	r3, r3
 8003d68:	401a      	ands	r2, r3
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	0e9b      	lsrs	r3, r3, #26
 8003d6e:	f003 011f 	and.w	r1, r3, #31
 8003d72:	68bb      	ldr	r3, [r7, #8]
 8003d74:	f003 031f 	and.w	r3, r3, #31
 8003d78:	fa01 f303 	lsl.w	r3, r1, r3
 8003d7c:	431a      	orrs	r2, r3
 8003d7e:	697b      	ldr	r3, [r7, #20]
 8003d80:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003d82:	bf00      	nop
 8003d84:	371c      	adds	r7, #28
 8003d86:	46bd      	mov	sp, r7
 8003d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8c:	4770      	bx	lr

08003d8e <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003d8e:	b480      	push	{r7}
 8003d90:	b083      	sub	sp, #12
 8003d92:	af00      	add	r7, sp, #0
 8003d94:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d9a:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d101      	bne.n	8003da6 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8003da2:	2301      	movs	r3, #1
 8003da4:	e000      	b.n	8003da8 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8003da6:	2300      	movs	r3, #0
}
 8003da8:	4618      	mov	r0, r3
 8003daa:	370c      	adds	r7, #12
 8003dac:	46bd      	mov	sp, r7
 8003dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db2:	4770      	bx	lr

08003db4 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003db4:	b480      	push	{r7}
 8003db6:	b087      	sub	sp, #28
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	60f8      	str	r0, [r7, #12]
 8003dbc:	60b9      	str	r1, [r7, #8]
 8003dbe:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	3314      	adds	r3, #20
 8003dc4:	461a      	mov	r2, r3
 8003dc6:	68bb      	ldr	r3, [r7, #8]
 8003dc8:	0e5b      	lsrs	r3, r3, #25
 8003dca:	009b      	lsls	r3, r3, #2
 8003dcc:	f003 0304 	and.w	r3, r3, #4
 8003dd0:	4413      	add	r3, r2
 8003dd2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003dd4:	697b      	ldr	r3, [r7, #20]
 8003dd6:	681a      	ldr	r2, [r3, #0]
 8003dd8:	68bb      	ldr	r3, [r7, #8]
 8003dda:	0d1b      	lsrs	r3, r3, #20
 8003ddc:	f003 031f 	and.w	r3, r3, #31
 8003de0:	2107      	movs	r1, #7
 8003de2:	fa01 f303 	lsl.w	r3, r1, r3
 8003de6:	43db      	mvns	r3, r3
 8003de8:	401a      	ands	r2, r3
 8003dea:	68bb      	ldr	r3, [r7, #8]
 8003dec:	0d1b      	lsrs	r3, r3, #20
 8003dee:	f003 031f 	and.w	r3, r3, #31
 8003df2:	6879      	ldr	r1, [r7, #4]
 8003df4:	fa01 f303 	lsl.w	r3, r1, r3
 8003df8:	431a      	orrs	r2, r3
 8003dfa:	697b      	ldr	r3, [r7, #20]
 8003dfc:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003dfe:	bf00      	nop
 8003e00:	371c      	adds	r7, #28
 8003e02:	46bd      	mov	sp, r7
 8003e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e08:	4770      	bx	lr
	...

08003e0c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	b085      	sub	sp, #20
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	60f8      	str	r0, [r7, #12]
 8003e14:	60b9      	str	r1, [r7, #8]
 8003e16:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8003e1e:	68bb      	ldr	r3, [r7, #8]
 8003e20:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003e24:	43db      	mvns	r3, r3
 8003e26:	401a      	ands	r2, r3
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	f003 0318 	and.w	r3, r3, #24
 8003e2e:	4908      	ldr	r1, [pc, #32]	; (8003e50 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003e30:	40d9      	lsrs	r1, r3
 8003e32:	68bb      	ldr	r3, [r7, #8]
 8003e34:	400b      	ands	r3, r1
 8003e36:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003e3a:	431a      	orrs	r2, r3
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8003e42:	bf00      	nop
 8003e44:	3714      	adds	r7, #20
 8003e46:	46bd      	mov	sp, r7
 8003e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4c:	4770      	bx	lr
 8003e4e:	bf00      	nop
 8003e50:	000fffff 	.word	0x000fffff

08003e54 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003e54:	b480      	push	{r7}
 8003e56:	b083      	sub	sp, #12
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	689b      	ldr	r3, [r3, #8]
 8003e60:	f003 031f 	and.w	r3, r3, #31
}
 8003e64:	4618      	mov	r0, r3
 8003e66:	370c      	adds	r7, #12
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6e:	4770      	bx	lr

08003e70 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003e70:	b480      	push	{r7}
 8003e72:	b083      	sub	sp, #12
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	689b      	ldr	r3, [r3, #8]
 8003e7c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 8003e80:	4618      	mov	r0, r3
 8003e82:	370c      	adds	r7, #12
 8003e84:	46bd      	mov	sp, r7
 8003e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8a:	4770      	bx	lr

08003e8c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	b083      	sub	sp, #12
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	689a      	ldr	r2, [r3, #8]
 8003e98:	4b04      	ldr	r3, [pc, #16]	; (8003eac <LL_ADC_DisableDeepPowerDown+0x20>)
 8003e9a:	4013      	ands	r3, r2
 8003e9c:	687a      	ldr	r2, [r7, #4]
 8003e9e:	6093      	str	r3, [r2, #8]
}
 8003ea0:	bf00      	nop
 8003ea2:	370c      	adds	r7, #12
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eaa:	4770      	bx	lr
 8003eac:	5fffffc0 	.word	0x5fffffc0

08003eb0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	b083      	sub	sp, #12
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	689b      	ldr	r3, [r3, #8]
 8003ebc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003ec0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ec4:	d101      	bne.n	8003eca <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	e000      	b.n	8003ecc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003eca:	2300      	movs	r3, #0
}
 8003ecc:	4618      	mov	r0, r3
 8003ece:	370c      	adds	r7, #12
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed6:	4770      	bx	lr

08003ed8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003ed8:	b480      	push	{r7}
 8003eda:	b083      	sub	sp, #12
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	689a      	ldr	r2, [r3, #8]
 8003ee4:	4b05      	ldr	r3, [pc, #20]	; (8003efc <LL_ADC_EnableInternalRegulator+0x24>)
 8003ee6:	4013      	ands	r3, r2
 8003ee8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003ef0:	bf00      	nop
 8003ef2:	370c      	adds	r7, #12
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efa:	4770      	bx	lr
 8003efc:	6fffffc0 	.word	0x6fffffc0

08003f00 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003f00:	b480      	push	{r7}
 8003f02:	b083      	sub	sp, #12
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	689b      	ldr	r3, [r3, #8]
 8003f0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f10:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003f14:	d101      	bne.n	8003f1a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003f16:	2301      	movs	r3, #1
 8003f18:	e000      	b.n	8003f1c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003f1a:	2300      	movs	r3, #0
}
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	370c      	adds	r7, #12
 8003f20:	46bd      	mov	sp, r7
 8003f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f26:	4770      	bx	lr

08003f28 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003f28:	b480      	push	{r7}
 8003f2a:	b083      	sub	sp, #12
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	689a      	ldr	r2, [r3, #8]
 8003f34:	4b05      	ldr	r3, [pc, #20]	; (8003f4c <LL_ADC_Enable+0x24>)
 8003f36:	4013      	ands	r3, r2
 8003f38:	f043 0201 	orr.w	r2, r3, #1
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003f40:	bf00      	nop
 8003f42:	370c      	adds	r7, #12
 8003f44:	46bd      	mov	sp, r7
 8003f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4a:	4770      	bx	lr
 8003f4c:	7fffffc0 	.word	0x7fffffc0

08003f50 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003f50:	b480      	push	{r7}
 8003f52:	b083      	sub	sp, #12
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	689a      	ldr	r2, [r3, #8]
 8003f5c:	4b05      	ldr	r3, [pc, #20]	; (8003f74 <LL_ADC_Disable+0x24>)
 8003f5e:	4013      	ands	r3, r2
 8003f60:	f043 0202 	orr.w	r2, r3, #2
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8003f68:	bf00      	nop
 8003f6a:	370c      	adds	r7, #12
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f72:	4770      	bx	lr
 8003f74:	7fffffc0 	.word	0x7fffffc0

08003f78 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003f78:	b480      	push	{r7}
 8003f7a:	b083      	sub	sp, #12
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	689b      	ldr	r3, [r3, #8]
 8003f84:	f003 0301 	and.w	r3, r3, #1
 8003f88:	2b01      	cmp	r3, #1
 8003f8a:	d101      	bne.n	8003f90 <LL_ADC_IsEnabled+0x18>
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	e000      	b.n	8003f92 <LL_ADC_IsEnabled+0x1a>
 8003f90:	2300      	movs	r3, #0
}
 8003f92:	4618      	mov	r0, r3
 8003f94:	370c      	adds	r7, #12
 8003f96:	46bd      	mov	sp, r7
 8003f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9c:	4770      	bx	lr

08003f9e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8003f9e:	b480      	push	{r7}
 8003fa0:	b083      	sub	sp, #12
 8003fa2:	af00      	add	r7, sp, #0
 8003fa4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	689b      	ldr	r3, [r3, #8]
 8003faa:	f003 0302 	and.w	r3, r3, #2
 8003fae:	2b02      	cmp	r3, #2
 8003fb0:	d101      	bne.n	8003fb6 <LL_ADC_IsDisableOngoing+0x18>
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	e000      	b.n	8003fb8 <LL_ADC_IsDisableOngoing+0x1a>
 8003fb6:	2300      	movs	r3, #0
}
 8003fb8:	4618      	mov	r0, r3
 8003fba:	370c      	adds	r7, #12
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc2:	4770      	bx	lr

08003fc4 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	b083      	sub	sp, #12
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	689a      	ldr	r2, [r3, #8]
 8003fd0:	4b05      	ldr	r3, [pc, #20]	; (8003fe8 <LL_ADC_REG_StartConversion+0x24>)
 8003fd2:	4013      	ands	r3, r2
 8003fd4:	f043 0204 	orr.w	r2, r3, #4
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003fdc:	bf00      	nop
 8003fde:	370c      	adds	r7, #12
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe6:	4770      	bx	lr
 8003fe8:	7fffffc0 	.word	0x7fffffc0

08003fec <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003fec:	b480      	push	{r7}
 8003fee:	b083      	sub	sp, #12
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	689b      	ldr	r3, [r3, #8]
 8003ff8:	f003 0304 	and.w	r3, r3, #4
 8003ffc:	2b04      	cmp	r3, #4
 8003ffe:	d101      	bne.n	8004004 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004000:	2301      	movs	r3, #1
 8004002:	e000      	b.n	8004006 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004004:	2300      	movs	r3, #0
}
 8004006:	4618      	mov	r0, r3
 8004008:	370c      	adds	r7, #12
 800400a:	46bd      	mov	sp, r7
 800400c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004010:	4770      	bx	lr

08004012 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004012:	b480      	push	{r7}
 8004014:	b083      	sub	sp, #12
 8004016:	af00      	add	r7, sp, #0
 8004018:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	689b      	ldr	r3, [r3, #8]
 800401e:	f003 0308 	and.w	r3, r3, #8
 8004022:	2b08      	cmp	r3, #8
 8004024:	d101      	bne.n	800402a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004026:	2301      	movs	r3, #1
 8004028:	e000      	b.n	800402c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800402a:	2300      	movs	r3, #0
}
 800402c:	4618      	mov	r0, r3
 800402e:	370c      	adds	r7, #12
 8004030:	46bd      	mov	sp, r7
 8004032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004036:	4770      	bx	lr

08004038 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004038:	b590      	push	{r4, r7, lr}
 800403a:	b089      	sub	sp, #36	; 0x24
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004040:	2300      	movs	r3, #0
 8004042:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8004044:	2300      	movs	r3, #0
 8004046:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d101      	bne.n	8004052 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800404e:	2301      	movs	r3, #1
 8004050:	e18f      	b.n	8004372 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	68db      	ldr	r3, [r3, #12]
 8004056:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800405c:	2b00      	cmp	r3, #0
 800405e:	d109      	bne.n	8004074 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004060:	6878      	ldr	r0, [r7, #4]
 8004062:	f7fe fe73 	bl	8002d4c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2200      	movs	r2, #0
 800406a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2200      	movs	r2, #0
 8004070:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4618      	mov	r0, r3
 800407a:	f7ff ff19 	bl	8003eb0 <LL_ADC_IsDeepPowerDownEnabled>
 800407e:	4603      	mov	r3, r0
 8004080:	2b00      	cmp	r3, #0
 8004082:	d004      	beq.n	800408e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4618      	mov	r0, r3
 800408a:	f7ff feff 	bl	8003e8c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4618      	mov	r0, r3
 8004094:	f7ff ff34 	bl	8003f00 <LL_ADC_IsInternalRegulatorEnabled>
 8004098:	4603      	mov	r3, r0
 800409a:	2b00      	cmp	r3, #0
 800409c:	d114      	bne.n	80040c8 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4618      	mov	r0, r3
 80040a4:	f7ff ff18 	bl	8003ed8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80040a8:	4b87      	ldr	r3, [pc, #540]	; (80042c8 <HAL_ADC_Init+0x290>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	099b      	lsrs	r3, r3, #6
 80040ae:	4a87      	ldr	r2, [pc, #540]	; (80042cc <HAL_ADC_Init+0x294>)
 80040b0:	fba2 2303 	umull	r2, r3, r2, r3
 80040b4:	099b      	lsrs	r3, r3, #6
 80040b6:	3301      	adds	r3, #1
 80040b8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80040ba:	e002      	b.n	80040c2 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	3b01      	subs	r3, #1
 80040c0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80040c2:	68bb      	ldr	r3, [r7, #8]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d1f9      	bne.n	80040bc <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4618      	mov	r0, r3
 80040ce:	f7ff ff17 	bl	8003f00 <LL_ADC_IsInternalRegulatorEnabled>
 80040d2:	4603      	mov	r3, r0
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d10d      	bne.n	80040f4 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040dc:	f043 0210 	orr.w	r2, r3, #16
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040e8:	f043 0201 	orr.w	r2, r3, #1
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80040f0:	2301      	movs	r3, #1
 80040f2:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4618      	mov	r0, r3
 80040fa:	f7ff ff77 	bl	8003fec <LL_ADC_REG_IsConversionOngoing>
 80040fe:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004104:	f003 0310 	and.w	r3, r3, #16
 8004108:	2b00      	cmp	r3, #0
 800410a:	f040 8129 	bne.w	8004360 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800410e:	697b      	ldr	r3, [r7, #20]
 8004110:	2b00      	cmp	r3, #0
 8004112:	f040 8125 	bne.w	8004360 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800411a:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800411e:	f043 0202 	orr.w	r2, r3, #2
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4618      	mov	r0, r3
 800412c:	f7ff ff24 	bl	8003f78 <LL_ADC_IsEnabled>
 8004130:	4603      	mov	r3, r0
 8004132:	2b00      	cmp	r3, #0
 8004134:	d136      	bne.n	80041a4 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4a65      	ldr	r2, [pc, #404]	; (80042d0 <HAL_ADC_Init+0x298>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d004      	beq.n	800414a <HAL_ADC_Init+0x112>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4a63      	ldr	r2, [pc, #396]	; (80042d4 <HAL_ADC_Init+0x29c>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d10e      	bne.n	8004168 <HAL_ADC_Init+0x130>
 800414a:	4861      	ldr	r0, [pc, #388]	; (80042d0 <HAL_ADC_Init+0x298>)
 800414c:	f7ff ff14 	bl	8003f78 <LL_ADC_IsEnabled>
 8004150:	4604      	mov	r4, r0
 8004152:	4860      	ldr	r0, [pc, #384]	; (80042d4 <HAL_ADC_Init+0x29c>)
 8004154:	f7ff ff10 	bl	8003f78 <LL_ADC_IsEnabled>
 8004158:	4603      	mov	r3, r0
 800415a:	4323      	orrs	r3, r4
 800415c:	2b00      	cmp	r3, #0
 800415e:	bf0c      	ite	eq
 8004160:	2301      	moveq	r3, #1
 8004162:	2300      	movne	r3, #0
 8004164:	b2db      	uxtb	r3, r3
 8004166:	e008      	b.n	800417a <HAL_ADC_Init+0x142>
 8004168:	485b      	ldr	r0, [pc, #364]	; (80042d8 <HAL_ADC_Init+0x2a0>)
 800416a:	f7ff ff05 	bl	8003f78 <LL_ADC_IsEnabled>
 800416e:	4603      	mov	r3, r0
 8004170:	2b00      	cmp	r3, #0
 8004172:	bf0c      	ite	eq
 8004174:	2301      	moveq	r3, #1
 8004176:	2300      	movne	r3, #0
 8004178:	b2db      	uxtb	r3, r3
 800417a:	2b00      	cmp	r3, #0
 800417c:	d012      	beq.n	80041a4 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4a53      	ldr	r2, [pc, #332]	; (80042d0 <HAL_ADC_Init+0x298>)
 8004184:	4293      	cmp	r3, r2
 8004186:	d004      	beq.n	8004192 <HAL_ADC_Init+0x15a>
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4a51      	ldr	r2, [pc, #324]	; (80042d4 <HAL_ADC_Init+0x29c>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d101      	bne.n	8004196 <HAL_ADC_Init+0x15e>
 8004192:	4a52      	ldr	r2, [pc, #328]	; (80042dc <HAL_ADC_Init+0x2a4>)
 8004194:	e000      	b.n	8004198 <HAL_ADC_Init+0x160>
 8004196:	4a52      	ldr	r2, [pc, #328]	; (80042e0 <HAL_ADC_Init+0x2a8>)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	4619      	mov	r1, r3
 800419e:	4610      	mov	r0, r2
 80041a0:	f7ff fd2e 	bl	8003c00 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 80041a4:	f7ff fcf6 	bl	8003b94 <HAL_GetREVID>
 80041a8:	4603      	mov	r3, r0
 80041aa:	f241 0203 	movw	r2, #4099	; 0x1003
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d914      	bls.n	80041dc <HAL_ADC_Init+0x1a4>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	689b      	ldr	r3, [r3, #8]
 80041b6:	2b10      	cmp	r3, #16
 80041b8:	d110      	bne.n	80041dc <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	7d5b      	ldrb	r3, [r3, #21]
 80041be:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80041c4:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80041ca:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	7f1b      	ldrb	r3, [r3, #28]
 80041d0:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80041d2:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80041d4:	f043 030c 	orr.w	r3, r3, #12
 80041d8:	61bb      	str	r3, [r7, #24]
 80041da:	e00d      	b.n	80041f8 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	7d5b      	ldrb	r3, [r3, #21]
 80041e0:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80041e6:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80041ec:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	7f1b      	ldrb	r3, [r3, #28]
 80041f2:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80041f4:	4313      	orrs	r3, r2
 80041f6:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	7f1b      	ldrb	r3, [r3, #28]
 80041fc:	2b01      	cmp	r3, #1
 80041fe:	d106      	bne.n	800420e <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6a1b      	ldr	r3, [r3, #32]
 8004204:	3b01      	subs	r3, #1
 8004206:	045b      	lsls	r3, r3, #17
 8004208:	69ba      	ldr	r2, [r7, #24]
 800420a:	4313      	orrs	r3, r2
 800420c:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004212:	2b00      	cmp	r3, #0
 8004214:	d009      	beq.n	800422a <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800421a:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004222:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004224:	69ba      	ldr	r2, [r7, #24]
 8004226:	4313      	orrs	r3, r2
 8004228:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	68da      	ldr	r2, [r3, #12]
 8004230:	4b2c      	ldr	r3, [pc, #176]	; (80042e4 <HAL_ADC_Init+0x2ac>)
 8004232:	4013      	ands	r3, r2
 8004234:	687a      	ldr	r2, [r7, #4]
 8004236:	6812      	ldr	r2, [r2, #0]
 8004238:	69b9      	ldr	r1, [r7, #24]
 800423a:	430b      	orrs	r3, r1
 800423c:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4618      	mov	r0, r3
 8004244:	f7ff fed2 	bl	8003fec <LL_ADC_REG_IsConversionOngoing>
 8004248:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4618      	mov	r0, r3
 8004250:	f7ff fedf 	bl	8004012 <LL_ADC_INJ_IsConversionOngoing>
 8004254:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004256:	693b      	ldr	r3, [r7, #16]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d15f      	bne.n	800431c <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d15c      	bne.n	800431c <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	7d1b      	ldrb	r3, [r3, #20]
 8004266:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 800426c:	4313      	orrs	r3, r2
 800426e:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	68da      	ldr	r2, [r3, #12]
 8004276:	4b1c      	ldr	r3, [pc, #112]	; (80042e8 <HAL_ADC_Init+0x2b0>)
 8004278:	4013      	ands	r3, r2
 800427a:	687a      	ldr	r2, [r7, #4]
 800427c:	6812      	ldr	r2, [r2, #0]
 800427e:	69b9      	ldr	r1, [r7, #24]
 8004280:	430b      	orrs	r3, r1
 8004282:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800428a:	2b01      	cmp	r3, #1
 800428c:	d130      	bne.n	80042f0 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004292:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	691a      	ldr	r2, [r3, #16]
 800429a:	4b14      	ldr	r3, [pc, #80]	; (80042ec <HAL_ADC_Init+0x2b4>)
 800429c:	4013      	ands	r3, r2
 800429e:	687a      	ldr	r2, [r7, #4]
 80042a0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80042a2:	3a01      	subs	r2, #1
 80042a4:	0411      	lsls	r1, r2, #16
 80042a6:	687a      	ldr	r2, [r7, #4]
 80042a8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80042aa:	4311      	orrs	r1, r2
 80042ac:	687a      	ldr	r2, [r7, #4]
 80042ae:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80042b0:	4311      	orrs	r1, r2
 80042b2:	687a      	ldr	r2, [r7, #4]
 80042b4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80042b6:	430a      	orrs	r2, r1
 80042b8:	431a      	orrs	r2, r3
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f042 0201 	orr.w	r2, r2, #1
 80042c2:	611a      	str	r2, [r3, #16]
 80042c4:	e01c      	b.n	8004300 <HAL_ADC_Init+0x2c8>
 80042c6:	bf00      	nop
 80042c8:	20000010 	.word	0x20000010
 80042cc:	053e2d63 	.word	0x053e2d63
 80042d0:	40022000 	.word	0x40022000
 80042d4:	40022100 	.word	0x40022100
 80042d8:	58026000 	.word	0x58026000
 80042dc:	40022300 	.word	0x40022300
 80042e0:	58026300 	.word	0x58026300
 80042e4:	fff0c003 	.word	0xfff0c003
 80042e8:	ffffbffc 	.word	0xffffbffc
 80042ec:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	691a      	ldr	r2, [r3, #16]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f022 0201 	bic.w	r2, r2, #1
 80042fe:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	691b      	ldr	r3, [r3, #16]
 8004306:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	430a      	orrs	r2, r1
 8004314:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8004316:	6878      	ldr	r0, [r7, #4]
 8004318:	f001 f804 	bl	8005324 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	68db      	ldr	r3, [r3, #12]
 8004320:	2b01      	cmp	r3, #1
 8004322:	d10c      	bne.n	800433e <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800432a:	f023 010f 	bic.w	r1, r3, #15
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	699b      	ldr	r3, [r3, #24]
 8004332:	1e5a      	subs	r2, r3, #1
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	430a      	orrs	r2, r1
 800433a:	631a      	str	r2, [r3, #48]	; 0x30
 800433c:	e007      	b.n	800434e <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f022 020f 	bic.w	r2, r2, #15
 800434c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004352:	f023 0303 	bic.w	r3, r3, #3
 8004356:	f043 0201 	orr.w	r2, r3, #1
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	655a      	str	r2, [r3, #84]	; 0x54
 800435e:	e007      	b.n	8004370 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004364:	f043 0210 	orr.w	r2, r3, #16
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800436c:	2301      	movs	r3, #1
 800436e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004370:	7ffb      	ldrb	r3, [r7, #31]
}
 8004372:	4618      	mov	r0, r3
 8004374:	3724      	adds	r7, #36	; 0x24
 8004376:	46bd      	mov	sp, r7
 8004378:	bd90      	pop	{r4, r7, pc}
 800437a:	bf00      	nop

0800437c <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b086      	sub	sp, #24
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4a92      	ldr	r2, [pc, #584]	; (80045d4 <HAL_ADC_Start_IT+0x258>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d004      	beq.n	8004398 <HAL_ADC_Start_IT+0x1c>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4a91      	ldr	r2, [pc, #580]	; (80045d8 <HAL_ADC_Start_IT+0x25c>)
 8004394:	4293      	cmp	r3, r2
 8004396:	d101      	bne.n	800439c <HAL_ADC_Start_IT+0x20>
 8004398:	4b90      	ldr	r3, [pc, #576]	; (80045dc <HAL_ADC_Start_IT+0x260>)
 800439a:	e000      	b.n	800439e <HAL_ADC_Start_IT+0x22>
 800439c:	4b90      	ldr	r3, [pc, #576]	; (80045e0 <HAL_ADC_Start_IT+0x264>)
 800439e:	4618      	mov	r0, r3
 80043a0:	f7ff fd58 	bl	8003e54 <LL_ADC_GetMultimode>
 80043a4:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4618      	mov	r0, r3
 80043ac:	f7ff fe1e 	bl	8003fec <LL_ADC_REG_IsConversionOngoing>
 80043b0:	4603      	mov	r3, r0
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	f040 8118 	bne.w	80045e8 <HAL_ADC_Start_IT+0x26c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80043be:	2b01      	cmp	r3, #1
 80043c0:	d101      	bne.n	80043c6 <HAL_ADC_Start_IT+0x4a>
 80043c2:	2302      	movs	r3, #2
 80043c4:	e113      	b.n	80045ee <HAL_ADC_Start_IT+0x272>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2201      	movs	r2, #1
 80043ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80043ce:	6878      	ldr	r0, [r7, #4]
 80043d0:	f000 febe 	bl	8005150 <ADC_Enable>
 80043d4:	4603      	mov	r3, r0
 80043d6:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80043d8:	7dfb      	ldrb	r3, [r7, #23]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	f040 80f5 	bne.w	80045ca <HAL_ADC_Start_IT+0x24e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80043e4:	4b7f      	ldr	r3, [pc, #508]	; (80045e4 <HAL_ADC_Start_IT+0x268>)
 80043e6:	4013      	ands	r3, r2
 80043e8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a78      	ldr	r2, [pc, #480]	; (80045d8 <HAL_ADC_Start_IT+0x25c>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d002      	beq.n	8004400 <HAL_ADC_Start_IT+0x84>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	e000      	b.n	8004402 <HAL_ADC_Start_IT+0x86>
 8004400:	4b74      	ldr	r3, [pc, #464]	; (80045d4 <HAL_ADC_Start_IT+0x258>)
 8004402:	687a      	ldr	r2, [r7, #4]
 8004404:	6812      	ldr	r2, [r2, #0]
 8004406:	4293      	cmp	r3, r2
 8004408:	d002      	beq.n	8004410 <HAL_ADC_Start_IT+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800440a:	693b      	ldr	r3, [r7, #16]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d105      	bne.n	800441c <HAL_ADC_Start_IT+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004414:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004420:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004424:	2b00      	cmp	r3, #0
 8004426:	d006      	beq.n	8004436 <HAL_ADC_Start_IT+0xba>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800442c:	f023 0206 	bic.w	r2, r3, #6
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	659a      	str	r2, [r3, #88]	; 0x58
 8004434:	e002      	b.n	800443c <HAL_ADC_Start_IT+0xc0>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2200      	movs	r2, #0
 800443a:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	221c      	movs	r2, #28
 8004442:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2200      	movs	r2, #0
 8004448:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	685a      	ldr	r2, [r3, #4]
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f022 021c 	bic.w	r2, r2, #28
 800445a:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	691b      	ldr	r3, [r3, #16]
 8004460:	2b08      	cmp	r3, #8
 8004462:	d108      	bne.n	8004476 <HAL_ADC_Start_IT+0xfa>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	685a      	ldr	r2, [r3, #4]
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f042 0208 	orr.w	r2, r2, #8
 8004472:	605a      	str	r2, [r3, #4]
          break;
 8004474:	e008      	b.n	8004488 <HAL_ADC_Start_IT+0x10c>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	685a      	ldr	r2, [r3, #4]
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f042 0204 	orr.w	r2, r2, #4
 8004484:	605a      	str	r2, [r3, #4]
          break;
 8004486:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800448c:	2b00      	cmp	r3, #0
 800448e:	d107      	bne.n	80044a0 <HAL_ADC_Start_IT+0x124>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	685a      	ldr	r2, [r3, #4]
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f042 0210 	orr.w	r2, r2, #16
 800449e:	605a      	str	r2, [r3, #4]
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a4c      	ldr	r2, [pc, #304]	; (80045d8 <HAL_ADC_Start_IT+0x25c>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d002      	beq.n	80044b0 <HAL_ADC_Start_IT+0x134>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	e000      	b.n	80044b2 <HAL_ADC_Start_IT+0x136>
 80044b0:	4b48      	ldr	r3, [pc, #288]	; (80045d4 <HAL_ADC_Start_IT+0x258>)
 80044b2:	687a      	ldr	r2, [r7, #4]
 80044b4:	6812      	ldr	r2, [r2, #0]
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d008      	beq.n	80044cc <HAL_ADC_Start_IT+0x150>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80044ba:	693b      	ldr	r3, [r7, #16]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d005      	beq.n	80044cc <HAL_ADC_Start_IT+0x150>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80044c0:	693b      	ldr	r3, [r7, #16]
 80044c2:	2b05      	cmp	r3, #5
 80044c4:	d002      	beq.n	80044cc <HAL_ADC_Start_IT+0x150>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80044c6:	693b      	ldr	r3, [r7, #16]
 80044c8:	2b09      	cmp	r3, #9
 80044ca:	d13a      	bne.n	8004542 <HAL_ADC_Start_IT+0x1c6>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	68db      	ldr	r3, [r3, #12]
 80044d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d02d      	beq.n	8004536 <HAL_ADC_Start_IT+0x1ba>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044de:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80044e2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Enable as well injected interruptions in case
           HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
           allows to start regular and injected conversions when JAUTO is
           set with a single call to HAL_ADC_Start_IT() */
          switch (hadc->Init.EOCSelection)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	691b      	ldr	r3, [r3, #16]
 80044ee:	2b08      	cmp	r3, #8
 80044f0:	d110      	bne.n	8004514 <HAL_ADC_Start_IT+0x198>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	685a      	ldr	r2, [r3, #4]
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f022 0220 	bic.w	r2, r2, #32
 8004500:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	685a      	ldr	r2, [r3, #4]
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004510:	605a      	str	r2, [r3, #4]
              break;
 8004512:	e010      	b.n	8004536 <HAL_ADC_Start_IT+0x1ba>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	685a      	ldr	r2, [r3, #4]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004522:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	685a      	ldr	r2, [r3, #4]
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f042 0220 	orr.w	r2, r2, #32
 8004532:	605a      	str	r2, [r3, #4]
              break;
 8004534:	bf00      	nop
          }
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4618      	mov	r0, r3
 800453c:	f7ff fd42 	bl	8003fc4 <LL_ADC_REG_StartConversion>
 8004540:	e054      	b.n	80045ec <HAL_ADC_Start_IT+0x270>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004546:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, Slave injected interruptions
           are enabled nevertheless (for same reason as above) */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4a21      	ldr	r2, [pc, #132]	; (80045d8 <HAL_ADC_Start_IT+0x25c>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d002      	beq.n	800455e <HAL_ADC_Start_IT+0x1e2>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	e000      	b.n	8004560 <HAL_ADC_Start_IT+0x1e4>
 800455e:	4b1d      	ldr	r3, [pc, #116]	; (80045d4 <HAL_ADC_Start_IT+0x258>)
 8004560:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	68db      	ldr	r3, [r3, #12]
 8004566:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800456a:	2b00      	cmp	r3, #0
 800456c:	d03e      	beq.n	80045ec <HAL_ADC_Start_IT+0x270>
        {
          /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
             and in resetting HAL_ADC_STATE_INJ_EOC bit */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004572:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004576:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	655a      	str	r2, [r3, #84]	; 0x54
          /* Next, set Slave injected interruptions */
          switch (hadc->Init.EOCSelection)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	691b      	ldr	r3, [r3, #16]
 8004582:	2b08      	cmp	r3, #8
 8004584:	d110      	bne.n	80045a8 <HAL_ADC_Start_IT+0x22c>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	685a      	ldr	r2, [r3, #4]
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f022 0220 	bic.w	r2, r2, #32
 8004594:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	685a      	ldr	r2, [r3, #4]
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80045a4:	605a      	str	r2, [r3, #4]
              break;
 80045a6:	e021      	b.n	80045ec <HAL_ADC_Start_IT+0x270>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	685a      	ldr	r2, [r3, #4]
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80045b6:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	685a      	ldr	r2, [r3, #4]
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f042 0220 	orr.w	r2, r2, #32
 80045c6:	605a      	str	r2, [r3, #4]
              break;
 80045c8:	e010      	b.n	80045ec <HAL_ADC_Start_IT+0x270>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2200      	movs	r2, #0
 80045ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80045d2:	e00b      	b.n	80045ec <HAL_ADC_Start_IT+0x270>
 80045d4:	40022000 	.word	0x40022000
 80045d8:	40022100 	.word	0x40022100
 80045dc:	40022300 	.word	0x40022300
 80045e0:	58026300 	.word	0x58026300
 80045e4:	fffff0fe 	.word	0xfffff0fe
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80045e8:	2302      	movs	r3, #2
 80045ea:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80045ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80045ee:	4618      	mov	r0, r3
 80045f0:	3718      	adds	r7, #24
 80045f2:	46bd      	mov	sp, r7
 80045f4:	bd80      	pop	{r7, pc}
 80045f6:	bf00      	nop

080045f8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80045f8:	b480      	push	{r7}
 80045fa:	b083      	sub	sp, #12
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8004606:	4618      	mov	r0, r3
 8004608:	370c      	adds	r7, #12
 800460a:	46bd      	mov	sp, r7
 800460c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004610:	4770      	bx	lr
	...

08004614 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b08a      	sub	sp, #40	; 0x28
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 800461c:	2300      	movs	r3, #0
 800461e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	685b      	ldr	r3, [r3, #4]
 800462e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4a87      	ldr	r2, [pc, #540]	; (8004854 <HAL_ADC_IRQHandler+0x240>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d004      	beq.n	8004644 <HAL_ADC_IRQHandler+0x30>
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4a86      	ldr	r2, [pc, #536]	; (8004858 <HAL_ADC_IRQHandler+0x244>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d101      	bne.n	8004648 <HAL_ADC_IRQHandler+0x34>
 8004644:	4b85      	ldr	r3, [pc, #532]	; (800485c <HAL_ADC_IRQHandler+0x248>)
 8004646:	e000      	b.n	800464a <HAL_ADC_IRQHandler+0x36>
 8004648:	4b85      	ldr	r3, [pc, #532]	; (8004860 <HAL_ADC_IRQHandler+0x24c>)
 800464a:	4618      	mov	r0, r3
 800464c:	f7ff fc02 	bl	8003e54 <LL_ADC_GetMultimode>
 8004650:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8004652:	69fb      	ldr	r3, [r7, #28]
 8004654:	f003 0302 	and.w	r3, r3, #2
 8004658:	2b00      	cmp	r3, #0
 800465a:	d017      	beq.n	800468c <HAL_ADC_IRQHandler+0x78>
 800465c:	69bb      	ldr	r3, [r7, #24]
 800465e:	f003 0302 	and.w	r3, r3, #2
 8004662:	2b00      	cmp	r3, #0
 8004664:	d012      	beq.n	800468c <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800466a:	f003 0310 	and.w	r3, r3, #16
 800466e:	2b00      	cmp	r3, #0
 8004670:	d105      	bne.n	800467e <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004676:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 800467e:	6878      	ldr	r0, [r7, #4]
 8004680:	f001 f81a 	bl	80056b8 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	2202      	movs	r2, #2
 800468a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800468c:	69fb      	ldr	r3, [r7, #28]
 800468e:	f003 0304 	and.w	r3, r3, #4
 8004692:	2b00      	cmp	r3, #0
 8004694:	d004      	beq.n	80046a0 <HAL_ADC_IRQHandler+0x8c>
 8004696:	69bb      	ldr	r3, [r7, #24]
 8004698:	f003 0304 	and.w	r3, r3, #4
 800469c:	2b00      	cmp	r3, #0
 800469e:	d10a      	bne.n	80046b6 <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80046a0:	69fb      	ldr	r3, [r7, #28]
 80046a2:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	f000 8083 	beq.w	80047b2 <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80046ac:	69bb      	ldr	r3, [r7, #24]
 80046ae:	f003 0308 	and.w	r3, r3, #8
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d07d      	beq.n	80047b2 <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046ba:	f003 0310 	and.w	r3, r3, #16
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d105      	bne.n	80046ce <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046c6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4618      	mov	r0, r3
 80046d4:	f7ff fb1c 	bl	8003d10 <LL_ADC_REG_IsTriggerSourceSWStart>
 80046d8:	4603      	mov	r3, r0
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d062      	beq.n	80047a4 <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	4a5d      	ldr	r2, [pc, #372]	; (8004858 <HAL_ADC_IRQHandler+0x244>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d002      	beq.n	80046ee <HAL_ADC_IRQHandler+0xda>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	e000      	b.n	80046f0 <HAL_ADC_IRQHandler+0xdc>
 80046ee:	4b59      	ldr	r3, [pc, #356]	; (8004854 <HAL_ADC_IRQHandler+0x240>)
 80046f0:	687a      	ldr	r2, [r7, #4]
 80046f2:	6812      	ldr	r2, [r2, #0]
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d008      	beq.n	800470a <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80046f8:	697b      	ldr	r3, [r7, #20]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d005      	beq.n	800470a <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80046fe:	697b      	ldr	r3, [r7, #20]
 8004700:	2b05      	cmp	r3, #5
 8004702:	d002      	beq.n	800470a <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004704:	697b      	ldr	r3, [r7, #20]
 8004706:	2b09      	cmp	r3, #9
 8004708:	d104      	bne.n	8004714 <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	68db      	ldr	r3, [r3, #12]
 8004710:	623b      	str	r3, [r7, #32]
 8004712:	e00c      	b.n	800472e <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4a4f      	ldr	r2, [pc, #316]	; (8004858 <HAL_ADC_IRQHandler+0x244>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d002      	beq.n	8004724 <HAL_ADC_IRQHandler+0x110>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	e000      	b.n	8004726 <HAL_ADC_IRQHandler+0x112>
 8004724:	4b4b      	ldr	r3, [pc, #300]	; (8004854 <HAL_ADC_IRQHandler+0x240>)
 8004726:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8004728:	693b      	ldr	r3, [r7, #16]
 800472a:	68db      	ldr	r3, [r3, #12]
 800472c:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 800472e:	6a3b      	ldr	r3, [r7, #32]
 8004730:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004734:	2b00      	cmp	r3, #0
 8004736:	d135      	bne.n	80047a4 <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f003 0308 	and.w	r3, r3, #8
 8004742:	2b08      	cmp	r3, #8
 8004744:	d12e      	bne.n	80047a4 <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	4618      	mov	r0, r3
 800474c:	f7ff fc4e 	bl	8003fec <LL_ADC_REG_IsConversionOngoing>
 8004750:	4603      	mov	r3, r0
 8004752:	2b00      	cmp	r3, #0
 8004754:	d11a      	bne.n	800478c <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	685a      	ldr	r2, [r3, #4]
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f022 020c 	bic.w	r2, r2, #12
 8004764:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800476a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004776:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800477a:	2b00      	cmp	r3, #0
 800477c:	d112      	bne.n	80047a4 <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004782:	f043 0201 	orr.w	r2, r3, #1
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	655a      	str	r2, [r3, #84]	; 0x54
 800478a:	e00b      	b.n	80047a4 <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004790:	f043 0210 	orr.w	r2, r3, #16
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800479c:	f043 0201 	orr.w	r2, r3, #1
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80047a4:	6878      	ldr	r0, [r7, #4]
 80047a6:	f7fe fa09 	bl	8002bbc <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	220c      	movs	r2, #12
 80047b0:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80047b2:	69fb      	ldr	r3, [r7, #28]
 80047b4:	f003 0320 	and.w	r3, r3, #32
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d004      	beq.n	80047c6 <HAL_ADC_IRQHandler+0x1b2>
 80047bc:	69bb      	ldr	r3, [r7, #24]
 80047be:	f003 0320 	and.w	r3, r3, #32
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d10b      	bne.n	80047de <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80047c6:	69fb      	ldr	r3, [r7, #28]
 80047c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	f000 80a0 	beq.w	8004912 <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80047d2:	69bb      	ldr	r3, [r7, #24]
 80047d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047d8:	2b00      	cmp	r3, #0
 80047da:	f000 809a 	beq.w	8004912 <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047e2:	f003 0310 	and.w	r3, r3, #16
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d105      	bne.n	80047f6 <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047ee:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4618      	mov	r0, r3
 80047fc:	f7ff fac7 	bl	8003d8e <LL_ADC_INJ_IsTriggerSourceSWStart>
 8004800:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4618      	mov	r0, r3
 8004808:	f7ff fa82 	bl	8003d10 <LL_ADC_REG_IsTriggerSourceSWStart>
 800480c:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	4a11      	ldr	r2, [pc, #68]	; (8004858 <HAL_ADC_IRQHandler+0x244>)
 8004814:	4293      	cmp	r3, r2
 8004816:	d002      	beq.n	800481e <HAL_ADC_IRQHandler+0x20a>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	e000      	b.n	8004820 <HAL_ADC_IRQHandler+0x20c>
 800481e:	4b0d      	ldr	r3, [pc, #52]	; (8004854 <HAL_ADC_IRQHandler+0x240>)
 8004820:	687a      	ldr	r2, [r7, #4]
 8004822:	6812      	ldr	r2, [r2, #0]
 8004824:	4293      	cmp	r3, r2
 8004826:	d008      	beq.n	800483a <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004828:	697b      	ldr	r3, [r7, #20]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d005      	beq.n	800483a <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 800482e:	697b      	ldr	r3, [r7, #20]
 8004830:	2b06      	cmp	r3, #6
 8004832:	d002      	beq.n	800483a <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8004834:	697b      	ldr	r3, [r7, #20]
 8004836:	2b07      	cmp	r3, #7
 8004838:	d104      	bne.n	8004844 <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	68db      	ldr	r3, [r3, #12]
 8004840:	623b      	str	r3, [r7, #32]
 8004842:	e014      	b.n	800486e <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4a03      	ldr	r2, [pc, #12]	; (8004858 <HAL_ADC_IRQHandler+0x244>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d00a      	beq.n	8004864 <HAL_ADC_IRQHandler+0x250>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	e008      	b.n	8004866 <HAL_ADC_IRQHandler+0x252>
 8004854:	40022000 	.word	0x40022000
 8004858:	40022100 	.word	0x40022100
 800485c:	40022300 	.word	0x40022300
 8004860:	58026300 	.word	0x58026300
 8004864:	4b84      	ldr	r3, [pc, #528]	; (8004a78 <HAL_ADC_IRQHandler+0x464>)
 8004866:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8004868:	693b      	ldr	r3, [r7, #16]
 800486a:	68db      	ldr	r3, [r3, #12]
 800486c:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d047      	beq.n	8004904 <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8004874:	6a3b      	ldr	r3, [r7, #32]
 8004876:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800487a:	2b00      	cmp	r3, #0
 800487c:	d007      	beq.n	800488e <HAL_ADC_IRQHandler+0x27a>
 800487e:	68bb      	ldr	r3, [r7, #8]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d03f      	beq.n	8004904 <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8004884:	6a3b      	ldr	r3, [r7, #32]
 8004886:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 800488a:	2b00      	cmp	r3, #0
 800488c:	d13a      	bne.n	8004904 <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004898:	2b40      	cmp	r3, #64	; 0x40
 800489a:	d133      	bne.n	8004904 <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 800489c:	6a3b      	ldr	r3, [r7, #32]
 800489e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d12e      	bne.n	8004904 <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4618      	mov	r0, r3
 80048ac:	f7ff fbb1 	bl	8004012 <LL_ADC_INJ_IsConversionOngoing>
 80048b0:	4603      	mov	r3, r0
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d11a      	bne.n	80048ec <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	685a      	ldr	r2, [r3, #4]
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80048c4:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048ca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d112      	bne.n	8004904 <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048e2:	f043 0201 	orr.w	r2, r3, #1
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	655a      	str	r2, [r3, #84]	; 0x54
 80048ea:	e00b      	b.n	8004904 <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048f0:	f043 0210 	orr.w	r2, r3, #16
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048fc:	f043 0201 	orr.w	r2, r3, #1
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8004904:	6878      	ldr	r0, [r7, #4]
 8004906:	f000 feaf 	bl	8005668 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	2260      	movs	r2, #96	; 0x60
 8004910:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8004912:	69fb      	ldr	r3, [r7, #28]
 8004914:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004918:	2b00      	cmp	r3, #0
 800491a:	d011      	beq.n	8004940 <HAL_ADC_IRQHandler+0x32c>
 800491c:	69bb      	ldr	r3, [r7, #24]
 800491e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004922:	2b00      	cmp	r3, #0
 8004924:	d00c      	beq.n	8004940 <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800492a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8004932:	6878      	ldr	r0, [r7, #4]
 8004934:	f000 f8a8 	bl	8004a88 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	2280      	movs	r2, #128	; 0x80
 800493e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8004940:	69fb      	ldr	r3, [r7, #28]
 8004942:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004946:	2b00      	cmp	r3, #0
 8004948:	d012      	beq.n	8004970 <HAL_ADC_IRQHandler+0x35c>
 800494a:	69bb      	ldr	r3, [r7, #24]
 800494c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004950:	2b00      	cmp	r3, #0
 8004952:	d00d      	beq.n	8004970 <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004958:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8004960:	6878      	ldr	r0, [r7, #4]
 8004962:	f000 fe95 	bl	8005690 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800496e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8004970:	69fb      	ldr	r3, [r7, #28]
 8004972:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004976:	2b00      	cmp	r3, #0
 8004978:	d012      	beq.n	80049a0 <HAL_ADC_IRQHandler+0x38c>
 800497a:	69bb      	ldr	r3, [r7, #24]
 800497c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004980:	2b00      	cmp	r3, #0
 8004982:	d00d      	beq.n	80049a0 <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004988:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8004990:	6878      	ldr	r0, [r7, #4]
 8004992:	f000 fe87 	bl	80056a4 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800499e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80049a0:	69fb      	ldr	r3, [r7, #28]
 80049a2:	f003 0310 	and.w	r3, r3, #16
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d043      	beq.n	8004a32 <HAL_ADC_IRQHandler+0x41e>
 80049aa:	69bb      	ldr	r3, [r7, #24]
 80049ac:	f003 0310 	and.w	r3, r3, #16
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d03e      	beq.n	8004a32 <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d102      	bne.n	80049c2 <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 80049bc:	2301      	movs	r3, #1
 80049be:	627b      	str	r3, [r7, #36]	; 0x24
 80049c0:	e021      	b.n	8004a06 <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 80049c2:	697b      	ldr	r3, [r7, #20]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d015      	beq.n	80049f4 <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4a2a      	ldr	r2, [pc, #168]	; (8004a78 <HAL_ADC_IRQHandler+0x464>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d004      	beq.n	80049dc <HAL_ADC_IRQHandler+0x3c8>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4a29      	ldr	r2, [pc, #164]	; (8004a7c <HAL_ADC_IRQHandler+0x468>)
 80049d8:	4293      	cmp	r3, r2
 80049da:	d101      	bne.n	80049e0 <HAL_ADC_IRQHandler+0x3cc>
 80049dc:	4b28      	ldr	r3, [pc, #160]	; (8004a80 <HAL_ADC_IRQHandler+0x46c>)
 80049de:	e000      	b.n	80049e2 <HAL_ADC_IRQHandler+0x3ce>
 80049e0:	4b28      	ldr	r3, [pc, #160]	; (8004a84 <HAL_ADC_IRQHandler+0x470>)
 80049e2:	4618      	mov	r0, r3
 80049e4:	f7ff fa44 	bl	8003e70 <LL_ADC_GetMultiDMATransfer>
 80049e8:	4603      	mov	r3, r0
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d00b      	beq.n	8004a06 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 80049ee:	2301      	movs	r3, #1
 80049f0:	627b      	str	r3, [r7, #36]	; 0x24
 80049f2:	e008      	b.n	8004a06 <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	68db      	ldr	r3, [r3, #12]
 80049fa:	f003 0303 	and.w	r3, r3, #3
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d001      	beq.n	8004a06 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8004a02:	2301      	movs	r3, #1
 8004a04:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8004a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a08:	2b01      	cmp	r3, #1
 8004a0a:	d10e      	bne.n	8004a2a <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a10:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a1c:	f043 0202 	orr.w	r2, r3, #2
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8004a24:	6878      	ldr	r0, [r7, #4]
 8004a26:	f000 f839 	bl	8004a9c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	2210      	movs	r2, #16
 8004a30:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8004a32:	69fb      	ldr	r3, [r7, #28]
 8004a34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d018      	beq.n	8004a6e <HAL_ADC_IRQHandler+0x45a>
 8004a3c:	69bb      	ldr	r3, [r7, #24]
 8004a3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d013      	beq.n	8004a6e <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a4a:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a56:	f043 0208 	orr.w	r2, r3, #8
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004a66:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8004a68:	6878      	ldr	r0, [r7, #4]
 8004a6a:	f000 fe07 	bl	800567c <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8004a6e:	bf00      	nop
 8004a70:	3728      	adds	r7, #40	; 0x28
 8004a72:	46bd      	mov	sp, r7
 8004a74:	bd80      	pop	{r7, pc}
 8004a76:	bf00      	nop
 8004a78:	40022000 	.word	0x40022000
 8004a7c:	40022100 	.word	0x40022100
 8004a80:	40022300 	.word	0x40022300
 8004a84:	58026300 	.word	0x58026300

08004a88 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8004a88:	b480      	push	{r7}
 8004a8a:	b083      	sub	sp, #12
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8004a90:	bf00      	nop
 8004a92:	370c      	adds	r7, #12
 8004a94:	46bd      	mov	sp, r7
 8004a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9a:	4770      	bx	lr

08004a9c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	b083      	sub	sp, #12
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004aa4:	bf00      	nop
 8004aa6:	370c      	adds	r7, #12
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aae:	4770      	bx	lr

08004ab0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004ab0:	b590      	push	{r4, r7, lr}
 8004ab2:	b0a1      	sub	sp, #132	; 0x84
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
 8004ab8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004aba:	2300      	movs	r3, #0
 8004abc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	68db      	ldr	r3, [r3, #12]
 8004ac8:	4a9d      	ldr	r2, [pc, #628]	; (8004d40 <HAL_ADC_ConfigChannel+0x290>)
 8004aca:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004ad2:	2b01      	cmp	r3, #1
 8004ad4:	d101      	bne.n	8004ada <HAL_ADC_ConfigChannel+0x2a>
 8004ad6:	2302      	movs	r3, #2
 8004ad8:	e321      	b.n	800511e <HAL_ADC_ConfigChannel+0x66e>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2201      	movs	r2, #1
 8004ade:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	f7ff fa80 	bl	8003fec <LL_ADC_REG_IsConversionOngoing>
 8004aec:	4603      	mov	r3, r0
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	f040 8306 	bne.w	8005100 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d108      	bne.n	8004b12 <HAL_ADC_ConfigChannel+0x62>
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	0e9b      	lsrs	r3, r3, #26
 8004b06:	f003 031f 	and.w	r3, r3, #31
 8004b0a:	2201      	movs	r2, #1
 8004b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b10:	e016      	b.n	8004b40 <HAL_ADC_ConfigChannel+0x90>
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b18:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004b1a:	fa93 f3a3 	rbit	r3, r3
 8004b1e:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004b20:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004b22:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004b24:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d101      	bne.n	8004b2e <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8004b2a:	2320      	movs	r3, #32
 8004b2c:	e003      	b.n	8004b36 <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8004b2e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004b30:	fab3 f383 	clz	r3, r3
 8004b34:	b2db      	uxtb	r3, r3
 8004b36:	f003 031f 	and.w	r3, r3, #31
 8004b3a:	2201      	movs	r2, #1
 8004b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b40:	687a      	ldr	r2, [r7, #4]
 8004b42:	6812      	ldr	r2, [r2, #0]
 8004b44:	69d1      	ldr	r1, [r2, #28]
 8004b46:	687a      	ldr	r2, [r7, #4]
 8004b48:	6812      	ldr	r2, [r2, #0]
 8004b4a:	430b      	orrs	r3, r1
 8004b4c:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6818      	ldr	r0, [r3, #0]
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	6859      	ldr	r1, [r3, #4]
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	461a      	mov	r2, r3
 8004b5c:	f7ff f8eb 	bl	8003d36 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	4618      	mov	r0, r3
 8004b66:	f7ff fa41 	bl	8003fec <LL_ADC_REG_IsConversionOngoing>
 8004b6a:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4618      	mov	r0, r3
 8004b72:	f7ff fa4e 	bl	8004012 <LL_ADC_INJ_IsConversionOngoing>
 8004b76:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004b78:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	f040 80b3 	bne.w	8004ce6 <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004b80:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	f040 80af 	bne.w	8004ce6 <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6818      	ldr	r0, [r3, #0]
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	6819      	ldr	r1, [r3, #0]
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	689b      	ldr	r3, [r3, #8]
 8004b94:	461a      	mov	r2, r3
 8004b96:	f7ff f90d 	bl	8003db4 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004b9a:	4b6a      	ldr	r3, [pc, #424]	; (8004d44 <HAL_ADC_ConfigChannel+0x294>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8004ba2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004ba6:	d10b      	bne.n	8004bc0 <HAL_ADC_ConfigChannel+0x110>
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	695a      	ldr	r2, [r3, #20]
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	68db      	ldr	r3, [r3, #12]
 8004bb2:	089b      	lsrs	r3, r3, #2
 8004bb4:	f003 0307 	and.w	r3, r3, #7
 8004bb8:	005b      	lsls	r3, r3, #1
 8004bba:	fa02 f303 	lsl.w	r3, r2, r3
 8004bbe:	e01d      	b.n	8004bfc <HAL_ADC_ConfigChannel+0x14c>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	68db      	ldr	r3, [r3, #12]
 8004bc6:	f003 0310 	and.w	r3, r3, #16
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d10b      	bne.n	8004be6 <HAL_ADC_ConfigChannel+0x136>
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	695a      	ldr	r2, [r3, #20]
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	68db      	ldr	r3, [r3, #12]
 8004bd8:	089b      	lsrs	r3, r3, #2
 8004bda:	f003 0307 	and.w	r3, r3, #7
 8004bde:	005b      	lsls	r3, r3, #1
 8004be0:	fa02 f303 	lsl.w	r3, r2, r3
 8004be4:	e00a      	b.n	8004bfc <HAL_ADC_ConfigChannel+0x14c>
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	695a      	ldr	r2, [r3, #20]
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	68db      	ldr	r3, [r3, #12]
 8004bf0:	089b      	lsrs	r3, r3, #2
 8004bf2:	f003 0304 	and.w	r3, r3, #4
 8004bf6:	005b      	lsls	r3, r3, #1
 8004bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8004bfc:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	691b      	ldr	r3, [r3, #16]
 8004c02:	2b04      	cmp	r3, #4
 8004c04:	d027      	beq.n	8004c56 <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6818      	ldr	r0, [r3, #0]
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	6919      	ldr	r1, [r3, #16]
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	681a      	ldr	r2, [r3, #0]
 8004c12:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004c14:	f7ff f828 	bl	8003c68 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6818      	ldr	r0, [r3, #0]
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	6919      	ldr	r1, [r3, #16]
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	7e5b      	ldrb	r3, [r3, #25]
 8004c24:	2b01      	cmp	r3, #1
 8004c26:	d102      	bne.n	8004c2e <HAL_ADC_ConfigChannel+0x17e>
 8004c28:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004c2c:	e000      	b.n	8004c30 <HAL_ADC_ConfigChannel+0x180>
 8004c2e:	2300      	movs	r3, #0
 8004c30:	461a      	mov	r2, r3
 8004c32:	f7ff f852 	bl	8003cda <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6818      	ldr	r0, [r3, #0]
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	6919      	ldr	r1, [r3, #16]
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	7e1b      	ldrb	r3, [r3, #24]
 8004c42:	2b01      	cmp	r3, #1
 8004c44:	d102      	bne.n	8004c4c <HAL_ADC_ConfigChannel+0x19c>
 8004c46:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004c4a:	e000      	b.n	8004c4e <HAL_ADC_ConfigChannel+0x19e>
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	461a      	mov	r2, r3
 8004c50:	f7ff f82a 	bl	8003ca8 <LL_ADC_SetDataRightShift>
 8004c54:	e047      	b.n	8004ce6 <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c5c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	069b      	lsls	r3, r3, #26
 8004c66:	429a      	cmp	r2, r3
 8004c68:	d107      	bne.n	8004c7a <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004c78:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004c80:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	069b      	lsls	r3, r3, #26
 8004c8a:	429a      	cmp	r2, r3
 8004c8c:	d107      	bne.n	8004c9e <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004c9c:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004ca4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	069b      	lsls	r3, r3, #26
 8004cae:	429a      	cmp	r2, r3
 8004cb0:	d107      	bne.n	8004cc2 <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004cc0:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004cc8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	069b      	lsls	r3, r3, #26
 8004cd2:	429a      	cmp	r2, r3
 8004cd4:	d107      	bne.n	8004ce6 <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004ce4:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	4618      	mov	r0, r3
 8004cec:	f7ff f944 	bl	8003f78 <LL_ADC_IsEnabled>
 8004cf0:	4603      	mov	r3, r0
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	f040 820d 	bne.w	8005112 <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6818      	ldr	r0, [r3, #0]
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	6819      	ldr	r1, [r3, #0]
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	68db      	ldr	r3, [r3, #12]
 8004d04:	461a      	mov	r2, r3
 8004d06:	f7ff f881 	bl	8003e0c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	68db      	ldr	r3, [r3, #12]
 8004d0e:	4a0c      	ldr	r2, [pc, #48]	; (8004d40 <HAL_ADC_ConfigChannel+0x290>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	f040 8133 	bne.w	8004f7c <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d110      	bne.n	8004d48 <HAL_ADC_ConfigChannel+0x298>
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	0e9b      	lsrs	r3, r3, #26
 8004d2c:	3301      	adds	r3, #1
 8004d2e:	f003 031f 	and.w	r3, r3, #31
 8004d32:	2b09      	cmp	r3, #9
 8004d34:	bf94      	ite	ls
 8004d36:	2301      	movls	r3, #1
 8004d38:	2300      	movhi	r3, #0
 8004d3a:	b2db      	uxtb	r3, r3
 8004d3c:	e01e      	b.n	8004d7c <HAL_ADC_ConfigChannel+0x2cc>
 8004d3e:	bf00      	nop
 8004d40:	47ff0000 	.word	0x47ff0000
 8004d44:	5c001000 	.word	0x5c001000
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d4e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004d50:	fa93 f3a3 	rbit	r3, r3
 8004d54:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8004d56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d58:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8004d5a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d101      	bne.n	8004d64 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8004d60:	2320      	movs	r3, #32
 8004d62:	e003      	b.n	8004d6c <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8004d64:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d66:	fab3 f383 	clz	r3, r3
 8004d6a:	b2db      	uxtb	r3, r3
 8004d6c:	3301      	adds	r3, #1
 8004d6e:	f003 031f 	and.w	r3, r3, #31
 8004d72:	2b09      	cmp	r3, #9
 8004d74:	bf94      	ite	ls
 8004d76:	2301      	movls	r3, #1
 8004d78:	2300      	movhi	r3, #0
 8004d7a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d079      	beq.n	8004e74 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d107      	bne.n	8004d9c <HAL_ADC_ConfigChannel+0x2ec>
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	0e9b      	lsrs	r3, r3, #26
 8004d92:	3301      	adds	r3, #1
 8004d94:	069b      	lsls	r3, r3, #26
 8004d96:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004d9a:	e015      	b.n	8004dc8 <HAL_ADC_ConfigChannel+0x318>
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004da2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004da4:	fa93 f3a3 	rbit	r3, r3
 8004da8:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8004daa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004dac:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8004dae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d101      	bne.n	8004db8 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 8004db4:	2320      	movs	r3, #32
 8004db6:	e003      	b.n	8004dc0 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8004db8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004dba:	fab3 f383 	clz	r3, r3
 8004dbe:	b2db      	uxtb	r3, r3
 8004dc0:	3301      	adds	r3, #1
 8004dc2:	069b      	lsls	r3, r3, #26
 8004dc4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d109      	bne.n	8004de8 <HAL_ADC_ConfigChannel+0x338>
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	0e9b      	lsrs	r3, r3, #26
 8004dda:	3301      	adds	r3, #1
 8004ddc:	f003 031f 	and.w	r3, r3, #31
 8004de0:	2101      	movs	r1, #1
 8004de2:	fa01 f303 	lsl.w	r3, r1, r3
 8004de6:	e017      	b.n	8004e18 <HAL_ADC_ConfigChannel+0x368>
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004df0:	fa93 f3a3 	rbit	r3, r3
 8004df4:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8004df6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004df8:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8004dfa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d101      	bne.n	8004e04 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8004e00:	2320      	movs	r3, #32
 8004e02:	e003      	b.n	8004e0c <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8004e04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e06:	fab3 f383 	clz	r3, r3
 8004e0a:	b2db      	uxtb	r3, r3
 8004e0c:	3301      	adds	r3, #1
 8004e0e:	f003 031f 	and.w	r3, r3, #31
 8004e12:	2101      	movs	r1, #1
 8004e14:	fa01 f303 	lsl.w	r3, r1, r3
 8004e18:	ea42 0103 	orr.w	r1, r2, r3
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d10a      	bne.n	8004e3e <HAL_ADC_ConfigChannel+0x38e>
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	0e9b      	lsrs	r3, r3, #26
 8004e2e:	3301      	adds	r3, #1
 8004e30:	f003 021f 	and.w	r2, r3, #31
 8004e34:	4613      	mov	r3, r2
 8004e36:	005b      	lsls	r3, r3, #1
 8004e38:	4413      	add	r3, r2
 8004e3a:	051b      	lsls	r3, r3, #20
 8004e3c:	e018      	b.n	8004e70 <HAL_ADC_ConfigChannel+0x3c0>
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e46:	fa93 f3a3 	rbit	r3, r3
 8004e4a:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8004e4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e4e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8004e50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d101      	bne.n	8004e5a <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 8004e56:	2320      	movs	r3, #32
 8004e58:	e003      	b.n	8004e62 <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 8004e5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e5c:	fab3 f383 	clz	r3, r3
 8004e60:	b2db      	uxtb	r3, r3
 8004e62:	3301      	adds	r3, #1
 8004e64:	f003 021f 	and.w	r2, r3, #31
 8004e68:	4613      	mov	r3, r2
 8004e6a:	005b      	lsls	r3, r3, #1
 8004e6c:	4413      	add	r3, r2
 8004e6e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004e70:	430b      	orrs	r3, r1
 8004e72:	e07e      	b.n	8004f72 <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d107      	bne.n	8004e90 <HAL_ADC_ConfigChannel+0x3e0>
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	0e9b      	lsrs	r3, r3, #26
 8004e86:	3301      	adds	r3, #1
 8004e88:	069b      	lsls	r3, r3, #26
 8004e8a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004e8e:	e015      	b.n	8004ebc <HAL_ADC_ConfigChannel+0x40c>
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e98:	fa93 f3a3 	rbit	r3, r3
 8004e9c:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8004e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ea0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8004ea2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d101      	bne.n	8004eac <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8004ea8:	2320      	movs	r3, #32
 8004eaa:	e003      	b.n	8004eb4 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8004eac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004eae:	fab3 f383 	clz	r3, r3
 8004eb2:	b2db      	uxtb	r3, r3
 8004eb4:	3301      	adds	r3, #1
 8004eb6:	069b      	lsls	r3, r3, #26
 8004eb8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d109      	bne.n	8004edc <HAL_ADC_ConfigChannel+0x42c>
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	0e9b      	lsrs	r3, r3, #26
 8004ece:	3301      	adds	r3, #1
 8004ed0:	f003 031f 	and.w	r3, r3, #31
 8004ed4:	2101      	movs	r1, #1
 8004ed6:	fa01 f303 	lsl.w	r3, r1, r3
 8004eda:	e017      	b.n	8004f0c <HAL_ADC_ConfigChannel+0x45c>
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ee2:	69fb      	ldr	r3, [r7, #28]
 8004ee4:	fa93 f3a3 	rbit	r3, r3
 8004ee8:	61bb      	str	r3, [r7, #24]
  return result;
 8004eea:	69bb      	ldr	r3, [r7, #24]
 8004eec:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8004eee:	6a3b      	ldr	r3, [r7, #32]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d101      	bne.n	8004ef8 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8004ef4:	2320      	movs	r3, #32
 8004ef6:	e003      	b.n	8004f00 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8004ef8:	6a3b      	ldr	r3, [r7, #32]
 8004efa:	fab3 f383 	clz	r3, r3
 8004efe:	b2db      	uxtb	r3, r3
 8004f00:	3301      	adds	r3, #1
 8004f02:	f003 031f 	and.w	r3, r3, #31
 8004f06:	2101      	movs	r1, #1
 8004f08:	fa01 f303 	lsl.w	r3, r1, r3
 8004f0c:	ea42 0103 	orr.w	r1, r2, r3
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d10d      	bne.n	8004f38 <HAL_ADC_ConfigChannel+0x488>
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	0e9b      	lsrs	r3, r3, #26
 8004f22:	3301      	adds	r3, #1
 8004f24:	f003 021f 	and.w	r2, r3, #31
 8004f28:	4613      	mov	r3, r2
 8004f2a:	005b      	lsls	r3, r3, #1
 8004f2c:	4413      	add	r3, r2
 8004f2e:	3b1e      	subs	r3, #30
 8004f30:	051b      	lsls	r3, r3, #20
 8004f32:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004f36:	e01b      	b.n	8004f70 <HAL_ADC_ConfigChannel+0x4c0>
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f3e:	693b      	ldr	r3, [r7, #16]
 8004f40:	fa93 f3a3 	rbit	r3, r3
 8004f44:	60fb      	str	r3, [r7, #12]
  return result;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8004f4a:	697b      	ldr	r3, [r7, #20]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d101      	bne.n	8004f54 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8004f50:	2320      	movs	r3, #32
 8004f52:	e003      	b.n	8004f5c <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8004f54:	697b      	ldr	r3, [r7, #20]
 8004f56:	fab3 f383 	clz	r3, r3
 8004f5a:	b2db      	uxtb	r3, r3
 8004f5c:	3301      	adds	r3, #1
 8004f5e:	f003 021f 	and.w	r2, r3, #31
 8004f62:	4613      	mov	r3, r2
 8004f64:	005b      	lsls	r3, r3, #1
 8004f66:	4413      	add	r3, r2
 8004f68:	3b1e      	subs	r3, #30
 8004f6a:	051b      	lsls	r3, r3, #20
 8004f6c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004f70:	430b      	orrs	r3, r1
 8004f72:	683a      	ldr	r2, [r7, #0]
 8004f74:	6892      	ldr	r2, [r2, #8]
 8004f76:	4619      	mov	r1, r3
 8004f78:	f7fe ff1c 	bl	8003db4 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	f280 80c6 	bge.w	8005112 <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	4a67      	ldr	r2, [pc, #412]	; (8005128 <HAL_ADC_ConfigChannel+0x678>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d004      	beq.n	8004f9a <HAL_ADC_ConfigChannel+0x4ea>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	4a65      	ldr	r2, [pc, #404]	; (800512c <HAL_ADC_ConfigChannel+0x67c>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d101      	bne.n	8004f9e <HAL_ADC_ConfigChannel+0x4ee>
 8004f9a:	4b65      	ldr	r3, [pc, #404]	; (8005130 <HAL_ADC_ConfigChannel+0x680>)
 8004f9c:	e000      	b.n	8004fa0 <HAL_ADC_ConfigChannel+0x4f0>
 8004f9e:	4b65      	ldr	r3, [pc, #404]	; (8005134 <HAL_ADC_ConfigChannel+0x684>)
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	f7fe fe53 	bl	8003c4c <LL_ADC_GetCommonPathInternalCh>
 8004fa6:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	4a5e      	ldr	r2, [pc, #376]	; (8005128 <HAL_ADC_ConfigChannel+0x678>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d004      	beq.n	8004fbc <HAL_ADC_ConfigChannel+0x50c>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4a5d      	ldr	r2, [pc, #372]	; (800512c <HAL_ADC_ConfigChannel+0x67c>)
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d10e      	bne.n	8004fda <HAL_ADC_ConfigChannel+0x52a>
 8004fbc:	485a      	ldr	r0, [pc, #360]	; (8005128 <HAL_ADC_ConfigChannel+0x678>)
 8004fbe:	f7fe ffdb 	bl	8003f78 <LL_ADC_IsEnabled>
 8004fc2:	4604      	mov	r4, r0
 8004fc4:	4859      	ldr	r0, [pc, #356]	; (800512c <HAL_ADC_ConfigChannel+0x67c>)
 8004fc6:	f7fe ffd7 	bl	8003f78 <LL_ADC_IsEnabled>
 8004fca:	4603      	mov	r3, r0
 8004fcc:	4323      	orrs	r3, r4
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	bf0c      	ite	eq
 8004fd2:	2301      	moveq	r3, #1
 8004fd4:	2300      	movne	r3, #0
 8004fd6:	b2db      	uxtb	r3, r3
 8004fd8:	e008      	b.n	8004fec <HAL_ADC_ConfigChannel+0x53c>
 8004fda:	4857      	ldr	r0, [pc, #348]	; (8005138 <HAL_ADC_ConfigChannel+0x688>)
 8004fdc:	f7fe ffcc 	bl	8003f78 <LL_ADC_IsEnabled>
 8004fe0:	4603      	mov	r3, r0
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	bf0c      	ite	eq
 8004fe6:	2301      	moveq	r3, #1
 8004fe8:	2300      	movne	r3, #0
 8004fea:	b2db      	uxtb	r3, r3
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d07d      	beq.n	80050ec <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	4a51      	ldr	r2, [pc, #324]	; (800513c <HAL_ADC_ConfigChannel+0x68c>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d130      	bne.n	800505c <HAL_ADC_ConfigChannel+0x5ac>
 8004ffa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ffc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005000:	2b00      	cmp	r3, #0
 8005002:	d12b      	bne.n	800505c <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	4a4b      	ldr	r2, [pc, #300]	; (8005138 <HAL_ADC_ConfigChannel+0x688>)
 800500a:	4293      	cmp	r3, r2
 800500c:	f040 8081 	bne.w	8005112 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4a44      	ldr	r2, [pc, #272]	; (8005128 <HAL_ADC_ConfigChannel+0x678>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d004      	beq.n	8005024 <HAL_ADC_ConfigChannel+0x574>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	4a43      	ldr	r2, [pc, #268]	; (800512c <HAL_ADC_ConfigChannel+0x67c>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d101      	bne.n	8005028 <HAL_ADC_ConfigChannel+0x578>
 8005024:	4a42      	ldr	r2, [pc, #264]	; (8005130 <HAL_ADC_ConfigChannel+0x680>)
 8005026:	e000      	b.n	800502a <HAL_ADC_ConfigChannel+0x57a>
 8005028:	4a42      	ldr	r2, [pc, #264]	; (8005134 <HAL_ADC_ConfigChannel+0x684>)
 800502a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800502c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005030:	4619      	mov	r1, r3
 8005032:	4610      	mov	r0, r2
 8005034:	f7fe fdf7 	bl	8003c26 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005038:	4b41      	ldr	r3, [pc, #260]	; (8005140 <HAL_ADC_ConfigChannel+0x690>)
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	099b      	lsrs	r3, r3, #6
 800503e:	4a41      	ldr	r2, [pc, #260]	; (8005144 <HAL_ADC_ConfigChannel+0x694>)
 8005040:	fba2 2303 	umull	r2, r3, r2, r3
 8005044:	099b      	lsrs	r3, r3, #6
 8005046:	3301      	adds	r3, #1
 8005048:	005b      	lsls	r3, r3, #1
 800504a:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800504c:	e002      	b.n	8005054 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 800504e:	68bb      	ldr	r3, [r7, #8]
 8005050:	3b01      	subs	r3, #1
 8005052:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8005054:	68bb      	ldr	r3, [r7, #8]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d1f9      	bne.n	800504e <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800505a:	e05a      	b.n	8005112 <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	4a39      	ldr	r2, [pc, #228]	; (8005148 <HAL_ADC_ConfigChannel+0x698>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d11e      	bne.n	80050a4 <HAL_ADC_ConfigChannel+0x5f4>
 8005066:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005068:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800506c:	2b00      	cmp	r3, #0
 800506e:	d119      	bne.n	80050a4 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4a30      	ldr	r2, [pc, #192]	; (8005138 <HAL_ADC_ConfigChannel+0x688>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d14b      	bne.n	8005112 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4a2a      	ldr	r2, [pc, #168]	; (8005128 <HAL_ADC_ConfigChannel+0x678>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d004      	beq.n	800508e <HAL_ADC_ConfigChannel+0x5de>
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	4a28      	ldr	r2, [pc, #160]	; (800512c <HAL_ADC_ConfigChannel+0x67c>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d101      	bne.n	8005092 <HAL_ADC_ConfigChannel+0x5e2>
 800508e:	4a28      	ldr	r2, [pc, #160]	; (8005130 <HAL_ADC_ConfigChannel+0x680>)
 8005090:	e000      	b.n	8005094 <HAL_ADC_ConfigChannel+0x5e4>
 8005092:	4a28      	ldr	r2, [pc, #160]	; (8005134 <HAL_ADC_ConfigChannel+0x684>)
 8005094:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005096:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800509a:	4619      	mov	r1, r3
 800509c:	4610      	mov	r0, r2
 800509e:	f7fe fdc2 	bl	8003c26 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80050a2:	e036      	b.n	8005112 <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4a28      	ldr	r2, [pc, #160]	; (800514c <HAL_ADC_ConfigChannel+0x69c>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d131      	bne.n	8005112 <HAL_ADC_ConfigChannel+0x662>
 80050ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d12c      	bne.n	8005112 <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4a1e      	ldr	r2, [pc, #120]	; (8005138 <HAL_ADC_ConfigChannel+0x688>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d127      	bne.n	8005112 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	4a18      	ldr	r2, [pc, #96]	; (8005128 <HAL_ADC_ConfigChannel+0x678>)
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d004      	beq.n	80050d6 <HAL_ADC_ConfigChannel+0x626>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	4a16      	ldr	r2, [pc, #88]	; (800512c <HAL_ADC_ConfigChannel+0x67c>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d101      	bne.n	80050da <HAL_ADC_ConfigChannel+0x62a>
 80050d6:	4a16      	ldr	r2, [pc, #88]	; (8005130 <HAL_ADC_ConfigChannel+0x680>)
 80050d8:	e000      	b.n	80050dc <HAL_ADC_ConfigChannel+0x62c>
 80050da:	4a16      	ldr	r2, [pc, #88]	; (8005134 <HAL_ADC_ConfigChannel+0x684>)
 80050dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050de:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80050e2:	4619      	mov	r1, r3
 80050e4:	4610      	mov	r0, r2
 80050e6:	f7fe fd9e 	bl	8003c26 <LL_ADC_SetCommonPathInternalCh>
 80050ea:	e012      	b.n	8005112 <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050f0:	f043 0220 	orr.w	r2, r3, #32
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 80050f8:	2301      	movs	r3, #1
 80050fa:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80050fe:	e008      	b.n	8005112 <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005104:	f043 0220 	orr.w	r2, r3, #32
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800510c:	2301      	movs	r3, #1
 800510e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2200      	movs	r2, #0
 8005116:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800511a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800511e:	4618      	mov	r0, r3
 8005120:	3784      	adds	r7, #132	; 0x84
 8005122:	46bd      	mov	sp, r7
 8005124:	bd90      	pop	{r4, r7, pc}
 8005126:	bf00      	nop
 8005128:	40022000 	.word	0x40022000
 800512c:	40022100 	.word	0x40022100
 8005130:	40022300 	.word	0x40022300
 8005134:	58026300 	.word	0x58026300
 8005138:	58026000 	.word	0x58026000
 800513c:	cb840000 	.word	0xcb840000
 8005140:	20000010 	.word	0x20000010
 8005144:	053e2d63 	.word	0x053e2d63
 8005148:	c7520000 	.word	0xc7520000
 800514c:	cfb80000 	.word	0xcfb80000

08005150 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b084      	sub	sp, #16
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	4618      	mov	r0, r3
 800515e:	f7fe ff0b 	bl	8003f78 <LL_ADC_IsEnabled>
 8005162:	4603      	mov	r3, r0
 8005164:	2b00      	cmp	r3, #0
 8005166:	d16e      	bne.n	8005246 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	689a      	ldr	r2, [r3, #8]
 800516e:	4b38      	ldr	r3, [pc, #224]	; (8005250 <ADC_Enable+0x100>)
 8005170:	4013      	ands	r3, r2
 8005172:	2b00      	cmp	r3, #0
 8005174:	d00d      	beq.n	8005192 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800517a:	f043 0210 	orr.w	r2, r3, #16
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005186:	f043 0201 	orr.w	r2, r3, #1
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800518e:	2301      	movs	r3, #1
 8005190:	e05a      	b.n	8005248 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	4618      	mov	r0, r3
 8005198:	f7fe fec6 	bl	8003f28 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800519c:	f7fe fcca 	bl	8003b34 <HAL_GetTick>
 80051a0:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	4a2b      	ldr	r2, [pc, #172]	; (8005254 <ADC_Enable+0x104>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d004      	beq.n	80051b6 <ADC_Enable+0x66>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	4a29      	ldr	r2, [pc, #164]	; (8005258 <ADC_Enable+0x108>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d101      	bne.n	80051ba <ADC_Enable+0x6a>
 80051b6:	4b29      	ldr	r3, [pc, #164]	; (800525c <ADC_Enable+0x10c>)
 80051b8:	e000      	b.n	80051bc <ADC_Enable+0x6c>
 80051ba:	4b29      	ldr	r3, [pc, #164]	; (8005260 <ADC_Enable+0x110>)
 80051bc:	4618      	mov	r0, r3
 80051be:	f7fe fe49 	bl	8003e54 <LL_ADC_GetMultimode>
 80051c2:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	4a23      	ldr	r2, [pc, #140]	; (8005258 <ADC_Enable+0x108>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d002      	beq.n	80051d4 <ADC_Enable+0x84>
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	e000      	b.n	80051d6 <ADC_Enable+0x86>
 80051d4:	4b1f      	ldr	r3, [pc, #124]	; (8005254 <ADC_Enable+0x104>)
 80051d6:	687a      	ldr	r2, [r7, #4]
 80051d8:	6812      	ldr	r2, [r2, #0]
 80051da:	4293      	cmp	r3, r2
 80051dc:	d02c      	beq.n	8005238 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80051de:	68bb      	ldr	r3, [r7, #8]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d130      	bne.n	8005246 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80051e4:	e028      	b.n	8005238 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	4618      	mov	r0, r3
 80051ec:	f7fe fec4 	bl	8003f78 <LL_ADC_IsEnabled>
 80051f0:	4603      	mov	r3, r0
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d104      	bne.n	8005200 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	4618      	mov	r0, r3
 80051fc:	f7fe fe94 	bl	8003f28 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005200:	f7fe fc98 	bl	8003b34 <HAL_GetTick>
 8005204:	4602      	mov	r2, r0
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	1ad3      	subs	r3, r2, r3
 800520a:	2b02      	cmp	r3, #2
 800520c:	d914      	bls.n	8005238 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f003 0301 	and.w	r3, r3, #1
 8005218:	2b01      	cmp	r3, #1
 800521a:	d00d      	beq.n	8005238 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005220:	f043 0210 	orr.w	r2, r3, #16
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800522c:	f043 0201 	orr.w	r2, r3, #1
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 8005234:	2301      	movs	r3, #1
 8005236:	e007      	b.n	8005248 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f003 0301 	and.w	r3, r3, #1
 8005242:	2b01      	cmp	r3, #1
 8005244:	d1cf      	bne.n	80051e6 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005246:	2300      	movs	r3, #0
}
 8005248:	4618      	mov	r0, r3
 800524a:	3710      	adds	r7, #16
 800524c:	46bd      	mov	sp, r7
 800524e:	bd80      	pop	{r7, pc}
 8005250:	8000003f 	.word	0x8000003f
 8005254:	40022000 	.word	0x40022000
 8005258:	40022100 	.word	0x40022100
 800525c:	40022300 	.word	0x40022300
 8005260:	58026300 	.word	0x58026300

08005264 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b084      	sub	sp, #16
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	4618      	mov	r0, r3
 8005272:	f7fe fe94 	bl	8003f9e <LL_ADC_IsDisableOngoing>
 8005276:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	4618      	mov	r0, r3
 800527e:	f7fe fe7b 	bl	8003f78 <LL_ADC_IsEnabled>
 8005282:	4603      	mov	r3, r0
 8005284:	2b00      	cmp	r3, #0
 8005286:	d047      	beq.n	8005318 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d144      	bne.n	8005318 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	689b      	ldr	r3, [r3, #8]
 8005294:	f003 030d 	and.w	r3, r3, #13
 8005298:	2b01      	cmp	r3, #1
 800529a:	d10c      	bne.n	80052b6 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4618      	mov	r0, r3
 80052a2:	f7fe fe55 	bl	8003f50 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	2203      	movs	r2, #3
 80052ac:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80052ae:	f7fe fc41 	bl	8003b34 <HAL_GetTick>
 80052b2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80052b4:	e029      	b.n	800530a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052ba:	f043 0210 	orr.w	r2, r3, #16
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052c6:	f043 0201 	orr.w	r2, r3, #1
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 80052ce:	2301      	movs	r3, #1
 80052d0:	e023      	b.n	800531a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80052d2:	f7fe fc2f 	bl	8003b34 <HAL_GetTick>
 80052d6:	4602      	mov	r2, r0
 80052d8:	68bb      	ldr	r3, [r7, #8]
 80052da:	1ad3      	subs	r3, r2, r3
 80052dc:	2b02      	cmp	r3, #2
 80052de:	d914      	bls.n	800530a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	689b      	ldr	r3, [r3, #8]
 80052e6:	f003 0301 	and.w	r3, r3, #1
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d00d      	beq.n	800530a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052f2:	f043 0210 	orr.w	r2, r3, #16
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052fe:	f043 0201 	orr.w	r2, r3, #1
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8005306:	2301      	movs	r3, #1
 8005308:	e007      	b.n	800531a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	689b      	ldr	r3, [r3, #8]
 8005310:	f003 0301 	and.w	r3, r3, #1
 8005314:	2b00      	cmp	r3, #0
 8005316:	d1dc      	bne.n	80052d2 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005318:	2300      	movs	r3, #0
}
 800531a:	4618      	mov	r0, r3
 800531c:	3710      	adds	r7, #16
 800531e:	46bd      	mov	sp, r7
 8005320:	bd80      	pop	{r7, pc}
	...

08005324 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b084      	sub	sp, #16
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	4a7a      	ldr	r2, [pc, #488]	; (800551c <ADC_ConfigureBoostMode+0x1f8>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d004      	beq.n	8005340 <ADC_ConfigureBoostMode+0x1c>
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	4a79      	ldr	r2, [pc, #484]	; (8005520 <ADC_ConfigureBoostMode+0x1fc>)
 800533c:	4293      	cmp	r3, r2
 800533e:	d109      	bne.n	8005354 <ADC_ConfigureBoostMode+0x30>
 8005340:	4b78      	ldr	r3, [pc, #480]	; (8005524 <ADC_ConfigureBoostMode+0x200>)
 8005342:	689b      	ldr	r3, [r3, #8]
 8005344:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005348:	2b00      	cmp	r3, #0
 800534a:	bf14      	ite	ne
 800534c:	2301      	movne	r3, #1
 800534e:	2300      	moveq	r3, #0
 8005350:	b2db      	uxtb	r3, r3
 8005352:	e008      	b.n	8005366 <ADC_ConfigureBoostMode+0x42>
 8005354:	4b74      	ldr	r3, [pc, #464]	; (8005528 <ADC_ConfigureBoostMode+0x204>)
 8005356:	689b      	ldr	r3, [r3, #8]
 8005358:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800535c:	2b00      	cmp	r3, #0
 800535e:	bf14      	ite	ne
 8005360:	2301      	movne	r3, #1
 8005362:	2300      	moveq	r3, #0
 8005364:	b2db      	uxtb	r3, r3
 8005366:	2b00      	cmp	r3, #0
 8005368:	d01c      	beq.n	80053a4 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800536a:	f005 f919 	bl	800a5a0 <HAL_RCC_GetHCLKFreq>
 800536e:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	685b      	ldr	r3, [r3, #4]
 8005374:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005378:	d010      	beq.n	800539c <ADC_ConfigureBoostMode+0x78>
 800537a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800537e:	d873      	bhi.n	8005468 <ADC_ConfigureBoostMode+0x144>
 8005380:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005384:	d002      	beq.n	800538c <ADC_ConfigureBoostMode+0x68>
 8005386:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800538a:	d16d      	bne.n	8005468 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	685b      	ldr	r3, [r3, #4]
 8005390:	0c1b      	lsrs	r3, r3, #16
 8005392:	68fa      	ldr	r2, [r7, #12]
 8005394:	fbb2 f3f3 	udiv	r3, r2, r3
 8005398:	60fb      	str	r3, [r7, #12]
        break;
 800539a:	e068      	b.n	800546e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	089b      	lsrs	r3, r3, #2
 80053a0:	60fb      	str	r3, [r7, #12]
        break;
 80053a2:	e064      	b.n	800546e <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80053a4:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80053a8:	f04f 0100 	mov.w	r1, #0
 80053ac:	f006 fb7a 	bl	800baa4 <HAL_RCCEx_GetPeriphCLKFreq>
 80053b0:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	685b      	ldr	r3, [r3, #4]
 80053b6:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80053ba:	d051      	beq.n	8005460 <ADC_ConfigureBoostMode+0x13c>
 80053bc:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80053c0:	d854      	bhi.n	800546c <ADC_ConfigureBoostMode+0x148>
 80053c2:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80053c6:	d047      	beq.n	8005458 <ADC_ConfigureBoostMode+0x134>
 80053c8:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80053cc:	d84e      	bhi.n	800546c <ADC_ConfigureBoostMode+0x148>
 80053ce:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80053d2:	d03d      	beq.n	8005450 <ADC_ConfigureBoostMode+0x12c>
 80053d4:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80053d8:	d848      	bhi.n	800546c <ADC_ConfigureBoostMode+0x148>
 80053da:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80053de:	d033      	beq.n	8005448 <ADC_ConfigureBoostMode+0x124>
 80053e0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80053e4:	d842      	bhi.n	800546c <ADC_ConfigureBoostMode+0x148>
 80053e6:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80053ea:	d029      	beq.n	8005440 <ADC_ConfigureBoostMode+0x11c>
 80053ec:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80053f0:	d83c      	bhi.n	800546c <ADC_ConfigureBoostMode+0x148>
 80053f2:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80053f6:	d01a      	beq.n	800542e <ADC_ConfigureBoostMode+0x10a>
 80053f8:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80053fc:	d836      	bhi.n	800546c <ADC_ConfigureBoostMode+0x148>
 80053fe:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8005402:	d014      	beq.n	800542e <ADC_ConfigureBoostMode+0x10a>
 8005404:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8005408:	d830      	bhi.n	800546c <ADC_ConfigureBoostMode+0x148>
 800540a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800540e:	d00e      	beq.n	800542e <ADC_ConfigureBoostMode+0x10a>
 8005410:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005414:	d82a      	bhi.n	800546c <ADC_ConfigureBoostMode+0x148>
 8005416:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800541a:	d008      	beq.n	800542e <ADC_ConfigureBoostMode+0x10a>
 800541c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005420:	d824      	bhi.n	800546c <ADC_ConfigureBoostMode+0x148>
 8005422:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005426:	d002      	beq.n	800542e <ADC_ConfigureBoostMode+0x10a>
 8005428:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800542c:	d11e      	bne.n	800546c <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	685b      	ldr	r3, [r3, #4]
 8005432:	0c9b      	lsrs	r3, r3, #18
 8005434:	005b      	lsls	r3, r3, #1
 8005436:	68fa      	ldr	r2, [r7, #12]
 8005438:	fbb2 f3f3 	udiv	r3, r2, r3
 800543c:	60fb      	str	r3, [r7, #12]
        break;
 800543e:	e016      	b.n	800546e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	091b      	lsrs	r3, r3, #4
 8005444:	60fb      	str	r3, [r7, #12]
        break;
 8005446:	e012      	b.n	800546e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	095b      	lsrs	r3, r3, #5
 800544c:	60fb      	str	r3, [r7, #12]
        break;
 800544e:	e00e      	b.n	800546e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	099b      	lsrs	r3, r3, #6
 8005454:	60fb      	str	r3, [r7, #12]
        break;
 8005456:	e00a      	b.n	800546e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	09db      	lsrs	r3, r3, #7
 800545c:	60fb      	str	r3, [r7, #12]
        break;
 800545e:	e006      	b.n	800546e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	0a1b      	lsrs	r3, r3, #8
 8005464:	60fb      	str	r3, [r7, #12]
        break;
 8005466:	e002      	b.n	800546e <ADC_ConfigureBoostMode+0x14a>
        break;
 8005468:	bf00      	nop
 800546a:	e000      	b.n	800546e <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 800546c:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 800546e:	f7fe fb91 	bl	8003b94 <HAL_GetREVID>
 8005472:	4603      	mov	r3, r0
 8005474:	f241 0203 	movw	r2, #4099	; 0x1003
 8005478:	4293      	cmp	r3, r2
 800547a:	d815      	bhi.n	80054a8 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	4a2b      	ldr	r2, [pc, #172]	; (800552c <ADC_ConfigureBoostMode+0x208>)
 8005480:	4293      	cmp	r3, r2
 8005482:	d908      	bls.n	8005496 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	689a      	ldr	r2, [r3, #8]
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005492:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8005494:	e03e      	b.n	8005514 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	689a      	ldr	r2, [r3, #8]
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80054a4:	609a      	str	r2, [r3, #8]
}
 80054a6:	e035      	b.n	8005514 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	085b      	lsrs	r3, r3, #1
 80054ac:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	4a1f      	ldr	r2, [pc, #124]	; (8005530 <ADC_ConfigureBoostMode+0x20c>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d808      	bhi.n	80054c8 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	689a      	ldr	r2, [r3, #8]
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80054c4:	609a      	str	r2, [r3, #8]
}
 80054c6:	e025      	b.n	8005514 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	4a1a      	ldr	r2, [pc, #104]	; (8005534 <ADC_ConfigureBoostMode+0x210>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d80a      	bhi.n	80054e6 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	689b      	ldr	r3, [r3, #8]
 80054d6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80054e2:	609a      	str	r2, [r3, #8]
}
 80054e4:	e016      	b.n	8005514 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	4a13      	ldr	r2, [pc, #76]	; (8005538 <ADC_ConfigureBoostMode+0x214>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d80a      	bhi.n	8005504 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	689b      	ldr	r3, [r3, #8]
 80054f4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005500:	609a      	str	r2, [r3, #8]
}
 8005502:	e007      	b.n	8005514 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	689a      	ldr	r2, [r3, #8]
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8005512:	609a      	str	r2, [r3, #8]
}
 8005514:	bf00      	nop
 8005516:	3710      	adds	r7, #16
 8005518:	46bd      	mov	sp, r7
 800551a:	bd80      	pop	{r7, pc}
 800551c:	40022000 	.word	0x40022000
 8005520:	40022100 	.word	0x40022100
 8005524:	40022300 	.word	0x40022300
 8005528:	58026300 	.word	0x58026300
 800552c:	01312d00 	.word	0x01312d00
 8005530:	005f5e10 	.word	0x005f5e10
 8005534:	00bebc20 	.word	0x00bebc20
 8005538:	017d7840 	.word	0x017d7840

0800553c <LL_ADC_StartCalibration>:
{
 800553c:	b480      	push	{r7}
 800553e:	b085      	sub	sp, #20
 8005540:	af00      	add	r7, sp, #0
 8005542:	60f8      	str	r0, [r7, #12]
 8005544:	60b9      	str	r1, [r7, #8]
 8005546:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	689a      	ldr	r2, [r3, #8]
 800554c:	4b09      	ldr	r3, [pc, #36]	; (8005574 <LL_ADC_StartCalibration+0x38>)
 800554e:	4013      	ands	r3, r2
 8005550:	68ba      	ldr	r2, [r7, #8]
 8005552:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 8005556:	687a      	ldr	r2, [r7, #4]
 8005558:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800555c:	430a      	orrs	r2, r1
 800555e:	4313      	orrs	r3, r2
 8005560:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	609a      	str	r2, [r3, #8]
}
 8005568:	bf00      	nop
 800556a:	3714      	adds	r7, #20
 800556c:	46bd      	mov	sp, r7
 800556e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005572:	4770      	bx	lr
 8005574:	3ffeffc0 	.word	0x3ffeffc0

08005578 <LL_ADC_IsCalibrationOnGoing>:
{
 8005578:	b480      	push	{r7}
 800557a:	b083      	sub	sp, #12
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	689b      	ldr	r3, [r3, #8]
 8005584:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005588:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800558c:	d101      	bne.n	8005592 <LL_ADC_IsCalibrationOnGoing+0x1a>
 800558e:	2301      	movs	r3, #1
 8005590:	e000      	b.n	8005594 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8005592:	2300      	movs	r3, #0
}
 8005594:	4618      	mov	r0, r3
 8005596:	370c      	adds	r7, #12
 8005598:	46bd      	mov	sp, r7
 800559a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559e:	4770      	bx	lr

080055a0 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b086      	sub	sp, #24
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	60f8      	str	r0, [r7, #12]
 80055a8:	60b9      	str	r1, [r7, #8]
 80055aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80055ac:	2300      	movs	r3, #0
 80055ae:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80055b6:	2b01      	cmp	r3, #1
 80055b8:	d101      	bne.n	80055be <HAL_ADCEx_Calibration_Start+0x1e>
 80055ba:	2302      	movs	r3, #2
 80055bc:	e04c      	b.n	8005658 <HAL_ADCEx_Calibration_Start+0xb8>
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	2201      	movs	r2, #1
 80055c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80055c6:	68f8      	ldr	r0, [r7, #12]
 80055c8:	f7ff fe4c 	bl	8005264 <ADC_Disable>
 80055cc:	4603      	mov	r3, r0
 80055ce:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80055d0:	7dfb      	ldrb	r3, [r7, #23]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d135      	bne.n	8005642 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80055da:	4b21      	ldr	r3, [pc, #132]	; (8005660 <HAL_ADCEx_Calibration_Start+0xc0>)
 80055dc:	4013      	ands	r3, r2
 80055de:	f043 0202 	orr.w	r2, r3, #2
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	687a      	ldr	r2, [r7, #4]
 80055ec:	68b9      	ldr	r1, [r7, #8]
 80055ee:	4618      	mov	r0, r3
 80055f0:	f7ff ffa4 	bl	800553c <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80055f4:	e014      	b.n	8005620 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80055f6:	693b      	ldr	r3, [r7, #16]
 80055f8:	3301      	adds	r3, #1
 80055fa:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80055fc:	693b      	ldr	r3, [r7, #16]
 80055fe:	4a19      	ldr	r2, [pc, #100]	; (8005664 <HAL_ADCEx_Calibration_Start+0xc4>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d30d      	bcc.n	8005620 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005608:	f023 0312 	bic.w	r3, r3, #18
 800560c:	f043 0210 	orr.w	r2, r3, #16
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	2200      	movs	r2, #0
 8005618:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 800561c:	2301      	movs	r3, #1
 800561e:	e01b      	b.n	8005658 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	4618      	mov	r0, r3
 8005626:	f7ff ffa7 	bl	8005578 <LL_ADC_IsCalibrationOnGoing>
 800562a:	4603      	mov	r3, r0
 800562c:	2b00      	cmp	r3, #0
 800562e:	d1e2      	bne.n	80055f6 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005634:	f023 0303 	bic.w	r3, r3, #3
 8005638:	f043 0201 	orr.w	r2, r3, #1
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	655a      	str	r2, [r3, #84]	; 0x54
 8005640:	e005      	b.n	800564e <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005646:	f043 0210 	orr.w	r2, r3, #16
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	2200      	movs	r2, #0
 8005652:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8005656:	7dfb      	ldrb	r3, [r7, #23]
}
 8005658:	4618      	mov	r0, r3
 800565a:	3718      	adds	r7, #24
 800565c:	46bd      	mov	sp, r7
 800565e:	bd80      	pop	{r7, pc}
 8005660:	ffffeefd 	.word	0xffffeefd
 8005664:	25c3f800 	.word	0x25c3f800

08005668 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005668:	b480      	push	{r7}
 800566a:	b083      	sub	sp, #12
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8005670:	bf00      	nop
 8005672:	370c      	adds	r7, #12
 8005674:	46bd      	mov	sp, r7
 8005676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567a:	4770      	bx	lr

0800567c <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 800567c:	b480      	push	{r7}
 800567e:	b083      	sub	sp, #12
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8005684:	bf00      	nop
 8005686:	370c      	adds	r7, #12
 8005688:	46bd      	mov	sp, r7
 800568a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568e:	4770      	bx	lr

08005690 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8005690:	b480      	push	{r7}
 8005692:	b083      	sub	sp, #12
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8005698:	bf00      	nop
 800569a:	370c      	adds	r7, #12
 800569c:	46bd      	mov	sp, r7
 800569e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a2:	4770      	bx	lr

080056a4 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80056a4:	b480      	push	{r7}
 80056a6:	b083      	sub	sp, #12
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80056ac:	bf00      	nop
 80056ae:	370c      	adds	r7, #12
 80056b0:	46bd      	mov	sp, r7
 80056b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b6:	4770      	bx	lr

080056b8 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80056b8:	b480      	push	{r7}
 80056ba:	b083      	sub	sp, #12
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80056c0:	bf00      	nop
 80056c2:	370c      	adds	r7, #12
 80056c4:	46bd      	mov	sp, r7
 80056c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ca:	4770      	bx	lr

080056cc <__NVIC_SetPriorityGrouping>:
{
 80056cc:	b480      	push	{r7}
 80056ce:	b085      	sub	sp, #20
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	f003 0307 	and.w	r3, r3, #7
 80056da:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80056dc:	4b0b      	ldr	r3, [pc, #44]	; (800570c <__NVIC_SetPriorityGrouping+0x40>)
 80056de:	68db      	ldr	r3, [r3, #12]
 80056e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80056e2:	68ba      	ldr	r2, [r7, #8]
 80056e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80056e8:	4013      	ands	r3, r2
 80056ea:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80056f0:	68bb      	ldr	r3, [r7, #8]
 80056f2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80056f4:	4b06      	ldr	r3, [pc, #24]	; (8005710 <__NVIC_SetPriorityGrouping+0x44>)
 80056f6:	4313      	orrs	r3, r2
 80056f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80056fa:	4a04      	ldr	r2, [pc, #16]	; (800570c <__NVIC_SetPriorityGrouping+0x40>)
 80056fc:	68bb      	ldr	r3, [r7, #8]
 80056fe:	60d3      	str	r3, [r2, #12]
}
 8005700:	bf00      	nop
 8005702:	3714      	adds	r7, #20
 8005704:	46bd      	mov	sp, r7
 8005706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570a:	4770      	bx	lr
 800570c:	e000ed00 	.word	0xe000ed00
 8005710:	05fa0000 	.word	0x05fa0000

08005714 <__NVIC_GetPriorityGrouping>:
{
 8005714:	b480      	push	{r7}
 8005716:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005718:	4b04      	ldr	r3, [pc, #16]	; (800572c <__NVIC_GetPriorityGrouping+0x18>)
 800571a:	68db      	ldr	r3, [r3, #12]
 800571c:	0a1b      	lsrs	r3, r3, #8
 800571e:	f003 0307 	and.w	r3, r3, #7
}
 8005722:	4618      	mov	r0, r3
 8005724:	46bd      	mov	sp, r7
 8005726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572a:	4770      	bx	lr
 800572c:	e000ed00 	.word	0xe000ed00

08005730 <__NVIC_EnableIRQ>:
{
 8005730:	b480      	push	{r7}
 8005732:	b083      	sub	sp, #12
 8005734:	af00      	add	r7, sp, #0
 8005736:	4603      	mov	r3, r0
 8005738:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800573a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800573e:	2b00      	cmp	r3, #0
 8005740:	db0b      	blt.n	800575a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005742:	88fb      	ldrh	r3, [r7, #6]
 8005744:	f003 021f 	and.w	r2, r3, #31
 8005748:	4907      	ldr	r1, [pc, #28]	; (8005768 <__NVIC_EnableIRQ+0x38>)
 800574a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800574e:	095b      	lsrs	r3, r3, #5
 8005750:	2001      	movs	r0, #1
 8005752:	fa00 f202 	lsl.w	r2, r0, r2
 8005756:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800575a:	bf00      	nop
 800575c:	370c      	adds	r7, #12
 800575e:	46bd      	mov	sp, r7
 8005760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005764:	4770      	bx	lr
 8005766:	bf00      	nop
 8005768:	e000e100 	.word	0xe000e100

0800576c <__NVIC_SetPriority>:
{
 800576c:	b480      	push	{r7}
 800576e:	b083      	sub	sp, #12
 8005770:	af00      	add	r7, sp, #0
 8005772:	4603      	mov	r3, r0
 8005774:	6039      	str	r1, [r7, #0]
 8005776:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005778:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800577c:	2b00      	cmp	r3, #0
 800577e:	db0a      	blt.n	8005796 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	b2da      	uxtb	r2, r3
 8005784:	490c      	ldr	r1, [pc, #48]	; (80057b8 <__NVIC_SetPriority+0x4c>)
 8005786:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800578a:	0112      	lsls	r2, r2, #4
 800578c:	b2d2      	uxtb	r2, r2
 800578e:	440b      	add	r3, r1
 8005790:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005794:	e00a      	b.n	80057ac <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	b2da      	uxtb	r2, r3
 800579a:	4908      	ldr	r1, [pc, #32]	; (80057bc <__NVIC_SetPriority+0x50>)
 800579c:	88fb      	ldrh	r3, [r7, #6]
 800579e:	f003 030f 	and.w	r3, r3, #15
 80057a2:	3b04      	subs	r3, #4
 80057a4:	0112      	lsls	r2, r2, #4
 80057a6:	b2d2      	uxtb	r2, r2
 80057a8:	440b      	add	r3, r1
 80057aa:	761a      	strb	r2, [r3, #24]
}
 80057ac:	bf00      	nop
 80057ae:	370c      	adds	r7, #12
 80057b0:	46bd      	mov	sp, r7
 80057b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b6:	4770      	bx	lr
 80057b8:	e000e100 	.word	0xe000e100
 80057bc:	e000ed00 	.word	0xe000ed00

080057c0 <NVIC_EncodePriority>:
{
 80057c0:	b480      	push	{r7}
 80057c2:	b089      	sub	sp, #36	; 0x24
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	60f8      	str	r0, [r7, #12]
 80057c8:	60b9      	str	r1, [r7, #8]
 80057ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	f003 0307 	and.w	r3, r3, #7
 80057d2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80057d4:	69fb      	ldr	r3, [r7, #28]
 80057d6:	f1c3 0307 	rsb	r3, r3, #7
 80057da:	2b04      	cmp	r3, #4
 80057dc:	bf28      	it	cs
 80057de:	2304      	movcs	r3, #4
 80057e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80057e2:	69fb      	ldr	r3, [r7, #28]
 80057e4:	3304      	adds	r3, #4
 80057e6:	2b06      	cmp	r3, #6
 80057e8:	d902      	bls.n	80057f0 <NVIC_EncodePriority+0x30>
 80057ea:	69fb      	ldr	r3, [r7, #28]
 80057ec:	3b03      	subs	r3, #3
 80057ee:	e000      	b.n	80057f2 <NVIC_EncodePriority+0x32>
 80057f0:	2300      	movs	r3, #0
 80057f2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80057f4:	f04f 32ff 	mov.w	r2, #4294967295
 80057f8:	69bb      	ldr	r3, [r7, #24]
 80057fa:	fa02 f303 	lsl.w	r3, r2, r3
 80057fe:	43da      	mvns	r2, r3
 8005800:	68bb      	ldr	r3, [r7, #8]
 8005802:	401a      	ands	r2, r3
 8005804:	697b      	ldr	r3, [r7, #20]
 8005806:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005808:	f04f 31ff 	mov.w	r1, #4294967295
 800580c:	697b      	ldr	r3, [r7, #20]
 800580e:	fa01 f303 	lsl.w	r3, r1, r3
 8005812:	43d9      	mvns	r1, r3
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005818:	4313      	orrs	r3, r2
}
 800581a:	4618      	mov	r0, r3
 800581c:	3724      	adds	r7, #36	; 0x24
 800581e:	46bd      	mov	sp, r7
 8005820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005824:	4770      	bx	lr
	...

08005828 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005828:	b580      	push	{r7, lr}
 800582a:	b082      	sub	sp, #8
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	3b01      	subs	r3, #1
 8005834:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005838:	d301      	bcc.n	800583e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800583a:	2301      	movs	r3, #1
 800583c:	e00f      	b.n	800585e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800583e:	4a0a      	ldr	r2, [pc, #40]	; (8005868 <SysTick_Config+0x40>)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	3b01      	subs	r3, #1
 8005844:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005846:	210f      	movs	r1, #15
 8005848:	f04f 30ff 	mov.w	r0, #4294967295
 800584c:	f7ff ff8e 	bl	800576c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005850:	4b05      	ldr	r3, [pc, #20]	; (8005868 <SysTick_Config+0x40>)
 8005852:	2200      	movs	r2, #0
 8005854:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005856:	4b04      	ldr	r3, [pc, #16]	; (8005868 <SysTick_Config+0x40>)
 8005858:	2207      	movs	r2, #7
 800585a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800585c:	2300      	movs	r3, #0
}
 800585e:	4618      	mov	r0, r3
 8005860:	3708      	adds	r7, #8
 8005862:	46bd      	mov	sp, r7
 8005864:	bd80      	pop	{r7, pc}
 8005866:	bf00      	nop
 8005868:	e000e010 	.word	0xe000e010

0800586c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800586c:	b580      	push	{r7, lr}
 800586e:	b082      	sub	sp, #8
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005874:	6878      	ldr	r0, [r7, #4]
 8005876:	f7ff ff29 	bl	80056cc <__NVIC_SetPriorityGrouping>
}
 800587a:	bf00      	nop
 800587c:	3708      	adds	r7, #8
 800587e:	46bd      	mov	sp, r7
 8005880:	bd80      	pop	{r7, pc}

08005882 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005882:	b580      	push	{r7, lr}
 8005884:	b086      	sub	sp, #24
 8005886:	af00      	add	r7, sp, #0
 8005888:	4603      	mov	r3, r0
 800588a:	60b9      	str	r1, [r7, #8]
 800588c:	607a      	str	r2, [r7, #4]
 800588e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005890:	f7ff ff40 	bl	8005714 <__NVIC_GetPriorityGrouping>
 8005894:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005896:	687a      	ldr	r2, [r7, #4]
 8005898:	68b9      	ldr	r1, [r7, #8]
 800589a:	6978      	ldr	r0, [r7, #20]
 800589c:	f7ff ff90 	bl	80057c0 <NVIC_EncodePriority>
 80058a0:	4602      	mov	r2, r0
 80058a2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80058a6:	4611      	mov	r1, r2
 80058a8:	4618      	mov	r0, r3
 80058aa:	f7ff ff5f 	bl	800576c <__NVIC_SetPriority>
}
 80058ae:	bf00      	nop
 80058b0:	3718      	adds	r7, #24
 80058b2:	46bd      	mov	sp, r7
 80058b4:	bd80      	pop	{r7, pc}

080058b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80058b6:	b580      	push	{r7, lr}
 80058b8:	b082      	sub	sp, #8
 80058ba:	af00      	add	r7, sp, #0
 80058bc:	4603      	mov	r3, r0
 80058be:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80058c0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80058c4:	4618      	mov	r0, r3
 80058c6:	f7ff ff33 	bl	8005730 <__NVIC_EnableIRQ>
}
 80058ca:	bf00      	nop
 80058cc:	3708      	adds	r7, #8
 80058ce:	46bd      	mov	sp, r7
 80058d0:	bd80      	pop	{r7, pc}

080058d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80058d2:	b580      	push	{r7, lr}
 80058d4:	b082      	sub	sp, #8
 80058d6:	af00      	add	r7, sp, #0
 80058d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80058da:	6878      	ldr	r0, [r7, #4]
 80058dc:	f7ff ffa4 	bl	8005828 <SysTick_Config>
 80058e0:	4603      	mov	r3, r0
}
 80058e2:	4618      	mov	r0, r3
 80058e4:	3708      	adds	r7, #8
 80058e6:	46bd      	mov	sp, r7
 80058e8:	bd80      	pop	{r7, pc}
	...

080058ec <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80058ec:	b480      	push	{r7}
 80058ee:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 80058f0:	f3bf 8f5f 	dmb	sy
}
 80058f4:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80058f6:	4b07      	ldr	r3, [pc, #28]	; (8005914 <HAL_MPU_Disable+0x28>)
 80058f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058fa:	4a06      	ldr	r2, [pc, #24]	; (8005914 <HAL_MPU_Disable+0x28>)
 80058fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005900:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8005902:	4b05      	ldr	r3, [pc, #20]	; (8005918 <HAL_MPU_Disable+0x2c>)
 8005904:	2200      	movs	r2, #0
 8005906:	605a      	str	r2, [r3, #4]
}
 8005908:	bf00      	nop
 800590a:	46bd      	mov	sp, r7
 800590c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005910:	4770      	bx	lr
 8005912:	bf00      	nop
 8005914:	e000ed00 	.word	0xe000ed00
 8005918:	e000ed90 	.word	0xe000ed90

0800591c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 800591c:	b480      	push	{r7}
 800591e:	b083      	sub	sp, #12
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8005924:	4a0b      	ldr	r2, [pc, #44]	; (8005954 <HAL_MPU_Enable+0x38>)
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	f043 0301 	orr.w	r3, r3, #1
 800592c:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800592e:	4b0a      	ldr	r3, [pc, #40]	; (8005958 <HAL_MPU_Enable+0x3c>)
 8005930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005932:	4a09      	ldr	r2, [pc, #36]	; (8005958 <HAL_MPU_Enable+0x3c>)
 8005934:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005938:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800593a:	f3bf 8f4f 	dsb	sy
}
 800593e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005940:	f3bf 8f6f 	isb	sy
}
 8005944:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8005946:	bf00      	nop
 8005948:	370c      	adds	r7, #12
 800594a:	46bd      	mov	sp, r7
 800594c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005950:	4770      	bx	lr
 8005952:	bf00      	nop
 8005954:	e000ed90 	.word	0xe000ed90
 8005958:	e000ed00 	.word	0xe000ed00

0800595c <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 800595c:	b480      	push	{r7}
 800595e:	b083      	sub	sp, #12
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	785a      	ldrb	r2, [r3, #1]
 8005968:	4b1d      	ldr	r3, [pc, #116]	; (80059e0 <HAL_MPU_ConfigRegion+0x84>)
 800596a:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	781b      	ldrb	r3, [r3, #0]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d029      	beq.n	80059c8 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8005974:	4a1a      	ldr	r2, [pc, #104]	; (80059e0 <HAL_MPU_ConfigRegion+0x84>)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	685b      	ldr	r3, [r3, #4]
 800597a:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	7b1b      	ldrb	r3, [r3, #12]
 8005980:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	7adb      	ldrb	r3, [r3, #11]
 8005986:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8005988:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	7a9b      	ldrb	r3, [r3, #10]
 800598e:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8005990:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	7b5b      	ldrb	r3, [r3, #13]
 8005996:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8005998:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	7b9b      	ldrb	r3, [r3, #14]
 800599e:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80059a0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	7bdb      	ldrb	r3, [r3, #15]
 80059a6:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80059a8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	7a5b      	ldrb	r3, [r3, #9]
 80059ae:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80059b0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	7a1b      	ldrb	r3, [r3, #8]
 80059b6:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80059b8:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80059ba:	687a      	ldr	r2, [r7, #4]
 80059bc:	7812      	ldrb	r2, [r2, #0]
 80059be:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80059c0:	4a07      	ldr	r2, [pc, #28]	; (80059e0 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80059c2:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80059c4:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 80059c6:	e005      	b.n	80059d4 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 80059c8:	4b05      	ldr	r3, [pc, #20]	; (80059e0 <HAL_MPU_ConfigRegion+0x84>)
 80059ca:	2200      	movs	r2, #0
 80059cc:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 80059ce:	4b04      	ldr	r3, [pc, #16]	; (80059e0 <HAL_MPU_ConfigRegion+0x84>)
 80059d0:	2200      	movs	r2, #0
 80059d2:	611a      	str	r2, [r3, #16]
}
 80059d4:	bf00      	nop
 80059d6:	370c      	adds	r7, #12
 80059d8:	46bd      	mov	sp, r7
 80059da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059de:	4770      	bx	lr
 80059e0:	e000ed90 	.word	0xe000ed90

080059e4 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b082      	sub	sp, #8
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d101      	bne.n	80059f6 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80059f2:	2301      	movs	r3, #1
 80059f4:	e014      	b.n	8005a20 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	791b      	ldrb	r3, [r3, #4]
 80059fa:	b2db      	uxtb	r3, r3
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d105      	bne.n	8005a0c <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2200      	movs	r2, #0
 8005a04:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8005a06:	6878      	ldr	r0, [r7, #4]
 8005a08:	f7fd fa08 	bl	8002e1c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2202      	movs	r2, #2
 8005a10:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2200      	movs	r2, #0
 8005a16:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2201      	movs	r2, #1
 8005a1c:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8005a1e:	2300      	movs	r3, #0
}
 8005a20:	4618      	mov	r0, r3
 8005a22:	3708      	adds	r7, #8
 8005a24:	46bd      	mov	sp, r7
 8005a26:	bd80      	pop	{r7, pc}

08005a28 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8005a28:	b480      	push	{r7}
 8005a2a:	b083      	sub	sp, #12
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
 8005a30:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	795b      	ldrb	r3, [r3, #5]
 8005a36:	2b01      	cmp	r3, #1
 8005a38:	d101      	bne.n	8005a3e <HAL_DAC_Start+0x16>
 8005a3a:	2302      	movs	r3, #2
 8005a3c:	e040      	b.n	8005ac0 <HAL_DAC_Start+0x98>
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2201      	movs	r2, #1
 8005a42:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2202      	movs	r2, #2
 8005a48:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	6819      	ldr	r1, [r3, #0]
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	f003 0310 	and.w	r3, r3, #16
 8005a56:	2201      	movs	r2, #1
 8005a58:	409a      	lsls	r2, r3
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	430a      	orrs	r2, r1
 8005a60:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d10f      	bne.n	8005a88 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8005a72:	2b02      	cmp	r3, #2
 8005a74:	d11d      	bne.n	8005ab2 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	685a      	ldr	r2, [r3, #4]
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f042 0201 	orr.w	r2, r2, #1
 8005a84:	605a      	str	r2, [r3, #4]
 8005a86:	e014      	b.n	8005ab2 <HAL_DAC_Start+0x8a>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	f003 0310 	and.w	r3, r3, #16
 8005a98:	2102      	movs	r1, #2
 8005a9a:	fa01 f303 	lsl.w	r3, r1, r3
 8005a9e:	429a      	cmp	r2, r3
 8005aa0:	d107      	bne.n	8005ab2 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	685a      	ldr	r2, [r3, #4]
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f042 0202 	orr.w	r2, r2, #2
 8005ab0:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2201      	movs	r2, #1
 8005ab6:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2200      	movs	r2, #0
 8005abc:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8005abe:	2300      	movs	r3, #0
}
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	370c      	adds	r7, #12
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aca:	4770      	bx	lr

08005acc <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8005acc:	b480      	push	{r7}
 8005ace:	b087      	sub	sp, #28
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	60f8      	str	r0, [r7, #12]
 8005ad4:	60b9      	str	r1, [r7, #8]
 8005ad6:	607a      	str	r2, [r7, #4]
 8005ad8:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8005ada:	2300      	movs	r3, #0
 8005adc:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8005ae4:	68bb      	ldr	r3, [r7, #8]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d105      	bne.n	8005af6 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8005aea:	697a      	ldr	r2, [r7, #20]
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	4413      	add	r3, r2
 8005af0:	3308      	adds	r3, #8
 8005af2:	617b      	str	r3, [r7, #20]
 8005af4:	e004      	b.n	8005b00 <HAL_DAC_SetValue+0x34>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8005af6:	697a      	ldr	r2, [r7, #20]
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	4413      	add	r3, r2
 8005afc:	3314      	adds	r3, #20
 8005afe:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8005b00:	697b      	ldr	r3, [r7, #20]
 8005b02:	461a      	mov	r2, r3
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8005b08:	2300      	movs	r3, #0
}
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	371c      	adds	r7, #28
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b14:	4770      	bx	lr
	...

08005b18 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b088      	sub	sp, #32
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	60f8      	str	r0, [r7, #12]
 8005b20:	60b9      	str	r1, [r7, #8]
 8005b22:	607a      	str	r2, [r7, #4]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	795b      	ldrb	r3, [r3, #5]
 8005b28:	2b01      	cmp	r3, #1
 8005b2a:	d101      	bne.n	8005b30 <HAL_DAC_ConfigChannel+0x18>
 8005b2c:	2302      	movs	r3, #2
 8005b2e:	e12a      	b.n	8005d86 <HAL_DAC_ConfigChannel+0x26e>
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	2201      	movs	r2, #1
 8005b34:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	2202      	movs	r2, #2
 8005b3a:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8005b3c:	68bb      	ldr	r3, [r7, #8]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	2b04      	cmp	r3, #4
 8005b42:	f040 8081 	bne.w	8005c48 <HAL_DAC_ConfigChannel+0x130>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8005b46:	f7fd fff5 	bl	8003b34 <HAL_GetTick>
 8005b4a:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d140      	bne.n	8005bd4 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005b52:	e018      	b.n	8005b86 <HAL_DAC_ConfigChannel+0x6e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8005b54:	f7fd ffee 	bl	8003b34 <HAL_GetTick>
 8005b58:	4602      	mov	r2, r0
 8005b5a:	69bb      	ldr	r3, [r7, #24]
 8005b5c:	1ad3      	subs	r3, r2, r3
 8005b5e:	2b01      	cmp	r3, #1
 8005b60:	d911      	bls.n	8005b86 <HAL_DAC_ConfigChannel+0x6e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005b68:	4b89      	ldr	r3, [pc, #548]	; (8005d90 <HAL_DAC_ConfigChannel+0x278>)
 8005b6a:	4013      	ands	r3, r2
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d00a      	beq.n	8005b86 <HAL_DAC_ConfigChannel+0x6e>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	691b      	ldr	r3, [r3, #16]
 8005b74:	f043 0208 	orr.w	r2, r3, #8
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	2203      	movs	r2, #3
 8005b80:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8005b82:	2303      	movs	r3, #3
 8005b84:	e0ff      	b.n	8005d86 <HAL_DAC_ConfigChannel+0x26e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005b8c:	4b80      	ldr	r3, [pc, #512]	; (8005d90 <HAL_DAC_ConfigChannel+0x278>)
 8005b8e:	4013      	ands	r3, r2
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d1df      	bne.n	8005b54 <HAL_DAC_ConfigChannel+0x3c>
          }
        }
      }
      HAL_Delay(1);
 8005b94:	2001      	movs	r0, #1
 8005b96:	f7fd ffd9 	bl	8003b4c <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	68ba      	ldr	r2, [r7, #8]
 8005ba0:	6992      	ldr	r2, [r2, #24]
 8005ba2:	641a      	str	r2, [r3, #64]	; 0x40
 8005ba4:	e023      	b.n	8005bee <HAL_DAC_ConfigChannel+0xd6>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8005ba6:	f7fd ffc5 	bl	8003b34 <HAL_GetTick>
 8005baa:	4602      	mov	r2, r0
 8005bac:	69bb      	ldr	r3, [r7, #24]
 8005bae:	1ad3      	subs	r3, r2, r3
 8005bb0:	2b01      	cmp	r3, #1
 8005bb2:	d90f      	bls.n	8005bd4 <HAL_DAC_ConfigChannel+0xbc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	da0a      	bge.n	8005bd4 <HAL_DAC_ConfigChannel+0xbc>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	691b      	ldr	r3, [r3, #16]
 8005bc2:	f043 0208 	orr.w	r2, r3, #8
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	2203      	movs	r2, #3
 8005bce:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8005bd0:	2303      	movs	r3, #3
 8005bd2:	e0d8      	b.n	8005d86 <HAL_DAC_ConfigChannel+0x26e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	dbe3      	blt.n	8005ba6 <HAL_DAC_ConfigChannel+0x8e>
          }
        }
      }
      HAL_Delay(1U);
 8005bde:	2001      	movs	r0, #1
 8005be0:	f7fd ffb4 	bl	8003b4c <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	68ba      	ldr	r2, [r7, #8]
 8005bea:	6992      	ldr	r2, [r2, #24]
 8005bec:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	f003 0310 	and.w	r3, r3, #16
 8005bfa:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8005bfe:	fa01 f303 	lsl.w	r3, r1, r3
 8005c02:	43db      	mvns	r3, r3
 8005c04:	ea02 0103 	and.w	r1, r2, r3
 8005c08:	68bb      	ldr	r3, [r7, #8]
 8005c0a:	69da      	ldr	r2, [r3, #28]
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	f003 0310 	and.w	r3, r3, #16
 8005c12:	409a      	lsls	r2, r3
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	430a      	orrs	r2, r1
 8005c1a:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	f003 0310 	and.w	r3, r3, #16
 8005c28:	21ff      	movs	r1, #255	; 0xff
 8005c2a:	fa01 f303 	lsl.w	r3, r1, r3
 8005c2e:	43db      	mvns	r3, r3
 8005c30:	ea02 0103 	and.w	r1, r2, r3
 8005c34:	68bb      	ldr	r3, [r7, #8]
 8005c36:	6a1a      	ldr	r2, [r3, #32]
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	f003 0310 	and.w	r3, r3, #16
 8005c3e:	409a      	lsls	r2, r3
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	430a      	orrs	r2, r1
 8005c46:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8005c48:	68bb      	ldr	r3, [r7, #8]
 8005c4a:	691b      	ldr	r3, [r3, #16]
 8005c4c:	2b01      	cmp	r3, #1
 8005c4e:	d11d      	bne.n	8005c8c <HAL_DAC_ConfigChannel+0x174>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c56:	617b      	str	r3, [r7, #20]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	f003 0310 	and.w	r3, r3, #16
 8005c5e:	221f      	movs	r2, #31
 8005c60:	fa02 f303 	lsl.w	r3, r2, r3
 8005c64:	43db      	mvns	r3, r3
 8005c66:	697a      	ldr	r2, [r7, #20]
 8005c68:	4013      	ands	r3, r2
 8005c6a:	617b      	str	r3, [r7, #20]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8005c6c:	68bb      	ldr	r3, [r7, #8]
 8005c6e:	695b      	ldr	r3, [r3, #20]
 8005c70:	613b      	str	r3, [r7, #16]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	f003 0310 	and.w	r3, r3, #16
 8005c78:	693a      	ldr	r2, [r7, #16]
 8005c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8005c7e:	697a      	ldr	r2, [r7, #20]
 8005c80:	4313      	orrs	r3, r2
 8005c82:	617b      	str	r3, [r7, #20]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	697a      	ldr	r2, [r7, #20]
 8005c8a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c92:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	f003 0310 	and.w	r3, r3, #16
 8005c9a:	2207      	movs	r2, #7
 8005c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8005ca0:	43db      	mvns	r3, r3
 8005ca2:	697a      	ldr	r2, [r7, #20]
 8005ca4:	4013      	ands	r3, r2
 8005ca6:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8005ca8:	68bb      	ldr	r3, [r7, #8]
 8005caa:	68db      	ldr	r3, [r3, #12]
 8005cac:	2b01      	cmp	r3, #1
 8005cae:	d102      	bne.n	8005cb6 <HAL_DAC_ConfigChannel+0x19e>
  {
    connectOnChip = 0x00000000UL;
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	61fb      	str	r3, [r7, #28]
 8005cb4:	e00f      	b.n	8005cd6 <HAL_DAC_ConfigChannel+0x1be>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8005cb6:	68bb      	ldr	r3, [r7, #8]
 8005cb8:	68db      	ldr	r3, [r3, #12]
 8005cba:	2b02      	cmp	r3, #2
 8005cbc:	d102      	bne.n	8005cc4 <HAL_DAC_ConfigChannel+0x1ac>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8005cbe:	2301      	movs	r3, #1
 8005cc0:	61fb      	str	r3, [r7, #28]
 8005cc2:	e008      	b.n	8005cd6 <HAL_DAC_ConfigChannel+0x1be>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8005cc4:	68bb      	ldr	r3, [r7, #8]
 8005cc6:	689b      	ldr	r3, [r3, #8]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d102      	bne.n	8005cd2 <HAL_DAC_ConfigChannel+0x1ba>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8005ccc:	2301      	movs	r3, #1
 8005cce:	61fb      	str	r3, [r7, #28]
 8005cd0:	e001      	b.n	8005cd6 <HAL_DAC_ConfigChannel+0x1be>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	61fb      	str	r3, [r7, #28]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8005cd6:	68bb      	ldr	r3, [r7, #8]
 8005cd8:	681a      	ldr	r2, [r3, #0]
 8005cda:	68bb      	ldr	r3, [r7, #8]
 8005cdc:	689b      	ldr	r3, [r3, #8]
 8005cde:	4313      	orrs	r3, r2
 8005ce0:	69fa      	ldr	r2, [r7, #28]
 8005ce2:	4313      	orrs	r3, r2
 8005ce4:	613b      	str	r3, [r7, #16]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	f003 0310 	and.w	r3, r3, #16
 8005cec:	693a      	ldr	r2, [r7, #16]
 8005cee:	fa02 f303 	lsl.w	r3, r2, r3
 8005cf2:	697a      	ldr	r2, [r7, #20]
 8005cf4:	4313      	orrs	r3, r2
 8005cf6:	617b      	str	r3, [r7, #20]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	697a      	ldr	r2, [r7, #20]
 8005cfe:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	6819      	ldr	r1, [r3, #0]
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	f003 0310 	and.w	r3, r3, #16
 8005d0c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005d10:	fa02 f303 	lsl.w	r3, r2, r3
 8005d14:	43da      	mvns	r2, r3
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	400a      	ands	r2, r1
 8005d1c:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	617b      	str	r3, [r7, #20]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	f003 0310 	and.w	r3, r3, #16
 8005d2c:	f640 72fe 	movw	r2, #4094	; 0xffe
 8005d30:	fa02 f303 	lsl.w	r3, r2, r3
 8005d34:	43db      	mvns	r3, r3
 8005d36:	697a      	ldr	r2, [r7, #20]
 8005d38:	4013      	ands	r3, r2
 8005d3a:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8005d3c:	68bb      	ldr	r3, [r7, #8]
 8005d3e:	685b      	ldr	r3, [r3, #4]
 8005d40:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	f003 0310 	and.w	r3, r3, #16
 8005d48:	693a      	ldr	r2, [r7, #16]
 8005d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8005d4e:	697a      	ldr	r2, [r7, #20]
 8005d50:	4313      	orrs	r3, r2
 8005d52:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	697a      	ldr	r2, [r7, #20]
 8005d5a:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	6819      	ldr	r1, [r3, #0]
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	f003 0310 	and.w	r3, r3, #16
 8005d68:	22c0      	movs	r2, #192	; 0xc0
 8005d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8005d6e:	43da      	mvns	r2, r3
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	400a      	ands	r2, r1
 8005d76:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	2201      	movs	r2, #1
 8005d7c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	2200      	movs	r2, #0
 8005d82:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8005d84:	2300      	movs	r3, #0
}
 8005d86:	4618      	mov	r0, r3
 8005d88:	3720      	adds	r7, #32
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	bd80      	pop	{r7, pc}
 8005d8e:	bf00      	nop
 8005d90:	20008000 	.word	0x20008000

08005d94 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b084      	sub	sp, #16
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d101      	bne.n	8005da6 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8005da2:	2301      	movs	r3, #1
 8005da4:	e0cf      	b.n	8005f46 <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d106      	bne.n	8005dbe <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2223      	movs	r2, #35	; 0x23
 8005db4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8005db8:	6878      	ldr	r0, [r7, #4]
 8005dba:	f009 f8cf 	bl	800ef5c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005dbe:	4b64      	ldr	r3, [pc, #400]	; (8005f50 <HAL_ETH_Init+0x1bc>)
 8005dc0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005dc4:	4a62      	ldr	r2, [pc, #392]	; (8005f50 <HAL_ETH_Init+0x1bc>)
 8005dc6:	f043 0302 	orr.w	r3, r3, #2
 8005dca:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005dce:	4b60      	ldr	r3, [pc, #384]	; (8005f50 <HAL_ETH_Init+0x1bc>)
 8005dd0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005dd4:	f003 0302 	and.w	r3, r3, #2
 8005dd8:	60bb      	str	r3, [r7, #8]
 8005dda:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	7a1b      	ldrb	r3, [r3, #8]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d103      	bne.n	8005dec <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8005de4:	2000      	movs	r0, #0
 8005de6:	f7fd fee1 	bl	8003bac <HAL_SYSCFG_ETHInterfaceSelect>
 8005dea:	e003      	b.n	8005df4 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8005dec:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8005df0:	f7fd fedc 	bl	8003bac <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8005df4:	4b57      	ldr	r3, [pc, #348]	; (8005f54 <HAL_ETH_Init+0x1c0>)
 8005df6:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	687a      	ldr	r2, [r7, #4]
 8005e04:	6812      	ldr	r2, [r2, #0]
 8005e06:	f043 0301 	orr.w	r3, r3, #1
 8005e0a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005e0e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005e10:	f7fd fe90 	bl	8003b34 <HAL_GetTick>
 8005e14:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8005e16:	e011      	b.n	8005e3c <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8005e18:	f7fd fe8c 	bl	8003b34 <HAL_GetTick>
 8005e1c:	4602      	mov	r2, r0
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	1ad3      	subs	r3, r2, r3
 8005e22:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8005e26:	d909      	bls.n	8005e3c <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2204      	movs	r2, #4
 8005e2c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	22e0      	movs	r2, #224	; 0xe0
 8005e34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8005e38:	2301      	movs	r3, #1
 8005e3a:	e084      	b.n	8005f46 <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f003 0301 	and.w	r3, r3, #1
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d1e4      	bne.n	8005e18 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8005e4e:	6878      	ldr	r0, [r7, #4]
 8005e50:	f000 fcd4 	bl	80067fc <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8005e54:	f004 fba4 	bl	800a5a0 <HAL_RCC_GetHCLKFreq>
 8005e58:	4603      	mov	r3, r0
 8005e5a:	4a3f      	ldr	r2, [pc, #252]	; (8005f58 <HAL_ETH_Init+0x1c4>)
 8005e5c:	fba2 2303 	umull	r2, r3, r2, r3
 8005e60:	0c9a      	lsrs	r2, r3, #18
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	3a01      	subs	r2, #1
 8005e68:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8005e6c:	6878      	ldr	r0, [r7, #4]
 8005e6e:	f000 febf 	bl	8006bf0 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e7a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8005e7e:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 8005e82:	687a      	ldr	r2, [r7, #4]
 8005e84:	6812      	ldr	r2, [r2, #0]
 8005e86:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005e8a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005e8e:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	695b      	ldr	r3, [r3, #20]
 8005e96:	f003 0303 	and.w	r3, r3, #3
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d009      	beq.n	8005eb2 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	2201      	movs	r2, #1
 8005ea2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	22e0      	movs	r2, #224	; 0xe0
 8005eaa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 8005eae:	2301      	movs	r3, #1
 8005eb0:	e049      	b.n	8005f46 <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005eba:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8005ebe:	4b27      	ldr	r3, [pc, #156]	; (8005f5c <HAL_ETH_Init+0x1c8>)
 8005ec0:	4013      	ands	r3, r2
 8005ec2:	687a      	ldr	r2, [r7, #4]
 8005ec4:	6952      	ldr	r2, [r2, #20]
 8005ec6:	0051      	lsls	r1, r2, #1
 8005ec8:	687a      	ldr	r2, [r7, #4]
 8005eca:	6812      	ldr	r2, [r2, #0]
 8005ecc:	430b      	orrs	r3, r1
 8005ece:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005ed2:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8005ed6:	6878      	ldr	r0, [r7, #4]
 8005ed8:	f000 ff27 	bl	8006d2a <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8005edc:	6878      	ldr	r0, [r7, #4]
 8005ede:	f000 ff6d 	bl	8006dbc <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	685b      	ldr	r3, [r3, #4]
 8005ee6:	3305      	adds	r3, #5
 8005ee8:	781b      	ldrb	r3, [r3, #0]
 8005eea:	021a      	lsls	r2, r3, #8
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	685b      	ldr	r3, [r3, #4]
 8005ef0:	3304      	adds	r3, #4
 8005ef2:	781b      	ldrb	r3, [r3, #0]
 8005ef4:	4619      	mov	r1, r3
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	430a      	orrs	r2, r1
 8005efc:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	685b      	ldr	r3, [r3, #4]
 8005f04:	3303      	adds	r3, #3
 8005f06:	781b      	ldrb	r3, [r3, #0]
 8005f08:	061a      	lsls	r2, r3, #24
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	685b      	ldr	r3, [r3, #4]
 8005f0e:	3302      	adds	r3, #2
 8005f10:	781b      	ldrb	r3, [r3, #0]
 8005f12:	041b      	lsls	r3, r3, #16
 8005f14:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	685b      	ldr	r3, [r3, #4]
 8005f1a:	3301      	adds	r3, #1
 8005f1c:	781b      	ldrb	r3, [r3, #0]
 8005f1e:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8005f20:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	685b      	ldr	r3, [r3, #4]
 8005f26:	781b      	ldrb	r3, [r3, #0]
 8005f28:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8005f2e:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8005f30:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2200      	movs	r2, #0
 8005f38:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2210      	movs	r2, #16
 8005f40:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005f44:	2300      	movs	r3, #0
}
 8005f46:	4618      	mov	r0, r3
 8005f48:	3710      	adds	r7, #16
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	bd80      	pop	{r7, pc}
 8005f4e:	bf00      	nop
 8005f50:	58024400 	.word	0x58024400
 8005f54:	58000400 	.word	0x58000400
 8005f58:	431bde83 	.word	0x431bde83
 8005f5c:	ffff8001 	.word	0xffff8001

08005f60 <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b082      	sub	sp, #8
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_READY)
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f6e:	2b10      	cmp	r3, #16
 8005f70:	d153      	bne.n	800601a <HAL_ETH_Start+0xba>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	2223      	movs	r2, #35	; 0x23
 8005f76:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	2204      	movs	r2, #4
 8005f7e:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8005f80:	6878      	ldr	r0, [r7, #4]
 8005f82:	f000 f936 	bl	80061f2 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	681a      	ldr	r2, [r3, #0]
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f042 0202 	orr.w	r2, r2, #2
 8005f94:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	681a      	ldr	r2, [r3, #0]
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f042 0201 	orr.w	r2, r2, #1
 8005fa4:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f042 0201 	orr.w	r2, r2, #1
 8005fb6:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005fc2:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8005fc6:	687a      	ldr	r2, [r7, #4]
 8005fc8:	6812      	ldr	r2, [r2, #0]
 8005fca:	f043 0301 	orr.w	r3, r3, #1
 8005fce:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005fd2:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005fde:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005fe2:	687a      	ldr	r2, [r7, #4]
 8005fe4:	6812      	ldr	r2, [r2, #0]
 8005fe6:	f043 0301 	orr.w	r3, r3, #1
 8005fea:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005fee:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ffa:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8005ffe:	687a      	ldr	r2, [r7, #4]
 8006000:	6812      	ldr	r2, [r2, #0]
 8006002:	f443 7381 	orr.w	r3, r3, #258	; 0x102
 8006006:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800600a:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160

    heth->gState = HAL_ETH_STATE_STARTED;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	2223      	movs	r2, #35	; 0x23
 8006012:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8006016:	2300      	movs	r3, #0
 8006018:	e000      	b.n	800601c <HAL_ETH_Start+0xbc>
  }
  else
  {
    return HAL_ERROR;
 800601a:	2301      	movs	r3, #1
  }
}
 800601c:	4618      	mov	r0, r3
 800601e:	3708      	adds	r7, #8
 8006020:	46bd      	mov	sp, r7
 8006022:	bd80      	pop	{r7, pc}

08006024 <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 8006024:	b480      	push	{r7}
 8006026:	b083      	sub	sp, #12
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_STARTED)
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006032:	2b23      	cmp	r3, #35	; 0x23
 8006034:	d13f      	bne.n	80060b6 <HAL_ETH_Stop+0x92>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2223      	movs	r2, #35	; 0x23
 800603a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006046:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 800604a:	687a      	ldr	r2, [r7, #4]
 800604c:	6812      	ldr	r2, [r2, #0]
 800604e:	f023 0301 	bic.w	r3, r3, #1
 8006052:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006056:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006062:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8006066:	687a      	ldr	r2, [r7, #4]
 8006068:	6812      	ldr	r2, [r2, #0]
 800606a:	f023 0301 	bic.w	r3, r3, #1
 800606e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006072:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	681a      	ldr	r2, [r3, #0]
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f022 0201 	bic.w	r2, r2, #1
 8006084:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f042 0201 	orr.w	r2, r2, #1
 8006096:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	681a      	ldr	r2, [r3, #0]
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f022 0202 	bic.w	r2, r2, #2
 80060a8:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2210      	movs	r2, #16
 80060ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 80060b2:	2300      	movs	r3, #0
 80060b4:	e000      	b.n	80060b8 <HAL_ETH_Stop+0x94>
  }
  else
  {
    return HAL_ERROR;
 80060b6:	2301      	movs	r3, #1
  }
}
 80060b8:	4618      	mov	r0, r3
 80060ba:	370c      	adds	r7, #12
 80060bc:	46bd      	mov	sp, r7
 80060be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c2:	4770      	bx	lr

080060c4 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 80060c4:	b580      	push	{r7, lr}
 80060c6:	b086      	sub	sp, #24
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	60f8      	str	r0, [r7, #12]
 80060cc:	60b9      	str	r1, [r7, #8]
 80060ce:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 80060d0:	68bb      	ldr	r3, [r7, #8]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d109      	bne.n	80060ea <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060dc:	f043 0201 	orr.w	r2, r3, #1
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 80060e6:	2301      	movs	r3, #1
 80060e8:	e07f      	b.n	80061ea <HAL_ETH_Transmit+0x126>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80060f0:	2b23      	cmp	r3, #35	; 0x23
 80060f2:	d179      	bne.n	80061e8 <HAL_ETH_Transmit+0x124>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 80060f4:	2200      	movs	r2, #0
 80060f6:	68b9      	ldr	r1, [r7, #8]
 80060f8:	68f8      	ldr	r0, [r7, #12]
 80060fa:	f000 febd 	bl	8006e78 <ETH_Prepare_Tx_Descriptors>
 80060fe:	4603      	mov	r3, r0
 8006100:	2b00      	cmp	r3, #0
 8006102:	d009      	beq.n	8006118 <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800610a:	f043 0202 	orr.w	r2, r3, #2
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 8006114:	2301      	movs	r3, #1
 8006116:	e068      	b.n	80061ea <HAL_ETH_Transmit+0x126>
  __ASM volatile ("dsb 0xF":::"memory");
 8006118:	f3bf 8f4f 	dsb	sy
}
 800611c:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	3206      	adds	r2, #6
 8006126:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800612a:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006130:	1c5a      	adds	r2, r3, #1
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	629a      	str	r2, [r3, #40]	; 0x28
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800613a:	2b03      	cmp	r3, #3
 800613c:	d904      	bls.n	8006148 <HAL_ETH_Transmit+0x84>
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006142:	1f1a      	subs	r2, r3, #4
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	681a      	ldr	r2, [r3, #0]
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	3106      	adds	r1, #6
 8006154:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006158:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800615c:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120

    tickstart = HAL_GetTick();
 8006160:	f7fd fce8 	bl	8003b34 <HAL_GetTick>
 8006164:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 8006166:	e039      	b.n	80061dc <HAL_ETH_Transmit+0x118>
    {
      if ((heth->Instance->DMACSR & ETH_DMACSR_FBE) != (uint32_t)RESET)
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006170:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8006174:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006178:	2b00      	cmp	r3, #0
 800617a:	d012      	beq.n	80061a2 <HAL_ETH_Transmit+0xde>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006182:	f043 0208 	orr.w	r2, r3, #8
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        heth->DMAErrorCode = heth->Instance->DMACSR;
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006194:	f8d3 2160 	ldr.w	r2, [r3, #352]	; 0x160
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        /* Return function status */
        return HAL_ERROR;
 800619e:	2301      	movs	r3, #1
 80061a0:	e023      	b.n	80061ea <HAL_ETH_Transmit+0x126>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061a8:	d018      	beq.n	80061dc <HAL_ETH_Transmit+0x118>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80061aa:	f7fd fcc3 	bl	8003b34 <HAL_GetTick>
 80061ae:	4602      	mov	r2, r0
 80061b0:	693b      	ldr	r3, [r7, #16]
 80061b2:	1ad3      	subs	r3, r2, r3
 80061b4:	687a      	ldr	r2, [r7, #4]
 80061b6:	429a      	cmp	r2, r3
 80061b8:	d302      	bcc.n	80061c0 <HAL_ETH_Transmit+0xfc>
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d10d      	bne.n	80061dc <HAL_ETH_Transmit+0x118>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061c6:	f043 0204 	orr.w	r2, r3, #4
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC3 = (ETH_DMATXNDESCWBF_FD | ETH_DMATXNDESCWBF_LD);
 80061d0:	697b      	ldr	r3, [r7, #20]
 80061d2:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 80061d6:	60da      	str	r2, [r3, #12]
          return HAL_ERROR;
 80061d8:	2301      	movs	r3, #1
 80061da:	e006      	b.n	80061ea <HAL_ETH_Transmit+0x126>
    while ((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 80061dc:	697b      	ldr	r3, [r7, #20]
 80061de:	68db      	ldr	r3, [r3, #12]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	dbc1      	blt.n	8006168 <HAL_ETH_Transmit+0xa4>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 80061e4:	2300      	movs	r3, #0
 80061e6:	e000      	b.n	80061ea <HAL_ETH_Transmit+0x126>
  }
  else
  {
    return HAL_ERROR;
 80061e8:	2301      	movs	r3, #1
  }
}
 80061ea:	4618      	mov	r0, r3
 80061ec:	3718      	adds	r7, #24
 80061ee:	46bd      	mov	sp, r7
 80061f0:	bd80      	pop	{r7, pc}

080061f2 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 80061f2:	b580      	push	{r7, lr}
 80061f4:	b088      	sub	sp, #32
 80061f6:	af00      	add	r7, sp, #0
 80061f8:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 80061fa:	2300      	movs	r3, #0
 80061fc:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 80061fe:	2301      	movs	r3, #1
 8006200:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006206:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	69fa      	ldr	r2, [r7, #28]
 800620c:	3212      	adds	r2, #18
 800620e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006212:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006218:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 800621a:	e03b      	b.n	8006294 <ETH_UpdateDescriptor+0xa2>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 800621c:	697b      	ldr	r3, [r7, #20]
 800621e:	691b      	ldr	r3, [r3, #16]
 8006220:	2b00      	cmp	r3, #0
 8006222:	d112      	bne.n	800624a <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8006224:	f107 030c 	add.w	r3, r7, #12
 8006228:	4618      	mov	r0, r3
 800622a:	f009 f83f 	bl	800f2ac <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	2b00      	cmp	r3, #0
 8006232:	d102      	bne.n	800623a <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8006234:	2300      	movs	r3, #0
 8006236:	74fb      	strb	r3, [r7, #19]
 8006238:	e007      	b.n	800624a <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	461a      	mov	r2, r3
 800623e:	697b      	ldr	r3, [r7, #20]
 8006240:	611a      	str	r2, [r3, #16]
        WRITE_REG(dmarxdesc->DESC0, (uint32_t)buff);
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	461a      	mov	r2, r3
 8006246:	697b      	ldr	r3, [r7, #20]
 8006248:	601a      	str	r2, [r3, #0]
      }
    }

    if (allocStatus != 0U)
 800624a:	7cfb      	ldrb	r3, [r7, #19]
 800624c:	2b00      	cmp	r3, #0
 800624e:	d021      	beq.n	8006294 <ETH_UpdateDescriptor+0xa2>
  __ASM volatile ("dmb 0xF":::"memory");
 8006250:	f3bf 8f5f 	dmb	sy
}
 8006254:	bf00      	nop
    {
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();

      if (heth->RxDescList.ItMode != 0U)
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800625a:	2b00      	cmp	r3, #0
 800625c:	d004      	beq.n	8006268 <ETH_UpdateDescriptor+0x76>
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V | ETH_DMARXNDESCRF_IOC);
 800625e:	697b      	ldr	r3, [r7, #20]
 8006260:	f04f 4241 	mov.w	r2, #3238002688	; 0xc1000000
 8006264:	60da      	str	r2, [r3, #12]
 8006266:	e003      	b.n	8006270 <ETH_UpdateDescriptor+0x7e>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V);
 8006268:	697b      	ldr	r3, [r7, #20]
 800626a:	f04f 4201 	mov.w	r2, #2164260864	; 0x81000000
 800626e:	60da      	str	r2, [r3, #12]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8006270:	69fb      	ldr	r3, [r7, #28]
 8006272:	3301      	adds	r3, #1
 8006274:	61fb      	str	r3, [r7, #28]
 8006276:	69fb      	ldr	r3, [r7, #28]
 8006278:	2b03      	cmp	r3, #3
 800627a:	d902      	bls.n	8006282 <ETH_UpdateDescriptor+0x90>
 800627c:	69fb      	ldr	r3, [r7, #28]
 800627e:	3b04      	subs	r3, #4
 8006280:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	69fa      	ldr	r2, [r7, #28]
 8006286:	3212      	adds	r2, #18
 8006288:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800628c:	617b      	str	r3, [r7, #20]
      desccount--;
 800628e:	69bb      	ldr	r3, [r7, #24]
 8006290:	3b01      	subs	r3, #1
 8006292:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8006294:	69bb      	ldr	r3, [r7, #24]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d002      	beq.n	80062a0 <ETH_UpdateDescriptor+0xae>
 800629a:	7cfb      	ldrb	r3, [r7, #19]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d1bd      	bne.n	800621c <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80062a4:	69ba      	ldr	r2, [r7, #24]
 80062a6:	429a      	cmp	r2, r3
 80062a8:	d00d      	beq.n	80062c6 <ETH_UpdateDescriptor+0xd4>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMACRDTPR, 0);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80062b2:	461a      	mov	r2, r3
 80062b4:	2300      	movs	r3, #0
 80062b6:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128

    heth->RxDescList.RxBuildDescIdx = descidx;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	69fa      	ldr	r2, [r7, #28]
 80062be:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	69ba      	ldr	r2, [r7, #24]
 80062c4:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 80062c6:	bf00      	nop
 80062c8:	3720      	adds	r7, #32
 80062ca:	46bd      	mov	sp, r7
 80062cc:	bd80      	pop	{r7, pc}

080062ce <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 80062ce:	b580      	push	{r7, lr}
 80062d0:	b086      	sub	sp, #24
 80062d2:	af00      	add	r7, sp, #0
 80062d4:	60f8      	str	r0, [r7, #12]
 80062d6:	60b9      	str	r1, [r7, #8]
 80062d8:	607a      	str	r2, [r7, #4]
 80062da:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80062e4:	f003 0301 	and.w	r3, r3, #1
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d001      	beq.n	80062f0 <HAL_ETH_ReadPHYRegister+0x22>
  {
    return HAL_ERROR;
 80062ec:	2301      	movs	r3, #1
 80062ee:	e03e      	b.n	800636e <HAL_ETH_ReadPHYRegister+0xa0>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80062f8:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the read mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 80062fa:	697b      	ldr	r3, [r7, #20]
 80062fc:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 8006300:	68bb      	ldr	r3, [r7, #8]
 8006302:	055b      	lsls	r3, r3, #21
 8006304:	4313      	orrs	r3, r2
 8006306:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8006308:	697b      	ldr	r3, [r7, #20]
 800630a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	041b      	lsls	r3, r3, #16
 8006312:	4313      	orrs	r3, r2
 8006314:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD);
 8006316:	697b      	ldr	r3, [r7, #20]
 8006318:	f043 030c 	orr.w	r3, r3, #12
 800631c:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 800631e:	697b      	ldr	r3, [r7, #20]
 8006320:	f043 0301 	orr.w	r3, r3, #1
 8006324:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MDII Address register */
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	697a      	ldr	r2, [r7, #20]
 800632c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

  tickstart = HAL_GetTick();
 8006330:	f7fd fc00 	bl	8003b34 <HAL_GetTick>
 8006334:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8006336:	e009      	b.n	800634c <HAL_ETH_ReadPHYRegister+0x7e>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 8006338:	f7fd fbfc 	bl	8003b34 <HAL_GetTick>
 800633c:	4602      	mov	r2, r0
 800633e:	693b      	ldr	r3, [r7, #16]
 8006340:	1ad3      	subs	r3, r2, r3
 8006342:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006346:	d901      	bls.n	800634c <HAL_ETH_ReadPHYRegister+0x7e>
    {
      return HAL_ERROR;
 8006348:	2301      	movs	r3, #1
 800634a:	e010      	b.n	800636e <HAL_ETH_ReadPHYRegister+0xa0>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006354:	f003 0301 	and.w	r3, r3, #1
 8006358:	2b00      	cmp	r3, #0
 800635a:	d1ed      	bne.n	8006338 <HAL_ETH_ReadPHYRegister+0x6a>
    }
  }

  /* Get MACMIIDR value */
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8006364:	b29b      	uxth	r3, r3
 8006366:	461a      	mov	r2, r3
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800636c:	2300      	movs	r3, #0
}
 800636e:	4618      	mov	r0, r3
 8006370:	3718      	adds	r7, #24
 8006372:	46bd      	mov	sp, r7
 8006374:	bd80      	pop	{r7, pc}
	...

08006378 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8006378:	b580      	push	{r7, lr}
 800637a:	b086      	sub	sp, #24
 800637c:	af00      	add	r7, sp, #0
 800637e:	60f8      	str	r0, [r7, #12]
 8006380:	60b9      	str	r1, [r7, #8]
 8006382:	607a      	str	r2, [r7, #4]
 8006384:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800638e:	f003 0301 	and.w	r3, r3, #1
 8006392:	2b00      	cmp	r3, #0
 8006394:	d001      	beq.n	800639a <HAL_ETH_WritePHYRegister+0x22>
  {
    return HAL_ERROR;
 8006396:	2301      	movs	r3, #1
 8006398:	e03c      	b.n	8006414 <HAL_ETH_WritePHYRegister+0x9c>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80063a2:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the write mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 80063a4:	697b      	ldr	r3, [r7, #20]
 80063a6:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 80063aa:	68bb      	ldr	r3, [r7, #8]
 80063ac:	055b      	lsls	r3, r3, #21
 80063ae:	4313      	orrs	r3, r2
 80063b0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 80063b2:	697b      	ldr	r3, [r7, #20]
 80063b4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	041b      	lsls	r3, r3, #16
 80063bc:	4313      	orrs	r3, r2
 80063be:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 80063c0:	697b      	ldr	r3, [r7, #20]
 80063c2:	f023 030c 	bic.w	r3, r3, #12
 80063c6:	f043 0304 	orr.w	r3, r3, #4
 80063ca:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 80063cc:	697b      	ldr	r3, [r7, #20]
 80063ce:	f043 0301 	orr.w	r3, r3, #1
 80063d2:	617b      	str	r3, [r7, #20]


  /* Give the value to the MII data register */
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	b29a      	uxth	r2, r3
 80063d8:	4b10      	ldr	r3, [pc, #64]	; (800641c <HAL_ETH_WritePHYRegister+0xa4>)
 80063da:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Write the result value into the MII Address register */
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 80063de:	4a0f      	ldr	r2, [pc, #60]	; (800641c <HAL_ETH_WritePHYRegister+0xa4>)
 80063e0:	697b      	ldr	r3, [r7, #20]
 80063e2:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

  tickstart = HAL_GetTick();
 80063e6:	f7fd fba5 	bl	8003b34 <HAL_GetTick>
 80063ea:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 80063ec:	e009      	b.n	8006402 <HAL_ETH_WritePHYRegister+0x8a>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 80063ee:	f7fd fba1 	bl	8003b34 <HAL_GetTick>
 80063f2:	4602      	mov	r2, r0
 80063f4:	693b      	ldr	r3, [r7, #16]
 80063f6:	1ad3      	subs	r3, r2, r3
 80063f8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80063fc:	d901      	bls.n	8006402 <HAL_ETH_WritePHYRegister+0x8a>
    {
      return HAL_ERROR;
 80063fe:	2301      	movs	r3, #1
 8006400:	e008      	b.n	8006414 <HAL_ETH_WritePHYRegister+0x9c>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800640a:	f003 0301 	and.w	r3, r3, #1
 800640e:	2b00      	cmp	r3, #0
 8006410:	d1ed      	bne.n	80063ee <HAL_ETH_WritePHYRegister+0x76>
    }
  }

  return HAL_OK;
 8006412:	2300      	movs	r3, #0
}
 8006414:	4618      	mov	r0, r3
 8006416:	3718      	adds	r7, #24
 8006418:	46bd      	mov	sp, r7
 800641a:	bd80      	pop	{r7, pc}
 800641c:	40028000 	.word	0x40028000

08006420 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8006420:	b480      	push	{r7}
 8006422:	b083      	sub	sp, #12
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
 8006428:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	2b00      	cmp	r3, #0
 800642e:	d101      	bne.n	8006434 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8006430:	2301      	movs	r3, #1
 8006432:	e1c3      	b.n	80067bc <HAL_ETH_GetMACConfig+0x39c>
  }

  /* Get MAC parameters */
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f003 020c 	and.w	r2, r3, #12
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	62da      	str	r2, [r3, #44]	; 0x2c
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f003 0310 	and.w	r3, r3, #16
 800644c:	2b00      	cmp	r3, #0
 800644e:	bf14      	ite	ne
 8006450:	2301      	movne	r3, #1
 8006452:	2300      	moveq	r3, #0
 8006454:	b2db      	uxtb	r3, r3
 8006456:	461a      	mov	r2, r3
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006476:	2b00      	cmp	r3, #0
 8006478:	bf0c      	ite	eq
 800647a:	2301      	moveq	r3, #1
 800647c:	2300      	movne	r3, #0
 800647e:	b2db      	uxtb	r3, r3
 8006480:	461a      	mov	r2, r3
 8006482:	683b      	ldr	r3, [r7, #0]
 8006484:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f403 7300 	and.w	r3, r3, #512	; 0x200
                                        ? ENABLE : DISABLE;
 8006492:	2b00      	cmp	r3, #0
 8006494:	bf14      	ite	ne
 8006496:	2301      	movne	r3, #1
 8006498:	2300      	moveq	r3, #0
 800649a:	b2db      	uxtb	r3, r3
 800649c:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	bf0c      	ite	eq
 80064b0:	2301      	moveq	r3, #1
 80064b2:	2300      	movne	r3, #0
 80064b4:	b2db      	uxtb	r3, r3
 80064b6:	461a      	mov	r2, r3
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	779a      	strb	r2, [r3, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	681b      	ldr	r3, [r3, #0]
                                                   ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 80064c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	bf14      	ite	ne
 80064ca:	2301      	movne	r3, #1
 80064cc:	2300      	moveq	r3, #0
 80064ce:	b2db      	uxtb	r3, r3
 80064d0:	461a      	mov	r2, r3
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	775a      	strb	r2, [r3, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	bf14      	ite	ne
 80064e4:	2301      	movne	r3, #1
 80064e6:	2300      	moveq	r3, #0
 80064e8:	b2db      	uxtb	r3, r3
 80064ea:	461a      	mov	r2, r3
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	615a      	str	r2, [r3, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006516:	2b00      	cmp	r3, #0
 8006518:	bf14      	ite	ne
 800651a:	2301      	movne	r3, #1
 800651c:	2300      	moveq	r3, #0
 800651e:	b2db      	uxtb	r3, r3
 8006520:	461a      	mov	r2, r3
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	749a      	strb	r2, [r3, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 17) == 0U) ? ENABLE : DISABLE;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006530:	2b00      	cmp	r3, #0
 8006532:	bf0c      	ite	eq
 8006534:	2301      	moveq	r3, #1
 8006536:	2300      	movne	r3, #0
 8006538:	b2db      	uxtb	r3, r3
 800653a:	461a      	mov	r2, r3
 800653c:	683b      	ldr	r3, [r7, #0]
 800653e:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 19) == 0U) ? ENABLE : DISABLE;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800654a:	2b00      	cmp	r3, #0
 800654c:	bf0c      	ite	eq
 800654e:	2301      	moveq	r3, #1
 8006550:	2300      	movne	r3, #0
 8006552:	b2db      	uxtb	r3, r3
 8006554:	461a      	mov	r2, r3
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006564:	2b00      	cmp	r3, #0
 8006566:	bf14      	ite	ne
 8006568:	2301      	movne	r3, #1
 800656a:	2300      	moveq	r3, #0
 800656c:	b2db      	uxtb	r3, r3
 800656e:	461a      	mov	r2, r3
 8006570:	683b      	ldr	r3, [r7, #0]
 8006572:	73da      	strb	r2, [r3, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800657e:	2b00      	cmp	r3, #0
 8006580:	bf14      	ite	ne
 8006582:	2301      	movne	r3, #1
 8006584:	2300      	moveq	r3, #0
 8006586:	b2db      	uxtb	r3, r3
 8006588:	461a      	mov	r2, r3
 800658a:	683b      	ldr	r3, [r7, #0]
 800658c:	739a      	strb	r2, [r3, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006598:	2b00      	cmp	r3, #0
 800659a:	bf14      	ite	ne
 800659c:	2301      	movne	r3, #1
 800659e:	2300      	moveq	r3, #0
 80065a0:	b2db      	uxtb	r3, r3
 80065a2:	461a      	mov	r2, r3
 80065a4:	683b      	ldr	r3, [r7, #0]
 80065a6:	735a      	strb	r2, [r3, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	681b      	ldr	r3, [r3, #0]
                                                    ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 80065ae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	bf14      	ite	ne
 80065b6:	2301      	movne	r3, #1
 80065b8:	2300      	moveq	r3, #0
 80065ba:	b2db      	uxtb	r3, r3
 80065bc:	461a      	mov	r2, r3
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	731a      	strb	r2, [r3, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f003 62e0 	and.w	r2, r3, #117440512	; 0x7000000
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80065da:	2b00      	cmp	r3, #0
 80065dc:	bf14      	ite	ne
 80065de:	2301      	movne	r3, #1
 80065e0:	2300      	moveq	r3, #0
 80065e2:	b2db      	uxtb	r3, r3
 80065e4:	461a      	mov	r2, r3
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	711a      	strb	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	601a      	str	r2, [r3, #0]

  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	685b      	ldr	r3, [r3, #4]
 80065fe:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8006602:	683b      	ldr	r3, [r7, #0]
 8006604:	635a      	str	r2, [r3, #52]	; 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	685b      	ldr	r3, [r3, #4]
 800660c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006610:	2b00      	cmp	r3, #0
 8006612:	bf0c      	ite	eq
 8006614:	2301      	moveq	r3, #1
 8006616:	2300      	movne	r3, #0
 8006618:	b2db      	uxtb	r3, r3
 800661a:	461a      	mov	r2, r3
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	685b      	ldr	r3, [r3, #4]
 8006628:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800662c:	2b00      	cmp	r3, #0
 800662e:	bf14      	ite	ne
 8006630:	2301      	movne	r3, #1
 8006632:	2300      	moveq	r3, #0
 8006634:	b2db      	uxtb	r3, r3
 8006636:	461a      	mov	r2, r3
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	685b      	ldr	r3, [r3, #4]
                                                        ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 8006644:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006648:	2b00      	cmp	r3, #0
 800664a:	bf14      	ite	ne
 800664c:	2301      	movne	r3, #1
 800664e:	2300      	moveq	r3, #0
 8006650:	b2db      	uxtb	r3, r3
 8006652:	461a      	mov	r2, r3
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 8006654:	683b      	ldr	r3, [r7, #0]
 8006656:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	685b      	ldr	r3, [r3, #4]
 8006660:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
                                    ? ENABLE : DISABLE;
 8006664:	2b00      	cmp	r3, #0
 8006666:	bf14      	ite	ne
 8006668:	2301      	movne	r3, #1
 800666a:	2300      	moveq	r3, #0
 800666c:	b2db      	uxtb	r3, r3
 800666e:	461a      	mov	r2, r3
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	685b      	ldr	r3, [r3, #4]
 800667c:	0e5b      	lsrs	r3, r3, #25
 800667e:	f003 021f 	and.w	r2, r3, #31
 8006682:	683b      	ldr	r3, [r7, #0]
 8006684:	63da      	str	r2, [r3, #60]	; 0x3c


  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	68db      	ldr	r3, [r3, #12]
 800668c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006690:	2b00      	cmp	r3, #0
 8006692:	bf14      	ite	ne
 8006694:	2301      	movne	r3, #1
 8006696:	2300      	moveq	r3, #0
 8006698:	b2db      	uxtb	r3, r3
 800669a:	461a      	mov	r2, r3
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	68db      	ldr	r3, [r3, #12]
 80066a8:	f003 020f 	and.w	r2, r3, #15
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	645a      	str	r2, [r3, #68]	; 0x44

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066b6:	f003 0302 	and.w	r3, r3, #2
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	bf14      	ite	ne
 80066be:	2301      	movne	r3, #1
 80066c0:	2300      	moveq	r3, #0
 80066c2:	b2db      	uxtb	r3, r3
 80066c4:	461a      	mov	r2, r3
 80066c6:	683b      	ldr	r3, [r7, #0]
 80066c8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	bf0c      	ite	eq
 80066da:	2301      	moveq	r3, #1
 80066dc:	2300      	movne	r3, #0
 80066de:	b2db      	uxtb	r3, r3
 80066e0:	461a      	mov	r2, r3
 80066e2:	683b      	ldr	r3, [r7, #0]
 80066e4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066ee:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066fc:	0c1b      	lsrs	r3, r3, #16
 80066fe:	b29a      	uxth	r2, r3
 8006700:	683b      	ldr	r3, [r7, #0]
 8006702:	649a      	str	r2, [r3, #72]	; 0x48


  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800670c:	f003 0301 	and.w	r3, r3, #1
 8006710:	2b00      	cmp	r3, #0
 8006712:	bf14      	ite	ne
 8006714:	2301      	movne	r3, #1
 8006716:	2300      	moveq	r3, #0
 8006718:	b2db      	uxtb	r3, r3
 800671a:	461a      	mov	r2, r3
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800672a:	f003 0302 	and.w	r3, r3, #2
                                      ? ENABLE : DISABLE;
 800672e:	2b00      	cmp	r3, #0
 8006730:	bf14      	ite	ne
 8006732:	2301      	movne	r3, #1
 8006734:	2300      	moveq	r3, #0
 8006736:	b2db      	uxtb	r3, r3
 8006738:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8006748:	f003 0272 	and.w	r2, r3, #114	; 0x72
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	659a      	str	r2, [r3, #88]	; 0x58

  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8006758:	f003 0223 	and.w	r2, r3, #35	; 0x23
 800675c:	683b      	ldr	r3, [r7, #0]
 800675e:	65da      	str	r2, [r3, #92]	; 0x5c
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
                                                      ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 8006768:	f003 0308 	and.w	r3, r3, #8
 800676c:	2b00      	cmp	r3, #0
 800676e:	bf14      	ite	ne
 8006770:	2301      	movne	r3, #1
 8006772:	2300      	moveq	r3, #0
 8006774:	b2db      	uxtb	r3, r3
 8006776:	461a      	mov	r2, r3
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8006778:	683b      	ldr	r3, [r7, #0]
 800677a:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8006786:	f003 0310 	and.w	r3, r3, #16
 800678a:	2b00      	cmp	r3, #0
 800678c:	bf14      	ite	ne
 800678e:	2301      	movne	r3, #1
 8006790:	2300      	moveq	r3, #0
 8006792:	b2db      	uxtb	r3, r3
 8006794:	461a      	mov	r2, r3
 8006796:	683b      	ldr	r3, [r7, #0]
 8006798:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
                                                     ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 80067a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	bf0c      	ite	eq
 80067ac:	2301      	moveq	r3, #1
 80067ae:	2300      	movne	r3, #0
 80067b0:	b2db      	uxtb	r3, r3
 80067b2:	461a      	mov	r2, r3
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 80067b4:	683b      	ldr	r3, [r7, #0]
 80067b6:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 80067ba:	2300      	movs	r3, #0
}
 80067bc:	4618      	mov	r0, r3
 80067be:	370c      	adds	r7, #12
 80067c0:	46bd      	mov	sp, r7
 80067c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c6:	4770      	bx	lr

080067c8 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b082      	sub	sp, #8
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
 80067d0:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d101      	bne.n	80067dc <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 80067d8:	2301      	movs	r3, #1
 80067da:	e00b      	b.n	80067f4 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80067e2:	2b10      	cmp	r3, #16
 80067e4:	d105      	bne.n	80067f2 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 80067e6:	6839      	ldr	r1, [r7, #0]
 80067e8:	6878      	ldr	r0, [r7, #4]
 80067ea:	f000 f85f 	bl	80068ac <ETH_SetMACConfig>

    return HAL_OK;
 80067ee:	2300      	movs	r3, #0
 80067f0:	e000      	b.n	80067f4 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 80067f2:	2301      	movs	r3, #1
  }
}
 80067f4:	4618      	mov	r0, r3
 80067f6:	3708      	adds	r7, #8
 80067f8:	46bd      	mov	sp, r7
 80067fa:	bd80      	pop	{r7, pc}

080067fc <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 80067fc:	b580      	push	{r7, lr}
 80067fe:	b084      	sub	sp, #16
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800680c:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006814:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8006816:	f003 fec3 	bl	800a5a0 <HAL_RCC_GetHCLKFreq>
 800681a:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 800681c:	68bb      	ldr	r3, [r7, #8]
 800681e:	4a1e      	ldr	r2, [pc, #120]	; (8006898 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8006820:	4293      	cmp	r3, r2
 8006822:	d908      	bls.n	8006836 <HAL_ETH_SetMDIOClockRange+0x3a>
 8006824:	68bb      	ldr	r3, [r7, #8]
 8006826:	4a1d      	ldr	r2, [pc, #116]	; (800689c <HAL_ETH_SetMDIOClockRange+0xa0>)
 8006828:	4293      	cmp	r3, r2
 800682a:	d804      	bhi.n	8006836 <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006832:	60fb      	str	r3, [r7, #12]
 8006834:	e027      	b.n	8006886 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8006836:	68bb      	ldr	r3, [r7, #8]
 8006838:	4a18      	ldr	r2, [pc, #96]	; (800689c <HAL_ETH_SetMDIOClockRange+0xa0>)
 800683a:	4293      	cmp	r3, r2
 800683c:	d908      	bls.n	8006850 <HAL_ETH_SetMDIOClockRange+0x54>
 800683e:	68bb      	ldr	r3, [r7, #8]
 8006840:	4a17      	ldr	r2, [pc, #92]	; (80068a0 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8006842:	4293      	cmp	r3, r2
 8006844:	d204      	bcs.n	8006850 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800684c:	60fb      	str	r3, [r7, #12]
 800684e:	e01a      	b.n	8006886 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8006850:	68bb      	ldr	r3, [r7, #8]
 8006852:	4a13      	ldr	r2, [pc, #76]	; (80068a0 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8006854:	4293      	cmp	r3, r2
 8006856:	d303      	bcc.n	8006860 <HAL_ETH_SetMDIOClockRange+0x64>
 8006858:	68bb      	ldr	r3, [r7, #8]
 800685a:	4a12      	ldr	r2, [pc, #72]	; (80068a4 <HAL_ETH_SetMDIOClockRange+0xa8>)
 800685c:	4293      	cmp	r3, r2
 800685e:	d911      	bls.n	8006884 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8006860:	68bb      	ldr	r3, [r7, #8]
 8006862:	4a10      	ldr	r2, [pc, #64]	; (80068a4 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8006864:	4293      	cmp	r3, r2
 8006866:	d908      	bls.n	800687a <HAL_ETH_SetMDIOClockRange+0x7e>
 8006868:	68bb      	ldr	r3, [r7, #8]
 800686a:	4a0f      	ldr	r2, [pc, #60]	; (80068a8 <HAL_ETH_SetMDIOClockRange+0xac>)
 800686c:	4293      	cmp	r3, r2
 800686e:	d804      	bhi.n	800687a <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006876:	60fb      	str	r3, [r7, #12]
 8006878:	e005      	b.n	8006886 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006880:	60fb      	str	r3, [r7, #12]
 8006882:	e000      	b.n	8006886 <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8006884:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	68fa      	ldr	r2, [r7, #12]
 800688c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8006890:	bf00      	nop
 8006892:	3710      	adds	r7, #16
 8006894:	46bd      	mov	sp, r7
 8006896:	bd80      	pop	{r7, pc}
 8006898:	01312cff 	.word	0x01312cff
 800689c:	02160ebf 	.word	0x02160ebf
 80068a0:	03938700 	.word	0x03938700
 80068a4:	05f5e0ff 	.word	0x05f5e0ff
 80068a8:	08f0d17f 	.word	0x08f0d17f

080068ac <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80068ac:	b480      	push	{r7}
 80068ae:	b085      	sub	sp, #20
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
 80068b4:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 80068ba:	683b      	ldr	r3, [r7, #0]
 80068bc:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 80068be:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80068c0:	683b      	ldr	r3, [r7, #0]
 80068c2:	791b      	ldrb	r3, [r3, #4]
 80068c4:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 80068c6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	7b1b      	ldrb	r3, [r3, #12]
 80068cc:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80068ce:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80068d0:	683b      	ldr	r3, [r7, #0]
 80068d2:	7b5b      	ldrb	r3, [r3, #13]
 80068d4:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80068d6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80068d8:	683b      	ldr	r3, [r7, #0]
 80068da:	7b9b      	ldrb	r3, [r3, #14]
 80068dc:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80068de:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80068e0:	683b      	ldr	r3, [r7, #0]
 80068e2:	7bdb      	ldrb	r3, [r3, #15]
 80068e4:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80068e6:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80068e8:	683a      	ldr	r2, [r7, #0]
 80068ea:	7c12      	ldrb	r2, [r2, #16]
 80068ec:	2a00      	cmp	r2, #0
 80068ee:	d102      	bne.n	80068f6 <ETH_SetMACConfig+0x4a>
 80068f0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80068f4:	e000      	b.n	80068f8 <ETH_SetMACConfig+0x4c>
 80068f6:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80068f8:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80068fa:	683a      	ldr	r2, [r7, #0]
 80068fc:	7c52      	ldrb	r2, [r2, #17]
 80068fe:	2a00      	cmp	r2, #0
 8006900:	d102      	bne.n	8006908 <ETH_SetMACConfig+0x5c>
 8006902:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006906:	e000      	b.n	800690a <ETH_SetMACConfig+0x5e>
 8006908:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800690a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	7c9b      	ldrb	r3, [r3, #18]
 8006910:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8006912:	431a      	orrs	r2, r3
               macconf->Speed |
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8006918:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 800691e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	7f1b      	ldrb	r3, [r3, #28]
 8006924:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8006926:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	7f5b      	ldrb	r3, [r3, #29]
 800692c:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 800692e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8006930:	683a      	ldr	r2, [r7, #0]
 8006932:	7f92      	ldrb	r2, [r2, #30]
 8006934:	2a00      	cmp	r2, #0
 8006936:	d102      	bne.n	800693e <ETH_SetMACConfig+0x92>
 8006938:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800693c:	e000      	b.n	8006940 <ETH_SetMACConfig+0x94>
 800693e:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8006940:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	7fdb      	ldrb	r3, [r3, #31]
 8006946:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8006948:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800694a:	683a      	ldr	r2, [r7, #0]
 800694c:	f892 2020 	ldrb.w	r2, [r2, #32]
 8006950:	2a00      	cmp	r2, #0
 8006952:	d102      	bne.n	800695a <ETH_SetMACConfig+0xae>
 8006954:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006958:	e000      	b.n	800695c <ETH_SetMACConfig+0xb0>
 800695a:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 800695c:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 800695e:	683b      	ldr	r3, [r7, #0]
 8006960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8006962:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800696a:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 800696c:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 800696e:	683b      	ldr	r3, [r7, #0]
 8006970:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 8006972:	4313      	orrs	r3, r2
 8006974:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	681a      	ldr	r2, [r3, #0]
 800697c:	4b56      	ldr	r3, [pc, #344]	; (8006ad8 <ETH_SetMACConfig+0x22c>)
 800697e:	4013      	ands	r3, r2
 8006980:	687a      	ldr	r2, [r7, #4]
 8006982:	6812      	ldr	r2, [r2, #0]
 8006984:	68f9      	ldr	r1, [r7, #12]
 8006986:	430b      	orrs	r3, r1
 8006988:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800698e:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006996:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8006998:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80069a0:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80069a2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80069aa:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80069ac:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 80069ae:	683a      	ldr	r2, [r7, #0]
 80069b0:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 80069b4:	2a00      	cmp	r2, #0
 80069b6:	d102      	bne.n	80069be <ETH_SetMACConfig+0x112>
 80069b8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80069bc:	e000      	b.n	80069c0 <ETH_SetMACConfig+0x114>
 80069be:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80069c0:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 80069c2:	683b      	ldr	r3, [r7, #0]
 80069c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80069c6:	4313      	orrs	r3, r2
 80069c8:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	685a      	ldr	r2, [r3, #4]
 80069d0:	4b42      	ldr	r3, [pc, #264]	; (8006adc <ETH_SetMACConfig+0x230>)
 80069d2:	4013      	ands	r3, r2
 80069d4:	687a      	ldr	r2, [r7, #4]
 80069d6:	6812      	ldr	r2, [r2, #0]
 80069d8:	68f9      	ldr	r1, [r7, #12]
 80069da:	430b      	orrs	r3, r1
 80069dc:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80069e4:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80069ea:	4313      	orrs	r3, r2
 80069ec:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	68da      	ldr	r2, [r3, #12]
 80069f4:	4b3a      	ldr	r3, [pc, #232]	; (8006ae0 <ETH_SetMACConfig+0x234>)
 80069f6:	4013      	ands	r3, r2
 80069f8:	687a      	ldr	r2, [r7, #4]
 80069fa:	6812      	ldr	r2, [r2, #0]
 80069fc:	68f9      	ldr	r1, [r7, #12]
 80069fe:	430b      	orrs	r3, r1
 8006a00:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8006a02:	683b      	ldr	r3, [r7, #0]
 8006a04:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8006a08:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8006a0a:	683b      	ldr	r3, [r7, #0]
 8006a0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8006a0e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8006a10:	683a      	ldr	r2, [r7, #0]
 8006a12:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8006a16:	2a00      	cmp	r2, #0
 8006a18:	d101      	bne.n	8006a1e <ETH_SetMACConfig+0x172>
 8006a1a:	2280      	movs	r2, #128	; 0x80
 8006a1c:	e000      	b.n	8006a20 <ETH_SetMACConfig+0x174>
 8006a1e:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8006a20:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8006a22:	683b      	ldr	r3, [r7, #0]
 8006a24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a26:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8006a28:	4313      	orrs	r3, r2
 8006a2a:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006a32:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8006a36:	4013      	ands	r3, r2
 8006a38:	687a      	ldr	r2, [r7, #4]
 8006a3a:	6812      	ldr	r2, [r2, #0]
 8006a3c:	68f9      	ldr	r1, [r7, #12]
 8006a3e:	430b      	orrs	r3, r1
 8006a40:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8006a42:	683b      	ldr	r3, [r7, #0]
 8006a44:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8006a48:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8006a4a:	683b      	ldr	r3, [r7, #0]
 8006a4c:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8006a50:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8006a52:	4313      	orrs	r3, r2
 8006a54:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a5e:	f023 0103 	bic.w	r1, r3, #3
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	68fa      	ldr	r2, [r7, #12]
 8006a68:	430a      	orrs	r2, r1
 8006a6a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8006a76:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	430a      	orrs	r2, r1
 8006a84:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8006a88:	683b      	ldr	r3, [r7, #0]
 8006a8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8006a8c:	683a      	ldr	r2, [r7, #0]
 8006a8e:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8006a92:	2a00      	cmp	r2, #0
 8006a94:	d101      	bne.n	8006a9a <ETH_SetMACConfig+0x1ee>
 8006a96:	2240      	movs	r2, #64	; 0x40
 8006a98:	e000      	b.n	8006a9c <ETH_SetMACConfig+0x1f0>
 8006a9a:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8006a9c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8006a9e:	683b      	ldr	r3, [r7, #0]
 8006aa0:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8006aa4:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8006aa6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8006aae:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8006ab0:	4313      	orrs	r3, r2
 8006ab2:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8006abc:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	68fa      	ldr	r2, [r7, #12]
 8006ac6:	430a      	orrs	r2, r1
 8006ac8:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8006acc:	bf00      	nop
 8006ace:	3714      	adds	r7, #20
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad6:	4770      	bx	lr
 8006ad8:	00048083 	.word	0x00048083
 8006adc:	c0f88000 	.word	0xc0f88000
 8006ae0:	fffffef0 	.word	0xfffffef0

08006ae4 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8006ae4:	b480      	push	{r7}
 8006ae6:	b085      	sub	sp, #20
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
 8006aec:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006af6:	681a      	ldr	r2, [r3, #0]
 8006af8:	4b38      	ldr	r3, [pc, #224]	; (8006bdc <ETH_SetDMAConfig+0xf8>)
 8006afa:	4013      	ands	r3, r2
 8006afc:	683a      	ldr	r2, [r7, #0]
 8006afe:	6811      	ldr	r1, [r2, #0]
 8006b00:	687a      	ldr	r2, [r7, #4]
 8006b02:	6812      	ldr	r2, [r2, #0]
 8006b04:	430b      	orrs	r3, r1
 8006b06:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006b0a:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8006b0c:	683b      	ldr	r3, [r7, #0]
 8006b0e:	791b      	ldrb	r3, [r3, #4]
 8006b10:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8006b12:	683b      	ldr	r3, [r7, #0]
 8006b14:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8006b16:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	7b1b      	ldrb	r3, [r3, #12]
 8006b1c:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8006b1e:	4313      	orrs	r3, r2
 8006b20:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b2a:	685a      	ldr	r2, [r3, #4]
 8006b2c:	4b2c      	ldr	r3, [pc, #176]	; (8006be0 <ETH_SetDMAConfig+0xfc>)
 8006b2e:	4013      	ands	r3, r2
 8006b30:	687a      	ldr	r2, [r7, #4]
 8006b32:	6812      	ldr	r2, [r2, #0]
 8006b34:	68f9      	ldr	r1, [r7, #12]
 8006b36:	430b      	orrs	r3, r1
 8006b38:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006b3c:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8006b3e:	683b      	ldr	r3, [r7, #0]
 8006b40:	7b5b      	ldrb	r3, [r3, #13]
 8006b42:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8006b48:	4313      	orrs	r3, r2
 8006b4a:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b54:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8006b58:	4b22      	ldr	r3, [pc, #136]	; (8006be4 <ETH_SetDMAConfig+0x100>)
 8006b5a:	4013      	ands	r3, r2
 8006b5c:	687a      	ldr	r2, [r7, #4]
 8006b5e:	6812      	ldr	r2, [r2, #0]
 8006b60:	68f9      	ldr	r1, [r7, #12]
 8006b62:	430b      	orrs	r3, r1
 8006b64:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006b68:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8006b6c:	683b      	ldr	r3, [r7, #0]
 8006b6e:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8006b70:	683b      	ldr	r3, [r7, #0]
 8006b72:	7d1b      	ldrb	r3, [r3, #20]
 8006b74:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8006b76:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8006b78:	683b      	ldr	r3, [r7, #0]
 8006b7a:	7f5b      	ldrb	r3, [r3, #29]
 8006b7c:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8006b7e:	4313      	orrs	r3, r2
 8006b80:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b8a:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8006b8e:	4b16      	ldr	r3, [pc, #88]	; (8006be8 <ETH_SetDMAConfig+0x104>)
 8006b90:	4013      	ands	r3, r2
 8006b92:	687a      	ldr	r2, [r7, #4]
 8006b94:	6812      	ldr	r2, [r2, #0]
 8006b96:	68f9      	ldr	r1, [r7, #12]
 8006b98:	430b      	orrs	r3, r1
 8006b9a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006b9e:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	7f1b      	ldrb	r3, [r3, #28]
 8006ba6:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8006ba8:	683b      	ldr	r3, [r7, #0]
 8006baa:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8006bac:	4313      	orrs	r3, r2
 8006bae:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006bb8:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8006bbc:	4b0b      	ldr	r3, [pc, #44]	; (8006bec <ETH_SetDMAConfig+0x108>)
 8006bbe:	4013      	ands	r3, r2
 8006bc0:	687a      	ldr	r2, [r7, #4]
 8006bc2:	6812      	ldr	r2, [r2, #0]
 8006bc4:	68f9      	ldr	r1, [r7, #12]
 8006bc6:	430b      	orrs	r3, r1
 8006bc8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006bcc:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 8006bd0:	bf00      	nop
 8006bd2:	3714      	adds	r7, #20
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bda:	4770      	bx	lr
 8006bdc:	ffff87fd 	.word	0xffff87fd
 8006be0:	ffff2ffe 	.word	0xffff2ffe
 8006be4:	fffec000 	.word	0xfffec000
 8006be8:	ffc0efef 	.word	0xffc0efef
 8006bec:	7fc0ffff 	.word	0x7fc0ffff

08006bf0 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8006bf0:	b580      	push	{r7, lr}
 8006bf2:	b0a4      	sub	sp, #144	; 0x90
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8006bf8:	2301      	movs	r3, #1
 8006bfa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8006bfe:	2300      	movs	r3, #0
 8006c00:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8006c02:	2300      	movs	r3, #0
 8006c04:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8006c08:	2300      	movs	r3, #0
 8006c0a:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8006c0e:	2301      	movs	r3, #1
 8006c10:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8006c14:	2301      	movs	r3, #1
 8006c16:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8006c1a:	2301      	movs	r3, #1
 8006c1c:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8006c20:	2300      	movs	r3, #0
 8006c22:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8006c26:	2301      	movs	r3, #1
 8006c28:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8006c2c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006c30:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8006c32:	2300      	movs	r3, #0
 8006c34:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8006c38:	2300      	movs	r3, #0
 8006c3a:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8006c3c:	2300      	movs	r3, #0
 8006c3e:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8006c42:	2300      	movs	r3, #0
 8006c44:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8006c48:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8006c4c:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8006c4e:	2300      	movs	r3, #0
 8006c50:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8006c54:	2300      	movs	r3, #0
 8006c56:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8006c58:	2301      	movs	r3, #1
 8006c5a:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8006c5e:	2300      	movs	r3, #0
 8006c60:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8006c64:	2300      	movs	r3, #0
 8006c66:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8006c6e:	2300      	movs	r3, #0
 8006c70:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8006c72:	2300      	movs	r3, #0
 8006c74:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8006c76:	2300      	movs	r3, #0
 8006c78:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8006c82:	2301      	movs	r3, #1
 8006c84:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8006c88:	2320      	movs	r3, #32
 8006c8a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8006c8e:	2301      	movs	r3, #1
 8006c90:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8006c94:	2300      	movs	r3, #0
 8006c96:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8006c9a:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8006c9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8006ca0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006ca4:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8006cac:	2302      	movs	r3, #2
 8006cae:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8006cb8:	2300      	movs	r3, #0
 8006cba:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8006cc4:	2301      	movs	r3, #1
 8006cc6:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8006cca:	2300      	movs	r3, #0
 8006ccc:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8006cce:	2301      	movs	r3, #1
 8006cd0:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8006cd4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006cd8:	4619      	mov	r1, r3
 8006cda:	6878      	ldr	r0, [r7, #4]
 8006cdc:	f7ff fde6 	bl	80068ac <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8006ce0:	2301      	movs	r3, #1
 8006ce2:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8006ce4:	2301      	movs	r3, #1
 8006ce6:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8006ce8:	2300      	movs	r3, #0
 8006cea:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8006cec:	2300      	movs	r3, #0
 8006cee:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8006cfa:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006cfe:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8006d00:	2300      	movs	r3, #0
 8006d02:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8006d04:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006d08:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8006d0a:	2300      	movs	r3, #0
 8006d0c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8006d10:	f44f 7306 	mov.w	r3, #536	; 0x218
 8006d14:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8006d16:	f107 0308 	add.w	r3, r7, #8
 8006d1a:	4619      	mov	r1, r3
 8006d1c:	6878      	ldr	r0, [r7, #4]
 8006d1e:	f7ff fee1 	bl	8006ae4 <ETH_SetDMAConfig>
}
 8006d22:	bf00      	nop
 8006d24:	3790      	adds	r7, #144	; 0x90
 8006d26:	46bd      	mov	sp, r7
 8006d28:	bd80      	pop	{r7, pc}

08006d2a <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8006d2a:	b480      	push	{r7}
 8006d2c:	b085      	sub	sp, #20
 8006d2e:	af00      	add	r7, sp, #0
 8006d30:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8006d32:	2300      	movs	r3, #0
 8006d34:	60fb      	str	r3, [r7, #12]
 8006d36:	e01d      	b.n	8006d74 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	68d9      	ldr	r1, [r3, #12]
 8006d3c:	68fa      	ldr	r2, [r7, #12]
 8006d3e:	4613      	mov	r3, r2
 8006d40:	005b      	lsls	r3, r3, #1
 8006d42:	4413      	add	r3, r2
 8006d44:	00db      	lsls	r3, r3, #3
 8006d46:	440b      	add	r3, r1
 8006d48:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8006d4a:	68bb      	ldr	r3, [r7, #8]
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8006d50:	68bb      	ldr	r3, [r7, #8]
 8006d52:	2200      	movs	r2, #0
 8006d54:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8006d56:	68bb      	ldr	r3, [r7, #8]
 8006d58:	2200      	movs	r2, #0
 8006d5a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8006d5c:	68bb      	ldr	r3, [r7, #8]
 8006d5e:	2200      	movs	r2, #0
 8006d60:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8006d62:	68b9      	ldr	r1, [r7, #8]
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	68fa      	ldr	r2, [r7, #12]
 8006d68:	3206      	adds	r2, #6
 8006d6a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	3301      	adds	r3, #1
 8006d72:	60fb      	str	r3, [r7, #12]
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	2b03      	cmp	r3, #3
 8006d78:	d9de      	bls.n	8006d38 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d88:	461a      	mov	r2, r3
 8006d8a:	2303      	movs	r3, #3
 8006d8c:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	68da      	ldr	r2, [r3, #12]
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d9c:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	68da      	ldr	r2, [r3, #12]
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006dac:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 8006db0:	bf00      	nop
 8006db2:	3714      	adds	r7, #20
 8006db4:	46bd      	mov	sp, r7
 8006db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dba:	4770      	bx	lr

08006dbc <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8006dbc:	b480      	push	{r7}
 8006dbe:	b085      	sub	sp, #20
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8006dc4:	2300      	movs	r3, #0
 8006dc6:	60fb      	str	r3, [r7, #12]
 8006dc8:	e023      	b.n	8006e12 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	6919      	ldr	r1, [r3, #16]
 8006dce:	68fa      	ldr	r2, [r7, #12]
 8006dd0:	4613      	mov	r3, r2
 8006dd2:	005b      	lsls	r3, r3, #1
 8006dd4:	4413      	add	r3, r2
 8006dd6:	00db      	lsls	r3, r3, #3
 8006dd8:	440b      	add	r3, r1
 8006dda:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8006ddc:	68bb      	ldr	r3, [r7, #8]
 8006dde:	2200      	movs	r2, #0
 8006de0:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8006de2:	68bb      	ldr	r3, [r7, #8]
 8006de4:	2200      	movs	r2, #0
 8006de6:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8006de8:	68bb      	ldr	r3, [r7, #8]
 8006dea:	2200      	movs	r2, #0
 8006dec:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8006dee:	68bb      	ldr	r3, [r7, #8]
 8006df0:	2200      	movs	r2, #0
 8006df2:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8006df4:	68bb      	ldr	r3, [r7, #8]
 8006df6:	2200      	movs	r2, #0
 8006df8:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8006dfa:	68bb      	ldr	r3, [r7, #8]
 8006dfc:	2200      	movs	r2, #0
 8006dfe:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8006e00:	68b9      	ldr	r1, [r7, #8]
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	68fa      	ldr	r2, [r7, #12]
 8006e06:	3212      	adds	r2, #18
 8006e08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	3301      	adds	r3, #1
 8006e10:	60fb      	str	r3, [r7, #12]
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	2b03      	cmp	r3, #3
 8006e16:	d9d8      	bls.n	8006dca <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	2200      	movs	r2, #0
 8006e22:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2200      	movs	r2, #0
 8006e28:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2200      	movs	r2, #0
 8006e34:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e3e:	461a      	mov	r2, r3
 8006e40:	2303      	movs	r3, #3
 8006e42:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	691a      	ldr	r2, [r3, #16]
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e52:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	691b      	ldr	r3, [r3, #16]
 8006e5a:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e66:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 8006e6a:	bf00      	nop
 8006e6c:	3714      	adds	r7, #20
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e74:	4770      	bx	lr
	...

08006e78 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8006e78:	b480      	push	{r7}
 8006e7a:	b08d      	sub	sp, #52	; 0x34
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	60f8      	str	r0, [r7, #12]
 8006e80:	60b9      	str	r1, [r7, #8]
 8006e82:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	3318      	adds	r3, #24
 8006e88:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8006e8a:	697b      	ldr	r3, [r7, #20]
 8006e8c:	691b      	ldr	r3, [r3, #16]
 8006e8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8006e90:	697b      	ldr	r3, [r7, #20]
 8006e92:	691b      	ldr	r3, [r3, #16]
 8006e94:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 8006e96:	2300      	movs	r3, #0
 8006e98:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8006e9a:	697b      	ldr	r3, [r7, #20]
 8006e9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006e9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ea2:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8006ea4:	68bb      	ldr	r3, [r7, #8]
 8006ea6:	689b      	ldr	r3, [r3, #8]
 8006ea8:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 8006eaa:	2300      	movs	r3, #0
 8006eac:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8006eae:	6a3b      	ldr	r3, [r7, #32]
 8006eb0:	68db      	ldr	r3, [r3, #12]
 8006eb2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006eb6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006eba:	d007      	beq.n	8006ecc <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8006ebc:	697a      	ldr	r2, [r7, #20]
 8006ebe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ec0:	3304      	adds	r3, #4
 8006ec2:	009b      	lsls	r3, r3, #2
 8006ec4:	4413      	add	r3, r2
 8006ec6:	685b      	ldr	r3, [r3, #4]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d001      	beq.n	8006ed0 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8006ecc:	2302      	movs	r3, #2
 8006ece:	e259      	b.n	8007384 <ETH_Prepare_Tx_Descriptors+0x50c>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8006ed0:	68bb      	ldr	r3, [r7, #8]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	f003 0304 	and.w	r3, r3, #4
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d044      	beq.n	8006f66 <ETH_Prepare_Tx_Descriptors+0xee>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 8006edc:	6a3b      	ldr	r3, [r7, #32]
 8006ede:	68da      	ldr	r2, [r3, #12]
 8006ee0:	4b75      	ldr	r3, [pc, #468]	; (80070b8 <ETH_Prepare_Tx_Descriptors+0x240>)
 8006ee2:	4013      	ands	r3, r2
 8006ee4:	68ba      	ldr	r2, [r7, #8]
 8006ee6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006ee8:	431a      	orrs	r2, r3
 8006eea:	6a3b      	ldr	r3, [r7, #32]
 8006eec:	60da      	str	r2, [r3, #12]
    /* Set vlan tag valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 8006eee:	6a3b      	ldr	r3, [r7, #32]
 8006ef0:	68db      	ldr	r3, [r3, #12]
 8006ef2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006ef6:	6a3b      	ldr	r3, [r7, #32]
 8006ef8:	60da      	str	r2, [r3, #12]
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8006f08:	661a      	str	r2, [r3, #96]	; 0x60

    /* if inner VLAN is enabled */
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != (uint32_t)RESET)
 8006f0a:	68bb      	ldr	r3, [r7, #8]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	f003 0308 	and.w	r3, r3, #8
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d027      	beq.n	8006f66 <ETH_Prepare_Tx_Descriptors+0xee>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 8006f16:	6a3b      	ldr	r3, [r7, #32]
 8006f18:	689b      	ldr	r3, [r3, #8]
 8006f1a:	b29a      	uxth	r2, r3
 8006f1c:	68bb      	ldr	r3, [r7, #8]
 8006f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f20:	041b      	lsls	r3, r3, #16
 8006f22:	431a      	orrs	r2, r3
 8006f24:	6a3b      	ldr	r3, [r7, #32]
 8006f26:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 8006f28:	6a3b      	ldr	r3, [r7, #32]
 8006f2a:	68db      	ldr	r3, [r3, #12]
 8006f2c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8006f30:	6a3b      	ldr	r3, [r7, #32]
 8006f32:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 8006f34:	6a3b      	ldr	r3, [r7, #32]
 8006f36:	68db      	ldr	r3, [r3, #12]
 8006f38:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006f3c:	68bb      	ldr	r3, [r7, #8]
 8006f3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f40:	431a      	orrs	r2, r3
 8006f42:	6a3b      	ldr	r3, [r7, #32]
 8006f44:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8006f54:	665a      	str	r2, [r3, #100]	; 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8006f64:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* if tcp segmentation is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8006f66:	68bb      	ldr	r3, [r7, #8]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	f003 0310 	and.w	r3, r3, #16
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d00e      	beq.n	8006f90 <ETH_Prepare_Tx_Descriptors+0x118>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 8006f72:	6a3b      	ldr	r3, [r7, #32]
 8006f74:	689a      	ldr	r2, [r3, #8]
 8006f76:	4b51      	ldr	r3, [pc, #324]	; (80070bc <ETH_Prepare_Tx_Descriptors+0x244>)
 8006f78:	4013      	ands	r3, r2
 8006f7a:	68ba      	ldr	r2, [r7, #8]
 8006f7c:	6992      	ldr	r2, [r2, #24]
 8006f7e:	431a      	orrs	r2, r3
 8006f80:	6a3b      	ldr	r3, [r7, #32]
 8006f82:	609a      	str	r2, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 8006f84:	6a3b      	ldr	r3, [r7, #32]
 8006f86:	68db      	ldr	r3, [r3, #12]
 8006f88:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8006f8c:	6a3b      	ldr	r3, [r7, #32]
 8006f8e:	60da      	str	r2, [r3, #12]
  }

  if ((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8006f90:	68bb      	ldr	r3, [r7, #8]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	f003 0304 	and.w	r3, r3, #4
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d105      	bne.n	8006fa8 <ETH_Prepare_Tx_Descriptors+0x130>
      || (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET))
 8006f9c:	68bb      	ldr	r3, [r7, #8]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	f003 0310 	and.w	r3, r3, #16
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d036      	beq.n	8007016 <ETH_Prepare_Tx_Descriptors+0x19e>
  {
    /* Set as context descriptor */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 8006fa8:	6a3b      	ldr	r3, [r7, #32]
 8006faa:	68db      	ldr	r3, [r3, #12]
 8006fac:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006fb0:	6a3b      	ldr	r3, [r7, #32]
 8006fb2:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8006fb4:	f3bf 8f5f 	dmb	sy
}
 8006fb8:	bf00      	nop
    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8006fba:	6a3b      	ldr	r3, [r7, #32]
 8006fbc:	68db      	ldr	r3, [r3, #12]
 8006fbe:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8006fc2:	6a3b      	ldr	r3, [r7, #32]
 8006fc4:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8006fc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fc8:	3301      	adds	r3, #1
 8006fca:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006fcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fce:	2b03      	cmp	r3, #3
 8006fd0:	d902      	bls.n	8006fd8 <ETH_Prepare_Tx_Descriptors+0x160>
 8006fd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fd4:	3b04      	subs	r3, #4
 8006fd6:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8006fd8:	697b      	ldr	r3, [r7, #20]
 8006fda:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006fdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fe0:	623b      	str	r3, [r7, #32]

    descnbr += 1U;
 8006fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fe4:	3301      	adds	r3, #1
 8006fe6:	627b      	str	r3, [r7, #36]	; 0x24

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if (READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8006fe8:	6a3b      	ldr	r3, [r7, #32]
 8006fea:	68db      	ldr	r3, [r3, #12]
 8006fec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006ff0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006ff4:	d10f      	bne.n	8007016 <ETH_Prepare_Tx_Descriptors+0x19e>
    {
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8006ff6:	697b      	ldr	r3, [r7, #20]
 8006ff8:	693a      	ldr	r2, [r7, #16]
 8006ffa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ffe:	623b      	str	r3, [r7, #32]
  __ASM volatile ("dmb 0xF":::"memory");
 8007000:	f3bf 8f5f 	dmb	sy
}
 8007004:	bf00      	nop
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();
      /* Clear own bit */
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8007006:	6a3b      	ldr	r3, [r7, #32]
 8007008:	68db      	ldr	r3, [r3, #12]
 800700a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800700e:	6a3b      	ldr	r3, [r7, #32]
 8007010:	60da      	str	r2, [r3, #12]

      return HAL_ETH_ERROR_BUSY;
 8007012:	2302      	movs	r3, #2
 8007014:	e1b6      	b.n	8007384 <ETH_Prepare_Tx_Descriptors+0x50c>

  /***************************************************************************/
  /*****************    Normal descriptors configuration     *****************/
  /***************************************************************************/

  descnbr += 1U;
 8007016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007018:	3301      	adds	r3, #1
 800701a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 800701c:	69fb      	ldr	r3, [r7, #28]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	461a      	mov	r2, r3
 8007022:	6a3b      	ldr	r3, [r7, #32]
 8007024:	601a      	str	r2, [r3, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8007026:	6a3b      	ldr	r3, [r7, #32]
 8007028:	689a      	ldr	r2, [r3, #8]
 800702a:	4b24      	ldr	r3, [pc, #144]	; (80070bc <ETH_Prepare_Tx_Descriptors+0x244>)
 800702c:	4013      	ands	r3, r2
 800702e:	69fa      	ldr	r2, [r7, #28]
 8007030:	6852      	ldr	r2, [r2, #4]
 8007032:	431a      	orrs	r2, r3
 8007034:	6a3b      	ldr	r3, [r7, #32]
 8007036:	609a      	str	r2, [r3, #8]

  if (txbuffer->next != NULL)
 8007038:	69fb      	ldr	r3, [r7, #28]
 800703a:	689b      	ldr	r3, [r3, #8]
 800703c:	2b00      	cmp	r3, #0
 800703e:	d012      	beq.n	8007066 <ETH_Prepare_Tx_Descriptors+0x1ee>
  {
    txbuffer = txbuffer->next;
 8007040:	69fb      	ldr	r3, [r7, #28]
 8007042:	689b      	ldr	r3, [r3, #8]
 8007044:	61fb      	str	r3, [r7, #28]
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8007046:	69fb      	ldr	r3, [r7, #28]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	461a      	mov	r2, r3
 800704c:	6a3b      	ldr	r3, [r7, #32]
 800704e:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8007050:	6a3b      	ldr	r3, [r7, #32]
 8007052:	689a      	ldr	r2, [r3, #8]
 8007054:	4b1a      	ldr	r3, [pc, #104]	; (80070c0 <ETH_Prepare_Tx_Descriptors+0x248>)
 8007056:	4013      	ands	r3, r2
 8007058:	69fa      	ldr	r2, [r7, #28]
 800705a:	6852      	ldr	r2, [r2, #4]
 800705c:	0412      	lsls	r2, r2, #16
 800705e:	431a      	orrs	r2, r3
 8007060:	6a3b      	ldr	r3, [r7, #32]
 8007062:	609a      	str	r2, [r3, #8]
 8007064:	e008      	b.n	8007078 <ETH_Prepare_Tx_Descriptors+0x200>
  }
  else
  {
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8007066:	6a3b      	ldr	r3, [r7, #32]
 8007068:	2200      	movs	r2, #0
 800706a:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 800706c:	6a3b      	ldr	r3, [r7, #32]
 800706e:	689a      	ldr	r2, [r3, #8]
 8007070:	4b13      	ldr	r3, [pc, #76]	; (80070c0 <ETH_Prepare_Tx_Descriptors+0x248>)
 8007072:	4013      	ands	r3, r2
 8007074:	6a3a      	ldr	r2, [r7, #32]
 8007076:	6093      	str	r3, [r2, #8]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8007078:	68bb      	ldr	r3, [r7, #8]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	f003 0310 	and.w	r3, r3, #16
 8007080:	2b00      	cmp	r3, #0
 8007082:	d021      	beq.n	80070c8 <ETH_Prepare_Tx_Descriptors+0x250>
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 8007084:	6a3b      	ldr	r3, [r7, #32]
 8007086:	68db      	ldr	r3, [r3, #12]
 8007088:	f423 02f0 	bic.w	r2, r3, #7864320	; 0x780000
 800708c:	68bb      	ldr	r3, [r7, #8]
 800708e:	6a1b      	ldr	r3, [r3, #32]
 8007090:	04db      	lsls	r3, r3, #19
 8007092:	431a      	orrs	r2, r3
 8007094:	6a3b      	ldr	r3, [r7, #32]
 8007096:	60da      	str	r2, [r3, #12]
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8007098:	6a3b      	ldr	r3, [r7, #32]
 800709a:	68da      	ldr	r2, [r3, #12]
 800709c:	4b09      	ldr	r3, [pc, #36]	; (80070c4 <ETH_Prepare_Tx_Descriptors+0x24c>)
 800709e:	4013      	ands	r3, r2
 80070a0:	68ba      	ldr	r2, [r7, #8]
 80070a2:	69d2      	ldr	r2, [r2, #28]
 80070a4:	431a      	orrs	r2, r3
 80070a6:	6a3b      	ldr	r3, [r7, #32]
 80070a8:	60da      	str	r2, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 80070aa:	6a3b      	ldr	r3, [r7, #32]
 80070ac:	68db      	ldr	r3, [r3, #12]
 80070ae:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80070b2:	6a3b      	ldr	r3, [r7, #32]
 80070b4:	60da      	str	r2, [r3, #12]
 80070b6:	e02e      	b.n	8007116 <ETH_Prepare_Tx_Descriptors+0x29e>
 80070b8:	ffff0000 	.word	0xffff0000
 80070bc:	ffffc000 	.word	0xffffc000
 80070c0:	c000ffff 	.word	0xc000ffff
 80070c4:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 80070c8:	6a3b      	ldr	r3, [r7, #32]
 80070ca:	68da      	ldr	r2, [r3, #12]
 80070cc:	4b7b      	ldr	r3, [pc, #492]	; (80072bc <ETH_Prepare_Tx_Descriptors+0x444>)
 80070ce:	4013      	ands	r3, r2
 80070d0:	68ba      	ldr	r2, [r7, #8]
 80070d2:	6852      	ldr	r2, [r2, #4]
 80070d4:	431a      	orrs	r2, r3
 80070d6:	6a3b      	ldr	r3, [r7, #32]
 80070d8:	60da      	str	r2, [r3, #12]

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 80070da:	68bb      	ldr	r3, [r7, #8]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	f003 0301 	and.w	r3, r3, #1
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d008      	beq.n	80070f8 <ETH_Prepare_Tx_Descriptors+0x280>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 80070e6:	6a3b      	ldr	r3, [r7, #32]
 80070e8:	68db      	ldr	r3, [r3, #12]
 80070ea:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80070ee:	68bb      	ldr	r3, [r7, #8]
 80070f0:	695b      	ldr	r3, [r3, #20]
 80070f2:	431a      	orrs	r2, r3
 80070f4:	6a3b      	ldr	r3, [r7, #32]
 80070f6:	60da      	str	r2, [r3, #12]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != (uint32_t)RESET)
 80070f8:	68bb      	ldr	r3, [r7, #8]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	f003 0320 	and.w	r3, r3, #32
 8007100:	2b00      	cmp	r3, #0
 8007102:	d008      	beq.n	8007116 <ETH_Prepare_Tx_Descriptors+0x29e>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 8007104:	6a3b      	ldr	r3, [r7, #32]
 8007106:	68db      	ldr	r3, [r3, #12]
 8007108:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800710c:	68bb      	ldr	r3, [r7, #8]
 800710e:	691b      	ldr	r3, [r3, #16]
 8007110:	431a      	orrs	r2, r3
 8007112:	6a3b      	ldr	r3, [r7, #32]
 8007114:	60da      	str	r2, [r3, #12]
    }
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8007116:	68bb      	ldr	r3, [r7, #8]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	f003 0304 	and.w	r3, r3, #4
 800711e:	2b00      	cmp	r3, #0
 8007120:	d008      	beq.n	8007134 <ETH_Prepare_Tx_Descriptors+0x2bc>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 8007122:	6a3b      	ldr	r3, [r7, #32]
 8007124:	689b      	ldr	r3, [r3, #8]
 8007126:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800712a:	68bb      	ldr	r3, [r7, #8]
 800712c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800712e:	431a      	orrs	r2, r3
 8007130:	6a3b      	ldr	r3, [r7, #32]
 8007132:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8007134:	6a3b      	ldr	r3, [r7, #32]
 8007136:	68db      	ldr	r3, [r3, #12]
 8007138:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800713c:	6a3b      	ldr	r3, [r7, #32]
 800713e:	60da      	str	r2, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8007140:	6a3b      	ldr	r3, [r7, #32]
 8007142:	68db      	ldr	r3, [r3, #12]
 8007144:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8007148:	6a3b      	ldr	r3, [r7, #32]
 800714a:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 800714c:	f3bf 8f5f 	dmb	sy
}
 8007150:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8007152:	6a3b      	ldr	r3, [r7, #32]
 8007154:	68db      	ldr	r3, [r3, #12]
 8007156:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800715a:	6a3b      	ldr	r3, [r7, #32]
 800715c:	60da      	str	r2, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != (uint32_t)RESET)
 800715e:	68bb      	ldr	r3, [r7, #8]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	f003 0302 	and.w	r3, r3, #2
 8007166:	2b00      	cmp	r3, #0
 8007168:	f000 80da 	beq.w	8007320 <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 800716c:	6a3b      	ldr	r3, [r7, #32]
 800716e:	68db      	ldr	r3, [r3, #12]
 8007170:	f023 7260 	bic.w	r2, r3, #58720256	; 0x3800000
 8007174:	68bb      	ldr	r3, [r7, #8]
 8007176:	68db      	ldr	r3, [r3, #12]
 8007178:	431a      	orrs	r2, r3
 800717a:	6a3b      	ldr	r3, [r7, #32]
 800717c:	60da      	str	r2, [r3, #12]
  }

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 800717e:	e0cf      	b.n	8007320 <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8007180:	6a3b      	ldr	r3, [r7, #32]
 8007182:	68db      	ldr	r3, [r3, #12]
 8007184:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007188:	6a3b      	ldr	r3, [r7, #32]
 800718a:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 800718c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800718e:	3301      	adds	r3, #1
 8007190:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007192:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007194:	2b03      	cmp	r3, #3
 8007196:	d902      	bls.n	800719e <ETH_Prepare_Tx_Descriptors+0x326>
 8007198:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800719a:	3b04      	subs	r3, #4
 800719c:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800719e:	697b      	ldr	r3, [r7, #20]
 80071a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80071a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071a6:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 80071a8:	6a3b      	ldr	r3, [r7, #32]
 80071aa:	68db      	ldr	r3, [r3, #12]
 80071ac:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80071b0:	6a3b      	ldr	r3, [r7, #32]
 80071b2:	60da      	str	r2, [r3, #12]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN)
 80071b4:	6a3b      	ldr	r3, [r7, #32]
 80071b6:	68db      	ldr	r3, [r3, #12]
 80071b8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80071bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80071c0:	d007      	beq.n	80071d2 <ETH_Prepare_Tx_Descriptors+0x35a>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80071c2:	697a      	ldr	r2, [r7, #20]
 80071c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071c6:	3304      	adds	r3, #4
 80071c8:	009b      	lsls	r3, r3, #2
 80071ca:	4413      	add	r3, r2
 80071cc:	685b      	ldr	r3, [r3, #4]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d029      	beq.n	8007226 <ETH_Prepare_Tx_Descriptors+0x3ae>
    {
      descidx = firstdescidx;
 80071d2:	693b      	ldr	r3, [r7, #16]
 80071d4:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80071d6:	697b      	ldr	r3, [r7, #20]
 80071d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80071da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071de:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 80071e0:	2300      	movs	r3, #0
 80071e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80071e4:	e019      	b.n	800721a <ETH_Prepare_Tx_Descriptors+0x3a2>
  __ASM volatile ("dmb 0xF":::"memory");
 80071e6:	f3bf 8f5f 	dmb	sy
}
 80071ea:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 80071ec:	6a3b      	ldr	r3, [r7, #32]
 80071ee:	68db      	ldr	r3, [r3, #12]
 80071f0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80071f4:	6a3b      	ldr	r3, [r7, #32]
 80071f6:	60da      	str	r2, [r3, #12]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 80071f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071fa:	3301      	adds	r3, #1
 80071fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80071fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007200:	2b03      	cmp	r3, #3
 8007202:	d902      	bls.n	800720a <ETH_Prepare_Tx_Descriptors+0x392>
 8007204:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007206:	3b04      	subs	r3, #4
 8007208:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800720a:	697b      	ldr	r3, [r7, #20]
 800720c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800720e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007212:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 8007214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007216:	3301      	adds	r3, #1
 8007218:	62bb      	str	r3, [r7, #40]	; 0x28
 800721a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800721c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800721e:	429a      	cmp	r2, r3
 8007220:	d3e1      	bcc.n	80071e6 <ETH_Prepare_Tx_Descriptors+0x36e>
      }

      return HAL_ETH_ERROR_BUSY;
 8007222:	2302      	movs	r3, #2
 8007224:	e0ae      	b.n	8007384 <ETH_Prepare_Tx_Descriptors+0x50c>
    }

    descnbr += 1U;
 8007226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007228:	3301      	adds	r3, #1
 800722a:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 800722c:	69fb      	ldr	r3, [r7, #28]
 800722e:	689b      	ldr	r3, [r3, #8]
 8007230:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8007232:	69fb      	ldr	r3, [r7, #28]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	461a      	mov	r2, r3
 8007238:	6a3b      	ldr	r3, [r7, #32]
 800723a:	601a      	str	r2, [r3, #0]
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 800723c:	6a3b      	ldr	r3, [r7, #32]
 800723e:	689a      	ldr	r2, [r3, #8]
 8007240:	4b1f      	ldr	r3, [pc, #124]	; (80072c0 <ETH_Prepare_Tx_Descriptors+0x448>)
 8007242:	4013      	ands	r3, r2
 8007244:	69fa      	ldr	r2, [r7, #28]
 8007246:	6852      	ldr	r2, [r2, #4]
 8007248:	431a      	orrs	r2, r3
 800724a:	6a3b      	ldr	r3, [r7, #32]
 800724c:	609a      	str	r2, [r3, #8]

    if (txbuffer->next != NULL)
 800724e:	69fb      	ldr	r3, [r7, #28]
 8007250:	689b      	ldr	r3, [r3, #8]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d012      	beq.n	800727c <ETH_Prepare_Tx_Descriptors+0x404>
    {
      /* Get the next Tx buffer in the list */
      txbuffer = txbuffer->next;
 8007256:	69fb      	ldr	r3, [r7, #28]
 8007258:	689b      	ldr	r3, [r3, #8]
 800725a:	61fb      	str	r3, [r7, #28]
      /* Set buffer 2 address */
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 800725c:	69fb      	ldr	r3, [r7, #28]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	461a      	mov	r2, r3
 8007262:	6a3b      	ldr	r3, [r7, #32]
 8007264:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8007266:	6a3b      	ldr	r3, [r7, #32]
 8007268:	689a      	ldr	r2, [r3, #8]
 800726a:	4b16      	ldr	r3, [pc, #88]	; (80072c4 <ETH_Prepare_Tx_Descriptors+0x44c>)
 800726c:	4013      	ands	r3, r2
 800726e:	69fa      	ldr	r2, [r7, #28]
 8007270:	6852      	ldr	r2, [r2, #4]
 8007272:	0412      	lsls	r2, r2, #16
 8007274:	431a      	orrs	r2, r3
 8007276:	6a3b      	ldr	r3, [r7, #32]
 8007278:	609a      	str	r2, [r3, #8]
 800727a:	e008      	b.n	800728e <ETH_Prepare_Tx_Descriptors+0x416>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0);
 800727c:	6a3b      	ldr	r3, [r7, #32]
 800727e:	2200      	movs	r2, #0
 8007280:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8007282:	6a3b      	ldr	r3, [r7, #32]
 8007284:	689a      	ldr	r2, [r3, #8]
 8007286:	4b0f      	ldr	r3, [pc, #60]	; (80072c4 <ETH_Prepare_Tx_Descriptors+0x44c>)
 8007288:	4013      	ands	r3, r2
 800728a:	6a3a      	ldr	r2, [r7, #32]
 800728c:	6093      	str	r3, [r2, #8]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 800728e:	68bb      	ldr	r3, [r7, #8]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	f003 0310 	and.w	r3, r3, #16
 8007296:	2b00      	cmp	r3, #0
 8007298:	d018      	beq.n	80072cc <ETH_Prepare_Tx_Descriptors+0x454>
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 800729a:	6a3b      	ldr	r3, [r7, #32]
 800729c:	68da      	ldr	r2, [r3, #12]
 800729e:	4b0a      	ldr	r3, [pc, #40]	; (80072c8 <ETH_Prepare_Tx_Descriptors+0x450>)
 80072a0:	4013      	ands	r3, r2
 80072a2:	68ba      	ldr	r2, [r7, #8]
 80072a4:	69d2      	ldr	r2, [r2, #28]
 80072a6:	431a      	orrs	r2, r3
 80072a8:	6a3b      	ldr	r3, [r7, #32]
 80072aa:	60da      	str	r2, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 80072ac:	6a3b      	ldr	r3, [r7, #32]
 80072ae:	68db      	ldr	r3, [r3, #12]
 80072b0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80072b4:	6a3b      	ldr	r3, [r7, #32]
 80072b6:	60da      	str	r2, [r3, #12]
 80072b8:	e020      	b.n	80072fc <ETH_Prepare_Tx_Descriptors+0x484>
 80072ba:	bf00      	nop
 80072bc:	ffff8000 	.word	0xffff8000
 80072c0:	ffffc000 	.word	0xffffc000
 80072c4:	c000ffff 	.word	0xc000ffff
 80072c8:	fffc0000 	.word	0xfffc0000
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 80072cc:	6a3b      	ldr	r3, [r7, #32]
 80072ce:	68da      	ldr	r2, [r3, #12]
 80072d0:	4b2f      	ldr	r3, [pc, #188]	; (8007390 <ETH_Prepare_Tx_Descriptors+0x518>)
 80072d2:	4013      	ands	r3, r2
 80072d4:	68ba      	ldr	r2, [r7, #8]
 80072d6:	6852      	ldr	r2, [r2, #4]
 80072d8:	431a      	orrs	r2, r3
 80072da:	6a3b      	ldr	r3, [r7, #32]
 80072dc:	60da      	str	r2, [r3, #12]

      if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 80072de:	68bb      	ldr	r3, [r7, #8]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	f003 0301 	and.w	r3, r3, #1
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d008      	beq.n	80072fc <ETH_Prepare_Tx_Descriptors+0x484>
      {
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 80072ea:	6a3b      	ldr	r3, [r7, #32]
 80072ec:	68db      	ldr	r3, [r3, #12]
 80072ee:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80072f2:	68bb      	ldr	r3, [r7, #8]
 80072f4:	695b      	ldr	r3, [r3, #20]
 80072f6:	431a      	orrs	r2, r3
 80072f8:	6a3b      	ldr	r3, [r7, #32]
 80072fa:	60da      	str	r2, [r3, #12]
      }
    }

    bd_count += 1U;
 80072fc:	69bb      	ldr	r3, [r7, #24]
 80072fe:	3301      	adds	r3, #1
 8007300:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 8007302:	f3bf 8f5f 	dmb	sy
}
 8007306:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8007308:	6a3b      	ldr	r3, [r7, #32]
 800730a:	68db      	ldr	r3, [r3, #12]
 800730c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8007310:	6a3b      	ldr	r3, [r7, #32]
 8007312:	60da      	str	r2, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8007314:	6a3b      	ldr	r3, [r7, #32]
 8007316:	68db      	ldr	r3, [r3, #12]
 8007318:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800731c:	6a3b      	ldr	r3, [r7, #32]
 800731e:	60da      	str	r2, [r3, #12]
  while (txbuffer->next != NULL)
 8007320:	69fb      	ldr	r3, [r7, #28]
 8007322:	689b      	ldr	r3, [r3, #8]
 8007324:	2b00      	cmp	r3, #0
 8007326:	f47f af2b 	bne.w	8007180 <ETH_Prepare_Tx_Descriptors+0x308>
  }

  if (ItMode != ((uint32_t)RESET))
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	2b00      	cmp	r3, #0
 800732e:	d006      	beq.n	800733e <ETH_Prepare_Tx_Descriptors+0x4c6>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8007330:	6a3b      	ldr	r3, [r7, #32]
 8007332:	689b      	ldr	r3, [r3, #8]
 8007334:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8007338:	6a3b      	ldr	r3, [r7, #32]
 800733a:	609a      	str	r2, [r3, #8]
 800733c:	e005      	b.n	800734a <ETH_Prepare_Tx_Descriptors+0x4d2>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 800733e:	6a3b      	ldr	r3, [r7, #32]
 8007340:	689b      	ldr	r3, [r3, #8]
 8007342:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007346:	6a3b      	ldr	r3, [r7, #32]
 8007348:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 800734a:	6a3b      	ldr	r3, [r7, #32]
 800734c:	68db      	ldr	r3, [r3, #12]
 800734e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007352:	6a3b      	ldr	r3, [r7, #32]
 8007354:	60da      	str	r2, [r3, #12]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8007356:	697b      	ldr	r3, [r7, #20]
 8007358:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800735a:	6979      	ldr	r1, [r7, #20]
 800735c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800735e:	3304      	adds	r3, #4
 8007360:	009b      	lsls	r3, r3, #2
 8007362:	440b      	add	r3, r1
 8007364:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8007366:	697b      	ldr	r3, [r7, #20]
 8007368:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800736a:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800736c:	b672      	cpsid	i
}
 800736e:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8007370:	697b      	ldr	r3, [r7, #20]
 8007372:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007374:	69bb      	ldr	r3, [r7, #24]
 8007376:	4413      	add	r3, r2
 8007378:	1c5a      	adds	r2, r3, #1
 800737a:	697b      	ldr	r3, [r7, #20]
 800737c:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 800737e:	b662      	cpsie	i
}
 8007380:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8007382:	2300      	movs	r3, #0
}
 8007384:	4618      	mov	r0, r3
 8007386:	3734      	adds	r7, #52	; 0x34
 8007388:	46bd      	mov	sp, r7
 800738a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738e:	4770      	bx	lr
 8007390:	ffff8000 	.word	0xffff8000

08007394 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007394:	b480      	push	{r7}
 8007396:	b089      	sub	sp, #36	; 0x24
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
 800739c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800739e:	2300      	movs	r3, #0
 80073a0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80073a2:	4b89      	ldr	r3, [pc, #548]	; (80075c8 <HAL_GPIO_Init+0x234>)
 80073a4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80073a6:	e194      	b.n	80076d2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80073a8:	683b      	ldr	r3, [r7, #0]
 80073aa:	681a      	ldr	r2, [r3, #0]
 80073ac:	2101      	movs	r1, #1
 80073ae:	69fb      	ldr	r3, [r7, #28]
 80073b0:	fa01 f303 	lsl.w	r3, r1, r3
 80073b4:	4013      	ands	r3, r2
 80073b6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80073b8:	693b      	ldr	r3, [r7, #16]
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	f000 8186 	beq.w	80076cc <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80073c0:	683b      	ldr	r3, [r7, #0]
 80073c2:	685b      	ldr	r3, [r3, #4]
 80073c4:	f003 0303 	and.w	r3, r3, #3
 80073c8:	2b01      	cmp	r3, #1
 80073ca:	d005      	beq.n	80073d8 <HAL_GPIO_Init+0x44>
 80073cc:	683b      	ldr	r3, [r7, #0]
 80073ce:	685b      	ldr	r3, [r3, #4]
 80073d0:	f003 0303 	and.w	r3, r3, #3
 80073d4:	2b02      	cmp	r3, #2
 80073d6:	d130      	bne.n	800743a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	689b      	ldr	r3, [r3, #8]
 80073dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80073de:	69fb      	ldr	r3, [r7, #28]
 80073e0:	005b      	lsls	r3, r3, #1
 80073e2:	2203      	movs	r2, #3
 80073e4:	fa02 f303 	lsl.w	r3, r2, r3
 80073e8:	43db      	mvns	r3, r3
 80073ea:	69ba      	ldr	r2, [r7, #24]
 80073ec:	4013      	ands	r3, r2
 80073ee:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80073f0:	683b      	ldr	r3, [r7, #0]
 80073f2:	68da      	ldr	r2, [r3, #12]
 80073f4:	69fb      	ldr	r3, [r7, #28]
 80073f6:	005b      	lsls	r3, r3, #1
 80073f8:	fa02 f303 	lsl.w	r3, r2, r3
 80073fc:	69ba      	ldr	r2, [r7, #24]
 80073fe:	4313      	orrs	r3, r2
 8007400:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	69ba      	ldr	r2, [r7, #24]
 8007406:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	685b      	ldr	r3, [r3, #4]
 800740c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800740e:	2201      	movs	r2, #1
 8007410:	69fb      	ldr	r3, [r7, #28]
 8007412:	fa02 f303 	lsl.w	r3, r2, r3
 8007416:	43db      	mvns	r3, r3
 8007418:	69ba      	ldr	r2, [r7, #24]
 800741a:	4013      	ands	r3, r2
 800741c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800741e:	683b      	ldr	r3, [r7, #0]
 8007420:	685b      	ldr	r3, [r3, #4]
 8007422:	091b      	lsrs	r3, r3, #4
 8007424:	f003 0201 	and.w	r2, r3, #1
 8007428:	69fb      	ldr	r3, [r7, #28]
 800742a:	fa02 f303 	lsl.w	r3, r2, r3
 800742e:	69ba      	ldr	r2, [r7, #24]
 8007430:	4313      	orrs	r3, r2
 8007432:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	69ba      	ldr	r2, [r7, #24]
 8007438:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800743a:	683b      	ldr	r3, [r7, #0]
 800743c:	685b      	ldr	r3, [r3, #4]
 800743e:	f003 0303 	and.w	r3, r3, #3
 8007442:	2b03      	cmp	r3, #3
 8007444:	d017      	beq.n	8007476 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	68db      	ldr	r3, [r3, #12]
 800744a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800744c:	69fb      	ldr	r3, [r7, #28]
 800744e:	005b      	lsls	r3, r3, #1
 8007450:	2203      	movs	r2, #3
 8007452:	fa02 f303 	lsl.w	r3, r2, r3
 8007456:	43db      	mvns	r3, r3
 8007458:	69ba      	ldr	r2, [r7, #24]
 800745a:	4013      	ands	r3, r2
 800745c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800745e:	683b      	ldr	r3, [r7, #0]
 8007460:	689a      	ldr	r2, [r3, #8]
 8007462:	69fb      	ldr	r3, [r7, #28]
 8007464:	005b      	lsls	r3, r3, #1
 8007466:	fa02 f303 	lsl.w	r3, r2, r3
 800746a:	69ba      	ldr	r2, [r7, #24]
 800746c:	4313      	orrs	r3, r2
 800746e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	69ba      	ldr	r2, [r7, #24]
 8007474:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007476:	683b      	ldr	r3, [r7, #0]
 8007478:	685b      	ldr	r3, [r3, #4]
 800747a:	f003 0303 	and.w	r3, r3, #3
 800747e:	2b02      	cmp	r3, #2
 8007480:	d123      	bne.n	80074ca <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007482:	69fb      	ldr	r3, [r7, #28]
 8007484:	08da      	lsrs	r2, r3, #3
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	3208      	adds	r2, #8
 800748a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800748e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007490:	69fb      	ldr	r3, [r7, #28]
 8007492:	f003 0307 	and.w	r3, r3, #7
 8007496:	009b      	lsls	r3, r3, #2
 8007498:	220f      	movs	r2, #15
 800749a:	fa02 f303 	lsl.w	r3, r2, r3
 800749e:	43db      	mvns	r3, r3
 80074a0:	69ba      	ldr	r2, [r7, #24]
 80074a2:	4013      	ands	r3, r2
 80074a4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80074a6:	683b      	ldr	r3, [r7, #0]
 80074a8:	691a      	ldr	r2, [r3, #16]
 80074aa:	69fb      	ldr	r3, [r7, #28]
 80074ac:	f003 0307 	and.w	r3, r3, #7
 80074b0:	009b      	lsls	r3, r3, #2
 80074b2:	fa02 f303 	lsl.w	r3, r2, r3
 80074b6:	69ba      	ldr	r2, [r7, #24]
 80074b8:	4313      	orrs	r3, r2
 80074ba:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80074bc:	69fb      	ldr	r3, [r7, #28]
 80074be:	08da      	lsrs	r2, r3, #3
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	3208      	adds	r2, #8
 80074c4:	69b9      	ldr	r1, [r7, #24]
 80074c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80074d0:	69fb      	ldr	r3, [r7, #28]
 80074d2:	005b      	lsls	r3, r3, #1
 80074d4:	2203      	movs	r2, #3
 80074d6:	fa02 f303 	lsl.w	r3, r2, r3
 80074da:	43db      	mvns	r3, r3
 80074dc:	69ba      	ldr	r2, [r7, #24]
 80074de:	4013      	ands	r3, r2
 80074e0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80074e2:	683b      	ldr	r3, [r7, #0]
 80074e4:	685b      	ldr	r3, [r3, #4]
 80074e6:	f003 0203 	and.w	r2, r3, #3
 80074ea:	69fb      	ldr	r3, [r7, #28]
 80074ec:	005b      	lsls	r3, r3, #1
 80074ee:	fa02 f303 	lsl.w	r3, r2, r3
 80074f2:	69ba      	ldr	r2, [r7, #24]
 80074f4:	4313      	orrs	r3, r2
 80074f6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	69ba      	ldr	r2, [r7, #24]
 80074fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80074fe:	683b      	ldr	r3, [r7, #0]
 8007500:	685b      	ldr	r3, [r3, #4]
 8007502:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007506:	2b00      	cmp	r3, #0
 8007508:	f000 80e0 	beq.w	80076cc <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800750c:	4b2f      	ldr	r3, [pc, #188]	; (80075cc <HAL_GPIO_Init+0x238>)
 800750e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007512:	4a2e      	ldr	r2, [pc, #184]	; (80075cc <HAL_GPIO_Init+0x238>)
 8007514:	f043 0302 	orr.w	r3, r3, #2
 8007518:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800751c:	4b2b      	ldr	r3, [pc, #172]	; (80075cc <HAL_GPIO_Init+0x238>)
 800751e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007522:	f003 0302 	and.w	r3, r3, #2
 8007526:	60fb      	str	r3, [r7, #12]
 8007528:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800752a:	4a29      	ldr	r2, [pc, #164]	; (80075d0 <HAL_GPIO_Init+0x23c>)
 800752c:	69fb      	ldr	r3, [r7, #28]
 800752e:	089b      	lsrs	r3, r3, #2
 8007530:	3302      	adds	r3, #2
 8007532:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007536:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007538:	69fb      	ldr	r3, [r7, #28]
 800753a:	f003 0303 	and.w	r3, r3, #3
 800753e:	009b      	lsls	r3, r3, #2
 8007540:	220f      	movs	r2, #15
 8007542:	fa02 f303 	lsl.w	r3, r2, r3
 8007546:	43db      	mvns	r3, r3
 8007548:	69ba      	ldr	r2, [r7, #24]
 800754a:	4013      	ands	r3, r2
 800754c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	4a20      	ldr	r2, [pc, #128]	; (80075d4 <HAL_GPIO_Init+0x240>)
 8007552:	4293      	cmp	r3, r2
 8007554:	d052      	beq.n	80075fc <HAL_GPIO_Init+0x268>
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	4a1f      	ldr	r2, [pc, #124]	; (80075d8 <HAL_GPIO_Init+0x244>)
 800755a:	4293      	cmp	r3, r2
 800755c:	d031      	beq.n	80075c2 <HAL_GPIO_Init+0x22e>
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	4a1e      	ldr	r2, [pc, #120]	; (80075dc <HAL_GPIO_Init+0x248>)
 8007562:	4293      	cmp	r3, r2
 8007564:	d02b      	beq.n	80075be <HAL_GPIO_Init+0x22a>
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	4a1d      	ldr	r2, [pc, #116]	; (80075e0 <HAL_GPIO_Init+0x24c>)
 800756a:	4293      	cmp	r3, r2
 800756c:	d025      	beq.n	80075ba <HAL_GPIO_Init+0x226>
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	4a1c      	ldr	r2, [pc, #112]	; (80075e4 <HAL_GPIO_Init+0x250>)
 8007572:	4293      	cmp	r3, r2
 8007574:	d01f      	beq.n	80075b6 <HAL_GPIO_Init+0x222>
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	4a1b      	ldr	r2, [pc, #108]	; (80075e8 <HAL_GPIO_Init+0x254>)
 800757a:	4293      	cmp	r3, r2
 800757c:	d019      	beq.n	80075b2 <HAL_GPIO_Init+0x21e>
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	4a1a      	ldr	r2, [pc, #104]	; (80075ec <HAL_GPIO_Init+0x258>)
 8007582:	4293      	cmp	r3, r2
 8007584:	d013      	beq.n	80075ae <HAL_GPIO_Init+0x21a>
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	4a19      	ldr	r2, [pc, #100]	; (80075f0 <HAL_GPIO_Init+0x25c>)
 800758a:	4293      	cmp	r3, r2
 800758c:	d00d      	beq.n	80075aa <HAL_GPIO_Init+0x216>
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	4a18      	ldr	r2, [pc, #96]	; (80075f4 <HAL_GPIO_Init+0x260>)
 8007592:	4293      	cmp	r3, r2
 8007594:	d007      	beq.n	80075a6 <HAL_GPIO_Init+0x212>
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	4a17      	ldr	r2, [pc, #92]	; (80075f8 <HAL_GPIO_Init+0x264>)
 800759a:	4293      	cmp	r3, r2
 800759c:	d101      	bne.n	80075a2 <HAL_GPIO_Init+0x20e>
 800759e:	2309      	movs	r3, #9
 80075a0:	e02d      	b.n	80075fe <HAL_GPIO_Init+0x26a>
 80075a2:	230a      	movs	r3, #10
 80075a4:	e02b      	b.n	80075fe <HAL_GPIO_Init+0x26a>
 80075a6:	2308      	movs	r3, #8
 80075a8:	e029      	b.n	80075fe <HAL_GPIO_Init+0x26a>
 80075aa:	2307      	movs	r3, #7
 80075ac:	e027      	b.n	80075fe <HAL_GPIO_Init+0x26a>
 80075ae:	2306      	movs	r3, #6
 80075b0:	e025      	b.n	80075fe <HAL_GPIO_Init+0x26a>
 80075b2:	2305      	movs	r3, #5
 80075b4:	e023      	b.n	80075fe <HAL_GPIO_Init+0x26a>
 80075b6:	2304      	movs	r3, #4
 80075b8:	e021      	b.n	80075fe <HAL_GPIO_Init+0x26a>
 80075ba:	2303      	movs	r3, #3
 80075bc:	e01f      	b.n	80075fe <HAL_GPIO_Init+0x26a>
 80075be:	2302      	movs	r3, #2
 80075c0:	e01d      	b.n	80075fe <HAL_GPIO_Init+0x26a>
 80075c2:	2301      	movs	r3, #1
 80075c4:	e01b      	b.n	80075fe <HAL_GPIO_Init+0x26a>
 80075c6:	bf00      	nop
 80075c8:	58000080 	.word	0x58000080
 80075cc:	58024400 	.word	0x58024400
 80075d0:	58000400 	.word	0x58000400
 80075d4:	58020000 	.word	0x58020000
 80075d8:	58020400 	.word	0x58020400
 80075dc:	58020800 	.word	0x58020800
 80075e0:	58020c00 	.word	0x58020c00
 80075e4:	58021000 	.word	0x58021000
 80075e8:	58021400 	.word	0x58021400
 80075ec:	58021800 	.word	0x58021800
 80075f0:	58021c00 	.word	0x58021c00
 80075f4:	58022000 	.word	0x58022000
 80075f8:	58022400 	.word	0x58022400
 80075fc:	2300      	movs	r3, #0
 80075fe:	69fa      	ldr	r2, [r7, #28]
 8007600:	f002 0203 	and.w	r2, r2, #3
 8007604:	0092      	lsls	r2, r2, #2
 8007606:	4093      	lsls	r3, r2
 8007608:	69ba      	ldr	r2, [r7, #24]
 800760a:	4313      	orrs	r3, r2
 800760c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800760e:	4938      	ldr	r1, [pc, #224]	; (80076f0 <HAL_GPIO_Init+0x35c>)
 8007610:	69fb      	ldr	r3, [r7, #28]
 8007612:	089b      	lsrs	r3, r3, #2
 8007614:	3302      	adds	r3, #2
 8007616:	69ba      	ldr	r2, [r7, #24]
 8007618:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800761c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007624:	693b      	ldr	r3, [r7, #16]
 8007626:	43db      	mvns	r3, r3
 8007628:	69ba      	ldr	r2, [r7, #24]
 800762a:	4013      	ands	r3, r2
 800762c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800762e:	683b      	ldr	r3, [r7, #0]
 8007630:	685b      	ldr	r3, [r3, #4]
 8007632:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007636:	2b00      	cmp	r3, #0
 8007638:	d003      	beq.n	8007642 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800763a:	69ba      	ldr	r2, [r7, #24]
 800763c:	693b      	ldr	r3, [r7, #16]
 800763e:	4313      	orrs	r3, r2
 8007640:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8007642:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007646:	69bb      	ldr	r3, [r7, #24]
 8007648:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800764a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800764e:	685b      	ldr	r3, [r3, #4]
 8007650:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007652:	693b      	ldr	r3, [r7, #16]
 8007654:	43db      	mvns	r3, r3
 8007656:	69ba      	ldr	r2, [r7, #24]
 8007658:	4013      	ands	r3, r2
 800765a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800765c:	683b      	ldr	r3, [r7, #0]
 800765e:	685b      	ldr	r3, [r3, #4]
 8007660:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007664:	2b00      	cmp	r3, #0
 8007666:	d003      	beq.n	8007670 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8007668:	69ba      	ldr	r2, [r7, #24]
 800766a:	693b      	ldr	r3, [r7, #16]
 800766c:	4313      	orrs	r3, r2
 800766e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8007670:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007674:	69bb      	ldr	r3, [r7, #24]
 8007676:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8007678:	697b      	ldr	r3, [r7, #20]
 800767a:	685b      	ldr	r3, [r3, #4]
 800767c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800767e:	693b      	ldr	r3, [r7, #16]
 8007680:	43db      	mvns	r3, r3
 8007682:	69ba      	ldr	r2, [r7, #24]
 8007684:	4013      	ands	r3, r2
 8007686:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007688:	683b      	ldr	r3, [r7, #0]
 800768a:	685b      	ldr	r3, [r3, #4]
 800768c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007690:	2b00      	cmp	r3, #0
 8007692:	d003      	beq.n	800769c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8007694:	69ba      	ldr	r2, [r7, #24]
 8007696:	693b      	ldr	r3, [r7, #16]
 8007698:	4313      	orrs	r3, r2
 800769a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800769c:	697b      	ldr	r3, [r7, #20]
 800769e:	69ba      	ldr	r2, [r7, #24]
 80076a0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80076a2:	697b      	ldr	r3, [r7, #20]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80076a8:	693b      	ldr	r3, [r7, #16]
 80076aa:	43db      	mvns	r3, r3
 80076ac:	69ba      	ldr	r2, [r7, #24]
 80076ae:	4013      	ands	r3, r2
 80076b0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80076b2:	683b      	ldr	r3, [r7, #0]
 80076b4:	685b      	ldr	r3, [r3, #4]
 80076b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d003      	beq.n	80076c6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80076be:	69ba      	ldr	r2, [r7, #24]
 80076c0:	693b      	ldr	r3, [r7, #16]
 80076c2:	4313      	orrs	r3, r2
 80076c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80076c6:	697b      	ldr	r3, [r7, #20]
 80076c8:	69ba      	ldr	r2, [r7, #24]
 80076ca:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80076cc:	69fb      	ldr	r3, [r7, #28]
 80076ce:	3301      	adds	r3, #1
 80076d0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80076d2:	683b      	ldr	r3, [r7, #0]
 80076d4:	681a      	ldr	r2, [r3, #0]
 80076d6:	69fb      	ldr	r3, [r7, #28]
 80076d8:	fa22 f303 	lsr.w	r3, r2, r3
 80076dc:	2b00      	cmp	r3, #0
 80076de:	f47f ae63 	bne.w	80073a8 <HAL_GPIO_Init+0x14>
  }
}
 80076e2:	bf00      	nop
 80076e4:	bf00      	nop
 80076e6:	3724      	adds	r7, #36	; 0x24
 80076e8:	46bd      	mov	sp, r7
 80076ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ee:	4770      	bx	lr
 80076f0:	58000400 	.word	0x58000400

080076f4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80076f4:	b480      	push	{r7}
 80076f6:	b085      	sub	sp, #20
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	6078      	str	r0, [r7, #4]
 80076fc:	460b      	mov	r3, r1
 80076fe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	691a      	ldr	r2, [r3, #16]
 8007704:	887b      	ldrh	r3, [r7, #2]
 8007706:	4013      	ands	r3, r2
 8007708:	2b00      	cmp	r3, #0
 800770a:	d002      	beq.n	8007712 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800770c:	2301      	movs	r3, #1
 800770e:	73fb      	strb	r3, [r7, #15]
 8007710:	e001      	b.n	8007716 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007712:	2300      	movs	r3, #0
 8007714:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007716:	7bfb      	ldrb	r3, [r7, #15]
}
 8007718:	4618      	mov	r0, r3
 800771a:	3714      	adds	r7, #20
 800771c:	46bd      	mov	sp, r7
 800771e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007722:	4770      	bx	lr

08007724 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007724:	b480      	push	{r7}
 8007726:	b083      	sub	sp, #12
 8007728:	af00      	add	r7, sp, #0
 800772a:	6078      	str	r0, [r7, #4]
 800772c:	460b      	mov	r3, r1
 800772e:	807b      	strh	r3, [r7, #2]
 8007730:	4613      	mov	r3, r2
 8007732:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007734:	787b      	ldrb	r3, [r7, #1]
 8007736:	2b00      	cmp	r3, #0
 8007738:	d003      	beq.n	8007742 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800773a:	887a      	ldrh	r2, [r7, #2]
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8007740:	e003      	b.n	800774a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8007742:	887b      	ldrh	r3, [r7, #2]
 8007744:	041a      	lsls	r2, r3, #16
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	619a      	str	r2, [r3, #24]
}
 800774a:	bf00      	nop
 800774c:	370c      	adds	r7, #12
 800774e:	46bd      	mov	sp, r7
 8007750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007754:	4770      	bx	lr

08007756 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007756:	b480      	push	{r7}
 8007758:	b085      	sub	sp, #20
 800775a:	af00      	add	r7, sp, #0
 800775c:	6078      	str	r0, [r7, #4]
 800775e:	460b      	mov	r3, r1
 8007760:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	695b      	ldr	r3, [r3, #20]
 8007766:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007768:	887a      	ldrh	r2, [r7, #2]
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	4013      	ands	r3, r2
 800776e:	041a      	lsls	r2, r3, #16
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	43d9      	mvns	r1, r3
 8007774:	887b      	ldrh	r3, [r7, #2]
 8007776:	400b      	ands	r3, r1
 8007778:	431a      	orrs	r2, r3
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	619a      	str	r2, [r3, #24]
}
 800777e:	bf00      	nop
 8007780:	3714      	adds	r7, #20
 8007782:	46bd      	mov	sp, r7
 8007784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007788:	4770      	bx	lr

0800778a <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800778a:	b580      	push	{r7, lr}
 800778c:	b082      	sub	sp, #8
 800778e:	af00      	add	r7, sp, #0
 8007790:	4603      	mov	r3, r0
 8007792:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8007794:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007798:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800779c:	88fb      	ldrh	r3, [r7, #6]
 800779e:	4013      	ands	r3, r2
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d008      	beq.n	80077b6 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80077a4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80077a8:	88fb      	ldrh	r3, [r7, #6]
 80077aa:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80077ae:	88fb      	ldrh	r3, [r7, #6]
 80077b0:	4618      	mov	r0, r3
 80077b2:	f000 f804 	bl	80077be <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 80077b6:	bf00      	nop
 80077b8:	3708      	adds	r7, #8
 80077ba:	46bd      	mov	sp, r7
 80077bc:	bd80      	pop	{r7, pc}

080077be <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80077be:	b480      	push	{r7}
 80077c0:	b083      	sub	sp, #12
 80077c2:	af00      	add	r7, sp, #0
 80077c4:	4603      	mov	r3, r0
 80077c6:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80077c8:	bf00      	nop
 80077ca:	370c      	adds	r7, #12
 80077cc:	46bd      	mov	sp, r7
 80077ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d2:	4770      	bx	lr

080077d4 <HAL_HRTIM_Init>:
  * @brief  Initialize a HRTIM instance
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_Init(HRTIM_HandleTypeDef * hhrtim)
{
 80077d4:	b580      	push	{r7, lr}
 80077d6:	b086      	sub	sp, #24
 80077d8:	af00      	add	r7, sp, #0
 80077da:	6078      	str	r0, [r7, #4]
  uint8_t timer_idx;
  uint32_t hrtim_mcr;

  /* Check the HRTIM handle allocation */
  if(hhrtim == NULL)
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d101      	bne.n	80077e6 <HAL_HRTIM_Init+0x12>
  {
    return HAL_ERROR;
 80077e2:	2301      	movs	r3, #1
 80077e4:	e0bd      	b.n	8007962 <HAL_HRTIM_Init+0x18e>
    }
  }
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	2202      	movs	r2, #2
 80077ea:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Initialize the DMA handles */
  hhrtim->hdmaMaster = (DMA_HandleTypeDef *)NULL;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	2200      	movs	r2, #0
 80077f2:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hhrtim->hdmaTimerA = (DMA_HandleTypeDef *)NULL;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	2200      	movs	r2, #0
 80077fa:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  hhrtim->hdmaTimerB = (DMA_HandleTypeDef *)NULL;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	2200      	movs	r2, #0
 8007802:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
  hhrtim->hdmaTimerC = (DMA_HandleTypeDef *)NULL;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	2200      	movs	r2, #0
 800780a:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
  hhrtim->hdmaTimerD = (DMA_HandleTypeDef *)NULL;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	2200      	movs	r2, #0
 8007812:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  hhrtim->hdmaTimerE = (DMA_HandleTypeDef *)NULL;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	2200      	movs	r2, #0
 800781a:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8

  /* HRTIM output synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_MASTER) != (uint32_t)RESET)
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	689b      	ldr	r3, [r3, #8]
 8007822:	f003 0301 	and.w	r3, r3, #1
 8007826:	2b00      	cmp	r3, #0
 8007828:	d031      	beq.n	800788e <HAL_HRTIM_Init+0xba>
    assert_param(IS_HRTIM_SYNCOUTPUTPOLARITY(hhrtim->Init.SyncOutputPolarity));

    /* The synchronization output initialization procedure must be done prior
       to the configuration of the MCU outputs (done within HAL_HRTIM_MspInit)
    */
    if (hhrtim->Instance == HRTIM1)
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	4a4f      	ldr	r2, [pc, #316]	; (800796c <HAL_HRTIM_Init+0x198>)
 8007830:	4293      	cmp	r3, r2
 8007832:	d10e      	bne.n	8007852 <HAL_HRTIM_Init+0x7e>
    {
      /* Enable the HRTIM peripheral clock */
      __HAL_RCC_HRTIM1_CLK_ENABLE();
 8007834:	4b4e      	ldr	r3, [pc, #312]	; (8007970 <HAL_HRTIM_Init+0x19c>)
 8007836:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800783a:	4a4d      	ldr	r2, [pc, #308]	; (8007970 <HAL_HRTIM_Init+0x19c>)
 800783c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007840:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8007844:	4b4a      	ldr	r3, [pc, #296]	; (8007970 <HAL_HRTIM_Init+0x19c>)
 8007846:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800784a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800784e:	60fb      	str	r3, [r7, #12]
 8007850:	68fb      	ldr	r3, [r7, #12]
    }

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	613b      	str	r3, [r7, #16]

    /* Set the event to be sent on the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_SRC);
 800785a:	693b      	ldr	r3, [r7, #16]
 800785c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8007860:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputSource & HRTIM_MCR_SYNC_SRC);
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	691b      	ldr	r3, [r3, #16]
 8007866:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800786a:	693a      	ldr	r2, [r7, #16]
 800786c:	4313      	orrs	r3, r2
 800786e:	613b      	str	r3, [r7, #16]

    /* Set the polarity of the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_OUT);
 8007870:	693b      	ldr	r3, [r7, #16]
 8007872:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8007876:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputPolarity & HRTIM_MCR_SYNC_OUT);
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	695b      	ldr	r3, [r3, #20]
 800787c:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8007880:	693a      	ldr	r2, [r7, #16]
 8007882:	4313      	orrs	r3, r2
 8007884:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	693a      	ldr	r2, [r7, #16]
 800788c:	601a      	str	r2, [r3, #0]

  /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
  hhrtim->MspInitCallback(hhrtim);
#else
  HAL_HRTIM_MspInit(hhrtim);
 800788e:	6878      	ldr	r0, [r7, #4]
 8007890:	f7fb fb0a 	bl	8002ea8 <HAL_HRTIM_MspInit>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* HRTIM input synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_SLAVE) != (uint32_t)RESET)
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	689b      	ldr	r3, [r3, #8]
 8007898:	f003 0302 	and.w	r3, r3, #2
 800789c:	2b00      	cmp	r3, #0
 800789e:	d012      	beq.n	80078c6 <HAL_HRTIM_Init+0xf2>
  {
    /* Check parameters */
    assert_param(IS_HRTIM_SYNCINPUTSOURCE(hhrtim->Init.SyncInputSource));

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	613b      	str	r3, [r7, #16]

    /* Set the synchronization input source */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_IN);
 80078a8:	693b      	ldr	r3, [r7, #16]
 80078aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80078ae:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncInputSource & HRTIM_MCR_SYNC_IN);
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	68db      	ldr	r3, [r3, #12]
 80078b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80078b8:	693a      	ldr	r2, [r7, #16]
 80078ba:	4313      	orrs	r3, r2
 80078bc:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	693a      	ldr	r2, [r7, #16]
 80078c4:	601a      	str	r2, [r3, #0]
  }

  /* Initialize the HRTIM state*/
  hhrtim->State = HAL_HRTIM_STATE_READY;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	2201      	movs	r2, #1
 80078ca:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Initialize the lock status of the HRTIM HAL API */
  __HAL_UNLOCK(hhrtim);
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	2200      	movs	r2, #0
 80078d2:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  /* Initialize timer related parameters */
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 80078d6:	2300      	movs	r3, #0
 80078d8:	75fb      	strb	r3, [r7, #23]
 80078da:	e03e      	b.n	800795a <HAL_HRTIM_Init+0x186>
       timer_idx <= HRTIM_TIMERINDEX_MASTER ;
       timer_idx++)
  {
    hhrtim->TimerParam[timer_idx].CaptureTrigger1 = HRTIM_CAPTURETRIGGER_NONE;
 80078dc:	7dfa      	ldrb	r2, [r7, #23]
 80078de:	6879      	ldr	r1, [r7, #4]
 80078e0:	4613      	mov	r3, r2
 80078e2:	00db      	lsls	r3, r3, #3
 80078e4:	1a9b      	subs	r3, r3, r2
 80078e6:	009b      	lsls	r3, r3, #2
 80078e8:	440b      	add	r3, r1
 80078ea:	3318      	adds	r3, #24
 80078ec:	2200      	movs	r2, #0
 80078ee:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].CaptureTrigger2 = HRTIM_CAPTURETRIGGER_NONE;
 80078f0:	7dfa      	ldrb	r2, [r7, #23]
 80078f2:	6879      	ldr	r1, [r7, #4]
 80078f4:	4613      	mov	r3, r2
 80078f6:	00db      	lsls	r3, r3, #3
 80078f8:	1a9b      	subs	r3, r3, r2
 80078fa:	009b      	lsls	r3, r3, #2
 80078fc:	440b      	add	r3, r1
 80078fe:	331c      	adds	r3, #28
 8007900:	2200      	movs	r2, #0
 8007902:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].InterruptRequests = HRTIM_IT_NONE;
 8007904:	7dfa      	ldrb	r2, [r7, #23]
 8007906:	6879      	ldr	r1, [r7, #4]
 8007908:	4613      	mov	r3, r2
 800790a:	00db      	lsls	r3, r3, #3
 800790c:	1a9b      	subs	r3, r3, r2
 800790e:	009b      	lsls	r3, r3, #2
 8007910:	440b      	add	r3, r1
 8007912:	3320      	adds	r3, #32
 8007914:	2200      	movs	r2, #0
 8007916:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMARequests = HRTIM_IT_NONE;
 8007918:	7dfa      	ldrb	r2, [r7, #23]
 800791a:	6879      	ldr	r1, [r7, #4]
 800791c:	4613      	mov	r3, r2
 800791e:	00db      	lsls	r3, r3, #3
 8007920:	1a9b      	subs	r3, r3, r2
 8007922:	009b      	lsls	r3, r3, #2
 8007924:	440b      	add	r3, r1
 8007926:	3324      	adds	r3, #36	; 0x24
 8007928:	2200      	movs	r2, #0
 800792a:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASrcAddress = 0U;
 800792c:	7dfa      	ldrb	r2, [r7, #23]
 800792e:	6879      	ldr	r1, [r7, #4]
 8007930:	4613      	mov	r3, r2
 8007932:	00db      	lsls	r3, r3, #3
 8007934:	1a9b      	subs	r3, r3, r2
 8007936:	009b      	lsls	r3, r3, #2
 8007938:	440b      	add	r3, r1
 800793a:	3328      	adds	r3, #40	; 0x28
 800793c:	2200      	movs	r2, #0
 800793e:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASize = 0U;
 8007940:	7dfa      	ldrb	r2, [r7, #23]
 8007942:	6879      	ldr	r1, [r7, #4]
 8007944:	4613      	mov	r3, r2
 8007946:	00db      	lsls	r3, r3, #3
 8007948:	1a9b      	subs	r3, r3, r2
 800794a:	009b      	lsls	r3, r3, #2
 800794c:	440b      	add	r3, r1
 800794e:	3330      	adds	r3, #48	; 0x30
 8007950:	2200      	movs	r2, #0
 8007952:	601a      	str	r2, [r3, #0]
       timer_idx++)
 8007954:	7dfb      	ldrb	r3, [r7, #23]
 8007956:	3301      	adds	r3, #1
 8007958:	75fb      	strb	r3, [r7, #23]
       timer_idx <= HRTIM_TIMERINDEX_MASTER ;
 800795a:	7dfb      	ldrb	r3, [r7, #23]
 800795c:	2b05      	cmp	r3, #5
 800795e:	d9bd      	bls.n	80078dc <HAL_HRTIM_Init+0x108>
  }

  return HAL_OK;
 8007960:	2300      	movs	r3, #0
}
 8007962:	4618      	mov	r0, r3
 8007964:	3718      	adds	r7, #24
 8007966:	46bd      	mov	sp, r7
 8007968:	bd80      	pop	{r7, pc}
 800796a:	bf00      	nop
 800796c:	40017400 	.word	0x40017400
 8007970:	58024400 	.word	0x58024400

08007974 <HAL_HRTIM_TimeBaseConfig>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_TimeBaseConfig(HRTIM_HandleTypeDef *hhrtim,
                                           uint32_t TimerIdx,
                                           const HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 8007974:	b580      	push	{r7, lr}
 8007976:	b084      	sub	sp, #16
 8007978:	af00      	add	r7, sp, #0
 800797a:	60f8      	str	r0, [r7, #12]
 800797c:	60b9      	str	r1, [r7, #8]
 800797e:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));
  assert_param(IS_HRTIM_PRESCALERRATIO(pTimeBaseCfg->PrescalerRatio));
  assert_param(IS_HRTIM_MODE(pTimeBaseCfg->Mode));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8007986:	b2db      	uxtb	r3, r3
 8007988:	2b02      	cmp	r3, #2
 800798a:	d101      	bne.n	8007990 <HAL_HRTIM_TimeBaseConfig+0x1c>
  {
     return HAL_BUSY;
 800798c:	2302      	movs	r3, #2
 800798e:	e015      	b.n	80079bc <HAL_HRTIM_TimeBaseConfig+0x48>
  }

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	2202      	movs	r2, #2
 8007994:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8007998:	68bb      	ldr	r3, [r7, #8]
 800799a:	2b05      	cmp	r3, #5
 800799c:	d104      	bne.n	80079a8 <HAL_HRTIM_TimeBaseConfig+0x34>
  {
    /* Configure master timer time base unit */
    HRTIM_MasterBase_Config(hhrtim, pTimeBaseCfg);
 800799e:	6879      	ldr	r1, [r7, #4]
 80079a0:	68f8      	ldr	r0, [r7, #12]
 80079a2:	f000 fc4d 	bl	8008240 <HRTIM_MasterBase_Config>
 80079a6:	e004      	b.n	80079b2 <HAL_HRTIM_TimeBaseConfig+0x3e>
  }
  else
  {
    /* Configure timing unit time base unit */
    HRTIM_TimingUnitBase_Config(hhrtim, TimerIdx, pTimeBaseCfg);
 80079a8:	687a      	ldr	r2, [r7, #4]
 80079aa:	68b9      	ldr	r1, [r7, #8]
 80079ac:	68f8      	ldr	r0, [r7, #12]
 80079ae:	f000 fc76 	bl	800829e <HRTIM_TimingUnitBase_Config>
  }

  /* Set HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	2201      	movs	r2, #1
 80079b6:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  return HAL_OK;
 80079ba:	2300      	movs	r3, #0
}
 80079bc:	4618      	mov	r0, r3
 80079be:	3710      	adds	r7, #16
 80079c0:	46bd      	mov	sp, r7
 80079c2:	bd80      	pop	{r7, pc}

080079c4 <HAL_HRTIM_WaveformTimerConfig>:
  * @note This function must be called before starting the timer
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformTimerConfig(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t TimerIdx,
                                                const HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b084      	sub	sp, #16
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	60f8      	str	r0, [r7, #12]
 80079cc:	60b9      	str	r1, [r7, #8]
 80079ce:	607a      	str	r2, [r7, #4]
  assert_param(IS_HRTIM_DACSYNC(pTimerCfg->DACSynchro));
  assert_param(IS_HRTIM_PRELOAD(pTimerCfg->PreloadEnable));
  assert_param(IS_HRTIM_TIMERBURSTMODE(pTimerCfg->BurstMode));
  assert_param(IS_HRTIM_UPDATEONREPETITION(pTimerCfg->RepetitionUpdate));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 80079d6:	b2db      	uxtb	r3, r3
 80079d8:	2b02      	cmp	r3, #2
 80079da:	d101      	bne.n	80079e0 <HAL_HRTIM_WaveformTimerConfig+0x1c>
  {
     return HAL_BUSY;
 80079dc:	2302      	movs	r3, #2
 80079de:	e05f      	b.n	8007aa0 <HAL_HRTIM_WaveformTimerConfig+0xdc>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 80079e6:	2b01      	cmp	r3, #1
 80079e8:	d101      	bne.n	80079ee <HAL_HRTIM_WaveformTimerConfig+0x2a>
 80079ea:	2302      	movs	r3, #2
 80079ec:	e058      	b.n	8007aa0 <HAL_HRTIM_WaveformTimerConfig+0xdc>
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	2201      	movs	r2, #1
 80079f2:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	2202      	movs	r2, #2
 80079fa:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 80079fe:	68bb      	ldr	r3, [r7, #8]
 8007a00:	2b05      	cmp	r3, #5
 8007a02:	d104      	bne.n	8007a0e <HAL_HRTIM_WaveformTimerConfig+0x4a>
    assert_param(IS_HRTIM_UPDATEGATING_MASTER(pTimerCfg->UpdateGating));
    assert_param(IS_HRTIM_MASTER_IT(pTimerCfg->InterruptRequests));
    assert_param(IS_HRTIM_MASTER_DMA(pTimerCfg->DMARequests));

    /* Configure master timer */
    HRTIM_MasterWaveform_Config(hhrtim, pTimerCfg);
 8007a04:	6879      	ldr	r1, [r7, #4]
 8007a06:	68f8      	ldr	r0, [r7, #12]
 8007a08:	f000 fc89 	bl	800831e <HRTIM_MasterWaveform_Config>
 8007a0c:	e004      	b.n	8007a18 <HAL_HRTIM_WaveformTimerConfig+0x54>
    assert_param(IS_HRTIM_TIMUPDATETRIGGER(pTimerCfg->UpdateTrigger));
    assert_param(IS_HRTIM_TIMRESETTRIGGER(pTimerCfg->ResetTrigger));
    assert_param(IS_HRTIM_TIMUPDATEONRESET(pTimerCfg->ResetUpdate));

    /* Configure timing unit */
    HRTIM_TimingUnitWaveform_Config(hhrtim, TimerIdx, pTimerCfg);
 8007a0e:	687a      	ldr	r2, [r7, #4]
 8007a10:	68b9      	ldr	r1, [r7, #8]
 8007a12:	68f8      	ldr	r0, [r7, #12]
 8007a14:	f000 fcea 	bl	80083ec <HRTIM_TimingUnitWaveform_Config>
  }

  /* Update timer parameters */
  hhrtim->TimerParam[TimerIdx].InterruptRequests = pTimerCfg->InterruptRequests;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	6819      	ldr	r1, [r3, #0]
 8007a1c:	68f8      	ldr	r0, [r7, #12]
 8007a1e:	68ba      	ldr	r2, [r7, #8]
 8007a20:	4613      	mov	r3, r2
 8007a22:	00db      	lsls	r3, r3, #3
 8007a24:	1a9b      	subs	r3, r3, r2
 8007a26:	009b      	lsls	r3, r3, #2
 8007a28:	4403      	add	r3, r0
 8007a2a:	3320      	adds	r3, #32
 8007a2c:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMARequests = pTimerCfg->DMARequests;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	6859      	ldr	r1, [r3, #4]
 8007a32:	68f8      	ldr	r0, [r7, #12]
 8007a34:	68ba      	ldr	r2, [r7, #8]
 8007a36:	4613      	mov	r3, r2
 8007a38:	00db      	lsls	r3, r3, #3
 8007a3a:	1a9b      	subs	r3, r3, r2
 8007a3c:	009b      	lsls	r3, r3, #2
 8007a3e:	4403      	add	r3, r0
 8007a40:	3324      	adds	r3, #36	; 0x24
 8007a42:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASrcAddress = pTimerCfg->DMASrcAddress;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	6899      	ldr	r1, [r3, #8]
 8007a48:	68f8      	ldr	r0, [r7, #12]
 8007a4a:	68ba      	ldr	r2, [r7, #8]
 8007a4c:	4613      	mov	r3, r2
 8007a4e:	00db      	lsls	r3, r3, #3
 8007a50:	1a9b      	subs	r3, r3, r2
 8007a52:	009b      	lsls	r3, r3, #2
 8007a54:	4403      	add	r3, r0
 8007a56:	3328      	adds	r3, #40	; 0x28
 8007a58:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMADstAddress = pTimerCfg->DMADstAddress;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	68d9      	ldr	r1, [r3, #12]
 8007a5e:	68f8      	ldr	r0, [r7, #12]
 8007a60:	68ba      	ldr	r2, [r7, #8]
 8007a62:	4613      	mov	r3, r2
 8007a64:	00db      	lsls	r3, r3, #3
 8007a66:	1a9b      	subs	r3, r3, r2
 8007a68:	009b      	lsls	r3, r3, #2
 8007a6a:	4403      	add	r3, r0
 8007a6c:	332c      	adds	r3, #44	; 0x2c
 8007a6e:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASize = pTimerCfg->DMASize;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	6919      	ldr	r1, [r3, #16]
 8007a74:	68f8      	ldr	r0, [r7, #12]
 8007a76:	68ba      	ldr	r2, [r7, #8]
 8007a78:	4613      	mov	r3, r2
 8007a7a:	00db      	lsls	r3, r3, #3
 8007a7c:	1a9b      	subs	r3, r3, r2
 8007a7e:	009b      	lsls	r3, r3, #2
 8007a80:	4403      	add	r3, r0
 8007a82:	3330      	adds	r3, #48	; 0x30
 8007a84:	6019      	str	r1, [r3, #0]

  /* Force a software update */
  HRTIM_ForceRegistersUpdate(hhrtim, TimerIdx);
 8007a86:	68b9      	ldr	r1, [r7, #8]
 8007a88:	68f8      	ldr	r0, [r7, #12]
 8007a8a:	f000 fec7 	bl	800881c <HRTIM_ForceRegistersUpdate>

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	2201      	movs	r2, #1
 8007a92:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	2200      	movs	r2, #0
 8007a9a:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 8007a9e:	2300      	movs	r3, #0
}
 8007aa0:	4618      	mov	r0, r3
 8007aa2:	3710      	adds	r7, #16
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	bd80      	pop	{r7, pc}

08007aa8 <HAL_HRTIM_WaveformCompareConfig>:
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformCompareConfig(HRTIM_HandleTypeDef * hhrtim,
                                                  uint32_t TimerIdx,
                                                  uint32_t CompareUnit,
                                                  const HRTIM_CompareCfgTypeDef* pCompareCfg)
{
 8007aa8:	b480      	push	{r7}
 8007aaa:	b085      	sub	sp, #20
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	60f8      	str	r0, [r7, #12]
 8007ab0:	60b9      	str	r1, [r7, #8]
 8007ab2:	607a      	str	r2, [r7, #4]
 8007ab4:	603b      	str	r3, [r7, #0]
  /* Check parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8007abc:	b2db      	uxtb	r3, r3
 8007abe:	2b02      	cmp	r3, #2
 8007ac0:	d101      	bne.n	8007ac6 <HAL_HRTIM_WaveformCompareConfig+0x1e>
  {
     return HAL_BUSY;
 8007ac2:	2302      	movs	r3, #2
 8007ac4:	e157      	b.n	8007d76 <HAL_HRTIM_WaveformCompareConfig+0x2ce>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8007acc:	2b01      	cmp	r3, #1
 8007ace:	d101      	bne.n	8007ad4 <HAL_HRTIM_WaveformCompareConfig+0x2c>
 8007ad0:	2302      	movs	r3, #2
 8007ad2:	e150      	b.n	8007d76 <HAL_HRTIM_WaveformCompareConfig+0x2ce>
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	2201      	movs	r2, #1
 8007ad8:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	2202      	movs	r2, #2
 8007ae0:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Configure the compare unit */
  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8007ae4:	68bb      	ldr	r3, [r7, #8]
 8007ae6:	2b05      	cmp	r3, #5
 8007ae8:	d140      	bne.n	8007b6c <HAL_HRTIM_WaveformCompareConfig+0xc4>
  {
    switch (CompareUnit)
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	3b01      	subs	r3, #1
 8007aee:	2b07      	cmp	r3, #7
 8007af0:	d82a      	bhi.n	8007b48 <HAL_HRTIM_WaveformCompareConfig+0xa0>
 8007af2:	a201      	add	r2, pc, #4	; (adr r2, 8007af8 <HAL_HRTIM_WaveformCompareConfig+0x50>)
 8007af4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007af8:	08007b19 	.word	0x08007b19
 8007afc:	08007b25 	.word	0x08007b25
 8007b00:	08007b49 	.word	0x08007b49
 8007b04:	08007b31 	.word	0x08007b31
 8007b08:	08007b49 	.word	0x08007b49
 8007b0c:	08007b49 	.word	0x08007b49
 8007b10:	08007b49 	.word	0x08007b49
 8007b14:	08007b3d 	.word	0x08007b3d
    {
      case HRTIM_COMPAREUNIT_1:
        {
        hhrtim->Instance->sMasterRegs.MCMP1R = pCompareCfg->CompareValue;
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	683a      	ldr	r2, [r7, #0]
 8007b1e:	6812      	ldr	r2, [r2, #0]
 8007b20:	61da      	str	r2, [r3, #28]
        break;
 8007b22:	e01a      	b.n	8007b5a <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_2:
        {
        hhrtim->Instance->sMasterRegs.MCMP2R = pCompareCfg->CompareValue;
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	683a      	ldr	r2, [r7, #0]
 8007b2a:	6812      	ldr	r2, [r2, #0]
 8007b2c:	625a      	str	r2, [r3, #36]	; 0x24
        break;
 8007b2e:	e014      	b.n	8007b5a <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_3:
        {
        hhrtim->Instance->sMasterRegs.MCMP3R = pCompareCfg->CompareValue;
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	683a      	ldr	r2, [r7, #0]
 8007b36:	6812      	ldr	r2, [r2, #0]
 8007b38:	629a      	str	r2, [r3, #40]	; 0x28
        break;
 8007b3a:	e00e      	b.n	8007b5a <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_4:
        {
        hhrtim->Instance->sMasterRegs.MCMP4R = pCompareCfg->CompareValue;
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	683a      	ldr	r2, [r7, #0]
 8007b42:	6812      	ldr	r2, [r2, #0]
 8007b44:	62da      	str	r2, [r3, #44]	; 0x2c
        break;
 8007b46:	e008      	b.n	8007b5a <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      default:
        {
        hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	2207      	movs	r2, #7
 8007b4c:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

        /* Process Unlocked */
        __HAL_UNLOCK(hhrtim);
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	2200      	movs	r2, #0
 8007b54:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

        break;
 8007b58:	bf00      	nop
        }
    }

    if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8007b60:	b2db      	uxtb	r3, r3
 8007b62:	2b07      	cmp	r3, #7
 8007b64:	f040 80fe 	bne.w	8007d64 <HAL_HRTIM_WaveformCompareConfig+0x2bc>
    {
     return HAL_ERROR;
 8007b68:	2301      	movs	r3, #1
 8007b6a:	e104      	b.n	8007d76 <HAL_HRTIM_WaveformCompareConfig+0x2ce>
    }

  }
  else
  {
    switch (CompareUnit)
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	3b01      	subs	r3, #1
 8007b70:	2b07      	cmp	r3, #7
 8007b72:	f200 80e3 	bhi.w	8007d3c <HAL_HRTIM_WaveformCompareConfig+0x294>
 8007b76:	a201      	add	r2, pc, #4	; (adr r2, 8007b7c <HAL_HRTIM_WaveformCompareConfig+0xd4>)
 8007b78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b7c:	08007b9d 	.word	0x08007b9d
 8007b80:	08007bb1 	.word	0x08007bb1
 8007b84:	08007d3d 	.word	0x08007d3d
 8007b88:	08007c6d 	.word	0x08007c6d
 8007b8c:	08007d3d 	.word	0x08007d3d
 8007b90:	08007d3d 	.word	0x08007d3d
 8007b94:	08007d3d 	.word	0x08007d3d
 8007b98:	08007c81 	.word	0x08007c81
    {
    case HRTIM_COMPAREUNIT_1:
      {
        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->CompareValue;
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	6819      	ldr	r1, [r3, #0]
 8007ba0:	683b      	ldr	r3, [r7, #0]
 8007ba2:	681a      	ldr	r2, [r3, #0]
 8007ba4:	68bb      	ldr	r3, [r7, #8]
 8007ba6:	01db      	lsls	r3, r3, #7
 8007ba8:	440b      	add	r3, r1
 8007baa:	339c      	adds	r3, #156	; 0x9c
 8007bac:	601a      	str	r2, [r3, #0]
        break;
 8007bae:	e0d1      	b.n	8007d54 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
      {
        /* Check parameters */
        assert_param(IS_HRTIM_COMPAREUNIT_AUTODELAYEDMODE(CompareUnit, pCompareCfg->AutoDelayedMode));

        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP2xR = pCompareCfg->CompareValue;
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	6819      	ldr	r1, [r3, #0]
 8007bb4:	683b      	ldr	r3, [r7, #0]
 8007bb6:	681a      	ldr	r2, [r3, #0]
 8007bb8:	68bb      	ldr	r3, [r7, #8]
 8007bba:	01db      	lsls	r3, r3, #7
 8007bbc:	440b      	add	r3, r1
 8007bbe:	33a4      	adds	r3, #164	; 0xa4
 8007bc0:	601a      	str	r2, [r3, #0]

        if (pCompareCfg->AutoDelayedMode != HRTIM_AUTODELAYEDMODE_REGULAR)
 8007bc2:	683b      	ldr	r3, [r7, #0]
 8007bc4:	685b      	ldr	r3, [r3, #4]
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d03f      	beq.n	8007c4a <HAL_HRTIM_WaveformCompareConfig+0x1a2>
        {
          /* Configure auto-delayed mode */
          /* DELCMP2 bitfield must be reset when reprogrammed from one value */
          /* to the other to reinitialize properly the auto-delayed mechanism */
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~HRTIM_TIMCR_DELCMP2;
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	681a      	ldr	r2, [r3, #0]
 8007bce:	68bb      	ldr	r3, [r7, #8]
 8007bd0:	3301      	adds	r3, #1
 8007bd2:	01db      	lsls	r3, r3, #7
 8007bd4:	4413      	add	r3, r2
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	68fa      	ldr	r2, [r7, #12]
 8007bda:	6811      	ldr	r1, [r2, #0]
 8007bdc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007be0:	68bb      	ldr	r3, [r7, #8]
 8007be2:	3301      	adds	r3, #1
 8007be4:	01db      	lsls	r3, r3, #7
 8007be6:	440b      	add	r3, r1
 8007be8:	601a      	str	r2, [r3, #0]
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR |= pCompareCfg->AutoDelayedMode;
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	681a      	ldr	r2, [r3, #0]
 8007bee:	68bb      	ldr	r3, [r7, #8]
 8007bf0:	3301      	adds	r3, #1
 8007bf2:	01db      	lsls	r3, r3, #7
 8007bf4:	4413      	add	r3, r2
 8007bf6:	681a      	ldr	r2, [r3, #0]
 8007bf8:	683b      	ldr	r3, [r7, #0]
 8007bfa:	685b      	ldr	r3, [r3, #4]
 8007bfc:	68f9      	ldr	r1, [r7, #12]
 8007bfe:	6809      	ldr	r1, [r1, #0]
 8007c00:	431a      	orrs	r2, r3
 8007c02:	68bb      	ldr	r3, [r7, #8]
 8007c04:	3301      	adds	r3, #1
 8007c06:	01db      	lsls	r3, r3, #7
 8007c08:	440b      	add	r3, r1
 8007c0a:	601a      	str	r2, [r3, #0]

          /* Set the compare value for timeout compare unit (if any) */
          if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP1)
 8007c0c:	683b      	ldr	r3, [r7, #0]
 8007c0e:	685b      	ldr	r3, [r3, #4]
 8007c10:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007c14:	d109      	bne.n	8007c2a <HAL_HRTIM_WaveformCompareConfig+0x182>
          {
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->AutoDelayedTimeout;
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	6819      	ldr	r1, [r3, #0]
 8007c1a:	683b      	ldr	r3, [r7, #0]
 8007c1c:	689a      	ldr	r2, [r3, #8]
 8007c1e:	68bb      	ldr	r3, [r7, #8]
 8007c20:	01db      	lsls	r3, r3, #7
 8007c22:	440b      	add	r3, r1
 8007c24:	339c      	adds	r3, #156	; 0x9c
 8007c26:	601a      	str	r2, [r3, #0]
        else
        {
          /* Clear HRTIM_TIMxCR.DELCMP2 bitfield */
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP2, 0U);
        }
         break;
 8007c28:	e091      	b.n	8007d4e <HAL_HRTIM_WaveformCompareConfig+0x2a6>
          else if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP3)
 8007c2a:	683b      	ldr	r3, [r7, #0]
 8007c2c:	685b      	ldr	r3, [r3, #4]
 8007c2e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007c32:	f040 808c 	bne.w	8007d4e <HAL_HRTIM_WaveformCompareConfig+0x2a6>
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->AutoDelayedTimeout;
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	6819      	ldr	r1, [r3, #0]
 8007c3a:	683b      	ldr	r3, [r7, #0]
 8007c3c:	689a      	ldr	r2, [r3, #8]
 8007c3e:	68bb      	ldr	r3, [r7, #8]
 8007c40:	01db      	lsls	r3, r3, #7
 8007c42:	440b      	add	r3, r1
 8007c44:	33a8      	adds	r3, #168	; 0xa8
 8007c46:	601a      	str	r2, [r3, #0]
         break;
 8007c48:	e081      	b.n	8007d4e <HAL_HRTIM_WaveformCompareConfig+0x2a6>
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP2, 0U);
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	681a      	ldr	r2, [r3, #0]
 8007c4e:	68bb      	ldr	r3, [r7, #8]
 8007c50:	3301      	adds	r3, #1
 8007c52:	01db      	lsls	r3, r3, #7
 8007c54:	4413      	add	r3, r2
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	68fa      	ldr	r2, [r7, #12]
 8007c5a:	6811      	ldr	r1, [r2, #0]
 8007c5c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007c60:	68bb      	ldr	r3, [r7, #8]
 8007c62:	3301      	adds	r3, #1
 8007c64:	01db      	lsls	r3, r3, #7
 8007c66:	440b      	add	r3, r1
 8007c68:	601a      	str	r2, [r3, #0]
         break;
 8007c6a:	e070      	b.n	8007d4e <HAL_HRTIM_WaveformCompareConfig+0x2a6>
      }

    case HRTIM_COMPAREUNIT_3:
      {
        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->CompareValue;
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	6819      	ldr	r1, [r3, #0]
 8007c70:	683b      	ldr	r3, [r7, #0]
 8007c72:	681a      	ldr	r2, [r3, #0]
 8007c74:	68bb      	ldr	r3, [r7, #8]
 8007c76:	01db      	lsls	r3, r3, #7
 8007c78:	440b      	add	r3, r1
 8007c7a:	33a8      	adds	r3, #168	; 0xa8
 8007c7c:	601a      	str	r2, [r3, #0]
        break;
 8007c7e:	e069      	b.n	8007d54 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
      {
        /* Check parameters */
        assert_param(IS_HRTIM_COMPAREUNIT_AUTODELAYEDMODE(CompareUnit, pCompareCfg->AutoDelayedMode));

        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP4xR = pCompareCfg->CompareValue;
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	6819      	ldr	r1, [r3, #0]
 8007c84:	683b      	ldr	r3, [r7, #0]
 8007c86:	681a      	ldr	r2, [r3, #0]
 8007c88:	68bb      	ldr	r3, [r7, #8]
 8007c8a:	01db      	lsls	r3, r3, #7
 8007c8c:	440b      	add	r3, r1
 8007c8e:	33ac      	adds	r3, #172	; 0xac
 8007c90:	601a      	str	r2, [r3, #0]

        if (pCompareCfg->AutoDelayedMode != HRTIM_AUTODELAYEDMODE_REGULAR)
 8007c92:	683b      	ldr	r3, [r7, #0]
 8007c94:	685b      	ldr	r3, [r3, #4]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d03f      	beq.n	8007d1a <HAL_HRTIM_WaveformCompareConfig+0x272>
        {
          /* Configure auto-delayed mode */
          /* DELCMP4 bitfield must be reset when reprogrammed from one value */
          /* to the other to reinitialize properly the auto-delayed mechanism */
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~HRTIM_TIMCR_DELCMP4;
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	681a      	ldr	r2, [r3, #0]
 8007c9e:	68bb      	ldr	r3, [r7, #8]
 8007ca0:	3301      	adds	r3, #1
 8007ca2:	01db      	lsls	r3, r3, #7
 8007ca4:	4413      	add	r3, r2
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	68fa      	ldr	r2, [r7, #12]
 8007caa:	6811      	ldr	r1, [r2, #0]
 8007cac:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007cb0:	68bb      	ldr	r3, [r7, #8]
 8007cb2:	3301      	adds	r3, #1
 8007cb4:	01db      	lsls	r3, r3, #7
 8007cb6:	440b      	add	r3, r1
 8007cb8:	601a      	str	r2, [r3, #0]
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR |= (pCompareCfg->AutoDelayedMode << 2U);
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	681a      	ldr	r2, [r3, #0]
 8007cbe:	68bb      	ldr	r3, [r7, #8]
 8007cc0:	3301      	adds	r3, #1
 8007cc2:	01db      	lsls	r3, r3, #7
 8007cc4:	4413      	add	r3, r2
 8007cc6:	681a      	ldr	r2, [r3, #0]
 8007cc8:	683b      	ldr	r3, [r7, #0]
 8007cca:	685b      	ldr	r3, [r3, #4]
 8007ccc:	009b      	lsls	r3, r3, #2
 8007cce:	68f9      	ldr	r1, [r7, #12]
 8007cd0:	6809      	ldr	r1, [r1, #0]
 8007cd2:	431a      	orrs	r2, r3
 8007cd4:	68bb      	ldr	r3, [r7, #8]
 8007cd6:	3301      	adds	r3, #1
 8007cd8:	01db      	lsls	r3, r3, #7
 8007cda:	440b      	add	r3, r1
 8007cdc:	601a      	str	r2, [r3, #0]

          /* Set the compare value for timeout compare unit (if any) */
          if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP1)
 8007cde:	683b      	ldr	r3, [r7, #0]
 8007ce0:	685b      	ldr	r3, [r3, #4]
 8007ce2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007ce6:	d109      	bne.n	8007cfc <HAL_HRTIM_WaveformCompareConfig+0x254>
          {
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->AutoDelayedTimeout;
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	6819      	ldr	r1, [r3, #0]
 8007cec:	683b      	ldr	r3, [r7, #0]
 8007cee:	689a      	ldr	r2, [r3, #8]
 8007cf0:	68bb      	ldr	r3, [r7, #8]
 8007cf2:	01db      	lsls	r3, r3, #7
 8007cf4:	440b      	add	r3, r1
 8007cf6:	339c      	adds	r3, #156	; 0x9c
 8007cf8:	601a      	str	r2, [r3, #0]
        else
        {
          /* Clear HRTIM_TIMxCR.DELCMP4 bitfield */
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP4, 0U);
        }
         break;
 8007cfa:	e02a      	b.n	8007d52 <HAL_HRTIM_WaveformCompareConfig+0x2aa>
          else if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP3)
 8007cfc:	683b      	ldr	r3, [r7, #0]
 8007cfe:	685b      	ldr	r3, [r3, #4]
 8007d00:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007d04:	d125      	bne.n	8007d52 <HAL_HRTIM_WaveformCompareConfig+0x2aa>
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->AutoDelayedTimeout;
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	6819      	ldr	r1, [r3, #0]
 8007d0a:	683b      	ldr	r3, [r7, #0]
 8007d0c:	689a      	ldr	r2, [r3, #8]
 8007d0e:	68bb      	ldr	r3, [r7, #8]
 8007d10:	01db      	lsls	r3, r3, #7
 8007d12:	440b      	add	r3, r1
 8007d14:	33a8      	adds	r3, #168	; 0xa8
 8007d16:	601a      	str	r2, [r3, #0]
         break;
 8007d18:	e01b      	b.n	8007d52 <HAL_HRTIM_WaveformCompareConfig+0x2aa>
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP4, 0U);
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	681a      	ldr	r2, [r3, #0]
 8007d1e:	68bb      	ldr	r3, [r7, #8]
 8007d20:	3301      	adds	r3, #1
 8007d22:	01db      	lsls	r3, r3, #7
 8007d24:	4413      	add	r3, r2
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	68fa      	ldr	r2, [r7, #12]
 8007d2a:	6811      	ldr	r1, [r2, #0]
 8007d2c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007d30:	68bb      	ldr	r3, [r7, #8]
 8007d32:	3301      	adds	r3, #1
 8007d34:	01db      	lsls	r3, r3, #7
 8007d36:	440b      	add	r3, r1
 8007d38:	601a      	str	r2, [r3, #0]
         break;
 8007d3a:	e00a      	b.n	8007d52 <HAL_HRTIM_WaveformCompareConfig+0x2aa>
      }

  default:
     {
      hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	2207      	movs	r2, #7
 8007d40:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

      /* Process Unlocked */
      __HAL_UNLOCK(hhrtim);
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	2200      	movs	r2, #0
 8007d48:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

      break;
 8007d4c:	e002      	b.n	8007d54 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
         break;
 8007d4e:	bf00      	nop
 8007d50:	e000      	b.n	8007d54 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
         break;
 8007d52:	bf00      	nop
     }
   }

   if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8007d5a:	b2db      	uxtb	r3, r3
 8007d5c:	2b07      	cmp	r3, #7
 8007d5e:	d101      	bne.n	8007d64 <HAL_HRTIM_WaveformCompareConfig+0x2bc>
   {
     return HAL_ERROR;
 8007d60:	2301      	movs	r3, #1
 8007d62:	e008      	b.n	8007d76 <HAL_HRTIM_WaveformCompareConfig+0x2ce>
   }

  }
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	2201      	movs	r2, #1
 8007d68:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	2200      	movs	r2, #0
 8007d70:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 8007d74:	2300      	movs	r3, #0
}
 8007d76:	4618      	mov	r0, r3
 8007d78:	3714      	adds	r7, #20
 8007d7a:	46bd      	mov	sp, r7
 8007d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d80:	4770      	bx	lr
 8007d82:	bf00      	nop

08007d84 <HAL_HRTIM_WaveformOutputConfig>:
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformOutputConfig(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t TimerIdx,
                                                uint32_t Output,
                                                const HRTIM_OutputCfgTypeDef * pOutputCfg)
{
 8007d84:	b580      	push	{r7, lr}
 8007d86:	b084      	sub	sp, #16
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	60f8      	str	r0, [r7, #12]
 8007d8c:	60b9      	str	r1, [r7, #8]
 8007d8e:	607a      	str	r2, [r7, #4]
 8007d90:	603b      	str	r3, [r7, #0]
  assert_param(IS_HRTIM_OUTPUTIDLEMODE(pOutputCfg->IdleMode));
  assert_param(IS_HRTIM_OUTPUTFAULTLEVEL(pOutputCfg->FaultLevel));
  assert_param(IS_HRTIM_OUTPUTCHOPPERMODE(pOutputCfg->ChopperModeEnable));
  assert_param(IS_HRTIM_OUTPUTBURSTMODEENTRY(pOutputCfg->BurstModeEntryDelayed));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8007d98:	b2db      	uxtb	r3, r3
 8007d9a:	2b02      	cmp	r3, #2
 8007d9c:	d101      	bne.n	8007da2 <HAL_HRTIM_WaveformOutputConfig+0x1e>
  {
     return HAL_BUSY;
 8007d9e:	2302      	movs	r3, #2
 8007da0:	e01d      	b.n	8007dde <HAL_HRTIM_WaveformOutputConfig+0x5a>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8007da8:	2b01      	cmp	r3, #1
 8007daa:	d101      	bne.n	8007db0 <HAL_HRTIM_WaveformOutputConfig+0x2c>
 8007dac:	2302      	movs	r3, #2
 8007dae:	e016      	b.n	8007dde <HAL_HRTIM_WaveformOutputConfig+0x5a>
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	2201      	movs	r2, #1
 8007db4:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	2202      	movs	r2, #2
 8007dbc:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Configure the timer output */
  HRTIM_OutputConfig(hhrtim,
 8007dc0:	683b      	ldr	r3, [r7, #0]
 8007dc2:	687a      	ldr	r2, [r7, #4]
 8007dc4:	68b9      	ldr	r1, [r7, #8]
 8007dc6:	68f8      	ldr	r0, [r7, #12]
 8007dc8:	f000 fc50 	bl	800866c <HRTIM_OutputConfig>
                     TimerIdx,
                     Output,
                     pOutputCfg);

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	2201      	movs	r2, #1
 8007dd0:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	2200      	movs	r2, #0
 8007dd8:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 8007ddc:	2300      	movs	r3, #0
}
 8007dde:	4618      	mov	r0, r3
 8007de0:	3710      	adds	r7, #16
 8007de2:	46bd      	mov	sp, r7
 8007de4:	bd80      	pop	{r7, pc}

08007de6 <HAL_HRTIM_WaveformOutputStart>:
  *                    @arg HRTIM_OUTPUT_TE2: Timer E - Output 2
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformOutputStart(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t OutputsToStart)
{
 8007de6:	b480      	push	{r7}
 8007de8:	b083      	sub	sp, #12
 8007dea:	af00      	add	r7, sp, #0
 8007dec:	6078      	str	r0, [r7, #4]
 8007dee:	6039      	str	r1, [r7, #0]
   /* Check the parameters */
  assert_param(IS_HRTIM_OUTPUT(OutputsToStart));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8007df6:	2b01      	cmp	r3, #1
 8007df8:	d101      	bne.n	8007dfe <HAL_HRTIM_WaveformOutputStart+0x18>
 8007dfa:	2302      	movs	r3, #2
 8007dfc:	e01a      	b.n	8007e34 <HAL_HRTIM_WaveformOutputStart+0x4e>
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	2201      	movs	r2, #1
 8007e02:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	2202      	movs	r2, #2
 8007e0a:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Enable the HRTIM outputs */
  hhrtim->Instance->sCommonRegs.OENR |= (OutputsToStart);
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	f8d3 1394 	ldr.w	r1, [r3, #916]	; 0x394
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	683a      	ldr	r2, [r7, #0]
 8007e1c:	430a      	orrs	r2, r1
 8007e1e:	f8c3 2394 	str.w	r2, [r3, #916]	; 0x394

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	2201      	movs	r2, #1
 8007e26:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	2200      	movs	r2, #0
 8007e2e:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 8007e32:	2300      	movs	r3, #0
}
 8007e34:	4618      	mov	r0, r3
 8007e36:	370c      	adds	r7, #12
 8007e38:	46bd      	mov	sp, r7
 8007e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3e:	4770      	bx	lr

08007e40 <HAL_HRTIM_WaveformOutputStop>:
  *                    @arg HRTIM_OUTPUT_TE2: Timer E - Output 2
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformOutputStop(HRTIM_HandleTypeDef * hhrtim,
                                               uint32_t OutputsToStop)
{
 8007e40:	b480      	push	{r7}
 8007e42:	b083      	sub	sp, #12
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	6078      	str	r0, [r7, #4]
 8007e48:	6039      	str	r1, [r7, #0]
   /* Check the parameters */
  assert_param(IS_HRTIM_OUTPUT(OutputsToStop));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8007e50:	2b01      	cmp	r3, #1
 8007e52:	d101      	bne.n	8007e58 <HAL_HRTIM_WaveformOutputStop+0x18>
 8007e54:	2302      	movs	r3, #2
 8007e56:	e01a      	b.n	8007e8e <HAL_HRTIM_WaveformOutputStop+0x4e>
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	2201      	movs	r2, #1
 8007e5c:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	2202      	movs	r2, #2
 8007e64:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Enable the HRTIM outputs */
  hhrtim->Instance->sCommonRegs.ODISR |= (OutputsToStop);
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	f8d3 1398 	ldr.w	r1, [r3, #920]	; 0x398
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	683a      	ldr	r2, [r7, #0]
 8007e76:	430a      	orrs	r2, r1
 8007e78:	f8c3 2398 	str.w	r2, [r3, #920]	; 0x398

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	2201      	movs	r2, #1
 8007e80:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	2200      	movs	r2, #0
 8007e88:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 8007e8c:	2300      	movs	r3, #0
}
 8007e8e:	4618      	mov	r0, r3
 8007e90:	370c      	adds	r7, #12
 8007e92:	46bd      	mov	sp, r7
 8007e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e98:	4770      	bx	lr
	...

08007e9c <HAL_HRTIM_WaveformCountStart_IT>:
  *       function.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformCountStart_IT(HRTIM_HandleTypeDef * hhrtim,
                                                    uint32_t Timers)
{
 8007e9c:	b480      	push	{r7}
 8007e9e:	b085      	sub	sp, #20
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	6078      	str	r0, [r7, #4]
 8007ea4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERID(Timers));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8007eac:	2b01      	cmp	r3, #1
 8007eae:	d101      	bne.n	8007eb4 <HAL_HRTIM_WaveformCountStart_IT+0x18>
 8007eb0:	2302      	movs	r3, #2
 8007eb2:	e05b      	b.n	8007f6c <HAL_HRTIM_WaveformCountStart_IT+0xd0>
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	2201      	movs	r2, #1
 8007eb8:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	2202      	movs	r2, #2
 8007ec0:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Enable HRTIM interrupts (if required) */
  __HAL_HRTIM_ENABLE_IT(hhrtim, hhrtim->Init.HRTIMInterruptResquests);
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	f8d3 1390 	ldr.w	r1, [r3, #912]	; 0x390
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	685a      	ldr	r2, [r3, #4]
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	430a      	orrs	r2, r1
 8007ed6:	f8c3 2390 	str.w	r2, [r3, #912]	; 0x390

  /* Enable master timer related interrupts (if required) */
  if ((Timers & HRTIM_TIMERID_MASTER) != 0U)
 8007eda:	683b      	ldr	r3, [r7, #0]
 8007edc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d009      	beq.n	8007ef8 <HAL_HRTIM_WaveformCountStart_IT+0x5c>
  {
    __HAL_HRTIM_MASTER_ENABLE_IT(hhrtim,
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	68d9      	ldr	r1, [r3, #12]
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	430a      	orrs	r2, r1
 8007ef6:	60da      	str	r2, [r3, #12]
                                 hhrtim->TimerParam[HRTIM_TIMERINDEX_MASTER].InterruptRequests);
  }

  /* Enable timing unit related interrupts (if required) */
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 8007ef8:	2300      	movs	r3, #0
 8007efa:	73fb      	strb	r3, [r7, #15]
 8007efc:	e022      	b.n	8007f44 <HAL_HRTIM_WaveformCountStart_IT+0xa8>
       timer_idx < HRTIM_TIMERINDEX_MASTER ;
       timer_idx++)
  {
    if ((Timers & TimerIdxToTimerId[timer_idx]) != 0U)
 8007efe:	7bfb      	ldrb	r3, [r7, #15]
 8007f00:	4a1d      	ldr	r2, [pc, #116]	; (8007f78 <HAL_HRTIM_WaveformCountStart_IT+0xdc>)
 8007f02:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8007f06:	683b      	ldr	r3, [r7, #0]
 8007f08:	4013      	ands	r3, r2
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d017      	beq.n	8007f3e <HAL_HRTIM_WaveformCountStart_IT+0xa2>
    {
      __HAL_HRTIM_TIMER_ENABLE_IT(hhrtim,
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681a      	ldr	r2, [r3, #0]
 8007f12:	7bfb      	ldrb	r3, [r7, #15]
 8007f14:	01db      	lsls	r3, r3, #7
 8007f16:	4413      	add	r3, r2
 8007f18:	338c      	adds	r3, #140	; 0x8c
 8007f1a:	6818      	ldr	r0, [r3, #0]
 8007f1c:	7bfa      	ldrb	r2, [r7, #15]
 8007f1e:	6879      	ldr	r1, [r7, #4]
 8007f20:	4613      	mov	r3, r2
 8007f22:	00db      	lsls	r3, r3, #3
 8007f24:	1a9b      	subs	r3, r3, r2
 8007f26:	009b      	lsls	r3, r3, #2
 8007f28:	440b      	add	r3, r1
 8007f2a:	3320      	adds	r3, #32
 8007f2c:	681a      	ldr	r2, [r3, #0]
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	6819      	ldr	r1, [r3, #0]
 8007f32:	7bfb      	ldrb	r3, [r7, #15]
 8007f34:	4302      	orrs	r2, r0
 8007f36:	01db      	lsls	r3, r3, #7
 8007f38:	440b      	add	r3, r1
 8007f3a:	338c      	adds	r3, #140	; 0x8c
 8007f3c:	601a      	str	r2, [r3, #0]
       timer_idx++)
 8007f3e:	7bfb      	ldrb	r3, [r7, #15]
 8007f40:	3301      	adds	r3, #1
 8007f42:	73fb      	strb	r3, [r7, #15]
       timer_idx < HRTIM_TIMERINDEX_MASTER ;
 8007f44:	7bfb      	ldrb	r3, [r7, #15]
 8007f46:	2b04      	cmp	r3, #4
 8007f48:	d9d9      	bls.n	8007efe <HAL_HRTIM_WaveformCountStart_IT+0x62>
                                  hhrtim->TimerParam[timer_idx].InterruptRequests);
    }
  }

  /* Enable timer(s) counter */
  hhrtim->Instance->sMasterRegs.MCR |= (Timers);
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	6819      	ldr	r1, [r3, #0]
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	683a      	ldr	r2, [r7, #0]
 8007f56:	430a      	orrs	r2, r1
 8007f58:	601a      	str	r2, [r3, #0]

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	2201      	movs	r2, #1
 8007f5e:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	2200      	movs	r2, #0
 8007f66:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;}
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	4618      	mov	r0, r3
 8007f6e:	3714      	adds	r7, #20
 8007f70:	46bd      	mov	sp, r7
 8007f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f76:	4770      	bx	lr
 8007f78:	2000002c 	.word	0x2000002c

08007f7c <HAL_HRTIM_WaveformCountStop_IT>:
  * @note The counter of a timer is stopped only if all timer outputs are disabled
  * @note All enabled timer related interrupts are disabled.
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformCountStop_IT(HRTIM_HandleTypeDef * hhrtim,
                                                   uint32_t Timers)
{
 8007f7c:	b480      	push	{r7}
 8007f7e:	b085      	sub	sp, #20
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]
 8007f84:	6039      	str	r1, [r7, #0]
  /* ++ WA */
  __IO uint32_t delai = (uint32_t)(0x17FU);
 8007f86:	f240 137f 	movw	r3, #383	; 0x17f
 8007f8a:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERID(Timers));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8007f92:	2b01      	cmp	r3, #1
 8007f94:	d101      	bne.n	8007f9a <HAL_HRTIM_WaveformCountStop_IT+0x1e>
 8007f96:	2302      	movs	r3, #2
 8007f98:	e065      	b.n	8008066 <HAL_HRTIM_WaveformCountStop_IT+0xea>
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	2201      	movs	r2, #1
 8007f9e:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	2202      	movs	r2, #2
 8007fa6:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Disable HRTIM interrupts (if required) */
  __HAL_HRTIM_DISABLE_IT(hhrtim, hhrtim->Init.HRTIMInterruptResquests);
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	f8d3 1390 	ldr.w	r1, [r3, #912]	; 0x390
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	685b      	ldr	r3, [r3, #4]
 8007fb6:	43da      	mvns	r2, r3
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	400a      	ands	r2, r1
 8007fbe:	f8c3 2390 	str.w	r2, [r3, #912]	; 0x390

  /* Disable master timer related interrupts (if required) */
  if ((Timers & HRTIM_TIMERID_MASTER) != 0U)
 8007fc2:	683b      	ldr	r3, [r7, #0]
 8007fc4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d00a      	beq.n	8007fe2 <HAL_HRTIM_WaveformCountStop_IT+0x66>
  {
    /* Interrupts enable flag must be cleared one by one */
    __HAL_HRTIM_MASTER_DISABLE_IT(hhrtim, hhrtim->TimerParam[HRTIM_TIMERINDEX_MASTER].InterruptRequests);
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	68d9      	ldr	r1, [r3, #12]
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007fd8:	43da      	mvns	r2, r3
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	400a      	ands	r2, r1
 8007fe0:	60da      	str	r2, [r3, #12]
  }

  /* Disable timing unit related interrupts (if required) */
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 8007fe2:	2300      	movs	r3, #0
 8007fe4:	73fb      	strb	r3, [r7, #15]
 8007fe6:	e023      	b.n	8008030 <HAL_HRTIM_WaveformCountStop_IT+0xb4>
       timer_idx < HRTIM_TIMERINDEX_MASTER ;
       timer_idx++)
  {
    if ((Timers & TimerIdxToTimerId[timer_idx]) != 0U)
 8007fe8:	7bfb      	ldrb	r3, [r7, #15]
 8007fea:	4a22      	ldr	r2, [pc, #136]	; (8008074 <HAL_HRTIM_WaveformCountStop_IT+0xf8>)
 8007fec:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8007ff0:	683b      	ldr	r3, [r7, #0]
 8007ff2:	4013      	ands	r3, r2
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d018      	beq.n	800802a <HAL_HRTIM_WaveformCountStop_IT+0xae>
    {
      __HAL_HRTIM_TIMER_DISABLE_IT(hhrtim, timer_idx, hhrtim->TimerParam[timer_idx].InterruptRequests);
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681a      	ldr	r2, [r3, #0]
 8007ffc:	7bfb      	ldrb	r3, [r7, #15]
 8007ffe:	01db      	lsls	r3, r3, #7
 8008000:	4413      	add	r3, r2
 8008002:	338c      	adds	r3, #140	; 0x8c
 8008004:	6818      	ldr	r0, [r3, #0]
 8008006:	7bfa      	ldrb	r2, [r7, #15]
 8008008:	6879      	ldr	r1, [r7, #4]
 800800a:	4613      	mov	r3, r2
 800800c:	00db      	lsls	r3, r3, #3
 800800e:	1a9b      	subs	r3, r3, r2
 8008010:	009b      	lsls	r3, r3, #2
 8008012:	440b      	add	r3, r1
 8008014:	3320      	adds	r3, #32
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	43da      	mvns	r2, r3
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	6819      	ldr	r1, [r3, #0]
 800801e:	7bfb      	ldrb	r3, [r7, #15]
 8008020:	4002      	ands	r2, r0
 8008022:	01db      	lsls	r3, r3, #7
 8008024:	440b      	add	r3, r1
 8008026:	338c      	adds	r3, #140	; 0x8c
 8008028:	601a      	str	r2, [r3, #0]
       timer_idx++)
 800802a:	7bfb      	ldrb	r3, [r7, #15]
 800802c:	3301      	adds	r3, #1
 800802e:	73fb      	strb	r3, [r7, #15]
       timer_idx < HRTIM_TIMERINDEX_MASTER ;
 8008030:	7bfb      	ldrb	r3, [r7, #15]
 8008032:	2b04      	cmp	r3, #4
 8008034:	d9d8      	bls.n	8007fe8 <HAL_HRTIM_WaveformCountStop_IT+0x6c>
    }
  }

  /* ++ WA */
  do { delai--; } while (delai != 0U);
 8008036:	68bb      	ldr	r3, [r7, #8]
 8008038:	3b01      	subs	r3, #1
 800803a:	60bb      	str	r3, [r7, #8]
 800803c:	68bb      	ldr	r3, [r7, #8]
 800803e:	2b00      	cmp	r3, #0
 8008040:	d1f9      	bne.n	8008036 <HAL_HRTIM_WaveformCountStop_IT+0xba>
  /* -- WA */

  /* Disable timer(s) counter */
  hhrtim->Instance->sMasterRegs.MCR &= ~(Timers);
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	6819      	ldr	r1, [r3, #0]
 8008048:	683b      	ldr	r3, [r7, #0]
 800804a:	43da      	mvns	r2, r3
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	400a      	ands	r2, r1
 8008052:	601a      	str	r2, [r3, #0]

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	2201      	movs	r2, #1
 8008058:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	2200      	movs	r2, #0
 8008060:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 8008064:	2300      	movs	r3, #0
}
 8008066:	4618      	mov	r0, r3
 8008068:	3714      	adds	r7, #20
 800806a:	46bd      	mov	sp, r7
 800806c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008070:	4770      	bx	lr
 8008072:	bf00      	nop
 8008074:	2000002c 	.word	0x2000002c

08008078 <HAL_HRTIM_IRQHandler>:
  *                   This parameter can be any value of HRTIM_Timer_Index
  * @retval None
  */
void HAL_HRTIM_IRQHandler(HRTIM_HandleTypeDef * hhrtim,
                          uint32_t TimerIdx)
{
 8008078:	b580      	push	{r7, lr}
 800807a:	b082      	sub	sp, #8
 800807c:	af00      	add	r7, sp, #0
 800807e:	6078      	str	r0, [r7, #4]
 8008080:	6039      	str	r1, [r7, #0]
  /* HRTIM interrupts handling */
  if (TimerIdx == HRTIM_TIMERINDEX_COMMON)
 8008082:	683b      	ldr	r3, [r7, #0]
 8008084:	2bff      	cmp	r3, #255	; 0xff
 8008086:	d103      	bne.n	8008090 <HAL_HRTIM_IRQHandler+0x18>
  {
    HRTIM_HRTIM_ISR(hhrtim);
 8008088:	6878      	ldr	r0, [r7, #4]
 800808a:	f000 fc29 	bl	80088e0 <HRTIM_HRTIM_ISR>
  {
    /* Timing unit related interrupts handling */
    HRTIM_Timer_ISR(hhrtim, TimerIdx);
  }

}
 800808e:	e00a      	b.n	80080a6 <HAL_HRTIM_IRQHandler+0x2e>
  else if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8008090:	683b      	ldr	r3, [r7, #0]
 8008092:	2b05      	cmp	r3, #5
 8008094:	d103      	bne.n	800809e <HAL_HRTIM_IRQHandler+0x26>
    HRTIM_Master_ISR(hhrtim);
 8008096:	6878      	ldr	r0, [r7, #4]
 8008098:	f000 fca0 	bl	80089dc <HRTIM_Master_ISR>
}
 800809c:	e003      	b.n	80080a6 <HAL_HRTIM_IRQHandler+0x2e>
    HRTIM_Timer_ISR(hhrtim, TimerIdx);
 800809e:	6839      	ldr	r1, [r7, #0]
 80080a0:	6878      	ldr	r0, [r7, #4]
 80080a2:	f000 fd45 	bl	8008b30 <HRTIM_Timer_ISR>
}
 80080a6:	bf00      	nop
 80080a8:	3708      	adds	r7, #8
 80080aa:	46bd      	mov	sp, r7
 80080ac:	bd80      	pop	{r7, pc}

080080ae <HAL_HRTIM_Fault1Callback>:
  * @brief  Callback function invoked when a fault 1 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle  * @retval None
  * @retval None
  */
__weak void HAL_HRTIM_Fault1Callback(HRTIM_HandleTypeDef * hhrtim)
{
 80080ae:	b480      	push	{r7}
 80080b0:	b083      	sub	sp, #12
 80080b2:	af00      	add	r7, sp, #0
 80080b4:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault1Callback could be implemented in the user file
   */
}
 80080b6:	bf00      	nop
 80080b8:	370c      	adds	r7, #12
 80080ba:	46bd      	mov	sp, r7
 80080bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c0:	4770      	bx	lr

080080c2 <HAL_HRTIM_Fault2Callback>:
  * @brief  Callback function invoked when a fault 2 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault2Callback(HRTIM_HandleTypeDef * hhrtim)
{
 80080c2:	b480      	push	{r7}
 80080c4:	b083      	sub	sp, #12
 80080c6:	af00      	add	r7, sp, #0
 80080c8:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault2Callback could be implemented in the user file
   */
}
 80080ca:	bf00      	nop
 80080cc:	370c      	adds	r7, #12
 80080ce:	46bd      	mov	sp, r7
 80080d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d4:	4770      	bx	lr

080080d6 <HAL_HRTIM_Fault3Callback>:
  * @brief  Callback function invoked when a fault 3 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault3Callback(HRTIM_HandleTypeDef * hhrtim)
{
 80080d6:	b480      	push	{r7}
 80080d8:	b083      	sub	sp, #12
 80080da:	af00      	add	r7, sp, #0
 80080dc:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault3Callback could be implemented in the user file
   */
}
 80080de:	bf00      	nop
 80080e0:	370c      	adds	r7, #12
 80080e2:	46bd      	mov	sp, r7
 80080e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e8:	4770      	bx	lr

080080ea <HAL_HRTIM_Fault4Callback>:
  * @brief  Callback function invoked when a fault 4 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault4Callback(HRTIM_HandleTypeDef * hhrtim)
{
 80080ea:	b480      	push	{r7}
 80080ec:	b083      	sub	sp, #12
 80080ee:	af00      	add	r7, sp, #0
 80080f0:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault4Callback could be implemented in the user file
   */
}
 80080f2:	bf00      	nop
 80080f4:	370c      	adds	r7, #12
 80080f6:	46bd      	mov	sp, r7
 80080f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080fc:	4770      	bx	lr

080080fe <HAL_HRTIM_Fault5Callback>:
  * @brief  Callback function invoked when a fault 5 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault5Callback(HRTIM_HandleTypeDef * hhrtim)
{
 80080fe:	b480      	push	{r7}
 8008100:	b083      	sub	sp, #12
 8008102:	af00      	add	r7, sp, #0
 8008104:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault5Callback could be implemented in the user file
   */
}
 8008106:	bf00      	nop
 8008108:	370c      	adds	r7, #12
 800810a:	46bd      	mov	sp, r7
 800810c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008110:	4770      	bx	lr

08008112 <HAL_HRTIM_SystemFaultCallback>:
  * @brief  Callback function invoked when a system fault interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_SystemFaultCallback(HRTIM_HandleTypeDef * hhrtim)
{
 8008112:	b480      	push	{r7}
 8008114:	b083      	sub	sp, #12
 8008116:	af00      	add	r7, sp, #0
 8008118:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_SystemFaultCallback could be implemented in the user file
   */
}
 800811a:	bf00      	nop
 800811c:	370c      	adds	r7, #12
 800811e:	46bd      	mov	sp, r7
 8008120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008124:	4770      	bx	lr

08008126 <HAL_HRTIM_BurstModePeriodCallback>:
  * @brief  Callback function invoked when the end of the burst mode period is reached
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_BurstModePeriodCallback(HRTIM_HandleTypeDef * hhrtim)
{
 8008126:	b480      	push	{r7}
 8008128:	b083      	sub	sp, #12
 800812a:	af00      	add	r7, sp, #0
 800812c:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_BurstModeCallback could be implemented in the user file
   */
}
 800812e:	bf00      	nop
 8008130:	370c      	adds	r7, #12
 8008132:	46bd      	mov	sp, r7
 8008134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008138:	4770      	bx	lr

0800813a <HAL_HRTIM_SynchronizationEventCallback>:
  * @brief  Callback function invoked when a synchronization input event is received
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_SynchronizationEventCallback(HRTIM_HandleTypeDef * hhrtim)
{
 800813a:	b480      	push	{r7}
 800813c:	b083      	sub	sp, #12
 800813e:	af00      	add	r7, sp, #0
 8008140:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_SynchronizationEventCallback could be implemented in the user file
   */
}
 8008142:	bf00      	nop
 8008144:	370c      	adds	r7, #12
 8008146:	46bd      	mov	sp, r7
 8008148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800814c:	4770      	bx	lr

0800814e <HAL_HRTIM_RegistersUpdateCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_RegistersUpdateCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 800814e:	b480      	push	{r7}
 8008150:	b083      	sub	sp, #12
 8008152:	af00      	add	r7, sp, #0
 8008154:	6078      	str	r0, [r7, #4]
 8008156:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_RegistersUpdateCallback could be implemented in the user file
   */
}
 8008158:	bf00      	nop
 800815a:	370c      	adds	r7, #12
 800815c:	46bd      	mov	sp, r7
 800815e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008162:	4770      	bx	lr

08008164 <HAL_HRTIM_Compare1EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Compare1EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8008164:	b480      	push	{r7}
 8008166:	b083      	sub	sp, #12
 8008168:	af00      	add	r7, sp, #0
 800816a:	6078      	str	r0, [r7, #4]
 800816c:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_Compare1EventCallback could be implemented in the user file
   */
}
 800816e:	bf00      	nop
 8008170:	370c      	adds	r7, #12
 8008172:	46bd      	mov	sp, r7
 8008174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008178:	4770      	bx	lr

0800817a <HAL_HRTIM_Compare4EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Compare4EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 800817a:	b480      	push	{r7}
 800817c:	b083      	sub	sp, #12
 800817e:	af00      	add	r7, sp, #0
 8008180:	6078      	str	r0, [r7, #4]
 8008182:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_Compare4EventCallback could be implemented in the user file
   */
}
 8008184:	bf00      	nop
 8008186:	370c      	adds	r7, #12
 8008188:	46bd      	mov	sp, r7
 800818a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800818e:	4770      	bx	lr

08008190 <HAL_HRTIM_Capture1EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Capture1EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8008190:	b480      	push	{r7}
 8008192:	b083      	sub	sp, #12
 8008194:	af00      	add	r7, sp, #0
 8008196:	6078      	str	r0, [r7, #4]
 8008198:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Capture1EventCallback could be implemented in the user file
   */
}
 800819a:	bf00      	nop
 800819c:	370c      	adds	r7, #12
 800819e:	46bd      	mov	sp, r7
 80081a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a4:	4770      	bx	lr

080081a6 <HAL_HRTIM_Capture2EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Capture2EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 80081a6:	b480      	push	{r7}
 80081a8:	b083      	sub	sp, #12
 80081aa:	af00      	add	r7, sp, #0
 80081ac:	6078      	str	r0, [r7, #4]
 80081ae:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Capture2EventCallback could be implemented in the user file
   */
}
 80081b0:	bf00      	nop
 80081b2:	370c      	adds	r7, #12
 80081b4:	46bd      	mov	sp, r7
 80081b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ba:	4770      	bx	lr

080081bc <HAL_HRTIM_DelayedProtectionCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_DelayedProtectionCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 80081bc:	b480      	push	{r7}
 80081be:	b083      	sub	sp, #12
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	6078      	str	r0, [r7, #4]
 80081c4:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_DelayedProtectionCallback could be implemented in the user file
   */
}
 80081c6:	bf00      	nop
 80081c8:	370c      	adds	r7, #12
 80081ca:	46bd      	mov	sp, r7
 80081cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d0:	4770      	bx	lr

080081d2 <HAL_HRTIM_CounterResetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_CounterResetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 80081d2:	b480      	push	{r7}
 80081d4:	b083      	sub	sp, #12
 80081d6:	af00      	add	r7, sp, #0
 80081d8:	6078      	str	r0, [r7, #4]
 80081da:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_CounterResetCallback could be implemented in the user file
   */
}
 80081dc:	bf00      	nop
 80081de:	370c      	adds	r7, #12
 80081e0:	46bd      	mov	sp, r7
 80081e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e6:	4770      	bx	lr

080081e8 <HAL_HRTIM_Output1SetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Output1SetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 80081e8:	b480      	push	{r7}
 80081ea:	b083      	sub	sp, #12
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	6078      	str	r0, [r7, #4]
 80081f0:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Output1SetCallback could be implemented in the user file
   */
}
 80081f2:	bf00      	nop
 80081f4:	370c      	adds	r7, #12
 80081f6:	46bd      	mov	sp, r7
 80081f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081fc:	4770      	bx	lr

080081fe <HAL_HRTIM_Output1ResetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Output1ResetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 80081fe:	b480      	push	{r7}
 8008200:	b083      	sub	sp, #12
 8008202:	af00      	add	r7, sp, #0
 8008204:	6078      	str	r0, [r7, #4]
 8008206:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Output1ResetCallback could be implemented in the user file
   */
}
 8008208:	bf00      	nop
 800820a:	370c      	adds	r7, #12
 800820c:	46bd      	mov	sp, r7
 800820e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008212:	4770      	bx	lr

08008214 <HAL_HRTIM_Output2SetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Output2SetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8008214:	b480      	push	{r7}
 8008216:	b083      	sub	sp, #12
 8008218:	af00      	add	r7, sp, #0
 800821a:	6078      	str	r0, [r7, #4]
 800821c:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Output2SetCallback could be implemented in the user file
   */
}
 800821e:	bf00      	nop
 8008220:	370c      	adds	r7, #12
 8008222:	46bd      	mov	sp, r7
 8008224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008228:	4770      	bx	lr

0800822a <HAL_HRTIM_Output2ResetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Output2ResetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 800822a:	b480      	push	{r7}
 800822c:	b083      	sub	sp, #12
 800822e:	af00      	add	r7, sp, #0
 8008230:	6078      	str	r0, [r7, #4]
 8008232:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Output2ResetCallback could be implemented in the user file
   */
}
 8008234:	bf00      	nop
 8008236:	370c      	adds	r7, #12
 8008238:	46bd      	mov	sp, r7
 800823a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823e:	4770      	bx	lr

08008240 <HRTIM_MasterBase_Config>:
  * @param  pTimeBaseCfg pointer to the time base configuration structure
  * @retval None
  */
static void HRTIM_MasterBase_Config(HRTIM_HandleTypeDef * hhrtim,
                                    const HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 8008240:	b480      	push	{r7}
 8008242:	b085      	sub	sp, #20
 8008244:	af00      	add	r7, sp, #0
 8008246:	6078      	str	r0, [r7, #4]
 8008248:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	60fb      	str	r3, [r7, #12]

  /* Set the prescaler ratio */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CK_PSC);
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	f023 0307 	bic.w	r3, r3, #7
 8008258:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 800825a:	683b      	ldr	r3, [r7, #0]
 800825c:	689b      	ldr	r3, [r3, #8]
 800825e:	68fa      	ldr	r2, [r7, #12]
 8008260:	4313      	orrs	r3, r2
 8008262:	60fb      	str	r3, [r7, #12]

  /* Set the operating mode */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CONT | HRTIM_MCR_RETRIG);
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	f023 0318 	bic.w	r3, r3, #24
 800826a:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->Mode;
 800826c:	683b      	ldr	r3, [r7, #0]
 800826e:	68db      	ldr	r3, [r3, #12]
 8008270:	68fa      	ldr	r2, [r7, #12]
 8008272:	4313      	orrs	r3, r2
 8008274:	60fb      	str	r3, [r7, #12]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	68fa      	ldr	r2, [r7, #12]
 800827c:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sMasterRegs.MPER = pTimeBaseCfg->Period;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	683a      	ldr	r2, [r7, #0]
 8008284:	6812      	ldr	r2, [r2, #0]
 8008286:	615a      	str	r2, [r3, #20]
  hhrtim->Instance->sMasterRegs.MREP = pTimeBaseCfg->RepetitionCounter;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	683a      	ldr	r2, [r7, #0]
 800828e:	6852      	ldr	r2, [r2, #4]
 8008290:	619a      	str	r2, [r3, #24]
}
 8008292:	bf00      	nop
 8008294:	3714      	adds	r7, #20
 8008296:	46bd      	mov	sp, r7
 8008298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800829c:	4770      	bx	lr

0800829e <HRTIM_TimingUnitBase_Config>:
  * @retval None
  */
static void HRTIM_TimingUnitBase_Config(HRTIM_HandleTypeDef * hhrtim,
                                        uint32_t TimerIdx ,
                                        const HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 800829e:	b480      	push	{r7}
 80082a0:	b087      	sub	sp, #28
 80082a2:	af00      	add	r7, sp, #0
 80082a4:	60f8      	str	r0, [r7, #12]
 80082a6:	60b9      	str	r1, [r7, #8]
 80082a8:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timcr;

  /* Configure master timing unit */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	681a      	ldr	r2, [r3, #0]
 80082ae:	68bb      	ldr	r3, [r7, #8]
 80082b0:	3301      	adds	r3, #1
 80082b2:	01db      	lsls	r3, r3, #7
 80082b4:	4413      	add	r3, r2
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	617b      	str	r3, [r7, #20]

  /* Set the prescaler ratio */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CK_PSC);
 80082ba:	697b      	ldr	r3, [r7, #20]
 80082bc:	f023 0307 	bic.w	r3, r3, #7
 80082c0:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	689b      	ldr	r3, [r3, #8]
 80082c6:	697a      	ldr	r2, [r7, #20]
 80082c8:	4313      	orrs	r3, r2
 80082ca:	617b      	str	r3, [r7, #20]

  /* Set the operating mode */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CONT | HRTIM_TIMCR_RETRIG);
 80082cc:	697b      	ldr	r3, [r7, #20]
 80082ce:	f023 0318 	bic.w	r3, r3, #24
 80082d2:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->Mode;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	68db      	ldr	r3, [r3, #12]
 80082d8:	697a      	ldr	r2, [r7, #20]
 80082da:	4313      	orrs	r3, r2
 80082dc:	617b      	str	r3, [r7, #20]

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	681a      	ldr	r2, [r3, #0]
 80082e2:	68bb      	ldr	r3, [r7, #8]
 80082e4:	3301      	adds	r3, #1
 80082e6:	01db      	lsls	r3, r3, #7
 80082e8:	4413      	add	r3, r2
 80082ea:	697a      	ldr	r2, [r7, #20]
 80082ec:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].PERxR = pTimeBaseCfg->Period;
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	6819      	ldr	r1, [r3, #0]
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681a      	ldr	r2, [r3, #0]
 80082f6:	68bb      	ldr	r3, [r7, #8]
 80082f8:	01db      	lsls	r3, r3, #7
 80082fa:	440b      	add	r3, r1
 80082fc:	3394      	adds	r3, #148	; 0x94
 80082fe:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].REPxR = pTimeBaseCfg->RepetitionCounter;
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	6819      	ldr	r1, [r3, #0]
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	685a      	ldr	r2, [r3, #4]
 8008308:	68bb      	ldr	r3, [r7, #8]
 800830a:	01db      	lsls	r3, r3, #7
 800830c:	440b      	add	r3, r1
 800830e:	3398      	adds	r3, #152	; 0x98
 8008310:	601a      	str	r2, [r3, #0]
}
 8008312:	bf00      	nop
 8008314:	371c      	adds	r7, #28
 8008316:	46bd      	mov	sp, r7
 8008318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800831c:	4770      	bx	lr

0800831e <HRTIM_MasterWaveform_Config>:
  * @param  pTimerCfg pointer to the timer configuration data structure
  * @retval None
  */
static void HRTIM_MasterWaveform_Config(HRTIM_HandleTypeDef * hhrtim,
                                        const HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 800831e:	b480      	push	{r7}
 8008320:	b085      	sub	sp, #20
 8008322:	af00      	add	r7, sp, #0
 8008324:	6078      	str	r0, [r7, #4]
 8008326:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;
  uint32_t hrtim_bmcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	60fb      	str	r3, [r7, #12]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	f8d3 33a0 	ldr.w	r3, [r3, #928]	; 0x3a0
 8008338:	60bb      	str	r3, [r7, #8]

  /* Enable/Disable the half mode */
  hrtim_mcr &= ~(HRTIM_MCR_HALF);
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	f023 0320 	bic.w	r3, r3, #32
 8008340:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->HalfModeEnable;
 8008342:	683b      	ldr	r3, [r7, #0]
 8008344:	695b      	ldr	r3, [r3, #20]
 8008346:	68fa      	ldr	r2, [r7, #12]
 8008348:	4313      	orrs	r3, r2
 800834a:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCSTRTM);
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008352:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->StartOnSync;
 8008354:	683b      	ldr	r3, [r7, #0]
 8008356:	699b      	ldr	r3, [r3, #24]
 8008358:	68fa      	ldr	r2, [r7, #12]
 800835a:	4313      	orrs	r3, r2
 800835c:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCRSTM);
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008364:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->ResetOnSync;
 8008366:	683b      	ldr	r3, [r7, #0]
 8008368:	69db      	ldr	r3, [r3, #28]
 800836a:	68fa      	ldr	r2, [r7, #12]
 800836c:	4313      	orrs	r3, r2
 800836e:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_mcr &= ~(HRTIM_MCR_DACSYNC);
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8008376:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->DACSynchro;
 8008378:	683b      	ldr	r3, [r7, #0]
 800837a:	6a1b      	ldr	r3, [r3, #32]
 800837c:	68fa      	ldr	r2, [r7, #12]
 800837e:	4313      	orrs	r3, r2
 8008380:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable preload mechanism for timer registers */
  hrtim_mcr &= ~(HRTIM_MCR_PREEN);
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8008388:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->PreloadEnable;
 800838a:	683b      	ldr	r3, [r7, #0]
 800838c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800838e:	68fa      	ldr	r2, [r7, #12]
 8008390:	4313      	orrs	r3, r2
 8008392:	60fb      	str	r3, [r7, #12]

  /* Master timer registers update handling */
  hrtim_mcr &= ~(HRTIM_MCR_BRSTDMA);
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800839a:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (pTimerCfg->UpdateGating << 2U);
 800839c:	683b      	ldr	r3, [r7, #0]
 800839e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083a0:	009b      	lsls	r3, r3, #2
 80083a2:	68fa      	ldr	r2, [r7, #12]
 80083a4:	4313      	orrs	r3, r2
 80083a6:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable registers update on repetition */
  hrtim_mcr &= ~(HRTIM_MCR_MREPU);
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80083ae:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->RepetitionUpdate;
 80083b0:	683b      	ldr	r3, [r7, #0]
 80083b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083b4:	68fa      	ldr	r2, [r7, #12]
 80083b6:	4313      	orrs	r3, r2
 80083b8:	60fb      	str	r3, [r7, #12]

  /* Set the timer burst mode */
  hrtim_bmcr &= ~(HRTIM_BMCR_MTBM);
 80083ba:	68bb      	ldr	r3, [r7, #8]
 80083bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80083c0:	60bb      	str	r3, [r7, #8]
  hrtim_bmcr |= pTimerCfg->BurstMode;
 80083c2:	683b      	ldr	r3, [r7, #0]
 80083c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083c6:	68ba      	ldr	r2, [r7, #8]
 80083c8:	4313      	orrs	r3, r2
 80083ca:	60bb      	str	r3, [r7, #8]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	68fa      	ldr	r2, [r7, #12]
 80083d2:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	68ba      	ldr	r2, [r7, #8]
 80083da:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0
}
 80083de:	bf00      	nop
 80083e0:	3714      	adds	r7, #20
 80083e2:	46bd      	mov	sp, r7
 80083e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e8:	4770      	bx	lr
	...

080083ec <HRTIM_TimingUnitWaveform_Config>:
  * @retval None
  */
static void  HRTIM_TimingUnitWaveform_Config(HRTIM_HandleTypeDef * hhrtim,
                                             uint32_t TimerIdx,
                                             const HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 80083ec:	b480      	push	{r7}
 80083ee:	b08b      	sub	sp, #44	; 0x2c
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	60f8      	str	r0, [r7, #12]
 80083f4:	60b9      	str	r1, [r7, #8]
 80083f6:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timoutr;
  uint32_t hrtim_timrstr;
  uint32_t hrtim_bmcr;

  /* UPDGAT bitfield must be reset before programming a new value */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~(HRTIM_TIMCR_UPDGAT);
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	681a      	ldr	r2, [r3, #0]
 80083fc:	68bb      	ldr	r3, [r7, #8]
 80083fe:	3301      	adds	r3, #1
 8008400:	01db      	lsls	r3, r3, #7
 8008402:	4413      	add	r3, r2
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	68fa      	ldr	r2, [r7, #12]
 8008408:	6811      	ldr	r1, [r2, #0]
 800840a:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 800840e:	68bb      	ldr	r3, [r7, #8]
 8008410:	3301      	adds	r3, #1
 8008412:	01db      	lsls	r3, r3, #7
 8008414:	440b      	add	r3, r1
 8008416:	601a      	str	r2, [r3, #0]

  /* Configure timing unit (Timer A to Timer E) */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	681a      	ldr	r2, [r3, #0]
 800841c:	68bb      	ldr	r3, [r7, #8]
 800841e:	3301      	adds	r3, #1
 8008420:	01db      	lsls	r3, r3, #7
 8008422:	4413      	add	r3, r2
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timfltr = hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR;
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	681a      	ldr	r2, [r3, #0]
 800842c:	68bb      	ldr	r3, [r7, #8]
 800842e:	01db      	lsls	r3, r3, #7
 8008430:	4413      	add	r3, r2
 8008432:	33e8      	adds	r3, #232	; 0xe8
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	61bb      	str	r3, [r7, #24]
  hrtim_timoutr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	681a      	ldr	r2, [r3, #0]
 800843c:	68bb      	ldr	r3, [r7, #8]
 800843e:	01db      	lsls	r3, r3, #7
 8008440:	4413      	add	r3, r2
 8008442:	33e4      	adds	r3, #228	; 0xe4
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	623b      	str	r3, [r7, #32]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	f8d3 33a0 	ldr.w	r3, [r3, #928]	; 0x3a0
 8008450:	61fb      	str	r3, [r7, #28]

  /* Enable/Disable the half mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_HALF);
 8008452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008454:	f023 0320 	bic.w	r3, r3, #32
 8008458:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->HalfModeEnable;
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	695b      	ldr	r3, [r3, #20]
 800845e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008460:	4313      	orrs	r3, r2
 8008462:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCSTRT);
 8008464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008466:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800846a:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->StartOnSync;
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	699b      	ldr	r3, [r3, #24]
 8008470:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008472:	4313      	orrs	r3, r2
 8008474:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCRST);
 8008476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008478:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800847c:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->ResetOnSync;
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	69db      	ldr	r3, [r3, #28]
 8008482:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008484:	4313      	orrs	r3, r2
 8008486:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_timcr &= ~(HRTIM_TIMCR_DACSYNC);
 8008488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800848a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800848e:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->DACSynchro;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	6a1b      	ldr	r3, [r3, #32]
 8008494:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008496:	4313      	orrs	r3, r2
 8008498:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable preload mechanism for timer registers */
  hrtim_timcr &= ~(HRTIM_TIMCR_PREEN);
 800849a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800849c:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 80084a0:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->PreloadEnable;
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80084a8:	4313      	orrs	r3, r2
 80084aa:	627b      	str	r3, [r7, #36]	; 0x24

  /* Timing unit registers update handling */
  hrtim_timcr &= ~(HRTIM_TIMCR_UPDGAT);
 80084ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084ae:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80084b2:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->UpdateGating;
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80084ba:	4313      	orrs	r3, r2
 80084bc:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable registers update on repetition */
  hrtim_timcr &= ~(HRTIM_TIMCR_TREPU);
 80084be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084c0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80084c4:	627b      	str	r3, [r7, #36]	; 0x24
  if (pTimerCfg->RepetitionUpdate == HRTIM_UPDATEONREPETITION_ENABLED)
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80084ce:	d103      	bne.n	80084d8 <HRTIM_TimingUnitWaveform_Config+0xec>
  {
    hrtim_timcr |= HRTIM_TIMCR_TREPU;
 80084d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80084d6:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Set the push-pull mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_PSHPLL);
 80084d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80084de:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->PushPull;
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80084e6:	4313      	orrs	r3, r2
 80084e8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable registers update on timer counter reset */
  hrtim_timcr &= ~(HRTIM_TIMCR_TRSTU);
 80084ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084ec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80084f0:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->ResetUpdate;
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80084f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80084f8:	4313      	orrs	r3, r2
 80084fa:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set the timer update trigger */
  hrtim_timcr &= ~(HRTIM_TIMCR_TIMUPDATETRIGGER);
 80084fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084fe:	f023 73fc 	bic.w	r3, r3, #33030144	; 0x1f80000
 8008502:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->UpdateTrigger;
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008508:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800850a:	4313      	orrs	r3, r2
 800850c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the fault channel at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTxEN);
 800850e:	69bb      	ldr	r3, [r7, #24]
 8008510:	f023 031f 	bic.w	r3, r3, #31
 8008514:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= (pTimerCfg->FaultEnable & HRTIM_FLTR_FLTxEN);
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800851a:	f003 031f 	and.w	r3, r3, #31
 800851e:	69ba      	ldr	r2, [r7, #24]
 8008520:	4313      	orrs	r3, r2
 8008522:	61bb      	str	r3, [r7, #24]

  /* Lock/Unlock fault sources at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTLCK);
 8008524:	69bb      	ldr	r3, [r7, #24]
 8008526:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800852a:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= pTimerCfg->FaultLock;
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008530:	69ba      	ldr	r2, [r7, #24]
 8008532:	4313      	orrs	r3, r2
 8008534:	61bb      	str	r3, [r7, #24]

  /* The deadtime cannot be used simultaneously with the push-pull mode */
  if (pTimerCfg->PushPull == HRTIM_TIMPUSHPULLMODE_DISABLED)
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800853a:	2b00      	cmp	r3, #0
 800853c:	d108      	bne.n	8008550 <HRTIM_TimingUnitWaveform_Config+0x164>
  {
    /* Enable/Disable dead time insertion at timer level */
    hrtim_timoutr &= ~(HRTIM_OUTR_DTEN);
 800853e:	6a3b      	ldr	r3, [r7, #32]
 8008540:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008544:	623b      	str	r3, [r7, #32]
    hrtim_timoutr |= pTimerCfg->DeadTimeInsertion;
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800854a:	6a3a      	ldr	r2, [r7, #32]
 800854c:	4313      	orrs	r3, r2
 800854e:	623b      	str	r3, [r7, #32]

  /* Enable/Disable delayed protection at timer level
     Delayed Idle is available whatever the timer operating mode (regular, push-pull)
     Balanced Idle is only available in push-pull mode
  */
  if ( ((pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV6)
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008554:	f5b3 6f60 	cmp.w	r3, #3584	; 0xe00
 8008558:	d004      	beq.n	8008564 <HRTIM_TimingUnitWaveform_Config+0x178>
       && (pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV7))
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800855e:	f5b3 5ff0 	cmp.w	r3, #7680	; 0x1e00
 8008562:	d103      	bne.n	800856c <HRTIM_TimingUnitWaveform_Config+0x180>
       || (pTimerCfg->PushPull == HRTIM_TIMPUSHPULLMODE_ENABLED))
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008568:	2b40      	cmp	r3, #64	; 0x40
 800856a:	d108      	bne.n	800857e <HRTIM_TimingUnitWaveform_Config+0x192>
  {
    hrtim_timoutr &= ~(HRTIM_OUTR_DLYPRT| HRTIM_OUTR_DLYPRTEN);
 800856c:	6a3b      	ldr	r3, [r7, #32]
 800856e:	f423 53f0 	bic.w	r3, r3, #7680	; 0x1e00
 8008572:	623b      	str	r3, [r7, #32]
    hrtim_timoutr |= pTimerCfg->DelayedProtectionMode;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008578:	6a3a      	ldr	r2, [r7, #32]
 800857a:	4313      	orrs	r3, r2
 800857c:	623b      	str	r3, [r7, #32]
  }

  /* Set the timer counter reset trigger */
  hrtim_timrstr = pTimerCfg->ResetTrigger;
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008582:	617b      	str	r3, [r7, #20]

  /* Set the timer burst mode */
  switch (TimerIdx)
 8008584:	68bb      	ldr	r3, [r7, #8]
 8008586:	2b04      	cmp	r3, #4
 8008588:	d843      	bhi.n	8008612 <HRTIM_TimingUnitWaveform_Config+0x226>
 800858a:	a201      	add	r2, pc, #4	; (adr r2, 8008590 <HRTIM_TimingUnitWaveform_Config+0x1a4>)
 800858c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008590:	080085a5 	.word	0x080085a5
 8008594:	080085bb 	.word	0x080085bb
 8008598:	080085d1 	.word	0x080085d1
 800859c:	080085e7 	.word	0x080085e7
 80085a0:	080085fd 	.word	0x080085fd
  {
  case HRTIM_TIMERINDEX_TIMER_A:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TABM);
 80085a4:	69fb      	ldr	r3, [r7, #28]
 80085a6:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80085aa:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 1U);
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085b0:	005b      	lsls	r3, r3, #1
 80085b2:	69fa      	ldr	r2, [r7, #28]
 80085b4:	4313      	orrs	r3, r2
 80085b6:	61fb      	str	r3, [r7, #28]
      break;
 80085b8:	e02c      	b.n	8008614 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_B:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TBBM);
 80085ba:	69fb      	ldr	r3, [r7, #28]
 80085bc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80085c0:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 2U);
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085c6:	009b      	lsls	r3, r3, #2
 80085c8:	69fa      	ldr	r2, [r7, #28]
 80085ca:	4313      	orrs	r3, r2
 80085cc:	61fb      	str	r3, [r7, #28]
      break;
 80085ce:	e021      	b.n	8008614 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_C:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TCBM);
 80085d0:	69fb      	ldr	r3, [r7, #28]
 80085d2:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80085d6:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 3U);
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085dc:	00db      	lsls	r3, r3, #3
 80085de:	69fa      	ldr	r2, [r7, #28]
 80085e0:	4313      	orrs	r3, r2
 80085e2:	61fb      	str	r3, [r7, #28]
      break;
 80085e4:	e016      	b.n	8008614 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_D:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TDBM);
 80085e6:	69fb      	ldr	r3, [r7, #28]
 80085e8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80085ec:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 4U);
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085f2:	011b      	lsls	r3, r3, #4
 80085f4:	69fa      	ldr	r2, [r7, #28]
 80085f6:	4313      	orrs	r3, r2
 80085f8:	61fb      	str	r3, [r7, #28]
      break;
 80085fa:	e00b      	b.n	8008614 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_E:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TEBM);
 80085fc:	69fb      	ldr	r3, [r7, #28]
 80085fe:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008602:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 5U);
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008608:	015b      	lsls	r3, r3, #5
 800860a:	69fa      	ldr	r2, [r7, #28]
 800860c:	4313      	orrs	r3, r2
 800860e:	61fb      	str	r3, [r7, #28]
      break;
 8008610:	e000      	b.n	8008614 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  default:
    break;
 8008612:	bf00      	nop
  }

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	681a      	ldr	r2, [r3, #0]
 8008618:	68bb      	ldr	r3, [r7, #8]
 800861a:	3301      	adds	r3, #1
 800861c:	01db      	lsls	r3, r3, #7
 800861e:	4413      	add	r3, r2
 8008620:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008622:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR = hrtim_timfltr;
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	681a      	ldr	r2, [r3, #0]
 8008628:	68bb      	ldr	r3, [r7, #8]
 800862a:	01db      	lsls	r3, r3, #7
 800862c:	4413      	add	r3, r2
 800862e:	33e8      	adds	r3, #232	; 0xe8
 8008630:	69ba      	ldr	r2, [r7, #24]
 8008632:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_timoutr;
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	681a      	ldr	r2, [r3, #0]
 8008638:	68bb      	ldr	r3, [r7, #8]
 800863a:	01db      	lsls	r3, r3, #7
 800863c:	4413      	add	r3, r2
 800863e:	33e4      	adds	r3, #228	; 0xe4
 8008640:	6a3a      	ldr	r2, [r7, #32]
 8008642:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].RSTxR = hrtim_timrstr;
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	681a      	ldr	r2, [r3, #0]
 8008648:	68bb      	ldr	r3, [r7, #8]
 800864a:	01db      	lsls	r3, r3, #7
 800864c:	4413      	add	r3, r2
 800864e:	33d4      	adds	r3, #212	; 0xd4
 8008650:	697a      	ldr	r2, [r7, #20]
 8008652:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	69fa      	ldr	r2, [r7, #28]
 800865a:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0
}
 800865e:	bf00      	nop
 8008660:	372c      	adds	r7, #44	; 0x2c
 8008662:	46bd      	mov	sp, r7
 8008664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008668:	4770      	bx	lr
 800866a:	bf00      	nop

0800866c <HRTIM_OutputConfig>:
  */
static void  HRTIM_OutputConfig(HRTIM_HandleTypeDef * hhrtim,
                                uint32_t TimerIdx,
                                uint32_t Output,
                                const HRTIM_OutputCfgTypeDef * pOutputCfg)
{
 800866c:	b480      	push	{r7}
 800866e:	b089      	sub	sp, #36	; 0x24
 8008670:	af00      	add	r7, sp, #0
 8008672:	60f8      	str	r0, [r7, #12]
 8008674:	60b9      	str	r1, [r7, #8]
 8008676:	607a      	str	r2, [r7, #4]
 8008678:	603b      	str	r3, [r7, #0]
  uint32_t hrtim_outr;
  uint32_t hrtim_dtr;

  uint32_t shift = 0U;
 800867a:	2300      	movs	r3, #0
 800867c:	61bb      	str	r3, [r7, #24]

  hrtim_outr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	681a      	ldr	r2, [r3, #0]
 8008682:	68bb      	ldr	r3, [r7, #8]
 8008684:	01db      	lsls	r3, r3, #7
 8008686:	4413      	add	r3, r2
 8008688:	33e4      	adds	r3, #228	; 0xe4
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	61fb      	str	r3, [r7, #28]
  hrtim_dtr = hhrtim->Instance->sTimerxRegs[TimerIdx].DTxR;
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	681a      	ldr	r2, [r3, #0]
 8008692:	68bb      	ldr	r3, [r7, #8]
 8008694:	01db      	lsls	r3, r3, #7
 8008696:	4413      	add	r3, r2
 8008698:	33b8      	adds	r3, #184	; 0xb8
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	617b      	str	r3, [r7, #20]

  switch (Output)
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80086a4:	d04d      	beq.n	8008742 <HRTIM_OutputConfig+0xd6>
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80086ac:	d85e      	bhi.n	800876c <HRTIM_OutputConfig+0x100>
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80086b4:	d032      	beq.n	800871c <HRTIM_OutputConfig+0xb0>
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80086bc:	d856      	bhi.n	800876c <HRTIM_OutputConfig+0x100>
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	2b80      	cmp	r3, #128	; 0x80
 80086c2:	d03e      	beq.n	8008742 <HRTIM_OutputConfig+0xd6>
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	2b80      	cmp	r3, #128	; 0x80
 80086c8:	d850      	bhi.n	800876c <HRTIM_OutputConfig+0x100>
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	2b40      	cmp	r3, #64	; 0x40
 80086ce:	d025      	beq.n	800871c <HRTIM_OutputConfig+0xb0>
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	2b40      	cmp	r3, #64	; 0x40
 80086d4:	d84a      	bhi.n	800876c <HRTIM_OutputConfig+0x100>
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	2b01      	cmp	r3, #1
 80086da:	d01f      	beq.n	800871c <HRTIM_OutputConfig+0xb0>
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d044      	beq.n	800876c <HRTIM_OutputConfig+0x100>
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	2b20      	cmp	r3, #32
 80086e6:	d841      	bhi.n	800876c <HRTIM_OutputConfig+0x100>
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	2b02      	cmp	r3, #2
 80086ec:	d33e      	bcc.n	800876c <HRTIM_OutputConfig+0x100>
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	3b02      	subs	r3, #2
 80086f2:	2201      	movs	r2, #1
 80086f4:	409a      	lsls	r2, r3
 80086f6:	4b48      	ldr	r3, [pc, #288]	; (8008818 <HRTIM_OutputConfig+0x1ac>)
 80086f8:	4013      	ands	r3, r2
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	bf14      	ite	ne
 80086fe:	2301      	movne	r3, #1
 8008700:	2300      	moveq	r3, #0
 8008702:	b2db      	uxtb	r3, r3
 8008704:	2b00      	cmp	r3, #0
 8008706:	d11c      	bne.n	8008742 <HRTIM_OutputConfig+0xd6>
 8008708:	f244 0304 	movw	r3, #16388	; 0x4004
 800870c:	4013      	ands	r3, r2
 800870e:	2b00      	cmp	r3, #0
 8008710:	bf14      	ite	ne
 8008712:	2301      	movne	r3, #1
 8008714:	2300      	moveq	r3, #0
 8008716:	b2db      	uxtb	r3, r3
 8008718:	2b00      	cmp	r3, #0
 800871a:	d027      	beq.n	800876c <HRTIM_OutputConfig+0x100>
  case HRTIM_OUTPUT_TC1:
  case HRTIM_OUTPUT_TD1:
  case HRTIM_OUTPUT_TE1:
    {
      /* Set the output set/reset crossbar */
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx1R = pOutputCfg->SetSource;
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	6819      	ldr	r1, [r3, #0]
 8008720:	683b      	ldr	r3, [r7, #0]
 8008722:	685a      	ldr	r2, [r3, #4]
 8008724:	68bb      	ldr	r3, [r7, #8]
 8008726:	01db      	lsls	r3, r3, #7
 8008728:	440b      	add	r3, r1
 800872a:	33bc      	adds	r3, #188	; 0xbc
 800872c:	601a      	str	r2, [r3, #0]
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx1R = pOutputCfg->ResetSource;
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	6819      	ldr	r1, [r3, #0]
 8008732:	683b      	ldr	r3, [r7, #0]
 8008734:	689a      	ldr	r2, [r3, #8]
 8008736:	68bb      	ldr	r3, [r7, #8]
 8008738:	01db      	lsls	r3, r3, #7
 800873a:	440b      	add	r3, r1
 800873c:	33c0      	adds	r3, #192	; 0xc0
 800873e:	601a      	str	r2, [r3, #0]
      break;
 8008740:	e015      	b.n	800876e <HRTIM_OutputConfig+0x102>
  case HRTIM_OUTPUT_TC2:
  case HRTIM_OUTPUT_TD2:
  case HRTIM_OUTPUT_TE2:
    {
      /* Set the output set/reset crossbar */
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx2R = pOutputCfg->SetSource;
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	6819      	ldr	r1, [r3, #0]
 8008746:	683b      	ldr	r3, [r7, #0]
 8008748:	685a      	ldr	r2, [r3, #4]
 800874a:	68bb      	ldr	r3, [r7, #8]
 800874c:	01db      	lsls	r3, r3, #7
 800874e:	440b      	add	r3, r1
 8008750:	33c4      	adds	r3, #196	; 0xc4
 8008752:	601a      	str	r2, [r3, #0]
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx2R = pOutputCfg->ResetSource;
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	6819      	ldr	r1, [r3, #0]
 8008758:	683b      	ldr	r3, [r7, #0]
 800875a:	689a      	ldr	r2, [r3, #8]
 800875c:	68bb      	ldr	r3, [r7, #8]
 800875e:	01db      	lsls	r3, r3, #7
 8008760:	440b      	add	r3, r1
 8008762:	33c8      	adds	r3, #200	; 0xc8
 8008764:	601a      	str	r2, [r3, #0]
      shift = 16U;
 8008766:	2310      	movs	r3, #16
 8008768:	61bb      	str	r3, [r7, #24]
      break;
 800876a:	e000      	b.n	800876e <HRTIM_OutputConfig+0x102>
    }

  default:
    break;
 800876c:	bf00      	nop
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
                   HRTIM_OUTR_IDLM1 |
                   HRTIM_OUTR_IDLES1|
                   HRTIM_OUTR_FAULT1|
                   HRTIM_OUTR_CHP1 |
                   HRTIM_OUTR_DIDL1) << shift);
 800876e:	22fe      	movs	r2, #254	; 0xfe
 8008770:	69bb      	ldr	r3, [r7, #24]
 8008772:	fa02 f303 	lsl.w	r3, r2, r3
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
 8008776:	43db      	mvns	r3, r3
 8008778:	69fa      	ldr	r2, [r7, #28]
 800877a:	4013      	ands	r3, r2
 800877c:	61fb      	str	r3, [r7, #28]

  /* Set the polarity */
  hrtim_outr |= (pOutputCfg->Polarity << shift);
 800877e:	683b      	ldr	r3, [r7, #0]
 8008780:	681a      	ldr	r2, [r3, #0]
 8008782:	69bb      	ldr	r3, [r7, #24]
 8008784:	fa02 f303 	lsl.w	r3, r2, r3
 8008788:	69fa      	ldr	r2, [r7, #28]
 800878a:	4313      	orrs	r3, r2
 800878c:	61fb      	str	r3, [r7, #28]

  /* Set the IDLE mode */
  hrtim_outr |= (pOutputCfg->IdleMode << shift);
 800878e:	683b      	ldr	r3, [r7, #0]
 8008790:	68da      	ldr	r2, [r3, #12]
 8008792:	69bb      	ldr	r3, [r7, #24]
 8008794:	fa02 f303 	lsl.w	r3, r2, r3
 8008798:	69fa      	ldr	r2, [r7, #28]
 800879a:	4313      	orrs	r3, r2
 800879c:	61fb      	str	r3, [r7, #28]

  /* Set the IDLE state */
  hrtim_outr |= (pOutputCfg->IdleLevel << shift);
 800879e:	683b      	ldr	r3, [r7, #0]
 80087a0:	691a      	ldr	r2, [r3, #16]
 80087a2:	69bb      	ldr	r3, [r7, #24]
 80087a4:	fa02 f303 	lsl.w	r3, r2, r3
 80087a8:	69fa      	ldr	r2, [r7, #28]
 80087aa:	4313      	orrs	r3, r2
 80087ac:	61fb      	str	r3, [r7, #28]

  /* Set the FAULT state */
  hrtim_outr |= (pOutputCfg->FaultLevel << shift);
 80087ae:	683b      	ldr	r3, [r7, #0]
 80087b0:	695a      	ldr	r2, [r3, #20]
 80087b2:	69bb      	ldr	r3, [r7, #24]
 80087b4:	fa02 f303 	lsl.w	r3, r2, r3
 80087b8:	69fa      	ldr	r2, [r7, #28]
 80087ba:	4313      	orrs	r3, r2
 80087bc:	61fb      	str	r3, [r7, #28]

  /* Set the chopper mode */
  hrtim_outr |= (pOutputCfg->ChopperModeEnable << shift);
 80087be:	683b      	ldr	r3, [r7, #0]
 80087c0:	699a      	ldr	r2, [r3, #24]
 80087c2:	69bb      	ldr	r3, [r7, #24]
 80087c4:	fa02 f303 	lsl.w	r3, r2, r3
 80087c8:	69fa      	ldr	r2, [r7, #28]
 80087ca:	4313      	orrs	r3, r2
 80087cc:	61fb      	str	r3, [r7, #28]
     state during a burst mode operation is allowed only under the following
     conditions:
     - the outputs is active during the burst mode (IDLES=1U)
     - positive deadtimes (SDTR/SDTF set to 0U)
  */
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 80087ce:	683b      	ldr	r3, [r7, #0]
 80087d0:	691b      	ldr	r3, [r3, #16]
 80087d2:	2b08      	cmp	r3, #8
 80087d4:	d111      	bne.n	80087fa <HRTIM_OutputConfig+0x18e>
      ((hrtim_dtr & HRTIM_DTR_SDTR) == (uint32_t)RESET) &&
 80087d6:	697b      	ldr	r3, [r7, #20]
 80087d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d10c      	bne.n	80087fa <HRTIM_OutputConfig+0x18e>
      ((hrtim_dtr & HRTIM_DTR_SDTF) == (uint32_t)RESET))
 80087e0:	697b      	ldr	r3, [r7, #20]
 80087e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
      ((hrtim_dtr & HRTIM_DTR_SDTR) == (uint32_t)RESET) &&
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d107      	bne.n	80087fa <HRTIM_OutputConfig+0x18e>
  {
    hrtim_outr |= (pOutputCfg->BurstModeEntryDelayed << shift);
 80087ea:	683b      	ldr	r3, [r7, #0]
 80087ec:	69da      	ldr	r2, [r3, #28]
 80087ee:	69bb      	ldr	r3, [r7, #24]
 80087f0:	fa02 f303 	lsl.w	r3, r2, r3
 80087f4:	69fa      	ldr	r2, [r7, #28]
 80087f6:	4313      	orrs	r3, r2
 80087f8:	61fb      	str	r3, [r7, #28]
  }

  /* Update HRTIM register */
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_outr;
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	681a      	ldr	r2, [r3, #0]
 80087fe:	68bb      	ldr	r3, [r7, #8]
 8008800:	01db      	lsls	r3, r3, #7
 8008802:	4413      	add	r3, r2
 8008804:	33e4      	adds	r3, #228	; 0xe4
 8008806:	69fa      	ldr	r2, [r7, #28]
 8008808:	601a      	str	r2, [r3, #0]
}
 800880a:	bf00      	nop
 800880c:	3724      	adds	r7, #36	; 0x24
 800880e:	46bd      	mov	sp, r7
 8008810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008814:	4770      	bx	lr
 8008816:	bf00      	nop
 8008818:	40000041 	.word	0x40000041

0800881c <HRTIM_ForceRegistersUpdate>:
  * @param  TimerIdx Timer index
  * @retval None
  */
static void HRTIM_ForceRegistersUpdate(HRTIM_HandleTypeDef * hhrtim,
                                       uint32_t TimerIdx)
{
 800881c:	b480      	push	{r7}
 800881e:	b083      	sub	sp, #12
 8008820:	af00      	add	r7, sp, #0
 8008822:	6078      	str	r0, [r7, #4]
 8008824:	6039      	str	r1, [r7, #0]
  switch (TimerIdx)
 8008826:	683b      	ldr	r3, [r7, #0]
 8008828:	2b05      	cmp	r3, #5
 800882a:	d851      	bhi.n	80088d0 <HRTIM_ForceRegistersUpdate+0xb4>
 800882c:	a201      	add	r2, pc, #4	; (adr r2, 8008834 <HRTIM_ForceRegistersUpdate+0x18>)
 800882e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008832:	bf00      	nop
 8008834:	08008863 	.word	0x08008863
 8008838:	08008879 	.word	0x08008879
 800883c:	0800888f 	.word	0x0800888f
 8008840:	080088a5 	.word	0x080088a5
 8008844:	080088bb 	.word	0x080088bb
 8008848:	0800884d 	.word	0x0800884d
  {
  case HRTIM_TIMERINDEX_MASTER:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_MSWU;
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	f042 0201 	orr.w	r2, r2, #1
 800885c:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8008860:	e037      	b.n	80088d2 <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_A:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TASWU;
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	f042 0202 	orr.w	r2, r2, #2
 8008872:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8008876:	e02c      	b.n	80088d2 <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_B:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TBSWU;
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	f042 0204 	orr.w	r2, r2, #4
 8008888:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 800888c:	e021      	b.n	80088d2 <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_C:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TCSWU;
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	f042 0208 	orr.w	r2, r2, #8
 800889e:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 80088a2:	e016      	b.n	80088d2 <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_D:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TDSWU;
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	f042 0210 	orr.w	r2, r2, #16
 80088b4:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 80088b8:	e00b      	b.n	80088d2 <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_E:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TESWU;
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	f042 0220 	orr.w	r2, r2, #32
 80088ca:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 80088ce:	e000      	b.n	80088d2 <HRTIM_ForceRegistersUpdate+0xb6>
    }

  default:
    break;
 80088d0:	bf00      	nop
  }
}
 80088d2:	bf00      	nop
 80088d4:	370c      	adds	r7, #12
 80088d6:	46bd      	mov	sp, r7
 80088d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088dc:	4770      	bx	lr
 80088de:	bf00      	nop

080088e0 <HRTIM_HRTIM_ISR>:
  * @brief  HRTIM interrupts service routine
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
static void HRTIM_HRTIM_ISR(HRTIM_HandleTypeDef * hhrtim)
{
 80088e0:	b580      	push	{r7, lr}
 80088e2:	b084      	sub	sp, #16
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hhrtim->Instance->sCommonRegs.ISR);
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	f8d3 3388 	ldr.w	r3, [r3, #904]	; 0x388
 80088f0:	60fb      	str	r3, [r7, #12]
  uint32_t ierits   = READ_REG(hhrtim->Instance->sCommonRegs.IER);
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	f8d3 3390 	ldr.w	r3, [r3, #912]	; 0x390
 80088fa:	60bb      	str	r3, [r7, #8]

  /* Fault 1 event */
  if((uint32_t)(isrflags & HRTIM_FLAG_FLT1) != (uint32_t)RESET)
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	f003 0301 	and.w	r3, r3, #1
 8008902:	2b00      	cmp	r3, #0
 8008904:	d00c      	beq.n	8008920 <HRTIM_HRTIM_ISR+0x40>
  {
    if((uint32_t)(ierits & HRTIM_IT_FLT1) != (uint32_t)RESET)
 8008906:	68bb      	ldr	r3, [r7, #8]
 8008908:	f003 0301 	and.w	r3, r3, #1
 800890c:	2b00      	cmp	r3, #0
 800890e:	d007      	beq.n	8008920 <HRTIM_HRTIM_ISR+0x40>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT1);
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	2201      	movs	r2, #1
 8008916:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Fault 1 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault1Callback(hhrtim);
#else
      HAL_HRTIM_Fault1Callback(hhrtim);
 800891a:	6878      	ldr	r0, [r7, #4]
 800891c:	f7ff fbc7 	bl	80080ae <HAL_HRTIM_Fault1Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 2 event */
  if((uint32_t)(isrflags & HRTIM_FLAG_FLT2) != (uint32_t)RESET)
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	f003 0302 	and.w	r3, r3, #2
 8008926:	2b00      	cmp	r3, #0
 8008928:	d00c      	beq.n	8008944 <HRTIM_HRTIM_ISR+0x64>
  {
    if((uint32_t)(ierits & HRTIM_IT_FLT2) != (uint32_t)RESET)
 800892a:	68bb      	ldr	r3, [r7, #8]
 800892c:	f003 0302 	and.w	r3, r3, #2
 8008930:	2b00      	cmp	r3, #0
 8008932:	d007      	beq.n	8008944 <HRTIM_HRTIM_ISR+0x64>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT2);
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	2202      	movs	r2, #2
 800893a:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Fault 2 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault2Callback(hhrtim);
#else
      HAL_HRTIM_Fault2Callback(hhrtim);
 800893e:	6878      	ldr	r0, [r7, #4]
 8008940:	f7ff fbbf 	bl	80080c2 <HAL_HRTIM_Fault2Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 3 event */
  if((uint32_t)(isrflags & HRTIM_FLAG_FLT3) != (uint32_t)RESET)
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	f003 0304 	and.w	r3, r3, #4
 800894a:	2b00      	cmp	r3, #0
 800894c:	d00c      	beq.n	8008968 <HRTIM_HRTIM_ISR+0x88>
  {
    if((uint32_t)(ierits & HRTIM_IT_FLT3) != (uint32_t)RESET)
 800894e:	68bb      	ldr	r3, [r7, #8]
 8008950:	f003 0304 	and.w	r3, r3, #4
 8008954:	2b00      	cmp	r3, #0
 8008956:	d007      	beq.n	8008968 <HRTIM_HRTIM_ISR+0x88>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT3);
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	2204      	movs	r2, #4
 800895e:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Fault 3 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault3Callback(hhrtim);
#else
      HAL_HRTIM_Fault3Callback(hhrtim);
 8008962:	6878      	ldr	r0, [r7, #4]
 8008964:	f7ff fbb7 	bl	80080d6 <HAL_HRTIM_Fault3Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 4 event */
  if((uint32_t)(isrflags & HRTIM_FLAG_FLT4) != (uint32_t)RESET)
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	f003 0308 	and.w	r3, r3, #8
 800896e:	2b00      	cmp	r3, #0
 8008970:	d00c      	beq.n	800898c <HRTIM_HRTIM_ISR+0xac>
  {
    if((uint32_t)(ierits & HRTIM_IT_FLT4) != (uint32_t)RESET)
 8008972:	68bb      	ldr	r3, [r7, #8]
 8008974:	f003 0308 	and.w	r3, r3, #8
 8008978:	2b00      	cmp	r3, #0
 800897a:	d007      	beq.n	800898c <HRTIM_HRTIM_ISR+0xac>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT4);
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	2208      	movs	r2, #8
 8008982:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Fault 4 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault4Callback(hhrtim);
#else
      HAL_HRTIM_Fault4Callback(hhrtim);
 8008986:	6878      	ldr	r0, [r7, #4]
 8008988:	f7ff fbaf 	bl	80080ea <HAL_HRTIM_Fault4Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 5 event */
  if((uint32_t)(isrflags & HRTIM_FLAG_FLT5) != (uint32_t)RESET)
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	f003 0310 	and.w	r3, r3, #16
 8008992:	2b00      	cmp	r3, #0
 8008994:	d00c      	beq.n	80089b0 <HRTIM_HRTIM_ISR+0xd0>
  {
    if((uint32_t)(ierits & HRTIM_IT_FLT5) != (uint32_t)RESET)
 8008996:	68bb      	ldr	r3, [r7, #8]
 8008998:	f003 0310 	and.w	r3, r3, #16
 800899c:	2b00      	cmp	r3, #0
 800899e:	d007      	beq.n	80089b0 <HRTIM_HRTIM_ISR+0xd0>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT5);
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	2210      	movs	r2, #16
 80089a6:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Fault 5 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault5Callback(hhrtim);
#else
      HAL_HRTIM_Fault5Callback(hhrtim);
 80089aa:	6878      	ldr	r0, [r7, #4]
 80089ac:	f7ff fba7 	bl	80080fe <HAL_HRTIM_Fault5Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* System fault event */
  if((uint32_t)(isrflags & HRTIM_FLAG_SYSFLT) != (uint32_t)RESET)
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	f003 0320 	and.w	r3, r3, #32
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d00c      	beq.n	80089d4 <HRTIM_HRTIM_ISR+0xf4>
  {
    if((uint32_t)(ierits & HRTIM_IT_SYSFLT) != (uint32_t)RESET)
 80089ba:	68bb      	ldr	r3, [r7, #8]
 80089bc:	f003 0320 	and.w	r3, r3, #32
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d007      	beq.n	80089d4 <HRTIM_HRTIM_ISR+0xf4>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_SYSFLT);
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	2220      	movs	r2, #32
 80089ca:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke System fault event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->SystemFaultCallback(hhrtim);
#else
      HAL_HRTIM_SystemFaultCallback(hhrtim);
 80089ce:	6878      	ldr	r0, [r7, #4]
 80089d0:	f7ff fb9f 	bl	8008112 <HAL_HRTIM_SystemFaultCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }
}
 80089d4:	bf00      	nop
 80089d6:	3710      	adds	r7, #16
 80089d8:	46bd      	mov	sp, r7
 80089da:	bd80      	pop	{r7, pc}

080089dc <HRTIM_Master_ISR>:
* @brief  Master timer interrupts service routine
* @param  hhrtim pointer to HAL HRTIM handle
* @retval None
*/
static void HRTIM_Master_ISR(HRTIM_HandleTypeDef * hhrtim)
{
 80089dc:	b580      	push	{r7, lr}
 80089de:	b086      	sub	sp, #24
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hhrtim->Instance->sCommonRegs.ISR);
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	f8d3 3388 	ldr.w	r3, [r3, #904]	; 0x388
 80089ec:	617b      	str	r3, [r7, #20]
  uint32_t ierits    = READ_REG(hhrtim->Instance->sCommonRegs.IER);
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	f8d3 3390 	ldr.w	r3, [r3, #912]	; 0x390
 80089f6:	613b      	str	r3, [r7, #16]
  uint32_t misrflags = READ_REG(hhrtim->Instance->sMasterRegs.MISR);
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	685b      	ldr	r3, [r3, #4]
 80089fe:	60fb      	str	r3, [r7, #12]
  uint32_t mdierits  = READ_REG(hhrtim->Instance->sMasterRegs.MDIER);
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	68db      	ldr	r3, [r3, #12]
 8008a06:	60bb      	str	r3, [r7, #8]

  /* Burst mode period event */
  if((uint32_t)(isrflags & HRTIM_FLAG_BMPER) != (uint32_t)RESET)
 8008a08:	697b      	ldr	r3, [r7, #20]
 8008a0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d00d      	beq.n	8008a2e <HRTIM_Master_ISR+0x52>
  {
    if((uint32_t)(ierits & HRTIM_IT_BMPER) != (uint32_t)RESET)
 8008a12:	693b      	ldr	r3, [r7, #16]
 8008a14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d008      	beq.n	8008a2e <HRTIM_Master_ISR+0x52>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_BMPER);
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8008a24:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Burst mode period event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->BurstModePeriodCallback(hhrtim);
#else
      HAL_HRTIM_BurstModePeriodCallback(hhrtim);
 8008a28:	6878      	ldr	r0, [r7, #4]
 8008a2a:	f7ff fb7c 	bl	8008126 <HAL_HRTIM_BurstModePeriodCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer compare 1 event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MCMP1) != (uint32_t)RESET)
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	f003 0301 	and.w	r3, r3, #1
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d00c      	beq.n	8008a52 <HRTIM_Master_ISR+0x76>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MCMP1) != (uint32_t)RESET)
 8008a38:	68bb      	ldr	r3, [r7, #8]
 8008a3a:	f003 0301 	and.w	r3, r3, #1
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d007      	beq.n	8008a52 <HRTIM_Master_ISR+0x76>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MCMP1);
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	2201      	movs	r2, #1
 8008a48:	609a      	str	r2, [r3, #8]

      /* Invoke compare 1 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare1EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_Compare1EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 8008a4a:	2105      	movs	r1, #5
 8008a4c:	6878      	ldr	r0, [r7, #4]
 8008a4e:	f7ff fb89 	bl	8008164 <HAL_HRTIM_Compare1EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer compare 2 event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MCMP2) != (uint32_t)RESET)
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	f003 0302 	and.w	r3, r3, #2
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d00c      	beq.n	8008a76 <HRTIM_Master_ISR+0x9a>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MCMP2) != (uint32_t)RESET)
 8008a5c:	68bb      	ldr	r3, [r7, #8]
 8008a5e:	f003 0302 	and.w	r3, r3, #2
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d007      	beq.n	8008a76 <HRTIM_Master_ISR+0x9a>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MCMP2);
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	2202      	movs	r2, #2
 8008a6c:	609a      	str	r2, [r3, #8]

      /* Invoke compare 2 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare2EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_Compare2EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 8008a6e:	2105      	movs	r1, #5
 8008a70:	6878      	ldr	r0, [r7, #4]
 8008a72:	f7fa fdc3 	bl	80035fc <HAL_HRTIM_Compare2EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer compare 3 event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MCMP3) != (uint32_t)RESET)
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	f003 0304 	and.w	r3, r3, #4
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d00c      	beq.n	8008a9a <HRTIM_Master_ISR+0xbe>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MCMP3) != (uint32_t)RESET)
 8008a80:	68bb      	ldr	r3, [r7, #8]
 8008a82:	f003 0304 	and.w	r3, r3, #4
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d007      	beq.n	8008a9a <HRTIM_Master_ISR+0xbe>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MCMP3);
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	2204      	movs	r2, #4
 8008a90:	609a      	str	r2, [r3, #8]

      /* Invoke compare 3 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare3EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_Compare3EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 8008a92:	2105      	movs	r1, #5
 8008a94:	6878      	ldr	r0, [r7, #4]
 8008a96:	f7fa fdbd 	bl	8003614 <HAL_HRTIM_Compare3EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer compare 4 event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MCMP4) != (uint32_t)RESET)
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	f003 0308 	and.w	r3, r3, #8
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d00c      	beq.n	8008abe <HRTIM_Master_ISR+0xe2>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MCMP4) != (uint32_t)RESET)
 8008aa4:	68bb      	ldr	r3, [r7, #8]
 8008aa6:	f003 0308 	and.w	r3, r3, #8
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d007      	beq.n	8008abe <HRTIM_Master_ISR+0xe2>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MCMP4);
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	2208      	movs	r2, #8
 8008ab4:	609a      	str	r2, [r3, #8]

      /* Invoke compare 4 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare4EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_Compare4EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 8008ab6:	2105      	movs	r1, #5
 8008ab8:	6878      	ldr	r0, [r7, #4]
 8008aba:	f7ff fb5e 	bl	800817a <HAL_HRTIM_Compare4EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer repetition event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MREP) != (uint32_t)RESET)
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	f003 0310 	and.w	r3, r3, #16
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d00c      	beq.n	8008ae2 <HRTIM_Master_ISR+0x106>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MREP) != (uint32_t)RESET)
 8008ac8:	68bb      	ldr	r3, [r7, #8]
 8008aca:	f003 0310 	and.w	r3, r3, #16
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d007      	beq.n	8008ae2 <HRTIM_Master_ISR+0x106>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MREP);
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	2210      	movs	r2, #16
 8008ad8:	609a      	str	r2, [r3, #8]

      /* Invoke repetition event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->RepetitionEventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_RepetitionEventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 8008ada:	2105      	movs	r1, #5
 8008adc:	6878      	ldr	r0, [r7, #4]
 8008ade:	f7fa fe0d 	bl	80036fc <HAL_HRTIM_RepetitionEventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Synchronization input event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_SYNC) != (uint32_t)RESET)
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	f003 0320 	and.w	r3, r3, #32
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d00b      	beq.n	8008b04 <HRTIM_Master_ISR+0x128>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_SYNC) != (uint32_t)RESET)
 8008aec:	68bb      	ldr	r3, [r7, #8]
 8008aee:	f003 0320 	and.w	r3, r3, #32
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d006      	beq.n	8008b04 <HRTIM_Master_ISR+0x128>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_SYNC);
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	2220      	movs	r2, #32
 8008afc:	609a      	str	r2, [r3, #8]

      /* Invoke synchronization event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->SynchronizationEventCallback(hhrtim);
#else
      HAL_HRTIM_SynchronizationEventCallback(hhrtim);
 8008afe:	6878      	ldr	r0, [r7, #4]
 8008b00:	f7ff fb1b 	bl	800813a <HAL_HRTIM_SynchronizationEventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer registers update event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MUPD) != (uint32_t)RESET)
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d00c      	beq.n	8008b28 <HRTIM_Master_ISR+0x14c>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MUPD) != (uint32_t)RESET)
 8008b0e:	68bb      	ldr	r3, [r7, #8]
 8008b10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d007      	beq.n	8008b28 <HRTIM_Master_ISR+0x14c>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MUPD);
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	2240      	movs	r2, #64	; 0x40
 8008b1e:	609a      	str	r2, [r3, #8]

      /* Invoke registers update event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->RegistersUpdateCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_RegistersUpdateCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 8008b20:	2105      	movs	r1, #5
 8008b22:	6878      	ldr	r0, [r7, #4]
 8008b24:	f7ff fb13 	bl	800814e <HAL_HRTIM_RegistersUpdateCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }
}
 8008b28:	bf00      	nop
 8008b2a:	3718      	adds	r7, #24
 8008b2c:	46bd      	mov	sp, r7
 8008b2e:	bd80      	pop	{r7, pc}

08008b30 <HRTIM_Timer_ISR>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
*/
static void HRTIM_Timer_ISR(HRTIM_HandleTypeDef * hhrtim,
                     uint32_t TimerIdx)
{
 8008b30:	b580      	push	{r7, lr}
 8008b32:	b084      	sub	sp, #16
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	6078      	str	r0, [r7, #4]
 8008b38:	6039      	str	r1, [r7, #0]
  uint32_t tisrflags = READ_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxISR);
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	681a      	ldr	r2, [r3, #0]
 8008b3e:	683b      	ldr	r3, [r7, #0]
 8008b40:	3301      	adds	r3, #1
 8008b42:	01db      	lsls	r3, r3, #7
 8008b44:	4413      	add	r3, r2
 8008b46:	3304      	adds	r3, #4
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	60fb      	str	r3, [r7, #12]
  uint32_t tdierits  = READ_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxDIER);
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681a      	ldr	r2, [r3, #0]
 8008b50:	683b      	ldr	r3, [r7, #0]
 8008b52:	01db      	lsls	r3, r3, #7
 8008b54:	4413      	add	r3, r2
 8008b56:	338c      	adds	r3, #140	; 0x8c
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	60bb      	str	r3, [r7, #8]

  /* Timer compare 1 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CMP1) != (uint32_t)RESET)
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	f003 0301 	and.w	r3, r3, #1
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d010      	beq.n	8008b88 <HRTIM_Timer_ISR+0x58>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CMP1) != (uint32_t)RESET)
 8008b66:	68bb      	ldr	r3, [r7, #8]
 8008b68:	f003 0301 	and.w	r3, r3, #1
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d00b      	beq.n	8008b88 <HRTIM_Timer_ISR+0x58>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP1);
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681a      	ldr	r2, [r3, #0]
 8008b74:	683b      	ldr	r3, [r7, #0]
 8008b76:	01db      	lsls	r3, r3, #7
 8008b78:	4413      	add	r3, r2
 8008b7a:	3388      	adds	r3, #136	; 0x88
 8008b7c:	2201      	movs	r2, #1
 8008b7e:	601a      	str	r2, [r3, #0]

      /* Invoke compare 1 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare1EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Compare1EventCallback(hhrtim, TimerIdx);
 8008b80:	6839      	ldr	r1, [r7, #0]
 8008b82:	6878      	ldr	r0, [r7, #4]
 8008b84:	f7ff faee 	bl	8008164 <HAL_HRTIM_Compare1EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer compare 2 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CMP2) != (uint32_t)RESET)
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	f003 0302 	and.w	r3, r3, #2
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d010      	beq.n	8008bb4 <HRTIM_Timer_ISR+0x84>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CMP2) != (uint32_t)RESET)
 8008b92:	68bb      	ldr	r3, [r7, #8]
 8008b94:	f003 0302 	and.w	r3, r3, #2
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d00b      	beq.n	8008bb4 <HRTIM_Timer_ISR+0x84>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP2);
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681a      	ldr	r2, [r3, #0]
 8008ba0:	683b      	ldr	r3, [r7, #0]
 8008ba2:	01db      	lsls	r3, r3, #7
 8008ba4:	4413      	add	r3, r2
 8008ba6:	3388      	adds	r3, #136	; 0x88
 8008ba8:	2202      	movs	r2, #2
 8008baa:	601a      	str	r2, [r3, #0]

      /* Invoke compare 2 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare2EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Compare2EventCallback(hhrtim, TimerIdx);
 8008bac:	6839      	ldr	r1, [r7, #0]
 8008bae:	6878      	ldr	r0, [r7, #4]
 8008bb0:	f7fa fd24 	bl	80035fc <HAL_HRTIM_Compare2EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer compare 3 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CMP3) != (uint32_t)RESET)
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	f003 0304 	and.w	r3, r3, #4
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d010      	beq.n	8008be0 <HRTIM_Timer_ISR+0xb0>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CMP3) != (uint32_t)RESET)
 8008bbe:	68bb      	ldr	r3, [r7, #8]
 8008bc0:	f003 0304 	and.w	r3, r3, #4
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d00b      	beq.n	8008be0 <HRTIM_Timer_ISR+0xb0>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP3);
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681a      	ldr	r2, [r3, #0]
 8008bcc:	683b      	ldr	r3, [r7, #0]
 8008bce:	01db      	lsls	r3, r3, #7
 8008bd0:	4413      	add	r3, r2
 8008bd2:	3388      	adds	r3, #136	; 0x88
 8008bd4:	2204      	movs	r2, #4
 8008bd6:	601a      	str	r2, [r3, #0]

      /* Invoke compare 3 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare3EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Compare3EventCallback(hhrtim, TimerIdx);
 8008bd8:	6839      	ldr	r1, [r7, #0]
 8008bda:	6878      	ldr	r0, [r7, #4]
 8008bdc:	f7fa fd1a 	bl	8003614 <HAL_HRTIM_Compare3EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer compare 4 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CMP4) != (uint32_t)RESET)
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	f003 0308 	and.w	r3, r3, #8
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d010      	beq.n	8008c0c <HRTIM_Timer_ISR+0xdc>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CMP4) != (uint32_t)RESET)
 8008bea:	68bb      	ldr	r3, [r7, #8]
 8008bec:	f003 0308 	and.w	r3, r3, #8
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d00b      	beq.n	8008c0c <HRTIM_Timer_ISR+0xdc>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP4);
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	681a      	ldr	r2, [r3, #0]
 8008bf8:	683b      	ldr	r3, [r7, #0]
 8008bfa:	01db      	lsls	r3, r3, #7
 8008bfc:	4413      	add	r3, r2
 8008bfe:	3388      	adds	r3, #136	; 0x88
 8008c00:	2208      	movs	r2, #8
 8008c02:	601a      	str	r2, [r3, #0]

      /* Invoke compare 4 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare4EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Compare4EventCallback(hhrtim, TimerIdx);
 8008c04:	6839      	ldr	r1, [r7, #0]
 8008c06:	6878      	ldr	r0, [r7, #4]
 8008c08:	f7ff fab7 	bl	800817a <HAL_HRTIM_Compare4EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer repetition event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_REP) != (uint32_t)RESET)
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	f003 0310 	and.w	r3, r3, #16
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d010      	beq.n	8008c38 <HRTIM_Timer_ISR+0x108>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_REP) != (uint32_t)RESET)
 8008c16:	68bb      	ldr	r3, [r7, #8]
 8008c18:	f003 0310 	and.w	r3, r3, #16
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d00b      	beq.n	8008c38 <HRTIM_Timer_ISR+0x108>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_REP);
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681a      	ldr	r2, [r3, #0]
 8008c24:	683b      	ldr	r3, [r7, #0]
 8008c26:	01db      	lsls	r3, r3, #7
 8008c28:	4413      	add	r3, r2
 8008c2a:	3388      	adds	r3, #136	; 0x88
 8008c2c:	2210      	movs	r2, #16
 8008c2e:	601a      	str	r2, [r3, #0]

      /* Invoke repetition event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->RepetitionEventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_RepetitionEventCallback(hhrtim, TimerIdx);
 8008c30:	6839      	ldr	r1, [r7, #0]
 8008c32:	6878      	ldr	r0, [r7, #4]
 8008c34:	f7fa fd62 	bl	80036fc <HAL_HRTIM_RepetitionEventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer registers update event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_UPD) != (uint32_t)RESET)
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d010      	beq.n	8008c64 <HRTIM_Timer_ISR+0x134>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_UPD) != (uint32_t)RESET)
 8008c42:	68bb      	ldr	r3, [r7, #8]
 8008c44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d00b      	beq.n	8008c64 <HRTIM_Timer_ISR+0x134>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_UPD);
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	681a      	ldr	r2, [r3, #0]
 8008c50:	683b      	ldr	r3, [r7, #0]
 8008c52:	01db      	lsls	r3, r3, #7
 8008c54:	4413      	add	r3, r2
 8008c56:	3388      	adds	r3, #136	; 0x88
 8008c58:	2240      	movs	r2, #64	; 0x40
 8008c5a:	601a      	str	r2, [r3, #0]

      /* Invoke registers update event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->RegistersUpdateCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_RegistersUpdateCallback(hhrtim, TimerIdx);
 8008c5c:	6839      	ldr	r1, [r7, #0]
 8008c5e:	6878      	ldr	r0, [r7, #4]
 8008c60:	f7ff fa75 	bl	800814e <HAL_HRTIM_RegistersUpdateCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer capture 1 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CPT1) != (uint32_t)RESET)
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d010      	beq.n	8008c90 <HRTIM_Timer_ISR+0x160>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CPT1) != (uint32_t)RESET)
 8008c6e:	68bb      	ldr	r3, [r7, #8]
 8008c70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d00b      	beq.n	8008c90 <HRTIM_Timer_ISR+0x160>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CPT1);
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681a      	ldr	r2, [r3, #0]
 8008c7c:	683b      	ldr	r3, [r7, #0]
 8008c7e:	01db      	lsls	r3, r3, #7
 8008c80:	4413      	add	r3, r2
 8008c82:	3388      	adds	r3, #136	; 0x88
 8008c84:	2280      	movs	r2, #128	; 0x80
 8008c86:	601a      	str	r2, [r3, #0]

      /* Invoke capture 1 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Capture1EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Capture1EventCallback(hhrtim, TimerIdx);
 8008c88:	6839      	ldr	r1, [r7, #0]
 8008c8a:	6878      	ldr	r0, [r7, #4]
 8008c8c:	f7ff fa80 	bl	8008190 <HAL_HRTIM_Capture1EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer capture 2 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CPT2) != (uint32_t)RESET)
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d011      	beq.n	8008cbe <HRTIM_Timer_ISR+0x18e>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CPT2) != (uint32_t)RESET)
 8008c9a:	68bb      	ldr	r3, [r7, #8]
 8008c9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d00c      	beq.n	8008cbe <HRTIM_Timer_ISR+0x18e>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CPT2);
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	681a      	ldr	r2, [r3, #0]
 8008ca8:	683b      	ldr	r3, [r7, #0]
 8008caa:	01db      	lsls	r3, r3, #7
 8008cac:	4413      	add	r3, r2
 8008cae:	3388      	adds	r3, #136	; 0x88
 8008cb0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008cb4:	601a      	str	r2, [r3, #0]

      /* Invoke capture 2 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Capture2EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Capture2EventCallback(hhrtim, TimerIdx);
 8008cb6:	6839      	ldr	r1, [r7, #0]
 8008cb8:	6878      	ldr	r0, [r7, #4]
 8008cba:	f7ff fa74 	bl	80081a6 <HAL_HRTIM_Capture2EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer output 1 set event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_SET1) != (uint32_t)RESET)
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d011      	beq.n	8008cec <HRTIM_Timer_ISR+0x1bc>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_SET1) != (uint32_t)RESET)
 8008cc8:	68bb      	ldr	r3, [r7, #8]
 8008cca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d00c      	beq.n	8008cec <HRTIM_Timer_ISR+0x1bc>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_SET1);
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	681a      	ldr	r2, [r3, #0]
 8008cd6:	683b      	ldr	r3, [r7, #0]
 8008cd8:	01db      	lsls	r3, r3, #7
 8008cda:	4413      	add	r3, r2
 8008cdc:	3388      	adds	r3, #136	; 0x88
 8008cde:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008ce2:	601a      	str	r2, [r3, #0]

      /* Invoke output 1 set event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Output1SetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Output1SetCallback(hhrtim, TimerIdx);
 8008ce4:	6839      	ldr	r1, [r7, #0]
 8008ce6:	6878      	ldr	r0, [r7, #4]
 8008ce8:	f7ff fa7e 	bl	80081e8 <HAL_HRTIM_Output1SetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer output 1 reset event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_RST1) != (uint32_t)RESET)
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d011      	beq.n	8008d1a <HRTIM_Timer_ISR+0x1ea>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_RST1) != (uint32_t)RESET)
 8008cf6:	68bb      	ldr	r3, [r7, #8]
 8008cf8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d00c      	beq.n	8008d1a <HRTIM_Timer_ISR+0x1ea>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_RST1);
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681a      	ldr	r2, [r3, #0]
 8008d04:	683b      	ldr	r3, [r7, #0]
 8008d06:	01db      	lsls	r3, r3, #7
 8008d08:	4413      	add	r3, r2
 8008d0a:	3388      	adds	r3, #136	; 0x88
 8008d0c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008d10:	601a      	str	r2, [r3, #0]

      /* Invoke output 1 reset event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Output1ResetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Output1ResetCallback(hhrtim, TimerIdx);
 8008d12:	6839      	ldr	r1, [r7, #0]
 8008d14:	6878      	ldr	r0, [r7, #4]
 8008d16:	f7ff fa72 	bl	80081fe <HAL_HRTIM_Output1ResetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer output 2 set event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_SET2) != (uint32_t)RESET)
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d011      	beq.n	8008d48 <HRTIM_Timer_ISR+0x218>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_SET2) != (uint32_t)RESET)
 8008d24:	68bb      	ldr	r3, [r7, #8]
 8008d26:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d00c      	beq.n	8008d48 <HRTIM_Timer_ISR+0x218>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_SET2);
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	681a      	ldr	r2, [r3, #0]
 8008d32:	683b      	ldr	r3, [r7, #0]
 8008d34:	01db      	lsls	r3, r3, #7
 8008d36:	4413      	add	r3, r2
 8008d38:	3388      	adds	r3, #136	; 0x88
 8008d3a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008d3e:	601a      	str	r2, [r3, #0]

      /* Invoke output 2 set event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Output2SetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Output2SetCallback(hhrtim, TimerIdx);
 8008d40:	6839      	ldr	r1, [r7, #0]
 8008d42:	6878      	ldr	r0, [r7, #4]
 8008d44:	f7ff fa66 	bl	8008214 <HAL_HRTIM_Output2SetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer output 2 reset event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_RST2) != (uint32_t)RESET)
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d011      	beq.n	8008d76 <HRTIM_Timer_ISR+0x246>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_RST2) != (uint32_t)RESET)
 8008d52:	68bb      	ldr	r3, [r7, #8]
 8008d54:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d00c      	beq.n	8008d76 <HRTIM_Timer_ISR+0x246>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_RST2);
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681a      	ldr	r2, [r3, #0]
 8008d60:	683b      	ldr	r3, [r7, #0]
 8008d62:	01db      	lsls	r3, r3, #7
 8008d64:	4413      	add	r3, r2
 8008d66:	3388      	adds	r3, #136	; 0x88
 8008d68:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008d6c:	601a      	str	r2, [r3, #0]

      /* Invoke output 2 reset event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Output2ResetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Output2ResetCallback(hhrtim, TimerIdx);
 8008d6e:	6839      	ldr	r1, [r7, #0]
 8008d70:	6878      	ldr	r0, [r7, #4]
 8008d72:	f7ff fa5a 	bl	800822a <HAL_HRTIM_Output2ResetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer reset event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_RST) != (uint32_t)RESET)
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d011      	beq.n	8008da4 <HRTIM_Timer_ISR+0x274>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_RST) != (uint32_t)RESET)
 8008d80:	68bb      	ldr	r3, [r7, #8]
 8008d82:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d00c      	beq.n	8008da4 <HRTIM_Timer_ISR+0x274>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_RST);
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	681a      	ldr	r2, [r3, #0]
 8008d8e:	683b      	ldr	r3, [r7, #0]
 8008d90:	01db      	lsls	r3, r3, #7
 8008d92:	4413      	add	r3, r2
 8008d94:	3388      	adds	r3, #136	; 0x88
 8008d96:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8008d9a:	601a      	str	r2, [r3, #0]

      /* Invoke timer reset callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->CounterResetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_CounterResetCallback(hhrtim, TimerIdx);
 8008d9c:	6839      	ldr	r1, [r7, #0]
 8008d9e:	6878      	ldr	r0, [r7, #4]
 8008da0:	f7ff fa17 	bl	80081d2 <HAL_HRTIM_CounterResetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Delayed protection event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_DLYPRT) != (uint32_t)RESET)
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d011      	beq.n	8008dd2 <HRTIM_Timer_ISR+0x2a2>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_DLYPRT) != (uint32_t)RESET)
 8008dae:	68bb      	ldr	r3, [r7, #8]
 8008db0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d00c      	beq.n	8008dd2 <HRTIM_Timer_ISR+0x2a2>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_DLYPRT);
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681a      	ldr	r2, [r3, #0]
 8008dbc:	683b      	ldr	r3, [r7, #0]
 8008dbe:	01db      	lsls	r3, r3, #7
 8008dc0:	4413      	add	r3, r2
 8008dc2:	3388      	adds	r3, #136	; 0x88
 8008dc4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8008dc8:	601a      	str	r2, [r3, #0]

      /* Invoke delayed protection callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->DelayedProtectionCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_DelayedProtectionCallback(hhrtim, TimerIdx);
 8008dca:	6839      	ldr	r1, [r7, #0]
 8008dcc:	6878      	ldr	r0, [r7, #4]
 8008dce:	f7ff f9f5 	bl	80081bc <HAL_HRTIM_DelayedProtectionCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }
}
 8008dd2:	bf00      	nop
 8008dd4:	3710      	adds	r7, #16
 8008dd6:	46bd      	mov	sp, r7
 8008dd8:	bd80      	pop	{r7, pc}
	...

08008ddc <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 8008ddc:	b580      	push	{r7, lr}
 8008dde:	b084      	sub	sp, #16
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d101      	bne.n	8008dee <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 8008dea:	2301      	movs	r3, #1
 8008dec:	e097      	b.n	8008f1e <HAL_LPTIM_Init+0x142>
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  assert_param(IS_LPTIM_CLOCK_SOURCE(hlptim->Init.Clock.Source));
  assert_param(IS_LPTIM_CLOCK_PRESCALER(hlptim->Init.Clock.Prescaler));
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	685b      	ldr	r3, [r3, #4]
 8008df2:	2b01      	cmp	r3, #1
  }
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8008dfa:	b2db      	uxtb	r3, r3
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d106      	bne.n	8008e0e <HAL_LPTIM_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	2200      	movs	r2, #0
 8008e04:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 8008e08:	6878      	ldr	r0, [r7, #4]
 8008e0a:	f7fa f8f3 	bl	8002ff4 <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	2202      	movs	r2, #2
 8008e12:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	68db      	ldr	r3, [r3, #12]
 8008e1c:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	685b      	ldr	r3, [r3, #4]
 8008e22:	2b01      	cmp	r3, #1
 8008e24:	d004      	beq.n	8008e30 <HAL_LPTIM_Init+0x54>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e2a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008e2e:	d103      	bne.n	8008e38 <HAL_LPTIM_Init+0x5c>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	f023 031e 	bic.w	r3, r3, #30
 8008e36:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	695b      	ldr	r3, [r3, #20]
 8008e3c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008e40:	4293      	cmp	r3, r2
 8008e42:	d003      	beq.n	8008e4c <HAL_LPTIM_Init+0x70>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 8008e44:	68fa      	ldr	r2, [r7, #12]
 8008e46:	4b38      	ldr	r3, [pc, #224]	; (8008f28 <HAL_LPTIM_Init+0x14c>)
 8008e48:	4013      	ands	r3, r2
 8008e4a:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8008e4c:	68fa      	ldr	r2, [r7, #12]
 8008e4e:	4b37      	ldr	r3, [pc, #220]	; (8008f2c <HAL_LPTIM_Init+0x150>)
 8008e50:	4013      	ands	r3, r2
 8008e52:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8008e5c:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 8008e62:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              hlptim->Init.OutputPolarity  |
 8008e68:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              hlptim->Init.UpdateMode      |
 8008e6e:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8008e70:	68fa      	ldr	r2, [r7, #12]
 8008e72:	4313      	orrs	r3, r2
 8008e74:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	685b      	ldr	r3, [r3, #4]
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d107      	bne.n	8008e8e <HAL_LPTIM_Init+0xb2>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8008e86:	4313      	orrs	r3, r2
 8008e88:	68fa      	ldr	r2, [r7, #12]
 8008e8a:	4313      	orrs	r3, r2
 8008e8c:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	685b      	ldr	r3, [r3, #4]
 8008e92:	2b01      	cmp	r3, #1
 8008e94:	d004      	beq.n	8008ea0 <HAL_LPTIM_Init+0xc4>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e9a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008e9e:	d107      	bne.n	8008eb0 <HAL_LPTIM_Init+0xd4>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8008ea8:	4313      	orrs	r3, r2
 8008eaa:	68fa      	ldr	r2, [r7, #12]
 8008eac:	4313      	orrs	r3, r2
 8008eae:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	695b      	ldr	r3, [r3, #20]
 8008eb4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008eb8:	4293      	cmp	r3, r2
 8008eba:	d00a      	beq.n	8008ed2 <HAL_LPTIM_Init+0xf6>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8008ec4:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 8008eca:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8008ecc:	68fa      	ldr	r2, [r7, #12]
 8008ece:	4313      	orrs	r3, r2
 8008ed0:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	68fa      	ldr	r2, [r7, #12]
 8008ed8:	60da      	str	r2, [r3, #12]

  /* Configure LPTIM input sources */
  if ((hlptim->Instance == LPTIM1) || (hlptim->Instance == LPTIM2))
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	4a14      	ldr	r2, [pc, #80]	; (8008f30 <HAL_LPTIM_Init+0x154>)
 8008ee0:	4293      	cmp	r3, r2
 8008ee2:	d004      	beq.n	8008eee <HAL_LPTIM_Init+0x112>
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	4a12      	ldr	r2, [pc, #72]	; (8008f34 <HAL_LPTIM_Init+0x158>)
 8008eea:	4293      	cmp	r3, r2
 8008eec:	d108      	bne.n	8008f00 <HAL_LPTIM_Init+0x124>
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));

    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->CFGR2 = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	430a      	orrs	r2, r1
 8008efc:	625a      	str	r2, [r3, #36]	; 0x24
 8008efe:	e009      	b.n	8008f14 <HAL_LPTIM_Init+0x138>
  }
  else
  {
    if (hlptim->Instance == LPTIM3)
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	4a0c      	ldr	r2, [pc, #48]	; (8008f38 <HAL_LPTIM_Init+0x15c>)
 8008f06:	4293      	cmp	r3, r2
 8008f08:	d104      	bne.n	8008f14 <HAL_LPTIM_Init+0x138>
    {
      /* Check LPTIM3 Input1 source */
      assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));

      /* Configure LPTIM3 Input1 source */
      hlptim->Instance->CFGR2 = hlptim->Init.Input1Source;
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	687a      	ldr	r2, [r7, #4]
 8008f10:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8008f12:	625a      	str	r2, [r3, #36]	; 0x24
    }
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	2201      	movs	r2, #1
 8008f18:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Return function status */
  return HAL_OK;
 8008f1c:	2300      	movs	r3, #0
}
 8008f1e:	4618      	mov	r0, r3
 8008f20:	3710      	adds	r7, #16
 8008f22:	46bd      	mov	sp, r7
 8008f24:	bd80      	pop	{r7, pc}
 8008f26:	bf00      	nop
 8008f28:	ffff1f3f 	.word	0xffff1f3f
 8008f2c:	ff19f1fe 	.word	0xff19f1fe
 8008f30:	40002400 	.word	0x40002400
 8008f34:	58002400 	.word	0x58002400
 8008f38:	58002800 	.word	0x58002800

08008f3c <HAL_LPTIM_Counter_Start_IT>:
  * @param  Period Specifies the Autoreload value.
  *         This parameter must be a value between 0x0001 and 0xFFFF.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Counter_Start_IT(LPTIM_HandleTypeDef *hlptim, uint32_t Period)
{
 8008f3c:	b580      	push	{r7, lr}
 8008f3e:	b082      	sub	sp, #8
 8008f40:	af00      	add	r7, sp, #0
 8008f42:	6078      	str	r0, [r7, #4]
 8008f44:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
  assert_param(IS_LPTIM_PERIOD(Period));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	2202      	movs	r2, #2
 8008f4a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* If clock source is not ULPTIM clock and counter source is external, then it must not be prescaled */
  if ((hlptim->Init.Clock.Source != LPTIM_CLOCKSOURCE_ULPTIM)
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	685b      	ldr	r3, [r3, #4]
 8008f52:	2b01      	cmp	r3, #1
 8008f54:	d00c      	beq.n	8008f70 <HAL_LPTIM_Counter_Start_IT+0x34>
      && (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f5a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008f5e:	d107      	bne.n	8008f70 <HAL_LPTIM_Counter_Start_IT+0x34>
  {
    /* Check if clock is prescaled */
    assert_param(IS_LPTIM_CLOCK_PRESCALERDIV1(hlptim->Init.Clock.Prescaler));
    /* Set clock prescaler to 0 */
    hlptim->Instance->CFGR &= ~LPTIM_CFGR_PRESC;
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	68da      	ldr	r2, [r3, #12]
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	f422 6260 	bic.w	r2, r2, #3584	; 0xe00
 8008f6e:	60da      	str	r2, [r3, #12]
  }

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	691a      	ldr	r2, [r3, #16]
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	f042 0201 	orr.w	r2, r2, #1
 8008f7e:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	2210      	movs	r2, #16
 8008f86:	605a      	str	r2, [r3, #4]

  /* Load the period value in the autoreload register */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	683a      	ldr	r2, [r7, #0]
 8008f8e:	619a      	str	r2, [r3, #24]

  /* Wait for the completion of the write operation to the LPTIM_ARR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8008f90:	2110      	movs	r1, #16
 8008f92:	6878      	ldr	r0, [r7, #4]
 8008f94:	f000 f91e 	bl	80091d4 <LPTIM_WaitForFlag>
 8008f98:	4603      	mov	r3, r0
 8008f9a:	2b03      	cmp	r3, #3
 8008f9c:	d101      	bne.n	8008fa2 <HAL_LPTIM_Counter_Start_IT+0x66>
  {
    return HAL_TIMEOUT;
 8008f9e:	2303      	movs	r3, #3
 8008fa0:	e02f      	b.n	8009002 <HAL_LPTIM_Counter_Start_IT+0xc6>
  }

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 8008fa2:	6878      	ldr	r0, [r7, #4]
 8008fa4:	f000 f946 	bl	8009234 <LPTIM_Disable>

  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 8008fa8:	6878      	ldr	r0, [r7, #4]
 8008faa:	f000 f905 	bl	80091b8 <HAL_LPTIM_GetState>
 8008fae:	4603      	mov	r3, r0
 8008fb0:	2b03      	cmp	r3, #3
 8008fb2:	d101      	bne.n	8008fb8 <HAL_LPTIM_Counter_Start_IT+0x7c>
  {
    return HAL_TIMEOUT;
 8008fb4:	2303      	movs	r3, #3
 8008fb6:	e024      	b.n	8009002 <HAL_LPTIM_Counter_Start_IT+0xc6>
  }

  /* Enable Autoreload write complete interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARROK);
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	689a      	ldr	r2, [r3, #8]
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	f042 0210 	orr.w	r2, r2, #16
 8008fc6:	609a      	str	r2, [r3, #8]

  /* Enable Autoreload match interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARRM);
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	689a      	ldr	r2, [r3, #8]
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	f042 0202 	orr.w	r2, r2, #2
 8008fd6:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	691a      	ldr	r2, [r3, #16]
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	f042 0201 	orr.w	r2, r2, #1
 8008fe6:	611a      	str	r2, [r3, #16]

  /* Start timer in continuous mode */
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	691a      	ldr	r2, [r3, #16]
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	f042 0204 	orr.w	r2, r2, #4
 8008ff6:	611a      	str	r2, [r3, #16]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	2201      	movs	r2, #1
 8008ffc:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Return function status */
  return HAL_OK;
 8009000:	2300      	movs	r3, #0
}
 8009002:	4618      	mov	r0, r3
 8009004:	3708      	adds	r7, #8
 8009006:	46bd      	mov	sp, r7
 8009008:	bd80      	pop	{r7, pc}

0800900a <HAL_LPTIM_IRQHandler>:
  * @brief  Handle LPTIM interrupt request.
  * @param  hlptim LPTIM handle
  * @retval None
  */
void HAL_LPTIM_IRQHandler(LPTIM_HandleTypeDef *hlptim)
{
 800900a:	b580      	push	{r7, lr}
 800900c:	b082      	sub	sp, #8
 800900e:	af00      	add	r7, sp, #0
 8009010:	6078      	str	r0, [r7, #4]
  /* Compare match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	f003 0301 	and.w	r3, r3, #1
 800901c:	2b01      	cmp	r3, #1
 800901e:	d10d      	bne.n	800903c <HAL_LPTIM_IRQHandler+0x32>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPM) != RESET)
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	689b      	ldr	r3, [r3, #8]
 8009026:	f003 0301 	and.w	r3, r3, #1
 800902a:	2b01      	cmp	r3, #1
 800902c:	d106      	bne.n	800903c <HAL_LPTIM_IRQHandler+0x32>
    {
      /* Clear Compare match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPM);
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	2201      	movs	r2, #1
 8009034:	605a      	str	r2, [r3, #4]

      /* Compare match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareMatchCallback(hlptim);
#else
      HAL_LPTIM_CompareMatchCallback(hlptim);
 8009036:	6878      	ldr	r0, [r7, #4]
 8009038:	f000 f882 	bl	8009140 <HAL_LPTIM_CompareMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	f003 0302 	and.w	r3, r3, #2
 8009046:	2b02      	cmp	r3, #2
 8009048:	d10d      	bne.n	8009066 <HAL_LPTIM_IRQHandler+0x5c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	689b      	ldr	r3, [r3, #8]
 8009050:	f003 0302 	and.w	r3, r3, #2
 8009054:	2b02      	cmp	r3, #2
 8009056:	d106      	bne.n	8009066 <HAL_LPTIM_IRQHandler+0x5c>
    {
      /* Clear Autoreload match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	2202      	movs	r2, #2
 800905e:	605a      	str	r2, [r3, #4]

      /* Autoreload match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadMatchCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadMatchCallback(hlptim);
 8009060:	6878      	ldr	r0, [r7, #4]
 8009062:	f7fa fabd 	bl	80035e0 <HAL_LPTIM_AutoReloadMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Trigger detected interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	f003 0304 	and.w	r3, r3, #4
 8009070:	2b04      	cmp	r3, #4
 8009072:	d10d      	bne.n	8009090 <HAL_LPTIM_IRQHandler+0x86>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	689b      	ldr	r3, [r3, #8]
 800907a:	f003 0304 	and.w	r3, r3, #4
 800907e:	2b04      	cmp	r3, #4
 8009080:	d106      	bne.n	8009090 <HAL_LPTIM_IRQHandler+0x86>
    {
      /* Clear Trigger detected flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	2204      	movs	r2, #4
 8009088:	605a      	str	r2, [r3, #4]

      /* Trigger detected callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->TriggerCallback(hlptim);
#else
      HAL_LPTIM_TriggerCallback(hlptim);
 800908a:	6878      	ldr	r0, [r7, #4]
 800908c:	f000 f862 	bl	8009154 <HAL_LPTIM_TriggerCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPOK) != RESET)
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	f003 0308 	and.w	r3, r3, #8
 800909a:	2b08      	cmp	r3, #8
 800909c:	d10d      	bne.n	80090ba <HAL_LPTIM_IRQHandler+0xb0>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPOK) != RESET)
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	689b      	ldr	r3, [r3, #8]
 80090a4:	f003 0308 	and.w	r3, r3, #8
 80090a8:	2b08      	cmp	r3, #8
 80090aa:	d106      	bne.n	80090ba <HAL_LPTIM_IRQHandler+0xb0>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	2208      	movs	r2, #8
 80090b2:	605a      	str	r2, [r3, #4]

      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
#else
      HAL_LPTIM_CompareWriteCallback(hlptim);
 80090b4:	6878      	ldr	r0, [r7, #4]
 80090b6:	f000 f857 	bl	8009168 <HAL_LPTIM_CompareWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	f003 0310 	and.w	r3, r3, #16
 80090c4:	2b10      	cmp	r3, #16
 80090c6:	d10d      	bne.n	80090e4 <HAL_LPTIM_IRQHandler+0xda>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	689b      	ldr	r3, [r3, #8]
 80090ce:	f003 0310 	and.w	r3, r3, #16
 80090d2:	2b10      	cmp	r3, #16
 80090d4:	d106      	bne.n	80090e4 <HAL_LPTIM_IRQHandler+0xda>
    {
      /* Clear Autoreload write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	2210      	movs	r2, #16
 80090dc:	605a      	str	r2, [r3, #4]

      /* Autoreload write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadWriteCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadWriteCallback(hlptim);
 80090de:	6878      	ldr	r0, [r7, #4]
 80090e0:	f000 f84c 	bl	800917c <HAL_LPTIM_AutoReloadWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Down to Up interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	f003 0320 	and.w	r3, r3, #32
 80090ee:	2b20      	cmp	r3, #32
 80090f0:	d10d      	bne.n	800910e <HAL_LPTIM_IRQHandler+0x104>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	689b      	ldr	r3, [r3, #8]
 80090f8:	f003 0320 	and.w	r3, r3, #32
 80090fc:	2b20      	cmp	r3, #32
 80090fe:	d106      	bne.n	800910e <HAL_LPTIM_IRQHandler+0x104>
    {
      /* Clear Direction counter changed from Down to Up flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	2220      	movs	r2, #32
 8009106:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Down to Up Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionUpCallback(hlptim);
#else
      HAL_LPTIM_DirectionUpCallback(hlptim);
 8009108:	6878      	ldr	r0, [r7, #4]
 800910a:	f000 f841 	bl	8009190 <HAL_LPTIM_DirectionUpCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Up to Down interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009118:	2b40      	cmp	r3, #64	; 0x40
 800911a:	d10d      	bne.n	8009138 <HAL_LPTIM_IRQHandler+0x12e>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	689b      	ldr	r3, [r3, #8]
 8009122:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009126:	2b40      	cmp	r3, #64	; 0x40
 8009128:	d106      	bne.n	8009138 <HAL_LPTIM_IRQHandler+0x12e>
    {
      /* Clear Direction counter changed from Up to Down flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	2240      	movs	r2, #64	; 0x40
 8009130:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Up to Down Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionDownCallback(hlptim);
#else
      HAL_LPTIM_DirectionDownCallback(hlptim);
 8009132:	6878      	ldr	r0, [r7, #4]
 8009134:	f000 f836 	bl	80091a4 <HAL_LPTIM_DirectionDownCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
}
 8009138:	bf00      	nop
 800913a:	3708      	adds	r7, #8
 800913c:	46bd      	mov	sp, r7
 800913e:	bd80      	pop	{r7, pc}

08009140 <HAL_LPTIM_CompareMatchCallback>:
  * @brief  Compare match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 8009140:	b480      	push	{r7}
 8009142:	b083      	sub	sp, #12
 8009144:	af00      	add	r7, sp, #0
 8009146:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareMatchCallback could be implemented in the user file
   */
}
 8009148:	bf00      	nop
 800914a:	370c      	adds	r7, #12
 800914c:	46bd      	mov	sp, r7
 800914e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009152:	4770      	bx	lr

08009154 <HAL_LPTIM_TriggerCallback>:
  * @brief  Trigger detected callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
{
 8009154:	b480      	push	{r7}
 8009156:	b083      	sub	sp, #12
 8009158:	af00      	add	r7, sp, #0
 800915a:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_TriggerCallback could be implemented in the user file
   */
}
 800915c:	bf00      	nop
 800915e:	370c      	adds	r7, #12
 8009160:	46bd      	mov	sp, r7
 8009162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009166:	4770      	bx	lr

08009168 <HAL_LPTIM_CompareWriteCallback>:
  * @brief  Compare write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8009168:	b480      	push	{r7}
 800916a:	b083      	sub	sp, #12
 800916c:	af00      	add	r7, sp, #0
 800916e:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareWriteCallback could be implemented in the user file
   */
}
 8009170:	bf00      	nop
 8009172:	370c      	adds	r7, #12
 8009174:	46bd      	mov	sp, r7
 8009176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800917a:	4770      	bx	lr

0800917c <HAL_LPTIM_AutoReloadWriteCallback>:
  * @brief  Autoreload write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 800917c:	b480      	push	{r7}
 800917e:	b083      	sub	sp, #12
 8009180:	af00      	add	r7, sp, #0
 8009182:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadWriteCallback could be implemented in the user file
   */
}
 8009184:	bf00      	nop
 8009186:	370c      	adds	r7, #12
 8009188:	46bd      	mov	sp, r7
 800918a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800918e:	4770      	bx	lr

08009190 <HAL_LPTIM_DirectionUpCallback>:
  * @brief  Direction counter changed from Down to Up callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
{
 8009190:	b480      	push	{r7}
 8009192:	b083      	sub	sp, #12
 8009194:	af00      	add	r7, sp, #0
 8009196:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionUpCallback could be implemented in the user file
   */
}
 8009198:	bf00      	nop
 800919a:	370c      	adds	r7, #12
 800919c:	46bd      	mov	sp, r7
 800919e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a2:	4770      	bx	lr

080091a4 <HAL_LPTIM_DirectionDownCallback>:
  * @brief  Direction counter changed from Up to Down callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
{
 80091a4:	b480      	push	{r7}
 80091a6:	b083      	sub	sp, #12
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionDownCallback could be implemented in the user file
   */
}
 80091ac:	bf00      	nop
 80091ae:	370c      	adds	r7, #12
 80091b0:	46bd      	mov	sp, r7
 80091b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b6:	4770      	bx	lr

080091b8 <HAL_LPTIM_GetState>:
  * @brief  Return the LPTIM handle state.
  * @param  hlptim LPTIM handle
  * @retval HAL state
  */
HAL_LPTIM_StateTypeDef HAL_LPTIM_GetState(LPTIM_HandleTypeDef *hlptim)
{
 80091b8:	b480      	push	{r7}
 80091ba:	b083      	sub	sp, #12
 80091bc:	af00      	add	r7, sp, #0
 80091be:	6078      	str	r0, [r7, #4]
  /* Return LPTIM handle state */
  return hlptim->State;
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80091c6:	b2db      	uxtb	r3, r3
}
 80091c8:	4618      	mov	r0, r3
 80091ca:	370c      	adds	r7, #12
 80091cc:	46bd      	mov	sp, r7
 80091ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d2:	4770      	bx	lr

080091d4 <LPTIM_WaitForFlag>:
  *                the configuration information for LPTIM module.
  * @param  flag   The lptim flag
  * @retval HAL status
  */
static HAL_StatusTypeDef LPTIM_WaitForFlag(LPTIM_HandleTypeDef *hlptim, uint32_t flag)
{
 80091d4:	b480      	push	{r7}
 80091d6:	b085      	sub	sp, #20
 80091d8:	af00      	add	r7, sp, #0
 80091da:	6078      	str	r0, [r7, #4]
 80091dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef result = HAL_OK;
 80091de:	2300      	movs	r3, #0
 80091e0:	73fb      	strb	r3, [r7, #15]
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 80091e2:	4b12      	ldr	r3, [pc, #72]	; (800922c <LPTIM_WaitForFlag+0x58>)
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	4a12      	ldr	r2, [pc, #72]	; (8009230 <LPTIM_WaitForFlag+0x5c>)
 80091e8:	fba2 2303 	umull	r2, r3, r2, r3
 80091ec:	0b9b      	lsrs	r3, r3, #14
 80091ee:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80091f2:	fb02 f303 	mul.w	r3, r2, r3
 80091f6:	60bb      	str	r3, [r7, #8]
  do
  {
    count--;
 80091f8:	68bb      	ldr	r3, [r7, #8]
 80091fa:	3b01      	subs	r3, #1
 80091fc:	60bb      	str	r3, [r7, #8]
    if (count == 0UL)
 80091fe:	68bb      	ldr	r3, [r7, #8]
 8009200:	2b00      	cmp	r3, #0
 8009202:	d101      	bne.n	8009208 <LPTIM_WaitForFlag+0x34>
    {
      result = HAL_TIMEOUT;
 8009204:	2303      	movs	r3, #3
 8009206:	73fb      	strb	r3, [r7, #15]
    }
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	681a      	ldr	r2, [r3, #0]
 800920e:	683b      	ldr	r3, [r7, #0]
 8009210:	4013      	ands	r3, r2
 8009212:	683a      	ldr	r2, [r7, #0]
 8009214:	429a      	cmp	r2, r3
 8009216:	d002      	beq.n	800921e <LPTIM_WaitForFlag+0x4a>
 8009218:	68bb      	ldr	r3, [r7, #8]
 800921a:	2b00      	cmp	r3, #0
 800921c:	d1ec      	bne.n	80091f8 <LPTIM_WaitForFlag+0x24>

  return result;
 800921e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009220:	4618      	mov	r0, r3
 8009222:	3714      	adds	r7, #20
 8009224:	46bd      	mov	sp, r7
 8009226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800922a:	4770      	bx	lr
 800922c:	20000010 	.word	0x20000010
 8009230:	d1b71759 	.word	0xd1b71759

08009234 <LPTIM_Disable>:
  *         Please check Errata Sheet ES0335 for more details under "MCU may remain
  *         stuck in LPTIM interrupt when entering Stop mode" section.
  * @retval None
  */
void LPTIM_Disable(LPTIM_HandleTypeDef *hlptim)
{
 8009234:	b580      	push	{r7, lr}
 8009236:	b08c      	sub	sp, #48	; 0x30
 8009238:	af00      	add	r7, sp, #0
 800923a:	6078      	str	r0, [r7, #4]
  uint32_t tmpclksource = 0;
 800923c:	2300      	movs	r3, #0
 800923e:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009240:	f3ef 8310 	mrs	r3, PRIMASK
 8009244:	60fb      	str	r3, [r7, #12]
  return(result);
 8009246:	68fb      	ldr	r3, [r7, #12]
  uint32_t tmpARR;
  uint32_t primask_bit;
  uint32_t tmpCFGR2;

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 8009248:	62bb      	str	r3, [r7, #40]	; 0x28
 800924a:	2301      	movs	r3, #1
 800924c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800924e:	693b      	ldr	r3, [r7, #16]
 8009250:	f383 8810 	msr	PRIMASK, r3
}
 8009254:	bf00      	nop
  __set_PRIMASK(1) ;

  /*********** Save LPTIM Config ***********/
  /* Save LPTIM source clock */
  switch ((uint32_t)hlptim->Instance)
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	4a81      	ldr	r2, [pc, #516]	; (8009460 <LPTIM_Disable+0x22c>)
 800925c:	4293      	cmp	r3, r2
 800925e:	d02d      	beq.n	80092bc <LPTIM_Disable+0x88>
 8009260:	4a7f      	ldr	r2, [pc, #508]	; (8009460 <LPTIM_Disable+0x22c>)
 8009262:	4293      	cmp	r3, r2
 8009264:	d830      	bhi.n	80092c8 <LPTIM_Disable+0x94>
 8009266:	4a7f      	ldr	r2, [pc, #508]	; (8009464 <LPTIM_Disable+0x230>)
 8009268:	4293      	cmp	r3, r2
 800926a:	d021      	beq.n	80092b0 <LPTIM_Disable+0x7c>
 800926c:	4a7d      	ldr	r2, [pc, #500]	; (8009464 <LPTIM_Disable+0x230>)
 800926e:	4293      	cmp	r3, r2
 8009270:	d82a      	bhi.n	80092c8 <LPTIM_Disable+0x94>
 8009272:	4a7d      	ldr	r2, [pc, #500]	; (8009468 <LPTIM_Disable+0x234>)
 8009274:	4293      	cmp	r3, r2
 8009276:	d015      	beq.n	80092a4 <LPTIM_Disable+0x70>
 8009278:	4a7b      	ldr	r2, [pc, #492]	; (8009468 <LPTIM_Disable+0x234>)
 800927a:	4293      	cmp	r3, r2
 800927c:	d824      	bhi.n	80092c8 <LPTIM_Disable+0x94>
 800927e:	4a7b      	ldr	r2, [pc, #492]	; (800946c <LPTIM_Disable+0x238>)
 8009280:	4293      	cmp	r3, r2
 8009282:	d003      	beq.n	800928c <LPTIM_Disable+0x58>
 8009284:	4a7a      	ldr	r2, [pc, #488]	; (8009470 <LPTIM_Disable+0x23c>)
 8009286:	4293      	cmp	r3, r2
 8009288:	d006      	beq.n	8009298 <LPTIM_Disable+0x64>
    case LPTIM5_BASE:
      tmpclksource = __HAL_RCC_GET_LPTIM5_SOURCE();
      break;
#endif /* LPTIM5 */
    default:
      break;
 800928a:	e01d      	b.n	80092c8 <LPTIM_Disable+0x94>
      tmpclksource = __HAL_RCC_GET_LPTIM1_SOURCE();
 800928c:	4b79      	ldr	r3, [pc, #484]	; (8009474 <LPTIM_Disable+0x240>)
 800928e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009290:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8009294:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 8009296:	e018      	b.n	80092ca <LPTIM_Disable+0x96>
      tmpclksource = __HAL_RCC_GET_LPTIM2_SOURCE();
 8009298:	4b76      	ldr	r3, [pc, #472]	; (8009474 <LPTIM_Disable+0x240>)
 800929a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800929c:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 80092a0:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 80092a2:	e012      	b.n	80092ca <LPTIM_Disable+0x96>
      tmpclksource = __HAL_RCC_GET_LPTIM3_SOURCE();
 80092a4:	4b73      	ldr	r3, [pc, #460]	; (8009474 <LPTIM_Disable+0x240>)
 80092a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80092a8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80092ac:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 80092ae:	e00c      	b.n	80092ca <LPTIM_Disable+0x96>
      tmpclksource = __HAL_RCC_GET_LPTIM4_SOURCE();
 80092b0:	4b70      	ldr	r3, [pc, #448]	; (8009474 <LPTIM_Disable+0x240>)
 80092b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80092b4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80092b8:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 80092ba:	e006      	b.n	80092ca <LPTIM_Disable+0x96>
      tmpclksource = __HAL_RCC_GET_LPTIM5_SOURCE();
 80092bc:	4b6d      	ldr	r3, [pc, #436]	; (8009474 <LPTIM_Disable+0x240>)
 80092be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80092c0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80092c4:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 80092c6:	e000      	b.n	80092ca <LPTIM_Disable+0x96>
      break;
 80092c8:	bf00      	nop
  }

  /* Save LPTIM configuration registers */
  tmpIER = hlptim->Instance->IER;
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	689b      	ldr	r3, [r3, #8]
 80092d0:	627b      	str	r3, [r7, #36]	; 0x24
  tmpCFGR = hlptim->Instance->CFGR;
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	68db      	ldr	r3, [r3, #12]
 80092d8:	623b      	str	r3, [r7, #32]
  tmpCMP = hlptim->Instance->CMP;
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	695b      	ldr	r3, [r3, #20]
 80092e0:	61fb      	str	r3, [r7, #28]
  tmpARR = hlptim->Instance->ARR;
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	699b      	ldr	r3, [r3, #24]
 80092e8:	61bb      	str	r3, [r7, #24]
  tmpCFGR2 = hlptim->Instance->CFGR2;
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092f0:	617b      	str	r3, [r7, #20]

  /*********** Reset LPTIM ***********/
  switch ((uint32_t)hlptim->Instance)
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	4a5a      	ldr	r2, [pc, #360]	; (8009460 <LPTIM_Disable+0x22c>)
 80092f8:	4293      	cmp	r3, r2
 80092fa:	d059      	beq.n	80093b0 <LPTIM_Disable+0x17c>
 80092fc:	4a58      	ldr	r2, [pc, #352]	; (8009460 <LPTIM_Disable+0x22c>)
 80092fe:	4293      	cmp	r3, r2
 8009300:	d867      	bhi.n	80093d2 <LPTIM_Disable+0x19e>
 8009302:	4a58      	ldr	r2, [pc, #352]	; (8009464 <LPTIM_Disable+0x230>)
 8009304:	4293      	cmp	r3, r2
 8009306:	d042      	beq.n	800938e <LPTIM_Disable+0x15a>
 8009308:	4a56      	ldr	r2, [pc, #344]	; (8009464 <LPTIM_Disable+0x230>)
 800930a:	4293      	cmp	r3, r2
 800930c:	d861      	bhi.n	80093d2 <LPTIM_Disable+0x19e>
 800930e:	4a56      	ldr	r2, [pc, #344]	; (8009468 <LPTIM_Disable+0x234>)
 8009310:	4293      	cmp	r3, r2
 8009312:	d02b      	beq.n	800936c <LPTIM_Disable+0x138>
 8009314:	4a54      	ldr	r2, [pc, #336]	; (8009468 <LPTIM_Disable+0x234>)
 8009316:	4293      	cmp	r3, r2
 8009318:	d85b      	bhi.n	80093d2 <LPTIM_Disable+0x19e>
 800931a:	4a54      	ldr	r2, [pc, #336]	; (800946c <LPTIM_Disable+0x238>)
 800931c:	4293      	cmp	r3, r2
 800931e:	d003      	beq.n	8009328 <LPTIM_Disable+0xf4>
 8009320:	4a53      	ldr	r2, [pc, #332]	; (8009470 <LPTIM_Disable+0x23c>)
 8009322:	4293      	cmp	r3, r2
 8009324:	d011      	beq.n	800934a <LPTIM_Disable+0x116>
      __HAL_RCC_LPTIM5_FORCE_RESET();
      __HAL_RCC_LPTIM5_RELEASE_RESET();
      break;
#endif /* LPTIM5 */
    default:
      break;
 8009326:	e054      	b.n	80093d2 <LPTIM_Disable+0x19e>
      __HAL_RCC_LPTIM1_FORCE_RESET();
 8009328:	4b52      	ldr	r3, [pc, #328]	; (8009474 <LPTIM_Disable+0x240>)
 800932a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800932e:	4a51      	ldr	r2, [pc, #324]	; (8009474 <LPTIM_Disable+0x240>)
 8009330:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009334:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      __HAL_RCC_LPTIM1_RELEASE_RESET();
 8009338:	4b4e      	ldr	r3, [pc, #312]	; (8009474 <LPTIM_Disable+0x240>)
 800933a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800933e:	4a4d      	ldr	r2, [pc, #308]	; (8009474 <LPTIM_Disable+0x240>)
 8009340:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009344:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      break;
 8009348:	e044      	b.n	80093d4 <LPTIM_Disable+0x1a0>
      __HAL_RCC_LPTIM2_FORCE_RESET();
 800934a:	4b4a      	ldr	r3, [pc, #296]	; (8009474 <LPTIM_Disable+0x240>)
 800934c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009350:	4a48      	ldr	r2, [pc, #288]	; (8009474 <LPTIM_Disable+0x240>)
 8009352:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009356:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      __HAL_RCC_LPTIM2_RELEASE_RESET();
 800935a:	4b46      	ldr	r3, [pc, #280]	; (8009474 <LPTIM_Disable+0x240>)
 800935c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009360:	4a44      	ldr	r2, [pc, #272]	; (8009474 <LPTIM_Disable+0x240>)
 8009362:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009366:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      break;
 800936a:	e033      	b.n	80093d4 <LPTIM_Disable+0x1a0>
      __HAL_RCC_LPTIM3_FORCE_RESET();
 800936c:	4b41      	ldr	r3, [pc, #260]	; (8009474 <LPTIM_Disable+0x240>)
 800936e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009372:	4a40      	ldr	r2, [pc, #256]	; (8009474 <LPTIM_Disable+0x240>)
 8009374:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009378:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      __HAL_RCC_LPTIM3_RELEASE_RESET();
 800937c:	4b3d      	ldr	r3, [pc, #244]	; (8009474 <LPTIM_Disable+0x240>)
 800937e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009382:	4a3c      	ldr	r2, [pc, #240]	; (8009474 <LPTIM_Disable+0x240>)
 8009384:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009388:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      break;
 800938c:	e022      	b.n	80093d4 <LPTIM_Disable+0x1a0>
      __HAL_RCC_LPTIM4_FORCE_RESET();
 800938e:	4b39      	ldr	r3, [pc, #228]	; (8009474 <LPTIM_Disable+0x240>)
 8009390:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009394:	4a37      	ldr	r2, [pc, #220]	; (8009474 <LPTIM_Disable+0x240>)
 8009396:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800939a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      __HAL_RCC_LPTIM4_RELEASE_RESET();
 800939e:	4b35      	ldr	r3, [pc, #212]	; (8009474 <LPTIM_Disable+0x240>)
 80093a0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80093a4:	4a33      	ldr	r2, [pc, #204]	; (8009474 <LPTIM_Disable+0x240>)
 80093a6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80093aa:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      break;
 80093ae:	e011      	b.n	80093d4 <LPTIM_Disable+0x1a0>
      __HAL_RCC_LPTIM5_FORCE_RESET();
 80093b0:	4b30      	ldr	r3, [pc, #192]	; (8009474 <LPTIM_Disable+0x240>)
 80093b2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80093b6:	4a2f      	ldr	r2, [pc, #188]	; (8009474 <LPTIM_Disable+0x240>)
 80093b8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80093bc:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      __HAL_RCC_LPTIM5_RELEASE_RESET();
 80093c0:	4b2c      	ldr	r3, [pc, #176]	; (8009474 <LPTIM_Disable+0x240>)
 80093c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80093c6:	4a2b      	ldr	r2, [pc, #172]	; (8009474 <LPTIM_Disable+0x240>)
 80093c8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80093cc:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      break;
 80093d0:	e000      	b.n	80093d4 <LPTIM_Disable+0x1a0>
      break;
 80093d2:	bf00      	nop
  }

  /*********** Restore LPTIM Config ***********/
  if ((tmpCMP != 0UL) || (tmpARR != 0UL))
 80093d4:	69fb      	ldr	r3, [r7, #28]
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d103      	bne.n	80093e2 <LPTIM_Disable+0x1ae>
 80093da:	69bb      	ldr	r3, [r7, #24]
 80093dc:	2b00      	cmp	r3, #0
 80093de:	f000 80d1 	beq.w	8009584 <LPTIM_Disable+0x350>
  {
    /* Force LPTIM source kernel clock from APB */
    switch ((uint32_t)hlptim->Instance)
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	4a1e      	ldr	r2, [pc, #120]	; (8009460 <LPTIM_Disable+0x22c>)
 80093e8:	4293      	cmp	r3, r2
 80093ea:	d031      	beq.n	8009450 <LPTIM_Disable+0x21c>
 80093ec:	4a1c      	ldr	r2, [pc, #112]	; (8009460 <LPTIM_Disable+0x22c>)
 80093ee:	4293      	cmp	r3, r2
 80093f0:	d842      	bhi.n	8009478 <LPTIM_Disable+0x244>
 80093f2:	4a1c      	ldr	r2, [pc, #112]	; (8009464 <LPTIM_Disable+0x230>)
 80093f4:	4293      	cmp	r3, r2
 80093f6:	d024      	beq.n	8009442 <LPTIM_Disable+0x20e>
 80093f8:	4a1a      	ldr	r2, [pc, #104]	; (8009464 <LPTIM_Disable+0x230>)
 80093fa:	4293      	cmp	r3, r2
 80093fc:	d83c      	bhi.n	8009478 <LPTIM_Disable+0x244>
 80093fe:	4a1a      	ldr	r2, [pc, #104]	; (8009468 <LPTIM_Disable+0x234>)
 8009400:	4293      	cmp	r3, r2
 8009402:	d017      	beq.n	8009434 <LPTIM_Disable+0x200>
 8009404:	4a18      	ldr	r2, [pc, #96]	; (8009468 <LPTIM_Disable+0x234>)
 8009406:	4293      	cmp	r3, r2
 8009408:	d836      	bhi.n	8009478 <LPTIM_Disable+0x244>
 800940a:	4a18      	ldr	r2, [pc, #96]	; (800946c <LPTIM_Disable+0x238>)
 800940c:	4293      	cmp	r3, r2
 800940e:	d003      	beq.n	8009418 <LPTIM_Disable+0x1e4>
 8009410:	4a17      	ldr	r2, [pc, #92]	; (8009470 <LPTIM_Disable+0x23c>)
 8009412:	4293      	cmp	r3, r2
 8009414:	d007      	beq.n	8009426 <LPTIM_Disable+0x1f2>
      case LPTIM5_BASE:
        __HAL_RCC_LPTIM5_CONFIG(RCC_LPTIM5CLKSOURCE_D3PCLK1);
        break;
#endif /* LPTIM5 */
      default:
        break;
 8009416:	e02f      	b.n	8009478 <LPTIM_Disable+0x244>
        __HAL_RCC_LPTIM1_CONFIG(RCC_LPTIM1CLKSOURCE_D2PCLK1);
 8009418:	4b16      	ldr	r3, [pc, #88]	; (8009474 <LPTIM_Disable+0x240>)
 800941a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800941c:	4a15      	ldr	r2, [pc, #84]	; (8009474 <LPTIM_Disable+0x240>)
 800941e:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 8009422:	6553      	str	r3, [r2, #84]	; 0x54
        break;
 8009424:	e029      	b.n	800947a <LPTIM_Disable+0x246>
        __HAL_RCC_LPTIM2_CONFIG(RCC_LPTIM2CLKSOURCE_D3PCLK1);
 8009426:	4b13      	ldr	r3, [pc, #76]	; (8009474 <LPTIM_Disable+0x240>)
 8009428:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800942a:	4a12      	ldr	r2, [pc, #72]	; (8009474 <LPTIM_Disable+0x240>)
 800942c:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8009430:	6593      	str	r3, [r2, #88]	; 0x58
        break;
 8009432:	e022      	b.n	800947a <LPTIM_Disable+0x246>
        __HAL_RCC_LPTIM3_CONFIG(RCC_LPTIM3CLKSOURCE_D3PCLK1);
 8009434:	4b0f      	ldr	r3, [pc, #60]	; (8009474 <LPTIM_Disable+0x240>)
 8009436:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009438:	4a0e      	ldr	r2, [pc, #56]	; (8009474 <LPTIM_Disable+0x240>)
 800943a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800943e:	6593      	str	r3, [r2, #88]	; 0x58
        break;
 8009440:	e01b      	b.n	800947a <LPTIM_Disable+0x246>
        __HAL_RCC_LPTIM4_CONFIG(RCC_LPTIM4CLKSOURCE_D3PCLK1);
 8009442:	4b0c      	ldr	r3, [pc, #48]	; (8009474 <LPTIM_Disable+0x240>)
 8009444:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009446:	4a0b      	ldr	r2, [pc, #44]	; (8009474 <LPTIM_Disable+0x240>)
 8009448:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800944c:	6593      	str	r3, [r2, #88]	; 0x58
        break;
 800944e:	e014      	b.n	800947a <LPTIM_Disable+0x246>
        __HAL_RCC_LPTIM5_CONFIG(RCC_LPTIM5CLKSOURCE_D3PCLK1);
 8009450:	4b08      	ldr	r3, [pc, #32]	; (8009474 <LPTIM_Disable+0x240>)
 8009452:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009454:	4a07      	ldr	r2, [pc, #28]	; (8009474 <LPTIM_Disable+0x240>)
 8009456:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800945a:	6593      	str	r3, [r2, #88]	; 0x58
        break;
 800945c:	e00d      	b.n	800947a <LPTIM_Disable+0x246>
 800945e:	bf00      	nop
 8009460:	58003000 	.word	0x58003000
 8009464:	58002c00 	.word	0x58002c00
 8009468:	58002800 	.word	0x58002800
 800946c:	40002400 	.word	0x40002400
 8009470:	58002400 	.word	0x58002400
 8009474:	58024400 	.word	0x58024400
        break;
 8009478:	bf00      	nop
    }

    if (tmpCMP != 0UL)
 800947a:	69fb      	ldr	r3, [r7, #28]
 800947c:	2b00      	cmp	r3, #0
 800947e:	d01a      	beq.n	80094b6 <LPTIM_Disable+0x282>
    {
      /* Restore CMP register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	691a      	ldr	r2, [r3, #16]
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	f042 0201 	orr.w	r2, r2, #1
 800948e:	611a      	str	r2, [r3, #16]
      hlptim->Instance->CMP = tmpCMP;
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	69fa      	ldr	r2, [r7, #28]
 8009496:	615a      	str	r2, [r3, #20]

      /* Wait for the completion of the write operation to the LPTIM_CMP register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 8009498:	2108      	movs	r1, #8
 800949a:	6878      	ldr	r0, [r7, #4]
 800949c:	f7ff fe9a 	bl	80091d4 <LPTIM_WaitForFlag>
 80094a0:	4603      	mov	r3, r0
 80094a2:	2b03      	cmp	r3, #3
 80094a4:	d103      	bne.n	80094ae <LPTIM_Disable+0x27a>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	2203      	movs	r2, #3
 80094aa:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
      }
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	2208      	movs	r2, #8
 80094b4:	605a      	str	r2, [r3, #4]
    }

    if (tmpARR != 0UL)
 80094b6:	69bb      	ldr	r3, [r7, #24]
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d01a      	beq.n	80094f2 <LPTIM_Disable+0x2be>
    {
      /* Restore ARR register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	691a      	ldr	r2, [r3, #16]
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	f042 0201 	orr.w	r2, r2, #1
 80094ca:	611a      	str	r2, [r3, #16]
      hlptim->Instance->ARR = tmpARR;
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	69ba      	ldr	r2, [r7, #24]
 80094d2:	619a      	str	r2, [r3, #24]

      /* Wait for the completion of the write operation to the LPTIM_ARR register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 80094d4:	2110      	movs	r1, #16
 80094d6:	6878      	ldr	r0, [r7, #4]
 80094d8:	f7ff fe7c 	bl	80091d4 <LPTIM_WaitForFlag>
 80094dc:	4603      	mov	r3, r0
 80094de:	2b03      	cmp	r3, #3
 80094e0:	d103      	bne.n	80094ea <LPTIM_Disable+0x2b6>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	2203      	movs	r2, #3
 80094e6:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
      }

      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	2210      	movs	r2, #16
 80094f0:	605a      	str	r2, [r3, #4]
    }

    /* Restore LPTIM source kernel clock */
    switch ((uint32_t)hlptim->Instance)
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	4a32      	ldr	r2, [pc, #200]	; (80095c0 <LPTIM_Disable+0x38c>)
 80094f8:	4293      	cmp	r3, r2
 80094fa:	d039      	beq.n	8009570 <LPTIM_Disable+0x33c>
 80094fc:	4a30      	ldr	r2, [pc, #192]	; (80095c0 <LPTIM_Disable+0x38c>)
 80094fe:	4293      	cmp	r3, r2
 8009500:	d83f      	bhi.n	8009582 <LPTIM_Disable+0x34e>
 8009502:	4a30      	ldr	r2, [pc, #192]	; (80095c4 <LPTIM_Disable+0x390>)
 8009504:	4293      	cmp	r3, r2
 8009506:	d02a      	beq.n	800955e <LPTIM_Disable+0x32a>
 8009508:	4a2e      	ldr	r2, [pc, #184]	; (80095c4 <LPTIM_Disable+0x390>)
 800950a:	4293      	cmp	r3, r2
 800950c:	d839      	bhi.n	8009582 <LPTIM_Disable+0x34e>
 800950e:	4a2e      	ldr	r2, [pc, #184]	; (80095c8 <LPTIM_Disable+0x394>)
 8009510:	4293      	cmp	r3, r2
 8009512:	d01b      	beq.n	800954c <LPTIM_Disable+0x318>
 8009514:	4a2c      	ldr	r2, [pc, #176]	; (80095c8 <LPTIM_Disable+0x394>)
 8009516:	4293      	cmp	r3, r2
 8009518:	d833      	bhi.n	8009582 <LPTIM_Disable+0x34e>
 800951a:	4a2c      	ldr	r2, [pc, #176]	; (80095cc <LPTIM_Disable+0x398>)
 800951c:	4293      	cmp	r3, r2
 800951e:	d003      	beq.n	8009528 <LPTIM_Disable+0x2f4>
 8009520:	4a2b      	ldr	r2, [pc, #172]	; (80095d0 <LPTIM_Disable+0x39c>)
 8009522:	4293      	cmp	r3, r2
 8009524:	d009      	beq.n	800953a <LPTIM_Disable+0x306>
      case LPTIM5_BASE:
        __HAL_RCC_LPTIM5_CONFIG(tmpclksource);
        break;
#endif /* LPTIM5 */
      default:
        break;
 8009526:	e02c      	b.n	8009582 <LPTIM_Disable+0x34e>
        __HAL_RCC_LPTIM1_CONFIG(tmpclksource);
 8009528:	4b2a      	ldr	r3, [pc, #168]	; (80095d4 <LPTIM_Disable+0x3a0>)
 800952a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800952c:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8009530:	4928      	ldr	r1, [pc, #160]	; (80095d4 <LPTIM_Disable+0x3a0>)
 8009532:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009534:	4313      	orrs	r3, r2
 8009536:	654b      	str	r3, [r1, #84]	; 0x54
        break;
 8009538:	e024      	b.n	8009584 <LPTIM_Disable+0x350>
        __HAL_RCC_LPTIM2_CONFIG(tmpclksource);
 800953a:	4b26      	ldr	r3, [pc, #152]	; (80095d4 <LPTIM_Disable+0x3a0>)
 800953c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800953e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009542:	4924      	ldr	r1, [pc, #144]	; (80095d4 <LPTIM_Disable+0x3a0>)
 8009544:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009546:	4313      	orrs	r3, r2
 8009548:	658b      	str	r3, [r1, #88]	; 0x58
        break;
 800954a:	e01b      	b.n	8009584 <LPTIM_Disable+0x350>
        __HAL_RCC_LPTIM3_CONFIG(tmpclksource);
 800954c:	4b21      	ldr	r3, [pc, #132]	; (80095d4 <LPTIM_Disable+0x3a0>)
 800954e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009550:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009554:	491f      	ldr	r1, [pc, #124]	; (80095d4 <LPTIM_Disable+0x3a0>)
 8009556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009558:	4313      	orrs	r3, r2
 800955a:	658b      	str	r3, [r1, #88]	; 0x58
        break;
 800955c:	e012      	b.n	8009584 <LPTIM_Disable+0x350>
        __HAL_RCC_LPTIM4_CONFIG(tmpclksource);
 800955e:	4b1d      	ldr	r3, [pc, #116]	; (80095d4 <LPTIM_Disable+0x3a0>)
 8009560:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009562:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009566:	491b      	ldr	r1, [pc, #108]	; (80095d4 <LPTIM_Disable+0x3a0>)
 8009568:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800956a:	4313      	orrs	r3, r2
 800956c:	658b      	str	r3, [r1, #88]	; 0x58
        break;
 800956e:	e009      	b.n	8009584 <LPTIM_Disable+0x350>
        __HAL_RCC_LPTIM5_CONFIG(tmpclksource);
 8009570:	4b18      	ldr	r3, [pc, #96]	; (80095d4 <LPTIM_Disable+0x3a0>)
 8009572:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009574:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009578:	4916      	ldr	r1, [pc, #88]	; (80095d4 <LPTIM_Disable+0x3a0>)
 800957a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800957c:	4313      	orrs	r3, r2
 800957e:	658b      	str	r3, [r1, #88]	; 0x58
        break;
 8009580:	e000      	b.n	8009584 <LPTIM_Disable+0x350>
        break;
 8009582:	bf00      	nop
    }
  }

  /* Restore configuration registers (LPTIM should be disabled first) */
  hlptim->Instance->CR &= ~(LPTIM_CR_ENABLE);
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	691a      	ldr	r2, [r3, #16]
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	f022 0201 	bic.w	r2, r2, #1
 8009592:	611a      	str	r2, [r3, #16]
  hlptim->Instance->IER = tmpIER;
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800959a:	609a      	str	r2, [r3, #8]
  hlptim->Instance->CFGR = tmpCFGR;
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	6a3a      	ldr	r2, [r7, #32]
 80095a2:	60da      	str	r2, [r3, #12]
  hlptim->Instance->CFGR2 = tmpCFGR2;
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	697a      	ldr	r2, [r7, #20]
 80095aa:	625a      	str	r2, [r3, #36]	; 0x24
 80095ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095ae:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80095b0:	68bb      	ldr	r3, [r7, #8]
 80095b2:	f383 8810 	msr	PRIMASK, r3
}
 80095b6:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 80095b8:	bf00      	nop
 80095ba:	3730      	adds	r7, #48	; 0x30
 80095bc:	46bd      	mov	sp, r7
 80095be:	bd80      	pop	{r7, pc}
 80095c0:	58003000 	.word	0x58003000
 80095c4:	58002c00 	.word	0x58002c00
 80095c8:	58002800 	.word	0x58002800
 80095cc:	40002400 	.word	0x40002400
 80095d0:	58002400 	.word	0x58002400
 80095d4:	58024400 	.word	0x58024400

080095d8 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 3, ..31 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess (void)
{
 80095d8:	b480      	push	{r7}
 80095da:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT (PWR->CR1, PWR_CR1_DBP);
 80095dc:	4b05      	ldr	r3, [pc, #20]	; (80095f4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	4a04      	ldr	r2, [pc, #16]	; (80095f4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80095e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80095e6:	6013      	str	r3, [r2, #0]
}
 80095e8:	bf00      	nop
 80095ea:	46bd      	mov	sp, r7
 80095ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f0:	4770      	bx	lr
 80095f2:	bf00      	nop
 80095f4:	58024800 	.word	0x58024800

080095f8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80095f8:	b580      	push	{r7, lr}
 80095fa:	b084      	sub	sp, #16
 80095fc:	af00      	add	r7, sp, #0
 80095fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8009600:	4b19      	ldr	r3, [pc, #100]	; (8009668 <HAL_PWREx_ConfigSupply+0x70>)
 8009602:	68db      	ldr	r3, [r3, #12]
 8009604:	f003 0304 	and.w	r3, r3, #4
 8009608:	2b04      	cmp	r3, #4
 800960a:	d00a      	beq.n	8009622 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800960c:	4b16      	ldr	r3, [pc, #88]	; (8009668 <HAL_PWREx_ConfigSupply+0x70>)
 800960e:	68db      	ldr	r3, [r3, #12]
 8009610:	f003 0307 	and.w	r3, r3, #7
 8009614:	687a      	ldr	r2, [r7, #4]
 8009616:	429a      	cmp	r2, r3
 8009618:	d001      	beq.n	800961e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800961a:	2301      	movs	r3, #1
 800961c:	e01f      	b.n	800965e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800961e:	2300      	movs	r3, #0
 8009620:	e01d      	b.n	800965e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8009622:	4b11      	ldr	r3, [pc, #68]	; (8009668 <HAL_PWREx_ConfigSupply+0x70>)
 8009624:	68db      	ldr	r3, [r3, #12]
 8009626:	f023 0207 	bic.w	r2, r3, #7
 800962a:	490f      	ldr	r1, [pc, #60]	; (8009668 <HAL_PWREx_ConfigSupply+0x70>)
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	4313      	orrs	r3, r2
 8009630:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8009632:	f7fa fa7f 	bl	8003b34 <HAL_GetTick>
 8009636:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009638:	e009      	b.n	800964e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800963a:	f7fa fa7b 	bl	8003b34 <HAL_GetTick>
 800963e:	4602      	mov	r2, r0
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	1ad3      	subs	r3, r2, r3
 8009644:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009648:	d901      	bls.n	800964e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800964a:	2301      	movs	r3, #1
 800964c:	e007      	b.n	800965e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800964e:	4b06      	ldr	r3, [pc, #24]	; (8009668 <HAL_PWREx_ConfigSupply+0x70>)
 8009650:	685b      	ldr	r3, [r3, #4]
 8009652:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009656:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800965a:	d1ee      	bne.n	800963a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800965c:	2300      	movs	r3, #0
}
 800965e:	4618      	mov	r0, r3
 8009660:	3710      	adds	r7, #16
 8009662:	46bd      	mov	sp, r7
 8009664:	bd80      	pop	{r7, pc}
 8009666:	bf00      	nop
 8009668:	58024800 	.word	0x58024800

0800966c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800966c:	b580      	push	{r7, lr}
 800966e:	b08c      	sub	sp, #48	; 0x30
 8009670:	af00      	add	r7, sp, #0
 8009672:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	2b00      	cmp	r3, #0
 8009678:	d102      	bne.n	8009680 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800967a:	2301      	movs	r3, #1
 800967c:	f000 bc48 	b.w	8009f10 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	f003 0301 	and.w	r3, r3, #1
 8009688:	2b00      	cmp	r3, #0
 800968a:	f000 8088 	beq.w	800979e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800968e:	4b99      	ldr	r3, [pc, #612]	; (80098f4 <HAL_RCC_OscConfig+0x288>)
 8009690:	691b      	ldr	r3, [r3, #16]
 8009692:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009696:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009698:	4b96      	ldr	r3, [pc, #600]	; (80098f4 <HAL_RCC_OscConfig+0x288>)
 800969a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800969c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800969e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096a0:	2b10      	cmp	r3, #16
 80096a2:	d007      	beq.n	80096b4 <HAL_RCC_OscConfig+0x48>
 80096a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096a6:	2b18      	cmp	r3, #24
 80096a8:	d111      	bne.n	80096ce <HAL_RCC_OscConfig+0x62>
 80096aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096ac:	f003 0303 	and.w	r3, r3, #3
 80096b0:	2b02      	cmp	r3, #2
 80096b2:	d10c      	bne.n	80096ce <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80096b4:	4b8f      	ldr	r3, [pc, #572]	; (80098f4 <HAL_RCC_OscConfig+0x288>)
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d06d      	beq.n	800979c <HAL_RCC_OscConfig+0x130>
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	685b      	ldr	r3, [r3, #4]
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d169      	bne.n	800979c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80096c8:	2301      	movs	r3, #1
 80096ca:	f000 bc21 	b.w	8009f10 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	685b      	ldr	r3, [r3, #4]
 80096d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80096d6:	d106      	bne.n	80096e6 <HAL_RCC_OscConfig+0x7a>
 80096d8:	4b86      	ldr	r3, [pc, #536]	; (80098f4 <HAL_RCC_OscConfig+0x288>)
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	4a85      	ldr	r2, [pc, #532]	; (80098f4 <HAL_RCC_OscConfig+0x288>)
 80096de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80096e2:	6013      	str	r3, [r2, #0]
 80096e4:	e02e      	b.n	8009744 <HAL_RCC_OscConfig+0xd8>
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	685b      	ldr	r3, [r3, #4]
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d10c      	bne.n	8009708 <HAL_RCC_OscConfig+0x9c>
 80096ee:	4b81      	ldr	r3, [pc, #516]	; (80098f4 <HAL_RCC_OscConfig+0x288>)
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	4a80      	ldr	r2, [pc, #512]	; (80098f4 <HAL_RCC_OscConfig+0x288>)
 80096f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80096f8:	6013      	str	r3, [r2, #0]
 80096fa:	4b7e      	ldr	r3, [pc, #504]	; (80098f4 <HAL_RCC_OscConfig+0x288>)
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	4a7d      	ldr	r2, [pc, #500]	; (80098f4 <HAL_RCC_OscConfig+0x288>)
 8009700:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009704:	6013      	str	r3, [r2, #0]
 8009706:	e01d      	b.n	8009744 <HAL_RCC_OscConfig+0xd8>
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	685b      	ldr	r3, [r3, #4]
 800970c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009710:	d10c      	bne.n	800972c <HAL_RCC_OscConfig+0xc0>
 8009712:	4b78      	ldr	r3, [pc, #480]	; (80098f4 <HAL_RCC_OscConfig+0x288>)
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	4a77      	ldr	r2, [pc, #476]	; (80098f4 <HAL_RCC_OscConfig+0x288>)
 8009718:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800971c:	6013      	str	r3, [r2, #0]
 800971e:	4b75      	ldr	r3, [pc, #468]	; (80098f4 <HAL_RCC_OscConfig+0x288>)
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	4a74      	ldr	r2, [pc, #464]	; (80098f4 <HAL_RCC_OscConfig+0x288>)
 8009724:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009728:	6013      	str	r3, [r2, #0]
 800972a:	e00b      	b.n	8009744 <HAL_RCC_OscConfig+0xd8>
 800972c:	4b71      	ldr	r3, [pc, #452]	; (80098f4 <HAL_RCC_OscConfig+0x288>)
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	4a70      	ldr	r2, [pc, #448]	; (80098f4 <HAL_RCC_OscConfig+0x288>)
 8009732:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009736:	6013      	str	r3, [r2, #0]
 8009738:	4b6e      	ldr	r3, [pc, #440]	; (80098f4 <HAL_RCC_OscConfig+0x288>)
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	4a6d      	ldr	r2, [pc, #436]	; (80098f4 <HAL_RCC_OscConfig+0x288>)
 800973e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009742:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	685b      	ldr	r3, [r3, #4]
 8009748:	2b00      	cmp	r3, #0
 800974a:	d013      	beq.n	8009774 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800974c:	f7fa f9f2 	bl	8003b34 <HAL_GetTick>
 8009750:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009752:	e008      	b.n	8009766 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009754:	f7fa f9ee 	bl	8003b34 <HAL_GetTick>
 8009758:	4602      	mov	r2, r0
 800975a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800975c:	1ad3      	subs	r3, r2, r3
 800975e:	2b64      	cmp	r3, #100	; 0x64
 8009760:	d901      	bls.n	8009766 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8009762:	2303      	movs	r3, #3
 8009764:	e3d4      	b.n	8009f10 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009766:	4b63      	ldr	r3, [pc, #396]	; (80098f4 <HAL_RCC_OscConfig+0x288>)
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800976e:	2b00      	cmp	r3, #0
 8009770:	d0f0      	beq.n	8009754 <HAL_RCC_OscConfig+0xe8>
 8009772:	e014      	b.n	800979e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009774:	f7fa f9de 	bl	8003b34 <HAL_GetTick>
 8009778:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800977a:	e008      	b.n	800978e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800977c:	f7fa f9da 	bl	8003b34 <HAL_GetTick>
 8009780:	4602      	mov	r2, r0
 8009782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009784:	1ad3      	subs	r3, r2, r3
 8009786:	2b64      	cmp	r3, #100	; 0x64
 8009788:	d901      	bls.n	800978e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800978a:	2303      	movs	r3, #3
 800978c:	e3c0      	b.n	8009f10 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800978e:	4b59      	ldr	r3, [pc, #356]	; (80098f4 <HAL_RCC_OscConfig+0x288>)
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009796:	2b00      	cmp	r3, #0
 8009798:	d1f0      	bne.n	800977c <HAL_RCC_OscConfig+0x110>
 800979a:	e000      	b.n	800979e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800979c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	f003 0302 	and.w	r3, r3, #2
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	f000 80ca 	beq.w	8009940 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80097ac:	4b51      	ldr	r3, [pc, #324]	; (80098f4 <HAL_RCC_OscConfig+0x288>)
 80097ae:	691b      	ldr	r3, [r3, #16]
 80097b0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80097b4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80097b6:	4b4f      	ldr	r3, [pc, #316]	; (80098f4 <HAL_RCC_OscConfig+0x288>)
 80097b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097ba:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80097bc:	6a3b      	ldr	r3, [r7, #32]
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d007      	beq.n	80097d2 <HAL_RCC_OscConfig+0x166>
 80097c2:	6a3b      	ldr	r3, [r7, #32]
 80097c4:	2b18      	cmp	r3, #24
 80097c6:	d156      	bne.n	8009876 <HAL_RCC_OscConfig+0x20a>
 80097c8:	69fb      	ldr	r3, [r7, #28]
 80097ca:	f003 0303 	and.w	r3, r3, #3
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d151      	bne.n	8009876 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80097d2:	4b48      	ldr	r3, [pc, #288]	; (80098f4 <HAL_RCC_OscConfig+0x288>)
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	f003 0304 	and.w	r3, r3, #4
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d005      	beq.n	80097ea <HAL_RCC_OscConfig+0x17e>
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	68db      	ldr	r3, [r3, #12]
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d101      	bne.n	80097ea <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80097e6:	2301      	movs	r3, #1
 80097e8:	e392      	b.n	8009f10 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80097ea:	4b42      	ldr	r3, [pc, #264]	; (80098f4 <HAL_RCC_OscConfig+0x288>)
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	f023 0219 	bic.w	r2, r3, #25
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	68db      	ldr	r3, [r3, #12]
 80097f6:	493f      	ldr	r1, [pc, #252]	; (80098f4 <HAL_RCC_OscConfig+0x288>)
 80097f8:	4313      	orrs	r3, r2
 80097fa:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80097fc:	f7fa f99a 	bl	8003b34 <HAL_GetTick>
 8009800:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009802:	e008      	b.n	8009816 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009804:	f7fa f996 	bl	8003b34 <HAL_GetTick>
 8009808:	4602      	mov	r2, r0
 800980a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800980c:	1ad3      	subs	r3, r2, r3
 800980e:	2b02      	cmp	r3, #2
 8009810:	d901      	bls.n	8009816 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8009812:	2303      	movs	r3, #3
 8009814:	e37c      	b.n	8009f10 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009816:	4b37      	ldr	r3, [pc, #220]	; (80098f4 <HAL_RCC_OscConfig+0x288>)
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	f003 0304 	and.w	r3, r3, #4
 800981e:	2b00      	cmp	r3, #0
 8009820:	d0f0      	beq.n	8009804 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009822:	f7fa f9b7 	bl	8003b94 <HAL_GetREVID>
 8009826:	4603      	mov	r3, r0
 8009828:	f241 0203 	movw	r2, #4099	; 0x1003
 800982c:	4293      	cmp	r3, r2
 800982e:	d817      	bhi.n	8009860 <HAL_RCC_OscConfig+0x1f4>
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	691b      	ldr	r3, [r3, #16]
 8009834:	2b40      	cmp	r3, #64	; 0x40
 8009836:	d108      	bne.n	800984a <HAL_RCC_OscConfig+0x1de>
 8009838:	4b2e      	ldr	r3, [pc, #184]	; (80098f4 <HAL_RCC_OscConfig+0x288>)
 800983a:	685b      	ldr	r3, [r3, #4]
 800983c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8009840:	4a2c      	ldr	r2, [pc, #176]	; (80098f4 <HAL_RCC_OscConfig+0x288>)
 8009842:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009846:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009848:	e07a      	b.n	8009940 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800984a:	4b2a      	ldr	r3, [pc, #168]	; (80098f4 <HAL_RCC_OscConfig+0x288>)
 800984c:	685b      	ldr	r3, [r3, #4]
 800984e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	691b      	ldr	r3, [r3, #16]
 8009856:	031b      	lsls	r3, r3, #12
 8009858:	4926      	ldr	r1, [pc, #152]	; (80098f4 <HAL_RCC_OscConfig+0x288>)
 800985a:	4313      	orrs	r3, r2
 800985c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800985e:	e06f      	b.n	8009940 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009860:	4b24      	ldr	r3, [pc, #144]	; (80098f4 <HAL_RCC_OscConfig+0x288>)
 8009862:	685b      	ldr	r3, [r3, #4]
 8009864:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	691b      	ldr	r3, [r3, #16]
 800986c:	061b      	lsls	r3, r3, #24
 800986e:	4921      	ldr	r1, [pc, #132]	; (80098f4 <HAL_RCC_OscConfig+0x288>)
 8009870:	4313      	orrs	r3, r2
 8009872:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009874:	e064      	b.n	8009940 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	68db      	ldr	r3, [r3, #12]
 800987a:	2b00      	cmp	r3, #0
 800987c:	d047      	beq.n	800990e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800987e:	4b1d      	ldr	r3, [pc, #116]	; (80098f4 <HAL_RCC_OscConfig+0x288>)
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	f023 0219 	bic.w	r2, r3, #25
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	68db      	ldr	r3, [r3, #12]
 800988a:	491a      	ldr	r1, [pc, #104]	; (80098f4 <HAL_RCC_OscConfig+0x288>)
 800988c:	4313      	orrs	r3, r2
 800988e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009890:	f7fa f950 	bl	8003b34 <HAL_GetTick>
 8009894:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009896:	e008      	b.n	80098aa <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009898:	f7fa f94c 	bl	8003b34 <HAL_GetTick>
 800989c:	4602      	mov	r2, r0
 800989e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098a0:	1ad3      	subs	r3, r2, r3
 80098a2:	2b02      	cmp	r3, #2
 80098a4:	d901      	bls.n	80098aa <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80098a6:	2303      	movs	r3, #3
 80098a8:	e332      	b.n	8009f10 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80098aa:	4b12      	ldr	r3, [pc, #72]	; (80098f4 <HAL_RCC_OscConfig+0x288>)
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	f003 0304 	and.w	r3, r3, #4
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d0f0      	beq.n	8009898 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80098b6:	f7fa f96d 	bl	8003b94 <HAL_GetREVID>
 80098ba:	4603      	mov	r3, r0
 80098bc:	f241 0203 	movw	r2, #4099	; 0x1003
 80098c0:	4293      	cmp	r3, r2
 80098c2:	d819      	bhi.n	80098f8 <HAL_RCC_OscConfig+0x28c>
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	691b      	ldr	r3, [r3, #16]
 80098c8:	2b40      	cmp	r3, #64	; 0x40
 80098ca:	d108      	bne.n	80098de <HAL_RCC_OscConfig+0x272>
 80098cc:	4b09      	ldr	r3, [pc, #36]	; (80098f4 <HAL_RCC_OscConfig+0x288>)
 80098ce:	685b      	ldr	r3, [r3, #4]
 80098d0:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80098d4:	4a07      	ldr	r2, [pc, #28]	; (80098f4 <HAL_RCC_OscConfig+0x288>)
 80098d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80098da:	6053      	str	r3, [r2, #4]
 80098dc:	e030      	b.n	8009940 <HAL_RCC_OscConfig+0x2d4>
 80098de:	4b05      	ldr	r3, [pc, #20]	; (80098f4 <HAL_RCC_OscConfig+0x288>)
 80098e0:	685b      	ldr	r3, [r3, #4]
 80098e2:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	691b      	ldr	r3, [r3, #16]
 80098ea:	031b      	lsls	r3, r3, #12
 80098ec:	4901      	ldr	r1, [pc, #4]	; (80098f4 <HAL_RCC_OscConfig+0x288>)
 80098ee:	4313      	orrs	r3, r2
 80098f0:	604b      	str	r3, [r1, #4]
 80098f2:	e025      	b.n	8009940 <HAL_RCC_OscConfig+0x2d4>
 80098f4:	58024400 	.word	0x58024400
 80098f8:	4b9a      	ldr	r3, [pc, #616]	; (8009b64 <HAL_RCC_OscConfig+0x4f8>)
 80098fa:	685b      	ldr	r3, [r3, #4]
 80098fc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	691b      	ldr	r3, [r3, #16]
 8009904:	061b      	lsls	r3, r3, #24
 8009906:	4997      	ldr	r1, [pc, #604]	; (8009b64 <HAL_RCC_OscConfig+0x4f8>)
 8009908:	4313      	orrs	r3, r2
 800990a:	604b      	str	r3, [r1, #4]
 800990c:	e018      	b.n	8009940 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800990e:	4b95      	ldr	r3, [pc, #596]	; (8009b64 <HAL_RCC_OscConfig+0x4f8>)
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	4a94      	ldr	r2, [pc, #592]	; (8009b64 <HAL_RCC_OscConfig+0x4f8>)
 8009914:	f023 0301 	bic.w	r3, r3, #1
 8009918:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800991a:	f7fa f90b 	bl	8003b34 <HAL_GetTick>
 800991e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009920:	e008      	b.n	8009934 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009922:	f7fa f907 	bl	8003b34 <HAL_GetTick>
 8009926:	4602      	mov	r2, r0
 8009928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800992a:	1ad3      	subs	r3, r2, r3
 800992c:	2b02      	cmp	r3, #2
 800992e:	d901      	bls.n	8009934 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8009930:	2303      	movs	r3, #3
 8009932:	e2ed      	b.n	8009f10 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009934:	4b8b      	ldr	r3, [pc, #556]	; (8009b64 <HAL_RCC_OscConfig+0x4f8>)
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	f003 0304 	and.w	r3, r3, #4
 800993c:	2b00      	cmp	r3, #0
 800993e:	d1f0      	bne.n	8009922 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	f003 0310 	and.w	r3, r3, #16
 8009948:	2b00      	cmp	r3, #0
 800994a:	f000 80a9 	beq.w	8009aa0 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800994e:	4b85      	ldr	r3, [pc, #532]	; (8009b64 <HAL_RCC_OscConfig+0x4f8>)
 8009950:	691b      	ldr	r3, [r3, #16]
 8009952:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009956:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009958:	4b82      	ldr	r3, [pc, #520]	; (8009b64 <HAL_RCC_OscConfig+0x4f8>)
 800995a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800995c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800995e:	69bb      	ldr	r3, [r7, #24]
 8009960:	2b08      	cmp	r3, #8
 8009962:	d007      	beq.n	8009974 <HAL_RCC_OscConfig+0x308>
 8009964:	69bb      	ldr	r3, [r7, #24]
 8009966:	2b18      	cmp	r3, #24
 8009968:	d13a      	bne.n	80099e0 <HAL_RCC_OscConfig+0x374>
 800996a:	697b      	ldr	r3, [r7, #20]
 800996c:	f003 0303 	and.w	r3, r3, #3
 8009970:	2b01      	cmp	r3, #1
 8009972:	d135      	bne.n	80099e0 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009974:	4b7b      	ldr	r3, [pc, #492]	; (8009b64 <HAL_RCC_OscConfig+0x4f8>)
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800997c:	2b00      	cmp	r3, #0
 800997e:	d005      	beq.n	800998c <HAL_RCC_OscConfig+0x320>
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	69db      	ldr	r3, [r3, #28]
 8009984:	2b80      	cmp	r3, #128	; 0x80
 8009986:	d001      	beq.n	800998c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8009988:	2301      	movs	r3, #1
 800998a:	e2c1      	b.n	8009f10 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800998c:	f7fa f902 	bl	8003b94 <HAL_GetREVID>
 8009990:	4603      	mov	r3, r0
 8009992:	f241 0203 	movw	r2, #4099	; 0x1003
 8009996:	4293      	cmp	r3, r2
 8009998:	d817      	bhi.n	80099ca <HAL_RCC_OscConfig+0x35e>
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	6a1b      	ldr	r3, [r3, #32]
 800999e:	2b20      	cmp	r3, #32
 80099a0:	d108      	bne.n	80099b4 <HAL_RCC_OscConfig+0x348>
 80099a2:	4b70      	ldr	r3, [pc, #448]	; (8009b64 <HAL_RCC_OscConfig+0x4f8>)
 80099a4:	685b      	ldr	r3, [r3, #4]
 80099a6:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80099aa:	4a6e      	ldr	r2, [pc, #440]	; (8009b64 <HAL_RCC_OscConfig+0x4f8>)
 80099ac:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80099b0:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80099b2:	e075      	b.n	8009aa0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80099b4:	4b6b      	ldr	r3, [pc, #428]	; (8009b64 <HAL_RCC_OscConfig+0x4f8>)
 80099b6:	685b      	ldr	r3, [r3, #4]
 80099b8:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	6a1b      	ldr	r3, [r3, #32]
 80099c0:	069b      	lsls	r3, r3, #26
 80099c2:	4968      	ldr	r1, [pc, #416]	; (8009b64 <HAL_RCC_OscConfig+0x4f8>)
 80099c4:	4313      	orrs	r3, r2
 80099c6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80099c8:	e06a      	b.n	8009aa0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80099ca:	4b66      	ldr	r3, [pc, #408]	; (8009b64 <HAL_RCC_OscConfig+0x4f8>)
 80099cc:	68db      	ldr	r3, [r3, #12]
 80099ce:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	6a1b      	ldr	r3, [r3, #32]
 80099d6:	061b      	lsls	r3, r3, #24
 80099d8:	4962      	ldr	r1, [pc, #392]	; (8009b64 <HAL_RCC_OscConfig+0x4f8>)
 80099da:	4313      	orrs	r3, r2
 80099dc:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80099de:	e05f      	b.n	8009aa0 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	69db      	ldr	r3, [r3, #28]
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d042      	beq.n	8009a6e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80099e8:	4b5e      	ldr	r3, [pc, #376]	; (8009b64 <HAL_RCC_OscConfig+0x4f8>)
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	4a5d      	ldr	r2, [pc, #372]	; (8009b64 <HAL_RCC_OscConfig+0x4f8>)
 80099ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80099f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80099f4:	f7fa f89e 	bl	8003b34 <HAL_GetTick>
 80099f8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80099fa:	e008      	b.n	8009a0e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80099fc:	f7fa f89a 	bl	8003b34 <HAL_GetTick>
 8009a00:	4602      	mov	r2, r0
 8009a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a04:	1ad3      	subs	r3, r2, r3
 8009a06:	2b02      	cmp	r3, #2
 8009a08:	d901      	bls.n	8009a0e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8009a0a:	2303      	movs	r3, #3
 8009a0c:	e280      	b.n	8009f10 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009a0e:	4b55      	ldr	r3, [pc, #340]	; (8009b64 <HAL_RCC_OscConfig+0x4f8>)
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d0f0      	beq.n	80099fc <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009a1a:	f7fa f8bb 	bl	8003b94 <HAL_GetREVID>
 8009a1e:	4603      	mov	r3, r0
 8009a20:	f241 0203 	movw	r2, #4099	; 0x1003
 8009a24:	4293      	cmp	r3, r2
 8009a26:	d817      	bhi.n	8009a58 <HAL_RCC_OscConfig+0x3ec>
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	6a1b      	ldr	r3, [r3, #32]
 8009a2c:	2b20      	cmp	r3, #32
 8009a2e:	d108      	bne.n	8009a42 <HAL_RCC_OscConfig+0x3d6>
 8009a30:	4b4c      	ldr	r3, [pc, #304]	; (8009b64 <HAL_RCC_OscConfig+0x4f8>)
 8009a32:	685b      	ldr	r3, [r3, #4]
 8009a34:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8009a38:	4a4a      	ldr	r2, [pc, #296]	; (8009b64 <HAL_RCC_OscConfig+0x4f8>)
 8009a3a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009a3e:	6053      	str	r3, [r2, #4]
 8009a40:	e02e      	b.n	8009aa0 <HAL_RCC_OscConfig+0x434>
 8009a42:	4b48      	ldr	r3, [pc, #288]	; (8009b64 <HAL_RCC_OscConfig+0x4f8>)
 8009a44:	685b      	ldr	r3, [r3, #4]
 8009a46:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	6a1b      	ldr	r3, [r3, #32]
 8009a4e:	069b      	lsls	r3, r3, #26
 8009a50:	4944      	ldr	r1, [pc, #272]	; (8009b64 <HAL_RCC_OscConfig+0x4f8>)
 8009a52:	4313      	orrs	r3, r2
 8009a54:	604b      	str	r3, [r1, #4]
 8009a56:	e023      	b.n	8009aa0 <HAL_RCC_OscConfig+0x434>
 8009a58:	4b42      	ldr	r3, [pc, #264]	; (8009b64 <HAL_RCC_OscConfig+0x4f8>)
 8009a5a:	68db      	ldr	r3, [r3, #12]
 8009a5c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	6a1b      	ldr	r3, [r3, #32]
 8009a64:	061b      	lsls	r3, r3, #24
 8009a66:	493f      	ldr	r1, [pc, #252]	; (8009b64 <HAL_RCC_OscConfig+0x4f8>)
 8009a68:	4313      	orrs	r3, r2
 8009a6a:	60cb      	str	r3, [r1, #12]
 8009a6c:	e018      	b.n	8009aa0 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8009a6e:	4b3d      	ldr	r3, [pc, #244]	; (8009b64 <HAL_RCC_OscConfig+0x4f8>)
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	4a3c      	ldr	r2, [pc, #240]	; (8009b64 <HAL_RCC_OscConfig+0x4f8>)
 8009a74:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009a78:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009a7a:	f7fa f85b 	bl	8003b34 <HAL_GetTick>
 8009a7e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009a80:	e008      	b.n	8009a94 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8009a82:	f7fa f857 	bl	8003b34 <HAL_GetTick>
 8009a86:	4602      	mov	r2, r0
 8009a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a8a:	1ad3      	subs	r3, r2, r3
 8009a8c:	2b02      	cmp	r3, #2
 8009a8e:	d901      	bls.n	8009a94 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8009a90:	2303      	movs	r3, #3
 8009a92:	e23d      	b.n	8009f10 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009a94:	4b33      	ldr	r3, [pc, #204]	; (8009b64 <HAL_RCC_OscConfig+0x4f8>)
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d1f0      	bne.n	8009a82 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	f003 0308 	and.w	r3, r3, #8
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d036      	beq.n	8009b1a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	695b      	ldr	r3, [r3, #20]
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d019      	beq.n	8009ae8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009ab4:	4b2b      	ldr	r3, [pc, #172]	; (8009b64 <HAL_RCC_OscConfig+0x4f8>)
 8009ab6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009ab8:	4a2a      	ldr	r2, [pc, #168]	; (8009b64 <HAL_RCC_OscConfig+0x4f8>)
 8009aba:	f043 0301 	orr.w	r3, r3, #1
 8009abe:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009ac0:	f7fa f838 	bl	8003b34 <HAL_GetTick>
 8009ac4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009ac6:	e008      	b.n	8009ada <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009ac8:	f7fa f834 	bl	8003b34 <HAL_GetTick>
 8009acc:	4602      	mov	r2, r0
 8009ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ad0:	1ad3      	subs	r3, r2, r3
 8009ad2:	2b02      	cmp	r3, #2
 8009ad4:	d901      	bls.n	8009ada <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8009ad6:	2303      	movs	r3, #3
 8009ad8:	e21a      	b.n	8009f10 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009ada:	4b22      	ldr	r3, [pc, #136]	; (8009b64 <HAL_RCC_OscConfig+0x4f8>)
 8009adc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009ade:	f003 0302 	and.w	r3, r3, #2
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d0f0      	beq.n	8009ac8 <HAL_RCC_OscConfig+0x45c>
 8009ae6:	e018      	b.n	8009b1a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009ae8:	4b1e      	ldr	r3, [pc, #120]	; (8009b64 <HAL_RCC_OscConfig+0x4f8>)
 8009aea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009aec:	4a1d      	ldr	r2, [pc, #116]	; (8009b64 <HAL_RCC_OscConfig+0x4f8>)
 8009aee:	f023 0301 	bic.w	r3, r3, #1
 8009af2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009af4:	f7fa f81e 	bl	8003b34 <HAL_GetTick>
 8009af8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009afa:	e008      	b.n	8009b0e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009afc:	f7fa f81a 	bl	8003b34 <HAL_GetTick>
 8009b00:	4602      	mov	r2, r0
 8009b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b04:	1ad3      	subs	r3, r2, r3
 8009b06:	2b02      	cmp	r3, #2
 8009b08:	d901      	bls.n	8009b0e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8009b0a:	2303      	movs	r3, #3
 8009b0c:	e200      	b.n	8009f10 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009b0e:	4b15      	ldr	r3, [pc, #84]	; (8009b64 <HAL_RCC_OscConfig+0x4f8>)
 8009b10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009b12:	f003 0302 	and.w	r3, r3, #2
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d1f0      	bne.n	8009afc <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	f003 0320 	and.w	r3, r3, #32
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d039      	beq.n	8009b9a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	699b      	ldr	r3, [r3, #24]
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d01c      	beq.n	8009b68 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8009b2e:	4b0d      	ldr	r3, [pc, #52]	; (8009b64 <HAL_RCC_OscConfig+0x4f8>)
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	4a0c      	ldr	r2, [pc, #48]	; (8009b64 <HAL_RCC_OscConfig+0x4f8>)
 8009b34:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009b38:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009b3a:	f7f9 fffb 	bl	8003b34 <HAL_GetTick>
 8009b3e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009b40:	e008      	b.n	8009b54 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009b42:	f7f9 fff7 	bl	8003b34 <HAL_GetTick>
 8009b46:	4602      	mov	r2, r0
 8009b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b4a:	1ad3      	subs	r3, r2, r3
 8009b4c:	2b02      	cmp	r3, #2
 8009b4e:	d901      	bls.n	8009b54 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8009b50:	2303      	movs	r3, #3
 8009b52:	e1dd      	b.n	8009f10 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009b54:	4b03      	ldr	r3, [pc, #12]	; (8009b64 <HAL_RCC_OscConfig+0x4f8>)
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d0f0      	beq.n	8009b42 <HAL_RCC_OscConfig+0x4d6>
 8009b60:	e01b      	b.n	8009b9a <HAL_RCC_OscConfig+0x52e>
 8009b62:	bf00      	nop
 8009b64:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8009b68:	4b9b      	ldr	r3, [pc, #620]	; (8009dd8 <HAL_RCC_OscConfig+0x76c>)
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	4a9a      	ldr	r2, [pc, #616]	; (8009dd8 <HAL_RCC_OscConfig+0x76c>)
 8009b6e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009b72:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009b74:	f7f9 ffde 	bl	8003b34 <HAL_GetTick>
 8009b78:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009b7a:	e008      	b.n	8009b8e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009b7c:	f7f9 ffda 	bl	8003b34 <HAL_GetTick>
 8009b80:	4602      	mov	r2, r0
 8009b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b84:	1ad3      	subs	r3, r2, r3
 8009b86:	2b02      	cmp	r3, #2
 8009b88:	d901      	bls.n	8009b8e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8009b8a:	2303      	movs	r3, #3
 8009b8c:	e1c0      	b.n	8009f10 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009b8e:	4b92      	ldr	r3, [pc, #584]	; (8009dd8 <HAL_RCC_OscConfig+0x76c>)
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d1f0      	bne.n	8009b7c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	f003 0304 	and.w	r3, r3, #4
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	f000 8081 	beq.w	8009caa <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8009ba8:	4b8c      	ldr	r3, [pc, #560]	; (8009ddc <HAL_RCC_OscConfig+0x770>)
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	4a8b      	ldr	r2, [pc, #556]	; (8009ddc <HAL_RCC_OscConfig+0x770>)
 8009bae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009bb2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009bb4:	f7f9 ffbe 	bl	8003b34 <HAL_GetTick>
 8009bb8:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009bba:	e008      	b.n	8009bce <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009bbc:	f7f9 ffba 	bl	8003b34 <HAL_GetTick>
 8009bc0:	4602      	mov	r2, r0
 8009bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bc4:	1ad3      	subs	r3, r2, r3
 8009bc6:	2b64      	cmp	r3, #100	; 0x64
 8009bc8:	d901      	bls.n	8009bce <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8009bca:	2303      	movs	r3, #3
 8009bcc:	e1a0      	b.n	8009f10 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009bce:	4b83      	ldr	r3, [pc, #524]	; (8009ddc <HAL_RCC_OscConfig+0x770>)
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d0f0      	beq.n	8009bbc <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	689b      	ldr	r3, [r3, #8]
 8009bde:	2b01      	cmp	r3, #1
 8009be0:	d106      	bne.n	8009bf0 <HAL_RCC_OscConfig+0x584>
 8009be2:	4b7d      	ldr	r3, [pc, #500]	; (8009dd8 <HAL_RCC_OscConfig+0x76c>)
 8009be4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009be6:	4a7c      	ldr	r2, [pc, #496]	; (8009dd8 <HAL_RCC_OscConfig+0x76c>)
 8009be8:	f043 0301 	orr.w	r3, r3, #1
 8009bec:	6713      	str	r3, [r2, #112]	; 0x70
 8009bee:	e02d      	b.n	8009c4c <HAL_RCC_OscConfig+0x5e0>
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	689b      	ldr	r3, [r3, #8]
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d10c      	bne.n	8009c12 <HAL_RCC_OscConfig+0x5a6>
 8009bf8:	4b77      	ldr	r3, [pc, #476]	; (8009dd8 <HAL_RCC_OscConfig+0x76c>)
 8009bfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009bfc:	4a76      	ldr	r2, [pc, #472]	; (8009dd8 <HAL_RCC_OscConfig+0x76c>)
 8009bfe:	f023 0301 	bic.w	r3, r3, #1
 8009c02:	6713      	str	r3, [r2, #112]	; 0x70
 8009c04:	4b74      	ldr	r3, [pc, #464]	; (8009dd8 <HAL_RCC_OscConfig+0x76c>)
 8009c06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c08:	4a73      	ldr	r2, [pc, #460]	; (8009dd8 <HAL_RCC_OscConfig+0x76c>)
 8009c0a:	f023 0304 	bic.w	r3, r3, #4
 8009c0e:	6713      	str	r3, [r2, #112]	; 0x70
 8009c10:	e01c      	b.n	8009c4c <HAL_RCC_OscConfig+0x5e0>
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	689b      	ldr	r3, [r3, #8]
 8009c16:	2b05      	cmp	r3, #5
 8009c18:	d10c      	bne.n	8009c34 <HAL_RCC_OscConfig+0x5c8>
 8009c1a:	4b6f      	ldr	r3, [pc, #444]	; (8009dd8 <HAL_RCC_OscConfig+0x76c>)
 8009c1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c1e:	4a6e      	ldr	r2, [pc, #440]	; (8009dd8 <HAL_RCC_OscConfig+0x76c>)
 8009c20:	f043 0304 	orr.w	r3, r3, #4
 8009c24:	6713      	str	r3, [r2, #112]	; 0x70
 8009c26:	4b6c      	ldr	r3, [pc, #432]	; (8009dd8 <HAL_RCC_OscConfig+0x76c>)
 8009c28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c2a:	4a6b      	ldr	r2, [pc, #428]	; (8009dd8 <HAL_RCC_OscConfig+0x76c>)
 8009c2c:	f043 0301 	orr.w	r3, r3, #1
 8009c30:	6713      	str	r3, [r2, #112]	; 0x70
 8009c32:	e00b      	b.n	8009c4c <HAL_RCC_OscConfig+0x5e0>
 8009c34:	4b68      	ldr	r3, [pc, #416]	; (8009dd8 <HAL_RCC_OscConfig+0x76c>)
 8009c36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c38:	4a67      	ldr	r2, [pc, #412]	; (8009dd8 <HAL_RCC_OscConfig+0x76c>)
 8009c3a:	f023 0301 	bic.w	r3, r3, #1
 8009c3e:	6713      	str	r3, [r2, #112]	; 0x70
 8009c40:	4b65      	ldr	r3, [pc, #404]	; (8009dd8 <HAL_RCC_OscConfig+0x76c>)
 8009c42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c44:	4a64      	ldr	r2, [pc, #400]	; (8009dd8 <HAL_RCC_OscConfig+0x76c>)
 8009c46:	f023 0304 	bic.w	r3, r3, #4
 8009c4a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	689b      	ldr	r3, [r3, #8]
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d015      	beq.n	8009c80 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009c54:	f7f9 ff6e 	bl	8003b34 <HAL_GetTick>
 8009c58:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009c5a:	e00a      	b.n	8009c72 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009c5c:	f7f9 ff6a 	bl	8003b34 <HAL_GetTick>
 8009c60:	4602      	mov	r2, r0
 8009c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c64:	1ad3      	subs	r3, r2, r3
 8009c66:	f241 3288 	movw	r2, #5000	; 0x1388
 8009c6a:	4293      	cmp	r3, r2
 8009c6c:	d901      	bls.n	8009c72 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8009c6e:	2303      	movs	r3, #3
 8009c70:	e14e      	b.n	8009f10 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009c72:	4b59      	ldr	r3, [pc, #356]	; (8009dd8 <HAL_RCC_OscConfig+0x76c>)
 8009c74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c76:	f003 0302 	and.w	r3, r3, #2
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d0ee      	beq.n	8009c5c <HAL_RCC_OscConfig+0x5f0>
 8009c7e:	e014      	b.n	8009caa <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009c80:	f7f9 ff58 	bl	8003b34 <HAL_GetTick>
 8009c84:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009c86:	e00a      	b.n	8009c9e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009c88:	f7f9 ff54 	bl	8003b34 <HAL_GetTick>
 8009c8c:	4602      	mov	r2, r0
 8009c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c90:	1ad3      	subs	r3, r2, r3
 8009c92:	f241 3288 	movw	r2, #5000	; 0x1388
 8009c96:	4293      	cmp	r3, r2
 8009c98:	d901      	bls.n	8009c9e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8009c9a:	2303      	movs	r3, #3
 8009c9c:	e138      	b.n	8009f10 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009c9e:	4b4e      	ldr	r3, [pc, #312]	; (8009dd8 <HAL_RCC_OscConfig+0x76c>)
 8009ca0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ca2:	f003 0302 	and.w	r3, r3, #2
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d1ee      	bne.n	8009c88 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	f000 812d 	beq.w	8009f0e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8009cb4:	4b48      	ldr	r3, [pc, #288]	; (8009dd8 <HAL_RCC_OscConfig+0x76c>)
 8009cb6:	691b      	ldr	r3, [r3, #16]
 8009cb8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009cbc:	2b18      	cmp	r3, #24
 8009cbe:	f000 80bd 	beq.w	8009e3c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cc6:	2b02      	cmp	r3, #2
 8009cc8:	f040 809e 	bne.w	8009e08 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009ccc:	4b42      	ldr	r3, [pc, #264]	; (8009dd8 <HAL_RCC_OscConfig+0x76c>)
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	4a41      	ldr	r2, [pc, #260]	; (8009dd8 <HAL_RCC_OscConfig+0x76c>)
 8009cd2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009cd6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009cd8:	f7f9 ff2c 	bl	8003b34 <HAL_GetTick>
 8009cdc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009cde:	e008      	b.n	8009cf2 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009ce0:	f7f9 ff28 	bl	8003b34 <HAL_GetTick>
 8009ce4:	4602      	mov	r2, r0
 8009ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ce8:	1ad3      	subs	r3, r2, r3
 8009cea:	2b02      	cmp	r3, #2
 8009cec:	d901      	bls.n	8009cf2 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8009cee:	2303      	movs	r3, #3
 8009cf0:	e10e      	b.n	8009f10 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009cf2:	4b39      	ldr	r3, [pc, #228]	; (8009dd8 <HAL_RCC_OscConfig+0x76c>)
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d1f0      	bne.n	8009ce0 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009cfe:	4b36      	ldr	r3, [pc, #216]	; (8009dd8 <HAL_RCC_OscConfig+0x76c>)
 8009d00:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009d02:	4b37      	ldr	r3, [pc, #220]	; (8009de0 <HAL_RCC_OscConfig+0x774>)
 8009d04:	4013      	ands	r3, r2
 8009d06:	687a      	ldr	r2, [r7, #4]
 8009d08:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8009d0a:	687a      	ldr	r2, [r7, #4]
 8009d0c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8009d0e:	0112      	lsls	r2, r2, #4
 8009d10:	430a      	orrs	r2, r1
 8009d12:	4931      	ldr	r1, [pc, #196]	; (8009dd8 <HAL_RCC_OscConfig+0x76c>)
 8009d14:	4313      	orrs	r3, r2
 8009d16:	628b      	str	r3, [r1, #40]	; 0x28
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d1c:	3b01      	subs	r3, #1
 8009d1e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d26:	3b01      	subs	r3, #1
 8009d28:	025b      	lsls	r3, r3, #9
 8009d2a:	b29b      	uxth	r3, r3
 8009d2c:	431a      	orrs	r2, r3
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d32:	3b01      	subs	r3, #1
 8009d34:	041b      	lsls	r3, r3, #16
 8009d36:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009d3a:	431a      	orrs	r2, r3
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d40:	3b01      	subs	r3, #1
 8009d42:	061b      	lsls	r3, r3, #24
 8009d44:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009d48:	4923      	ldr	r1, [pc, #140]	; (8009dd8 <HAL_RCC_OscConfig+0x76c>)
 8009d4a:	4313      	orrs	r3, r2
 8009d4c:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8009d4e:	4b22      	ldr	r3, [pc, #136]	; (8009dd8 <HAL_RCC_OscConfig+0x76c>)
 8009d50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d52:	4a21      	ldr	r2, [pc, #132]	; (8009dd8 <HAL_RCC_OscConfig+0x76c>)
 8009d54:	f023 0301 	bic.w	r3, r3, #1
 8009d58:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8009d5a:	4b1f      	ldr	r3, [pc, #124]	; (8009dd8 <HAL_RCC_OscConfig+0x76c>)
 8009d5c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009d5e:	4b21      	ldr	r3, [pc, #132]	; (8009de4 <HAL_RCC_OscConfig+0x778>)
 8009d60:	4013      	ands	r3, r2
 8009d62:	687a      	ldr	r2, [r7, #4]
 8009d64:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8009d66:	00d2      	lsls	r2, r2, #3
 8009d68:	491b      	ldr	r1, [pc, #108]	; (8009dd8 <HAL_RCC_OscConfig+0x76c>)
 8009d6a:	4313      	orrs	r3, r2
 8009d6c:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8009d6e:	4b1a      	ldr	r3, [pc, #104]	; (8009dd8 <HAL_RCC_OscConfig+0x76c>)
 8009d70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d72:	f023 020c 	bic.w	r2, r3, #12
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d7a:	4917      	ldr	r1, [pc, #92]	; (8009dd8 <HAL_RCC_OscConfig+0x76c>)
 8009d7c:	4313      	orrs	r3, r2
 8009d7e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8009d80:	4b15      	ldr	r3, [pc, #84]	; (8009dd8 <HAL_RCC_OscConfig+0x76c>)
 8009d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d84:	f023 0202 	bic.w	r2, r3, #2
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d8c:	4912      	ldr	r1, [pc, #72]	; (8009dd8 <HAL_RCC_OscConfig+0x76c>)
 8009d8e:	4313      	orrs	r3, r2
 8009d90:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8009d92:	4b11      	ldr	r3, [pc, #68]	; (8009dd8 <HAL_RCC_OscConfig+0x76c>)
 8009d94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d96:	4a10      	ldr	r2, [pc, #64]	; (8009dd8 <HAL_RCC_OscConfig+0x76c>)
 8009d98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009d9c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009d9e:	4b0e      	ldr	r3, [pc, #56]	; (8009dd8 <HAL_RCC_OscConfig+0x76c>)
 8009da0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009da2:	4a0d      	ldr	r2, [pc, #52]	; (8009dd8 <HAL_RCC_OscConfig+0x76c>)
 8009da4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009da8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8009daa:	4b0b      	ldr	r3, [pc, #44]	; (8009dd8 <HAL_RCC_OscConfig+0x76c>)
 8009dac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dae:	4a0a      	ldr	r2, [pc, #40]	; (8009dd8 <HAL_RCC_OscConfig+0x76c>)
 8009db0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009db4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8009db6:	4b08      	ldr	r3, [pc, #32]	; (8009dd8 <HAL_RCC_OscConfig+0x76c>)
 8009db8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dba:	4a07      	ldr	r2, [pc, #28]	; (8009dd8 <HAL_RCC_OscConfig+0x76c>)
 8009dbc:	f043 0301 	orr.w	r3, r3, #1
 8009dc0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009dc2:	4b05      	ldr	r3, [pc, #20]	; (8009dd8 <HAL_RCC_OscConfig+0x76c>)
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	4a04      	ldr	r2, [pc, #16]	; (8009dd8 <HAL_RCC_OscConfig+0x76c>)
 8009dc8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009dcc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009dce:	f7f9 feb1 	bl	8003b34 <HAL_GetTick>
 8009dd2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009dd4:	e011      	b.n	8009dfa <HAL_RCC_OscConfig+0x78e>
 8009dd6:	bf00      	nop
 8009dd8:	58024400 	.word	0x58024400
 8009ddc:	58024800 	.word	0x58024800
 8009de0:	fffffc0c 	.word	0xfffffc0c
 8009de4:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009de8:	f7f9 fea4 	bl	8003b34 <HAL_GetTick>
 8009dec:	4602      	mov	r2, r0
 8009dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009df0:	1ad3      	subs	r3, r2, r3
 8009df2:	2b02      	cmp	r3, #2
 8009df4:	d901      	bls.n	8009dfa <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8009df6:	2303      	movs	r3, #3
 8009df8:	e08a      	b.n	8009f10 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009dfa:	4b47      	ldr	r3, [pc, #284]	; (8009f18 <HAL_RCC_OscConfig+0x8ac>)
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d0f0      	beq.n	8009de8 <HAL_RCC_OscConfig+0x77c>
 8009e06:	e082      	b.n	8009f0e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009e08:	4b43      	ldr	r3, [pc, #268]	; (8009f18 <HAL_RCC_OscConfig+0x8ac>)
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	4a42      	ldr	r2, [pc, #264]	; (8009f18 <HAL_RCC_OscConfig+0x8ac>)
 8009e0e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009e12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009e14:	f7f9 fe8e 	bl	8003b34 <HAL_GetTick>
 8009e18:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009e1a:	e008      	b.n	8009e2e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009e1c:	f7f9 fe8a 	bl	8003b34 <HAL_GetTick>
 8009e20:	4602      	mov	r2, r0
 8009e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e24:	1ad3      	subs	r3, r2, r3
 8009e26:	2b02      	cmp	r3, #2
 8009e28:	d901      	bls.n	8009e2e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8009e2a:	2303      	movs	r3, #3
 8009e2c:	e070      	b.n	8009f10 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009e2e:	4b3a      	ldr	r3, [pc, #232]	; (8009f18 <HAL_RCC_OscConfig+0x8ac>)
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d1f0      	bne.n	8009e1c <HAL_RCC_OscConfig+0x7b0>
 8009e3a:	e068      	b.n	8009f0e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8009e3c:	4b36      	ldr	r3, [pc, #216]	; (8009f18 <HAL_RCC_OscConfig+0x8ac>)
 8009e3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e40:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8009e42:	4b35      	ldr	r3, [pc, #212]	; (8009f18 <HAL_RCC_OscConfig+0x8ac>)
 8009e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e46:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e4c:	2b01      	cmp	r3, #1
 8009e4e:	d031      	beq.n	8009eb4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009e50:	693b      	ldr	r3, [r7, #16]
 8009e52:	f003 0203 	and.w	r2, r3, #3
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009e5a:	429a      	cmp	r2, r3
 8009e5c:	d12a      	bne.n	8009eb4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009e5e:	693b      	ldr	r3, [r7, #16]
 8009e60:	091b      	lsrs	r3, r3, #4
 8009e62:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009e6a:	429a      	cmp	r2, r3
 8009e6c:	d122      	bne.n	8009eb4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e78:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009e7a:	429a      	cmp	r2, r3
 8009e7c:	d11a      	bne.n	8009eb4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	0a5b      	lsrs	r3, r3, #9
 8009e82:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e8a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009e8c:	429a      	cmp	r2, r3
 8009e8e:	d111      	bne.n	8009eb4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	0c1b      	lsrs	r3, r3, #16
 8009e94:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e9c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009e9e:	429a      	cmp	r2, r3
 8009ea0:	d108      	bne.n	8009eb4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	0e1b      	lsrs	r3, r3, #24
 8009ea6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009eae:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009eb0:	429a      	cmp	r2, r3
 8009eb2:	d001      	beq.n	8009eb8 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8009eb4:	2301      	movs	r3, #1
 8009eb6:	e02b      	b.n	8009f10 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8009eb8:	4b17      	ldr	r3, [pc, #92]	; (8009f18 <HAL_RCC_OscConfig+0x8ac>)
 8009eba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ebc:	08db      	lsrs	r3, r3, #3
 8009ebe:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009ec2:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009ec8:	693a      	ldr	r2, [r7, #16]
 8009eca:	429a      	cmp	r2, r3
 8009ecc:	d01f      	beq.n	8009f0e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8009ece:	4b12      	ldr	r3, [pc, #72]	; (8009f18 <HAL_RCC_OscConfig+0x8ac>)
 8009ed0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ed2:	4a11      	ldr	r2, [pc, #68]	; (8009f18 <HAL_RCC_OscConfig+0x8ac>)
 8009ed4:	f023 0301 	bic.w	r3, r3, #1
 8009ed8:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8009eda:	f7f9 fe2b 	bl	8003b34 <HAL_GetTick>
 8009ede:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8009ee0:	bf00      	nop
 8009ee2:	f7f9 fe27 	bl	8003b34 <HAL_GetTick>
 8009ee6:	4602      	mov	r2, r0
 8009ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eea:	4293      	cmp	r3, r2
 8009eec:	d0f9      	beq.n	8009ee2 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8009eee:	4b0a      	ldr	r3, [pc, #40]	; (8009f18 <HAL_RCC_OscConfig+0x8ac>)
 8009ef0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009ef2:	4b0a      	ldr	r3, [pc, #40]	; (8009f1c <HAL_RCC_OscConfig+0x8b0>)
 8009ef4:	4013      	ands	r3, r2
 8009ef6:	687a      	ldr	r2, [r7, #4]
 8009ef8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8009efa:	00d2      	lsls	r2, r2, #3
 8009efc:	4906      	ldr	r1, [pc, #24]	; (8009f18 <HAL_RCC_OscConfig+0x8ac>)
 8009efe:	4313      	orrs	r3, r2
 8009f00:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8009f02:	4b05      	ldr	r3, [pc, #20]	; (8009f18 <HAL_RCC_OscConfig+0x8ac>)
 8009f04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f06:	4a04      	ldr	r2, [pc, #16]	; (8009f18 <HAL_RCC_OscConfig+0x8ac>)
 8009f08:	f043 0301 	orr.w	r3, r3, #1
 8009f0c:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8009f0e:	2300      	movs	r3, #0
}
 8009f10:	4618      	mov	r0, r3
 8009f12:	3730      	adds	r7, #48	; 0x30
 8009f14:	46bd      	mov	sp, r7
 8009f16:	bd80      	pop	{r7, pc}
 8009f18:	58024400 	.word	0x58024400
 8009f1c:	ffff0007 	.word	0xffff0007

08009f20 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009f20:	b580      	push	{r7, lr}
 8009f22:	b086      	sub	sp, #24
 8009f24:	af00      	add	r7, sp, #0
 8009f26:	6078      	str	r0, [r7, #4]
 8009f28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d101      	bne.n	8009f34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009f30:	2301      	movs	r3, #1
 8009f32:	e19c      	b.n	800a26e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009f34:	4b8a      	ldr	r3, [pc, #552]	; (800a160 <HAL_RCC_ClockConfig+0x240>)
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	f003 030f 	and.w	r3, r3, #15
 8009f3c:	683a      	ldr	r2, [r7, #0]
 8009f3e:	429a      	cmp	r2, r3
 8009f40:	d910      	bls.n	8009f64 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009f42:	4b87      	ldr	r3, [pc, #540]	; (800a160 <HAL_RCC_ClockConfig+0x240>)
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	f023 020f 	bic.w	r2, r3, #15
 8009f4a:	4985      	ldr	r1, [pc, #532]	; (800a160 <HAL_RCC_ClockConfig+0x240>)
 8009f4c:	683b      	ldr	r3, [r7, #0]
 8009f4e:	4313      	orrs	r3, r2
 8009f50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009f52:	4b83      	ldr	r3, [pc, #524]	; (800a160 <HAL_RCC_ClockConfig+0x240>)
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	f003 030f 	and.w	r3, r3, #15
 8009f5a:	683a      	ldr	r2, [r7, #0]
 8009f5c:	429a      	cmp	r2, r3
 8009f5e:	d001      	beq.n	8009f64 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8009f60:	2301      	movs	r3, #1
 8009f62:	e184      	b.n	800a26e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	f003 0304 	and.w	r3, r3, #4
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d010      	beq.n	8009f92 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	691a      	ldr	r2, [r3, #16]
 8009f74:	4b7b      	ldr	r3, [pc, #492]	; (800a164 <HAL_RCC_ClockConfig+0x244>)
 8009f76:	699b      	ldr	r3, [r3, #24]
 8009f78:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009f7c:	429a      	cmp	r2, r3
 8009f7e:	d908      	bls.n	8009f92 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009f80:	4b78      	ldr	r3, [pc, #480]	; (800a164 <HAL_RCC_ClockConfig+0x244>)
 8009f82:	699b      	ldr	r3, [r3, #24]
 8009f84:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	691b      	ldr	r3, [r3, #16]
 8009f8c:	4975      	ldr	r1, [pc, #468]	; (800a164 <HAL_RCC_ClockConfig+0x244>)
 8009f8e:	4313      	orrs	r3, r2
 8009f90:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	f003 0308 	and.w	r3, r3, #8
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d010      	beq.n	8009fc0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	695a      	ldr	r2, [r3, #20]
 8009fa2:	4b70      	ldr	r3, [pc, #448]	; (800a164 <HAL_RCC_ClockConfig+0x244>)
 8009fa4:	69db      	ldr	r3, [r3, #28]
 8009fa6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009faa:	429a      	cmp	r2, r3
 8009fac:	d908      	bls.n	8009fc0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009fae:	4b6d      	ldr	r3, [pc, #436]	; (800a164 <HAL_RCC_ClockConfig+0x244>)
 8009fb0:	69db      	ldr	r3, [r3, #28]
 8009fb2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	695b      	ldr	r3, [r3, #20]
 8009fba:	496a      	ldr	r1, [pc, #424]	; (800a164 <HAL_RCC_ClockConfig+0x244>)
 8009fbc:	4313      	orrs	r3, r2
 8009fbe:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	f003 0310 	and.w	r3, r3, #16
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d010      	beq.n	8009fee <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	699a      	ldr	r2, [r3, #24]
 8009fd0:	4b64      	ldr	r3, [pc, #400]	; (800a164 <HAL_RCC_ClockConfig+0x244>)
 8009fd2:	69db      	ldr	r3, [r3, #28]
 8009fd4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009fd8:	429a      	cmp	r2, r3
 8009fda:	d908      	bls.n	8009fee <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009fdc:	4b61      	ldr	r3, [pc, #388]	; (800a164 <HAL_RCC_ClockConfig+0x244>)
 8009fde:	69db      	ldr	r3, [r3, #28]
 8009fe0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	699b      	ldr	r3, [r3, #24]
 8009fe8:	495e      	ldr	r1, [pc, #376]	; (800a164 <HAL_RCC_ClockConfig+0x244>)
 8009fea:	4313      	orrs	r3, r2
 8009fec:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	f003 0320 	and.w	r3, r3, #32
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d010      	beq.n	800a01c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	69da      	ldr	r2, [r3, #28]
 8009ffe:	4b59      	ldr	r3, [pc, #356]	; (800a164 <HAL_RCC_ClockConfig+0x244>)
 800a000:	6a1b      	ldr	r3, [r3, #32]
 800a002:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a006:	429a      	cmp	r2, r3
 800a008:	d908      	bls.n	800a01c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800a00a:	4b56      	ldr	r3, [pc, #344]	; (800a164 <HAL_RCC_ClockConfig+0x244>)
 800a00c:	6a1b      	ldr	r3, [r3, #32]
 800a00e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	69db      	ldr	r3, [r3, #28]
 800a016:	4953      	ldr	r1, [pc, #332]	; (800a164 <HAL_RCC_ClockConfig+0x244>)
 800a018:	4313      	orrs	r3, r2
 800a01a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	f003 0302 	and.w	r3, r3, #2
 800a024:	2b00      	cmp	r3, #0
 800a026:	d010      	beq.n	800a04a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	68da      	ldr	r2, [r3, #12]
 800a02c:	4b4d      	ldr	r3, [pc, #308]	; (800a164 <HAL_RCC_ClockConfig+0x244>)
 800a02e:	699b      	ldr	r3, [r3, #24]
 800a030:	f003 030f 	and.w	r3, r3, #15
 800a034:	429a      	cmp	r2, r3
 800a036:	d908      	bls.n	800a04a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a038:	4b4a      	ldr	r3, [pc, #296]	; (800a164 <HAL_RCC_ClockConfig+0x244>)
 800a03a:	699b      	ldr	r3, [r3, #24]
 800a03c:	f023 020f 	bic.w	r2, r3, #15
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	68db      	ldr	r3, [r3, #12]
 800a044:	4947      	ldr	r1, [pc, #284]	; (800a164 <HAL_RCC_ClockConfig+0x244>)
 800a046:	4313      	orrs	r3, r2
 800a048:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	f003 0301 	and.w	r3, r3, #1
 800a052:	2b00      	cmp	r3, #0
 800a054:	d055      	beq.n	800a102 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800a056:	4b43      	ldr	r3, [pc, #268]	; (800a164 <HAL_RCC_ClockConfig+0x244>)
 800a058:	699b      	ldr	r3, [r3, #24]
 800a05a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	689b      	ldr	r3, [r3, #8]
 800a062:	4940      	ldr	r1, [pc, #256]	; (800a164 <HAL_RCC_ClockConfig+0x244>)
 800a064:	4313      	orrs	r3, r2
 800a066:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	685b      	ldr	r3, [r3, #4]
 800a06c:	2b02      	cmp	r3, #2
 800a06e:	d107      	bne.n	800a080 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a070:	4b3c      	ldr	r3, [pc, #240]	; (800a164 <HAL_RCC_ClockConfig+0x244>)
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d121      	bne.n	800a0c0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a07c:	2301      	movs	r3, #1
 800a07e:	e0f6      	b.n	800a26e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	685b      	ldr	r3, [r3, #4]
 800a084:	2b03      	cmp	r3, #3
 800a086:	d107      	bne.n	800a098 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a088:	4b36      	ldr	r3, [pc, #216]	; (800a164 <HAL_RCC_ClockConfig+0x244>)
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a090:	2b00      	cmp	r3, #0
 800a092:	d115      	bne.n	800a0c0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a094:	2301      	movs	r3, #1
 800a096:	e0ea      	b.n	800a26e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	685b      	ldr	r3, [r3, #4]
 800a09c:	2b01      	cmp	r3, #1
 800a09e:	d107      	bne.n	800a0b0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a0a0:	4b30      	ldr	r3, [pc, #192]	; (800a164 <HAL_RCC_ClockConfig+0x244>)
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d109      	bne.n	800a0c0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a0ac:	2301      	movs	r3, #1
 800a0ae:	e0de      	b.n	800a26e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a0b0:	4b2c      	ldr	r3, [pc, #176]	; (800a164 <HAL_RCC_ClockConfig+0x244>)
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	f003 0304 	and.w	r3, r3, #4
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d101      	bne.n	800a0c0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a0bc:	2301      	movs	r3, #1
 800a0be:	e0d6      	b.n	800a26e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a0c0:	4b28      	ldr	r3, [pc, #160]	; (800a164 <HAL_RCC_ClockConfig+0x244>)
 800a0c2:	691b      	ldr	r3, [r3, #16]
 800a0c4:	f023 0207 	bic.w	r2, r3, #7
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	685b      	ldr	r3, [r3, #4]
 800a0cc:	4925      	ldr	r1, [pc, #148]	; (800a164 <HAL_RCC_ClockConfig+0x244>)
 800a0ce:	4313      	orrs	r3, r2
 800a0d0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a0d2:	f7f9 fd2f 	bl	8003b34 <HAL_GetTick>
 800a0d6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a0d8:	e00a      	b.n	800a0f0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a0da:	f7f9 fd2b 	bl	8003b34 <HAL_GetTick>
 800a0de:	4602      	mov	r2, r0
 800a0e0:	697b      	ldr	r3, [r7, #20]
 800a0e2:	1ad3      	subs	r3, r2, r3
 800a0e4:	f241 3288 	movw	r2, #5000	; 0x1388
 800a0e8:	4293      	cmp	r3, r2
 800a0ea:	d901      	bls.n	800a0f0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800a0ec:	2303      	movs	r3, #3
 800a0ee:	e0be      	b.n	800a26e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a0f0:	4b1c      	ldr	r3, [pc, #112]	; (800a164 <HAL_RCC_ClockConfig+0x244>)
 800a0f2:	691b      	ldr	r3, [r3, #16]
 800a0f4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	685b      	ldr	r3, [r3, #4]
 800a0fc:	00db      	lsls	r3, r3, #3
 800a0fe:	429a      	cmp	r2, r3
 800a100:	d1eb      	bne.n	800a0da <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	f003 0302 	and.w	r3, r3, #2
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d010      	beq.n	800a130 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	68da      	ldr	r2, [r3, #12]
 800a112:	4b14      	ldr	r3, [pc, #80]	; (800a164 <HAL_RCC_ClockConfig+0x244>)
 800a114:	699b      	ldr	r3, [r3, #24]
 800a116:	f003 030f 	and.w	r3, r3, #15
 800a11a:	429a      	cmp	r2, r3
 800a11c:	d208      	bcs.n	800a130 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a11e:	4b11      	ldr	r3, [pc, #68]	; (800a164 <HAL_RCC_ClockConfig+0x244>)
 800a120:	699b      	ldr	r3, [r3, #24]
 800a122:	f023 020f 	bic.w	r2, r3, #15
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	68db      	ldr	r3, [r3, #12]
 800a12a:	490e      	ldr	r1, [pc, #56]	; (800a164 <HAL_RCC_ClockConfig+0x244>)
 800a12c:	4313      	orrs	r3, r2
 800a12e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a130:	4b0b      	ldr	r3, [pc, #44]	; (800a160 <HAL_RCC_ClockConfig+0x240>)
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	f003 030f 	and.w	r3, r3, #15
 800a138:	683a      	ldr	r2, [r7, #0]
 800a13a:	429a      	cmp	r2, r3
 800a13c:	d214      	bcs.n	800a168 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a13e:	4b08      	ldr	r3, [pc, #32]	; (800a160 <HAL_RCC_ClockConfig+0x240>)
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	f023 020f 	bic.w	r2, r3, #15
 800a146:	4906      	ldr	r1, [pc, #24]	; (800a160 <HAL_RCC_ClockConfig+0x240>)
 800a148:	683b      	ldr	r3, [r7, #0]
 800a14a:	4313      	orrs	r3, r2
 800a14c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a14e:	4b04      	ldr	r3, [pc, #16]	; (800a160 <HAL_RCC_ClockConfig+0x240>)
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	f003 030f 	and.w	r3, r3, #15
 800a156:	683a      	ldr	r2, [r7, #0]
 800a158:	429a      	cmp	r2, r3
 800a15a:	d005      	beq.n	800a168 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800a15c:	2301      	movs	r3, #1
 800a15e:	e086      	b.n	800a26e <HAL_RCC_ClockConfig+0x34e>
 800a160:	52002000 	.word	0x52002000
 800a164:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	f003 0304 	and.w	r3, r3, #4
 800a170:	2b00      	cmp	r3, #0
 800a172:	d010      	beq.n	800a196 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	691a      	ldr	r2, [r3, #16]
 800a178:	4b3f      	ldr	r3, [pc, #252]	; (800a278 <HAL_RCC_ClockConfig+0x358>)
 800a17a:	699b      	ldr	r3, [r3, #24]
 800a17c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a180:	429a      	cmp	r2, r3
 800a182:	d208      	bcs.n	800a196 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a184:	4b3c      	ldr	r3, [pc, #240]	; (800a278 <HAL_RCC_ClockConfig+0x358>)
 800a186:	699b      	ldr	r3, [r3, #24]
 800a188:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	691b      	ldr	r3, [r3, #16]
 800a190:	4939      	ldr	r1, [pc, #228]	; (800a278 <HAL_RCC_ClockConfig+0x358>)
 800a192:	4313      	orrs	r3, r2
 800a194:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	f003 0308 	and.w	r3, r3, #8
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d010      	beq.n	800a1c4 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	695a      	ldr	r2, [r3, #20]
 800a1a6:	4b34      	ldr	r3, [pc, #208]	; (800a278 <HAL_RCC_ClockConfig+0x358>)
 800a1a8:	69db      	ldr	r3, [r3, #28]
 800a1aa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a1ae:	429a      	cmp	r2, r3
 800a1b0:	d208      	bcs.n	800a1c4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a1b2:	4b31      	ldr	r3, [pc, #196]	; (800a278 <HAL_RCC_ClockConfig+0x358>)
 800a1b4:	69db      	ldr	r3, [r3, #28]
 800a1b6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	695b      	ldr	r3, [r3, #20]
 800a1be:	492e      	ldr	r1, [pc, #184]	; (800a278 <HAL_RCC_ClockConfig+0x358>)
 800a1c0:	4313      	orrs	r3, r2
 800a1c2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	f003 0310 	and.w	r3, r3, #16
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d010      	beq.n	800a1f2 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	699a      	ldr	r2, [r3, #24]
 800a1d4:	4b28      	ldr	r3, [pc, #160]	; (800a278 <HAL_RCC_ClockConfig+0x358>)
 800a1d6:	69db      	ldr	r3, [r3, #28]
 800a1d8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a1dc:	429a      	cmp	r2, r3
 800a1de:	d208      	bcs.n	800a1f2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a1e0:	4b25      	ldr	r3, [pc, #148]	; (800a278 <HAL_RCC_ClockConfig+0x358>)
 800a1e2:	69db      	ldr	r3, [r3, #28]
 800a1e4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	699b      	ldr	r3, [r3, #24]
 800a1ec:	4922      	ldr	r1, [pc, #136]	; (800a278 <HAL_RCC_ClockConfig+0x358>)
 800a1ee:	4313      	orrs	r3, r2
 800a1f0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	f003 0320 	and.w	r3, r3, #32
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d010      	beq.n	800a220 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	69da      	ldr	r2, [r3, #28]
 800a202:	4b1d      	ldr	r3, [pc, #116]	; (800a278 <HAL_RCC_ClockConfig+0x358>)
 800a204:	6a1b      	ldr	r3, [r3, #32]
 800a206:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a20a:	429a      	cmp	r2, r3
 800a20c:	d208      	bcs.n	800a220 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800a20e:	4b1a      	ldr	r3, [pc, #104]	; (800a278 <HAL_RCC_ClockConfig+0x358>)
 800a210:	6a1b      	ldr	r3, [r3, #32]
 800a212:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	69db      	ldr	r3, [r3, #28]
 800a21a:	4917      	ldr	r1, [pc, #92]	; (800a278 <HAL_RCC_ClockConfig+0x358>)
 800a21c:	4313      	orrs	r3, r2
 800a21e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800a220:	f000 f844 	bl	800a2ac <HAL_RCC_GetSysClockFreq>
 800a224:	4602      	mov	r2, r0
 800a226:	4b14      	ldr	r3, [pc, #80]	; (800a278 <HAL_RCC_ClockConfig+0x358>)
 800a228:	699b      	ldr	r3, [r3, #24]
 800a22a:	0a1b      	lsrs	r3, r3, #8
 800a22c:	f003 030f 	and.w	r3, r3, #15
 800a230:	4912      	ldr	r1, [pc, #72]	; (800a27c <HAL_RCC_ClockConfig+0x35c>)
 800a232:	5ccb      	ldrb	r3, [r1, r3]
 800a234:	f003 031f 	and.w	r3, r3, #31
 800a238:	fa22 f303 	lsr.w	r3, r2, r3
 800a23c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a23e:	4b0e      	ldr	r3, [pc, #56]	; (800a278 <HAL_RCC_ClockConfig+0x358>)
 800a240:	699b      	ldr	r3, [r3, #24]
 800a242:	f003 030f 	and.w	r3, r3, #15
 800a246:	4a0d      	ldr	r2, [pc, #52]	; (800a27c <HAL_RCC_ClockConfig+0x35c>)
 800a248:	5cd3      	ldrb	r3, [r2, r3]
 800a24a:	f003 031f 	and.w	r3, r3, #31
 800a24e:	693a      	ldr	r2, [r7, #16]
 800a250:	fa22 f303 	lsr.w	r3, r2, r3
 800a254:	4a0a      	ldr	r2, [pc, #40]	; (800a280 <HAL_RCC_ClockConfig+0x360>)
 800a256:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a258:	4a0a      	ldr	r2, [pc, #40]	; (800a284 <HAL_RCC_ClockConfig+0x364>)
 800a25a:	693b      	ldr	r3, [r7, #16]
 800a25c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800a25e:	4b0a      	ldr	r3, [pc, #40]	; (800a288 <HAL_RCC_ClockConfig+0x368>)
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	4618      	mov	r0, r3
 800a264:	f7f9 fc1c 	bl	8003aa0 <HAL_InitTick>
 800a268:	4603      	mov	r3, r0
 800a26a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800a26c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a26e:	4618      	mov	r0, r3
 800a270:	3718      	adds	r7, #24
 800a272:	46bd      	mov	sp, r7
 800a274:	bd80      	pop	{r7, pc}
 800a276:	bf00      	nop
 800a278:	58024400 	.word	0x58024400
 800a27c:	0801eb30 	.word	0x0801eb30
 800a280:	20000014 	.word	0x20000014
 800a284:	20000010 	.word	0x20000010
 800a288:	20000024 	.word	0x20000024

0800a28c <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M NMI (Non-Mask-able Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 800a28c:	b480      	push	{r7}
 800a28e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSHSEON) ;
 800a290:	4b05      	ldr	r3, [pc, #20]	; (800a2a8 <HAL_RCC_EnableCSS+0x1c>)
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	4a04      	ldr	r2, [pc, #16]	; (800a2a8 <HAL_RCC_EnableCSS+0x1c>)
 800a296:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a29a:	6013      	str	r3, [r2, #0]
}
 800a29c:	bf00      	nop
 800a29e:	46bd      	mov	sp, r7
 800a2a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a4:	4770      	bx	lr
 800a2a6:	bf00      	nop
 800a2a8:	58024400 	.word	0x58024400

0800a2ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a2ac:	b480      	push	{r7}
 800a2ae:	b089      	sub	sp, #36	; 0x24
 800a2b0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a2b2:	4bb3      	ldr	r3, [pc, #716]	; (800a580 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a2b4:	691b      	ldr	r3, [r3, #16]
 800a2b6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a2ba:	2b18      	cmp	r3, #24
 800a2bc:	f200 8155 	bhi.w	800a56a <HAL_RCC_GetSysClockFreq+0x2be>
 800a2c0:	a201      	add	r2, pc, #4	; (adr r2, 800a2c8 <HAL_RCC_GetSysClockFreq+0x1c>)
 800a2c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2c6:	bf00      	nop
 800a2c8:	0800a32d 	.word	0x0800a32d
 800a2cc:	0800a56b 	.word	0x0800a56b
 800a2d0:	0800a56b 	.word	0x0800a56b
 800a2d4:	0800a56b 	.word	0x0800a56b
 800a2d8:	0800a56b 	.word	0x0800a56b
 800a2dc:	0800a56b 	.word	0x0800a56b
 800a2e0:	0800a56b 	.word	0x0800a56b
 800a2e4:	0800a56b 	.word	0x0800a56b
 800a2e8:	0800a353 	.word	0x0800a353
 800a2ec:	0800a56b 	.word	0x0800a56b
 800a2f0:	0800a56b 	.word	0x0800a56b
 800a2f4:	0800a56b 	.word	0x0800a56b
 800a2f8:	0800a56b 	.word	0x0800a56b
 800a2fc:	0800a56b 	.word	0x0800a56b
 800a300:	0800a56b 	.word	0x0800a56b
 800a304:	0800a56b 	.word	0x0800a56b
 800a308:	0800a359 	.word	0x0800a359
 800a30c:	0800a56b 	.word	0x0800a56b
 800a310:	0800a56b 	.word	0x0800a56b
 800a314:	0800a56b 	.word	0x0800a56b
 800a318:	0800a56b 	.word	0x0800a56b
 800a31c:	0800a56b 	.word	0x0800a56b
 800a320:	0800a56b 	.word	0x0800a56b
 800a324:	0800a56b 	.word	0x0800a56b
 800a328:	0800a35f 	.word	0x0800a35f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a32c:	4b94      	ldr	r3, [pc, #592]	; (800a580 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	f003 0320 	and.w	r3, r3, #32
 800a334:	2b00      	cmp	r3, #0
 800a336:	d009      	beq.n	800a34c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a338:	4b91      	ldr	r3, [pc, #580]	; (800a580 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	08db      	lsrs	r3, r3, #3
 800a33e:	f003 0303 	and.w	r3, r3, #3
 800a342:	4a90      	ldr	r2, [pc, #576]	; (800a584 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a344:	fa22 f303 	lsr.w	r3, r2, r3
 800a348:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800a34a:	e111      	b.n	800a570 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800a34c:	4b8d      	ldr	r3, [pc, #564]	; (800a584 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a34e:	61bb      	str	r3, [r7, #24]
      break;
 800a350:	e10e      	b.n	800a570 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800a352:	4b8d      	ldr	r3, [pc, #564]	; (800a588 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800a354:	61bb      	str	r3, [r7, #24]
      break;
 800a356:	e10b      	b.n	800a570 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800a358:	4b8c      	ldr	r3, [pc, #560]	; (800a58c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800a35a:	61bb      	str	r3, [r7, #24]
      break;
 800a35c:	e108      	b.n	800a570 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a35e:	4b88      	ldr	r3, [pc, #544]	; (800a580 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a360:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a362:	f003 0303 	and.w	r3, r3, #3
 800a366:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800a368:	4b85      	ldr	r3, [pc, #532]	; (800a580 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a36a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a36c:	091b      	lsrs	r3, r3, #4
 800a36e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a372:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800a374:	4b82      	ldr	r3, [pc, #520]	; (800a580 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a378:	f003 0301 	and.w	r3, r3, #1
 800a37c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800a37e:	4b80      	ldr	r3, [pc, #512]	; (800a580 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a380:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a382:	08db      	lsrs	r3, r3, #3
 800a384:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a388:	68fa      	ldr	r2, [r7, #12]
 800a38a:	fb02 f303 	mul.w	r3, r2, r3
 800a38e:	ee07 3a90 	vmov	s15, r3
 800a392:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a396:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800a39a:	693b      	ldr	r3, [r7, #16]
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	f000 80e1 	beq.w	800a564 <HAL_RCC_GetSysClockFreq+0x2b8>
 800a3a2:	697b      	ldr	r3, [r7, #20]
 800a3a4:	2b02      	cmp	r3, #2
 800a3a6:	f000 8083 	beq.w	800a4b0 <HAL_RCC_GetSysClockFreq+0x204>
 800a3aa:	697b      	ldr	r3, [r7, #20]
 800a3ac:	2b02      	cmp	r3, #2
 800a3ae:	f200 80a1 	bhi.w	800a4f4 <HAL_RCC_GetSysClockFreq+0x248>
 800a3b2:	697b      	ldr	r3, [r7, #20]
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d003      	beq.n	800a3c0 <HAL_RCC_GetSysClockFreq+0x114>
 800a3b8:	697b      	ldr	r3, [r7, #20]
 800a3ba:	2b01      	cmp	r3, #1
 800a3bc:	d056      	beq.n	800a46c <HAL_RCC_GetSysClockFreq+0x1c0>
 800a3be:	e099      	b.n	800a4f4 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a3c0:	4b6f      	ldr	r3, [pc, #444]	; (800a580 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	f003 0320 	and.w	r3, r3, #32
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d02d      	beq.n	800a428 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a3cc:	4b6c      	ldr	r3, [pc, #432]	; (800a580 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	08db      	lsrs	r3, r3, #3
 800a3d2:	f003 0303 	and.w	r3, r3, #3
 800a3d6:	4a6b      	ldr	r2, [pc, #428]	; (800a584 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a3d8:	fa22 f303 	lsr.w	r3, r2, r3
 800a3dc:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	ee07 3a90 	vmov	s15, r3
 800a3e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a3e8:	693b      	ldr	r3, [r7, #16]
 800a3ea:	ee07 3a90 	vmov	s15, r3
 800a3ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a3f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a3f6:	4b62      	ldr	r3, [pc, #392]	; (800a580 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a3f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a3fe:	ee07 3a90 	vmov	s15, r3
 800a402:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a406:	ed97 6a02 	vldr	s12, [r7, #8]
 800a40a:	eddf 5a61 	vldr	s11, [pc, #388]	; 800a590 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a40e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a412:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a416:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a41a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a41e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a422:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800a426:	e087      	b.n	800a538 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a428:	693b      	ldr	r3, [r7, #16]
 800a42a:	ee07 3a90 	vmov	s15, r3
 800a42e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a432:	eddf 6a58 	vldr	s13, [pc, #352]	; 800a594 <HAL_RCC_GetSysClockFreq+0x2e8>
 800a436:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a43a:	4b51      	ldr	r3, [pc, #324]	; (800a580 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a43c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a43e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a442:	ee07 3a90 	vmov	s15, r3
 800a446:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a44a:	ed97 6a02 	vldr	s12, [r7, #8]
 800a44e:	eddf 5a50 	vldr	s11, [pc, #320]	; 800a590 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a452:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a456:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a45a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a45e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a462:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a466:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a46a:	e065      	b.n	800a538 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a46c:	693b      	ldr	r3, [r7, #16]
 800a46e:	ee07 3a90 	vmov	s15, r3
 800a472:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a476:	eddf 6a48 	vldr	s13, [pc, #288]	; 800a598 <HAL_RCC_GetSysClockFreq+0x2ec>
 800a47a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a47e:	4b40      	ldr	r3, [pc, #256]	; (800a580 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a482:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a486:	ee07 3a90 	vmov	s15, r3
 800a48a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a48e:	ed97 6a02 	vldr	s12, [r7, #8]
 800a492:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800a590 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a496:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a49a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a49e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a4a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a4a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a4aa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a4ae:	e043      	b.n	800a538 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a4b0:	693b      	ldr	r3, [r7, #16]
 800a4b2:	ee07 3a90 	vmov	s15, r3
 800a4b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a4ba:	eddf 6a38 	vldr	s13, [pc, #224]	; 800a59c <HAL_RCC_GetSysClockFreq+0x2f0>
 800a4be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a4c2:	4b2f      	ldr	r3, [pc, #188]	; (800a580 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a4c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a4ca:	ee07 3a90 	vmov	s15, r3
 800a4ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a4d2:	ed97 6a02 	vldr	s12, [r7, #8]
 800a4d6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800a590 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a4da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a4de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a4e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a4e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a4ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a4ee:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a4f2:	e021      	b.n	800a538 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a4f4:	693b      	ldr	r3, [r7, #16]
 800a4f6:	ee07 3a90 	vmov	s15, r3
 800a4fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a4fe:	eddf 6a26 	vldr	s13, [pc, #152]	; 800a598 <HAL_RCC_GetSysClockFreq+0x2ec>
 800a502:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a506:	4b1e      	ldr	r3, [pc, #120]	; (800a580 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a50a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a50e:	ee07 3a90 	vmov	s15, r3
 800a512:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a516:	ed97 6a02 	vldr	s12, [r7, #8]
 800a51a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800a590 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a51e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a522:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a526:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a52a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a52e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a532:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a536:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800a538:	4b11      	ldr	r3, [pc, #68]	; (800a580 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a53a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a53c:	0a5b      	lsrs	r3, r3, #9
 800a53e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a542:	3301      	adds	r3, #1
 800a544:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800a546:	683b      	ldr	r3, [r7, #0]
 800a548:	ee07 3a90 	vmov	s15, r3
 800a54c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a550:	edd7 6a07 	vldr	s13, [r7, #28]
 800a554:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a558:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a55c:	ee17 3a90 	vmov	r3, s15
 800a560:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800a562:	e005      	b.n	800a570 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800a564:	2300      	movs	r3, #0
 800a566:	61bb      	str	r3, [r7, #24]
      break;
 800a568:	e002      	b.n	800a570 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800a56a:	4b07      	ldr	r3, [pc, #28]	; (800a588 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800a56c:	61bb      	str	r3, [r7, #24]
      break;
 800a56e:	bf00      	nop
  }

  return sysclockfreq;
 800a570:	69bb      	ldr	r3, [r7, #24]
}
 800a572:	4618      	mov	r0, r3
 800a574:	3724      	adds	r7, #36	; 0x24
 800a576:	46bd      	mov	sp, r7
 800a578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a57c:	4770      	bx	lr
 800a57e:	bf00      	nop
 800a580:	58024400 	.word	0x58024400
 800a584:	03d09000 	.word	0x03d09000
 800a588:	003d0900 	.word	0x003d0900
 800a58c:	007f1b10 	.word	0x007f1b10
 800a590:	46000000 	.word	0x46000000
 800a594:	4c742400 	.word	0x4c742400
 800a598:	4a742400 	.word	0x4a742400
 800a59c:	4afe3620 	.word	0x4afe3620

0800a5a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a5a0:	b580      	push	{r7, lr}
 800a5a2:	b082      	sub	sp, #8
 800a5a4:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800a5a6:	f7ff fe81 	bl	800a2ac <HAL_RCC_GetSysClockFreq>
 800a5aa:	4602      	mov	r2, r0
 800a5ac:	4b10      	ldr	r3, [pc, #64]	; (800a5f0 <HAL_RCC_GetHCLKFreq+0x50>)
 800a5ae:	699b      	ldr	r3, [r3, #24]
 800a5b0:	0a1b      	lsrs	r3, r3, #8
 800a5b2:	f003 030f 	and.w	r3, r3, #15
 800a5b6:	490f      	ldr	r1, [pc, #60]	; (800a5f4 <HAL_RCC_GetHCLKFreq+0x54>)
 800a5b8:	5ccb      	ldrb	r3, [r1, r3]
 800a5ba:	f003 031f 	and.w	r3, r3, #31
 800a5be:	fa22 f303 	lsr.w	r3, r2, r3
 800a5c2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a5c4:	4b0a      	ldr	r3, [pc, #40]	; (800a5f0 <HAL_RCC_GetHCLKFreq+0x50>)
 800a5c6:	699b      	ldr	r3, [r3, #24]
 800a5c8:	f003 030f 	and.w	r3, r3, #15
 800a5cc:	4a09      	ldr	r2, [pc, #36]	; (800a5f4 <HAL_RCC_GetHCLKFreq+0x54>)
 800a5ce:	5cd3      	ldrb	r3, [r2, r3]
 800a5d0:	f003 031f 	and.w	r3, r3, #31
 800a5d4:	687a      	ldr	r2, [r7, #4]
 800a5d6:	fa22 f303 	lsr.w	r3, r2, r3
 800a5da:	4a07      	ldr	r2, [pc, #28]	; (800a5f8 <HAL_RCC_GetHCLKFreq+0x58>)
 800a5dc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a5de:	4a07      	ldr	r2, [pc, #28]	; (800a5fc <HAL_RCC_GetHCLKFreq+0x5c>)
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800a5e4:	4b04      	ldr	r3, [pc, #16]	; (800a5f8 <HAL_RCC_GetHCLKFreq+0x58>)
 800a5e6:	681b      	ldr	r3, [r3, #0]
}
 800a5e8:	4618      	mov	r0, r3
 800a5ea:	3708      	adds	r7, #8
 800a5ec:	46bd      	mov	sp, r7
 800a5ee:	bd80      	pop	{r7, pc}
 800a5f0:	58024400 	.word	0x58024400
 800a5f4:	0801eb30 	.word	0x0801eb30
 800a5f8:	20000014 	.word	0x20000014
 800a5fc:	20000010 	.word	0x20000010

0800a600 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a600:	b580      	push	{r7, lr}
 800a602:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800a604:	f7ff ffcc 	bl	800a5a0 <HAL_RCC_GetHCLKFreq>
 800a608:	4602      	mov	r2, r0
 800a60a:	4b06      	ldr	r3, [pc, #24]	; (800a624 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a60c:	69db      	ldr	r3, [r3, #28]
 800a60e:	091b      	lsrs	r3, r3, #4
 800a610:	f003 0307 	and.w	r3, r3, #7
 800a614:	4904      	ldr	r1, [pc, #16]	; (800a628 <HAL_RCC_GetPCLK1Freq+0x28>)
 800a616:	5ccb      	ldrb	r3, [r1, r3]
 800a618:	f003 031f 	and.w	r3, r3, #31
 800a61c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800a620:	4618      	mov	r0, r3
 800a622:	bd80      	pop	{r7, pc}
 800a624:	58024400 	.word	0x58024400
 800a628:	0801eb30 	.word	0x0801eb30

0800a62c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a62c:	b580      	push	{r7, lr}
 800a62e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800a630:	f7ff ffb6 	bl	800a5a0 <HAL_RCC_GetHCLKFreq>
 800a634:	4602      	mov	r2, r0
 800a636:	4b06      	ldr	r3, [pc, #24]	; (800a650 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a638:	69db      	ldr	r3, [r3, #28]
 800a63a:	0a1b      	lsrs	r3, r3, #8
 800a63c:	f003 0307 	and.w	r3, r3, #7
 800a640:	4904      	ldr	r1, [pc, #16]	; (800a654 <HAL_RCC_GetPCLK2Freq+0x28>)
 800a642:	5ccb      	ldrb	r3, [r1, r3]
 800a644:	f003 031f 	and.w	r3, r3, #31
 800a648:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800a64c:	4618      	mov	r0, r3
 800a64e:	bd80      	pop	{r7, pc}
 800a650:	58024400 	.word	0x58024400
 800a654:	0801eb30 	.word	0x0801eb30

0800a658 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 800a658:	b580      	push	{r7, lr}
 800a65a:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 800a65c:	4b07      	ldr	r3, [pc, #28]	; (800a67c <HAL_RCC_NMI_IRQHandler+0x24>)
 800a65e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a660:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a664:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a668:	d105      	bne.n	800a676 <HAL_RCC_NMI_IRQHandler+0x1e>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 800a66a:	f000 f809 	bl	800a680 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 800a66e:	4b03      	ldr	r3, [pc, #12]	; (800a67c <HAL_RCC_NMI_IRQHandler+0x24>)
 800a670:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a674:	669a      	str	r2, [r3, #104]	; 0x68
  }
}
 800a676:	bf00      	nop
 800a678:	bd80      	pop	{r7, pc}
 800a67a:	bf00      	nop
 800a67c:	58024400 	.word	0x58024400

0800a680 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 800a680:	b480      	push	{r7}
 800a682:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 800a684:	bf00      	nop
 800a686:	46bd      	mov	sp, r7
 800a688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a68c:	4770      	bx	lr
	...

0800a690 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a690:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a694:	b0ca      	sub	sp, #296	; 0x128
 800a696:	af00      	add	r7, sp, #0
 800a698:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800a69c:	2300      	movs	r3, #0
 800a69e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800a6a2:	2300      	movs	r3, #0
 800a6a4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800a6a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a6ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6b0:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800a6b4:	2500      	movs	r5, #0
 800a6b6:	ea54 0305 	orrs.w	r3, r4, r5
 800a6ba:	d049      	beq.n	800a750 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800a6bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a6c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a6c2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a6c6:	d02f      	beq.n	800a728 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800a6c8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a6cc:	d828      	bhi.n	800a720 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800a6ce:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a6d2:	d01a      	beq.n	800a70a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800a6d4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a6d8:	d822      	bhi.n	800a720 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d003      	beq.n	800a6e6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800a6de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a6e2:	d007      	beq.n	800a6f4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800a6e4:	e01c      	b.n	800a720 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a6e6:	4bb8      	ldr	r3, [pc, #736]	; (800a9c8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a6e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6ea:	4ab7      	ldr	r2, [pc, #732]	; (800a9c8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a6ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a6f0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800a6f2:	e01a      	b.n	800a72a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a6f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a6f8:	3308      	adds	r3, #8
 800a6fa:	2102      	movs	r1, #2
 800a6fc:	4618      	mov	r0, r3
 800a6fe:	f002 fbb7 	bl	800ce70 <RCCEx_PLL2_Config>
 800a702:	4603      	mov	r3, r0
 800a704:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800a708:	e00f      	b.n	800a72a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a70a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a70e:	3328      	adds	r3, #40	; 0x28
 800a710:	2102      	movs	r1, #2
 800a712:	4618      	mov	r0, r3
 800a714:	f002 fc5e 	bl	800cfd4 <RCCEx_PLL3_Config>
 800a718:	4603      	mov	r3, r0
 800a71a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800a71e:	e004      	b.n	800a72a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a720:	2301      	movs	r3, #1
 800a722:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a726:	e000      	b.n	800a72a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800a728:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a72a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d10a      	bne.n	800a748 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800a732:	4ba5      	ldr	r3, [pc, #660]	; (800a9c8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a734:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a736:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800a73a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a73e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a740:	4aa1      	ldr	r2, [pc, #644]	; (800a9c8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a742:	430b      	orrs	r3, r1
 800a744:	6513      	str	r3, [r2, #80]	; 0x50
 800a746:	e003      	b.n	800a750 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a748:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a74c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800a750:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a754:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a758:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800a75c:	f04f 0900 	mov.w	r9, #0
 800a760:	ea58 0309 	orrs.w	r3, r8, r9
 800a764:	d047      	beq.n	800a7f6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800a766:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a76a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a76c:	2b04      	cmp	r3, #4
 800a76e:	d82a      	bhi.n	800a7c6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800a770:	a201      	add	r2, pc, #4	; (adr r2, 800a778 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800a772:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a776:	bf00      	nop
 800a778:	0800a78d 	.word	0x0800a78d
 800a77c:	0800a79b 	.word	0x0800a79b
 800a780:	0800a7b1 	.word	0x0800a7b1
 800a784:	0800a7cf 	.word	0x0800a7cf
 800a788:	0800a7cf 	.word	0x0800a7cf
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a78c:	4b8e      	ldr	r3, [pc, #568]	; (800a9c8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a78e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a790:	4a8d      	ldr	r2, [pc, #564]	; (800a9c8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a792:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a796:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a798:	e01a      	b.n	800a7d0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a79a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a79e:	3308      	adds	r3, #8
 800a7a0:	2100      	movs	r1, #0
 800a7a2:	4618      	mov	r0, r3
 800a7a4:	f002 fb64 	bl	800ce70 <RCCEx_PLL2_Config>
 800a7a8:	4603      	mov	r3, r0
 800a7aa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a7ae:	e00f      	b.n	800a7d0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a7b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a7b4:	3328      	adds	r3, #40	; 0x28
 800a7b6:	2100      	movs	r1, #0
 800a7b8:	4618      	mov	r0, r3
 800a7ba:	f002 fc0b 	bl	800cfd4 <RCCEx_PLL3_Config>
 800a7be:	4603      	mov	r3, r0
 800a7c0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a7c4:	e004      	b.n	800a7d0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a7c6:	2301      	movs	r3, #1
 800a7c8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a7cc:	e000      	b.n	800a7d0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800a7ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a7d0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d10a      	bne.n	800a7ee <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a7d8:	4b7b      	ldr	r3, [pc, #492]	; (800a9c8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a7da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a7dc:	f023 0107 	bic.w	r1, r3, #7
 800a7e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a7e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a7e6:	4a78      	ldr	r2, [pc, #480]	; (800a9c8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a7e8:	430b      	orrs	r3, r1
 800a7ea:	6513      	str	r3, [r2, #80]	; 0x50
 800a7ec:	e003      	b.n	800a7f6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a7ee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a7f2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800a7f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a7fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7fe:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800a802:	f04f 0b00 	mov.w	fp, #0
 800a806:	ea5a 030b 	orrs.w	r3, sl, fp
 800a80a:	d04c      	beq.n	800a8a6 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800a80c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a810:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a812:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a816:	d030      	beq.n	800a87a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800a818:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a81c:	d829      	bhi.n	800a872 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800a81e:	2bc0      	cmp	r3, #192	; 0xc0
 800a820:	d02d      	beq.n	800a87e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800a822:	2bc0      	cmp	r3, #192	; 0xc0
 800a824:	d825      	bhi.n	800a872 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800a826:	2b80      	cmp	r3, #128	; 0x80
 800a828:	d018      	beq.n	800a85c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800a82a:	2b80      	cmp	r3, #128	; 0x80
 800a82c:	d821      	bhi.n	800a872 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d002      	beq.n	800a838 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800a832:	2b40      	cmp	r3, #64	; 0x40
 800a834:	d007      	beq.n	800a846 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800a836:	e01c      	b.n	800a872 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a838:	4b63      	ldr	r3, [pc, #396]	; (800a9c8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a83a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a83c:	4a62      	ldr	r2, [pc, #392]	; (800a9c8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a83e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a842:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800a844:	e01c      	b.n	800a880 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a846:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a84a:	3308      	adds	r3, #8
 800a84c:	2100      	movs	r1, #0
 800a84e:	4618      	mov	r0, r3
 800a850:	f002 fb0e 	bl	800ce70 <RCCEx_PLL2_Config>
 800a854:	4603      	mov	r3, r0
 800a856:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800a85a:	e011      	b.n	800a880 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a85c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a860:	3328      	adds	r3, #40	; 0x28
 800a862:	2100      	movs	r1, #0
 800a864:	4618      	mov	r0, r3
 800a866:	f002 fbb5 	bl	800cfd4 <RCCEx_PLL3_Config>
 800a86a:	4603      	mov	r3, r0
 800a86c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800a870:	e006      	b.n	800a880 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a872:	2301      	movs	r3, #1
 800a874:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a878:	e002      	b.n	800a880 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800a87a:	bf00      	nop
 800a87c:	e000      	b.n	800a880 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800a87e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a880:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a884:	2b00      	cmp	r3, #0
 800a886:	d10a      	bne.n	800a89e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800a888:	4b4f      	ldr	r3, [pc, #316]	; (800a9c8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a88a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a88c:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 800a890:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a894:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a896:	4a4c      	ldr	r2, [pc, #304]	; (800a9c8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a898:	430b      	orrs	r3, r1
 800a89a:	6513      	str	r3, [r2, #80]	; 0x50
 800a89c:	e003      	b.n	800a8a6 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a89e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a8a2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800a8a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a8aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8ae:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800a8b2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800a8b6:	2300      	movs	r3, #0
 800a8b8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800a8bc:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 800a8c0:	460b      	mov	r3, r1
 800a8c2:	4313      	orrs	r3, r2
 800a8c4:	d053      	beq.n	800a96e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800a8c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a8ca:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800a8ce:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a8d2:	d035      	beq.n	800a940 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800a8d4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a8d8:	d82e      	bhi.n	800a938 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800a8da:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a8de:	d031      	beq.n	800a944 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800a8e0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a8e4:	d828      	bhi.n	800a938 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800a8e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a8ea:	d01a      	beq.n	800a922 <HAL_RCCEx_PeriphCLKConfig+0x292>
 800a8ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a8f0:	d822      	bhi.n	800a938 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d003      	beq.n	800a8fe <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800a8f6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a8fa:	d007      	beq.n	800a90c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800a8fc:	e01c      	b.n	800a938 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a8fe:	4b32      	ldr	r3, [pc, #200]	; (800a9c8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a900:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a902:	4a31      	ldr	r2, [pc, #196]	; (800a9c8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a904:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a908:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a90a:	e01c      	b.n	800a946 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a90c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a910:	3308      	adds	r3, #8
 800a912:	2100      	movs	r1, #0
 800a914:	4618      	mov	r0, r3
 800a916:	f002 faab 	bl	800ce70 <RCCEx_PLL2_Config>
 800a91a:	4603      	mov	r3, r0
 800a91c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800a920:	e011      	b.n	800a946 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a922:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a926:	3328      	adds	r3, #40	; 0x28
 800a928:	2100      	movs	r1, #0
 800a92a:	4618      	mov	r0, r3
 800a92c:	f002 fb52 	bl	800cfd4 <RCCEx_PLL3_Config>
 800a930:	4603      	mov	r3, r0
 800a932:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a936:	e006      	b.n	800a946 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800a938:	2301      	movs	r3, #1
 800a93a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a93e:	e002      	b.n	800a946 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800a940:	bf00      	nop
 800a942:	e000      	b.n	800a946 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800a944:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a946:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d10b      	bne.n	800a966 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800a94e:	4b1e      	ldr	r3, [pc, #120]	; (800a9c8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a950:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a952:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800a956:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a95a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800a95e:	4a1a      	ldr	r2, [pc, #104]	; (800a9c8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a960:	430b      	orrs	r3, r1
 800a962:	6593      	str	r3, [r2, #88]	; 0x58
 800a964:	e003      	b.n	800a96e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a966:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a96a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800a96e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a972:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a976:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800a97a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a97e:	2300      	movs	r3, #0
 800a980:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800a984:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 800a988:	460b      	mov	r3, r1
 800a98a:	4313      	orrs	r3, r2
 800a98c:	d056      	beq.n	800aa3c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800a98e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a992:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a996:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a99a:	d038      	beq.n	800aa0e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800a99c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a9a0:	d831      	bhi.n	800aa06 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800a9a2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a9a6:	d034      	beq.n	800aa12 <HAL_RCCEx_PeriphCLKConfig+0x382>
 800a9a8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a9ac:	d82b      	bhi.n	800aa06 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800a9ae:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a9b2:	d01d      	beq.n	800a9f0 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800a9b4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a9b8:	d825      	bhi.n	800aa06 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d006      	beq.n	800a9cc <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800a9be:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a9c2:	d00a      	beq.n	800a9da <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800a9c4:	e01f      	b.n	800aa06 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800a9c6:	bf00      	nop
 800a9c8:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a9cc:	4ba2      	ldr	r3, [pc, #648]	; (800ac58 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a9ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9d0:	4aa1      	ldr	r2, [pc, #644]	; (800ac58 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a9d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a9d6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a9d8:	e01c      	b.n	800aa14 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a9da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a9de:	3308      	adds	r3, #8
 800a9e0:	2100      	movs	r1, #0
 800a9e2:	4618      	mov	r0, r3
 800a9e4:	f002 fa44 	bl	800ce70 <RCCEx_PLL2_Config>
 800a9e8:	4603      	mov	r3, r0
 800a9ea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800a9ee:	e011      	b.n	800aa14 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a9f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a9f4:	3328      	adds	r3, #40	; 0x28
 800a9f6:	2100      	movs	r1, #0
 800a9f8:	4618      	mov	r0, r3
 800a9fa:	f002 faeb 	bl	800cfd4 <RCCEx_PLL3_Config>
 800a9fe:	4603      	mov	r3, r0
 800aa00:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800aa04:	e006      	b.n	800aa14 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800aa06:	2301      	movs	r3, #1
 800aa08:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800aa0c:	e002      	b.n	800aa14 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800aa0e:	bf00      	nop
 800aa10:	e000      	b.n	800aa14 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800aa12:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aa14:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d10b      	bne.n	800aa34 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800aa1c:	4b8e      	ldr	r3, [pc, #568]	; (800ac58 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800aa1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa20:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800aa24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa28:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800aa2c:	4a8a      	ldr	r2, [pc, #552]	; (800ac58 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800aa2e:	430b      	orrs	r3, r1
 800aa30:	6593      	str	r3, [r2, #88]	; 0x58
 800aa32:	e003      	b.n	800aa3c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aa34:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aa38:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800aa3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa44:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800aa48:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800aa4c:	2300      	movs	r3, #0
 800aa4e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800aa52:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800aa56:	460b      	mov	r3, r1
 800aa58:	4313      	orrs	r3, r2
 800aa5a:	d03a      	beq.n	800aad2 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800aa5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aa62:	2b30      	cmp	r3, #48	; 0x30
 800aa64:	d01f      	beq.n	800aaa6 <HAL_RCCEx_PeriphCLKConfig+0x416>
 800aa66:	2b30      	cmp	r3, #48	; 0x30
 800aa68:	d819      	bhi.n	800aa9e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800aa6a:	2b20      	cmp	r3, #32
 800aa6c:	d00c      	beq.n	800aa88 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800aa6e:	2b20      	cmp	r3, #32
 800aa70:	d815      	bhi.n	800aa9e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d019      	beq.n	800aaaa <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800aa76:	2b10      	cmp	r3, #16
 800aa78:	d111      	bne.n	800aa9e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aa7a:	4b77      	ldr	r3, [pc, #476]	; (800ac58 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800aa7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa7e:	4a76      	ldr	r2, [pc, #472]	; (800ac58 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800aa80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aa84:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800aa86:	e011      	b.n	800aaac <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800aa88:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa8c:	3308      	adds	r3, #8
 800aa8e:	2102      	movs	r1, #2
 800aa90:	4618      	mov	r0, r3
 800aa92:	f002 f9ed 	bl	800ce70 <RCCEx_PLL2_Config>
 800aa96:	4603      	mov	r3, r0
 800aa98:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800aa9c:	e006      	b.n	800aaac <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800aa9e:	2301      	movs	r3, #1
 800aaa0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800aaa4:	e002      	b.n	800aaac <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800aaa6:	bf00      	nop
 800aaa8:	e000      	b.n	800aaac <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800aaaa:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aaac:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d10a      	bne.n	800aaca <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800aab4:	4b68      	ldr	r3, [pc, #416]	; (800ac58 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800aab6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aab8:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800aabc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aac0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aac2:	4a65      	ldr	r2, [pc, #404]	; (800ac58 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800aac4:	430b      	orrs	r3, r1
 800aac6:	64d3      	str	r3, [r2, #76]	; 0x4c
 800aac8:	e003      	b.n	800aad2 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aaca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aace:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800aad2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aada:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800aade:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800aae2:	2300      	movs	r3, #0
 800aae4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800aae8:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800aaec:	460b      	mov	r3, r1
 800aaee:	4313      	orrs	r3, r2
 800aaf0:	d051      	beq.n	800ab96 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800aaf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aaf6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800aaf8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800aafc:	d035      	beq.n	800ab6a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800aafe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ab02:	d82e      	bhi.n	800ab62 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800ab04:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ab08:	d031      	beq.n	800ab6e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800ab0a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ab0e:	d828      	bhi.n	800ab62 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800ab10:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ab14:	d01a      	beq.n	800ab4c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800ab16:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ab1a:	d822      	bhi.n	800ab62 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d003      	beq.n	800ab28 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800ab20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ab24:	d007      	beq.n	800ab36 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800ab26:	e01c      	b.n	800ab62 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ab28:	4b4b      	ldr	r3, [pc, #300]	; (800ac58 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ab2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab2c:	4a4a      	ldr	r2, [pc, #296]	; (800ac58 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ab2e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ab32:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800ab34:	e01c      	b.n	800ab70 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ab36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ab3a:	3308      	adds	r3, #8
 800ab3c:	2100      	movs	r1, #0
 800ab3e:	4618      	mov	r0, r3
 800ab40:	f002 f996 	bl	800ce70 <RCCEx_PLL2_Config>
 800ab44:	4603      	mov	r3, r0
 800ab46:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800ab4a:	e011      	b.n	800ab70 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ab4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ab50:	3328      	adds	r3, #40	; 0x28
 800ab52:	2100      	movs	r1, #0
 800ab54:	4618      	mov	r0, r3
 800ab56:	f002 fa3d 	bl	800cfd4 <RCCEx_PLL3_Config>
 800ab5a:	4603      	mov	r3, r0
 800ab5c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800ab60:	e006      	b.n	800ab70 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ab62:	2301      	movs	r3, #1
 800ab64:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ab68:	e002      	b.n	800ab70 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800ab6a:	bf00      	nop
 800ab6c:	e000      	b.n	800ab70 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800ab6e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ab70:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d10a      	bne.n	800ab8e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800ab78:	4b37      	ldr	r3, [pc, #220]	; (800ac58 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ab7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ab7c:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800ab80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ab84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ab86:	4a34      	ldr	r2, [pc, #208]	; (800ac58 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ab88:	430b      	orrs	r3, r1
 800ab8a:	6513      	str	r3, [r2, #80]	; 0x50
 800ab8c:	e003      	b.n	800ab96 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ab8e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ab92:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800ab96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ab9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab9e:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800aba2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800aba6:	2300      	movs	r3, #0
 800aba8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800abac:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800abb0:	460b      	mov	r3, r1
 800abb2:	4313      	orrs	r3, r2
 800abb4:	d056      	beq.n	800ac64 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800abb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800abba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800abbc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800abc0:	d033      	beq.n	800ac2a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800abc2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800abc6:	d82c      	bhi.n	800ac22 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800abc8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800abcc:	d02f      	beq.n	800ac2e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800abce:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800abd2:	d826      	bhi.n	800ac22 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800abd4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800abd8:	d02b      	beq.n	800ac32 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800abda:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800abde:	d820      	bhi.n	800ac22 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800abe0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800abe4:	d012      	beq.n	800ac0c <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800abe6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800abea:	d81a      	bhi.n	800ac22 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800abec:	2b00      	cmp	r3, #0
 800abee:	d022      	beq.n	800ac36 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800abf0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800abf4:	d115      	bne.n	800ac22 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800abf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800abfa:	3308      	adds	r3, #8
 800abfc:	2101      	movs	r1, #1
 800abfe:	4618      	mov	r0, r3
 800ac00:	f002 f936 	bl	800ce70 <RCCEx_PLL2_Config>
 800ac04:	4603      	mov	r3, r0
 800ac06:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800ac0a:	e015      	b.n	800ac38 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ac0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ac10:	3328      	adds	r3, #40	; 0x28
 800ac12:	2101      	movs	r1, #1
 800ac14:	4618      	mov	r0, r3
 800ac16:	f002 f9dd 	bl	800cfd4 <RCCEx_PLL3_Config>
 800ac1a:	4603      	mov	r3, r0
 800ac1c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800ac20:	e00a      	b.n	800ac38 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ac22:	2301      	movs	r3, #1
 800ac24:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ac28:	e006      	b.n	800ac38 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800ac2a:	bf00      	nop
 800ac2c:	e004      	b.n	800ac38 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800ac2e:	bf00      	nop
 800ac30:	e002      	b.n	800ac38 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800ac32:	bf00      	nop
 800ac34:	e000      	b.n	800ac38 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800ac36:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ac38:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d10d      	bne.n	800ac5c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800ac40:	4b05      	ldr	r3, [pc, #20]	; (800ac58 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ac42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ac44:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800ac48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ac4c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ac4e:	4a02      	ldr	r2, [pc, #8]	; (800ac58 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ac50:	430b      	orrs	r3, r1
 800ac52:	6513      	str	r3, [r2, #80]	; 0x50
 800ac54:	e006      	b.n	800ac64 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800ac56:	bf00      	nop
 800ac58:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ac5c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ac60:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800ac64:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ac68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac6c:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800ac70:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800ac74:	2300      	movs	r3, #0
 800ac76:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800ac7a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800ac7e:	460b      	mov	r3, r1
 800ac80:	4313      	orrs	r3, r2
 800ac82:	d055      	beq.n	800ad30 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800ac84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ac88:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800ac8c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ac90:	d033      	beq.n	800acfa <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800ac92:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ac96:	d82c      	bhi.n	800acf2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800ac98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ac9c:	d02f      	beq.n	800acfe <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800ac9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aca2:	d826      	bhi.n	800acf2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800aca4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800aca8:	d02b      	beq.n	800ad02 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800acaa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800acae:	d820      	bhi.n	800acf2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800acb0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800acb4:	d012      	beq.n	800acdc <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800acb6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800acba:	d81a      	bhi.n	800acf2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d022      	beq.n	800ad06 <HAL_RCCEx_PeriphCLKConfig+0x676>
 800acc0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800acc4:	d115      	bne.n	800acf2 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800acc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800acca:	3308      	adds	r3, #8
 800accc:	2101      	movs	r1, #1
 800acce:	4618      	mov	r0, r3
 800acd0:	f002 f8ce 	bl	800ce70 <RCCEx_PLL2_Config>
 800acd4:	4603      	mov	r3, r0
 800acd6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800acda:	e015      	b.n	800ad08 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800acdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ace0:	3328      	adds	r3, #40	; 0x28
 800ace2:	2101      	movs	r1, #1
 800ace4:	4618      	mov	r0, r3
 800ace6:	f002 f975 	bl	800cfd4 <RCCEx_PLL3_Config>
 800acea:	4603      	mov	r3, r0
 800acec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800acf0:	e00a      	b.n	800ad08 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800acf2:	2301      	movs	r3, #1
 800acf4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800acf8:	e006      	b.n	800ad08 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800acfa:	bf00      	nop
 800acfc:	e004      	b.n	800ad08 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800acfe:	bf00      	nop
 800ad00:	e002      	b.n	800ad08 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800ad02:	bf00      	nop
 800ad04:	e000      	b.n	800ad08 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800ad06:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ad08:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d10b      	bne.n	800ad28 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800ad10:	4ba3      	ldr	r3, [pc, #652]	; (800afa0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ad12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ad14:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800ad18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ad1c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800ad20:	4a9f      	ldr	r2, [pc, #636]	; (800afa0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ad22:	430b      	orrs	r3, r1
 800ad24:	6593      	str	r3, [r2, #88]	; 0x58
 800ad26:	e003      	b.n	800ad30 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ad28:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ad2c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800ad30:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ad34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad38:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800ad3c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800ad40:	2300      	movs	r3, #0
 800ad42:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800ad46:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800ad4a:	460b      	mov	r3, r1
 800ad4c:	4313      	orrs	r3, r2
 800ad4e:	d037      	beq.n	800adc0 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800ad50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ad54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad56:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ad5a:	d00e      	beq.n	800ad7a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800ad5c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ad60:	d816      	bhi.n	800ad90 <HAL_RCCEx_PeriphCLKConfig+0x700>
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d018      	beq.n	800ad98 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800ad66:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ad6a:	d111      	bne.n	800ad90 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ad6c:	4b8c      	ldr	r3, [pc, #560]	; (800afa0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ad6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad70:	4a8b      	ldr	r2, [pc, #556]	; (800afa0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ad72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ad76:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800ad78:	e00f      	b.n	800ad9a <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ad7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ad7e:	3308      	adds	r3, #8
 800ad80:	2101      	movs	r1, #1
 800ad82:	4618      	mov	r0, r3
 800ad84:	f002 f874 	bl	800ce70 <RCCEx_PLL2_Config>
 800ad88:	4603      	mov	r3, r0
 800ad8a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800ad8e:	e004      	b.n	800ad9a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ad90:	2301      	movs	r3, #1
 800ad92:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ad96:	e000      	b.n	800ad9a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800ad98:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ad9a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d10a      	bne.n	800adb8 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800ada2:	4b7f      	ldr	r3, [pc, #508]	; (800afa0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ada4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ada6:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800adaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800adae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800adb0:	4a7b      	ldr	r2, [pc, #492]	; (800afa0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800adb2:	430b      	orrs	r3, r1
 800adb4:	6513      	str	r3, [r2, #80]	; 0x50
 800adb6:	e003      	b.n	800adc0 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800adb8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800adbc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800adc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800adc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adc8:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800adcc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800add0:	2300      	movs	r3, #0
 800add2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800add6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800adda:	460b      	mov	r3, r1
 800addc:	4313      	orrs	r3, r2
 800adde:	d039      	beq.n	800ae54 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800ade0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ade4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ade6:	2b03      	cmp	r3, #3
 800ade8:	d81c      	bhi.n	800ae24 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800adea:	a201      	add	r2, pc, #4	; (adr r2, 800adf0 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800adec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800adf0:	0800ae2d 	.word	0x0800ae2d
 800adf4:	0800ae01 	.word	0x0800ae01
 800adf8:	0800ae0f 	.word	0x0800ae0f
 800adfc:	0800ae2d 	.word	0x0800ae2d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ae00:	4b67      	ldr	r3, [pc, #412]	; (800afa0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ae02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae04:	4a66      	ldr	r2, [pc, #408]	; (800afa0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ae06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ae0a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800ae0c:	e00f      	b.n	800ae2e <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ae0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ae12:	3308      	adds	r3, #8
 800ae14:	2102      	movs	r1, #2
 800ae16:	4618      	mov	r0, r3
 800ae18:	f002 f82a 	bl	800ce70 <RCCEx_PLL2_Config>
 800ae1c:	4603      	mov	r3, r0
 800ae1e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800ae22:	e004      	b.n	800ae2e <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800ae24:	2301      	movs	r3, #1
 800ae26:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ae2a:	e000      	b.n	800ae2e <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800ae2c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ae2e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d10a      	bne.n	800ae4c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800ae36:	4b5a      	ldr	r3, [pc, #360]	; (800afa0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ae38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ae3a:	f023 0103 	bic.w	r1, r3, #3
 800ae3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ae42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ae44:	4a56      	ldr	r2, [pc, #344]	; (800afa0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ae46:	430b      	orrs	r3, r1
 800ae48:	64d3      	str	r3, [r2, #76]	; 0x4c
 800ae4a:	e003      	b.n	800ae54 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ae4c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ae50:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800ae54:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ae58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae5c:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800ae60:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800ae64:	2300      	movs	r3, #0
 800ae66:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800ae6a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800ae6e:	460b      	mov	r3, r1
 800ae70:	4313      	orrs	r3, r2
 800ae72:	f000 809f 	beq.w	800afb4 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800ae76:	4b4b      	ldr	r3, [pc, #300]	; (800afa4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	4a4a      	ldr	r2, [pc, #296]	; (800afa4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800ae7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ae80:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800ae82:	f7f8 fe57 	bl	8003b34 <HAL_GetTick>
 800ae86:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ae8a:	e00b      	b.n	800aea4 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ae8c:	f7f8 fe52 	bl	8003b34 <HAL_GetTick>
 800ae90:	4602      	mov	r2, r0
 800ae92:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800ae96:	1ad3      	subs	r3, r2, r3
 800ae98:	2b64      	cmp	r3, #100	; 0x64
 800ae9a:	d903      	bls.n	800aea4 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800ae9c:	2303      	movs	r3, #3
 800ae9e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800aea2:	e005      	b.n	800aeb0 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800aea4:	4b3f      	ldr	r3, [pc, #252]	; (800afa4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d0ed      	beq.n	800ae8c <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800aeb0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d179      	bne.n	800afac <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800aeb8:	4b39      	ldr	r3, [pc, #228]	; (800afa0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800aeba:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800aebc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aec0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800aec4:	4053      	eors	r3, r2
 800aec6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d015      	beq.n	800aefa <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800aece:	4b34      	ldr	r3, [pc, #208]	; (800afa0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800aed0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aed2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800aed6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800aeda:	4b31      	ldr	r3, [pc, #196]	; (800afa0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800aedc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aede:	4a30      	ldr	r2, [pc, #192]	; (800afa0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800aee0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800aee4:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800aee6:	4b2e      	ldr	r3, [pc, #184]	; (800afa0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800aee8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aeea:	4a2d      	ldr	r2, [pc, #180]	; (800afa0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800aeec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800aef0:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800aef2:	4a2b      	ldr	r2, [pc, #172]	; (800afa0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800aef4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800aef8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800aefa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aefe:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800af02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800af06:	d118      	bne.n	800af3a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800af08:	f7f8 fe14 	bl	8003b34 <HAL_GetTick>
 800af0c:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800af10:	e00d      	b.n	800af2e <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800af12:	f7f8 fe0f 	bl	8003b34 <HAL_GetTick>
 800af16:	4602      	mov	r2, r0
 800af18:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800af1c:	1ad2      	subs	r2, r2, r3
 800af1e:	f241 3388 	movw	r3, #5000	; 0x1388
 800af22:	429a      	cmp	r2, r3
 800af24:	d903      	bls.n	800af2e <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800af26:	2303      	movs	r3, #3
 800af28:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 800af2c:	e005      	b.n	800af3a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800af2e:	4b1c      	ldr	r3, [pc, #112]	; (800afa0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800af30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af32:	f003 0302 	and.w	r3, r3, #2
 800af36:	2b00      	cmp	r3, #0
 800af38:	d0eb      	beq.n	800af12 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800af3a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d129      	bne.n	800af96 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800af42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800af46:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800af4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800af4e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800af52:	d10e      	bne.n	800af72 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800af54:	4b12      	ldr	r3, [pc, #72]	; (800afa0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800af56:	691b      	ldr	r3, [r3, #16]
 800af58:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800af5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800af60:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800af64:	091a      	lsrs	r2, r3, #4
 800af66:	4b10      	ldr	r3, [pc, #64]	; (800afa8 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800af68:	4013      	ands	r3, r2
 800af6a:	4a0d      	ldr	r2, [pc, #52]	; (800afa0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800af6c:	430b      	orrs	r3, r1
 800af6e:	6113      	str	r3, [r2, #16]
 800af70:	e005      	b.n	800af7e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800af72:	4b0b      	ldr	r3, [pc, #44]	; (800afa0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800af74:	691b      	ldr	r3, [r3, #16]
 800af76:	4a0a      	ldr	r2, [pc, #40]	; (800afa0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800af78:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800af7c:	6113      	str	r3, [r2, #16]
 800af7e:	4b08      	ldr	r3, [pc, #32]	; (800afa0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800af80:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800af82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800af86:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800af8a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800af8e:	4a04      	ldr	r2, [pc, #16]	; (800afa0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800af90:	430b      	orrs	r3, r1
 800af92:	6713      	str	r3, [r2, #112]	; 0x70
 800af94:	e00e      	b.n	800afb4 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800af96:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800af9a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 800af9e:	e009      	b.n	800afb4 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800afa0:	58024400 	.word	0x58024400
 800afa4:	58024800 	.word	0x58024800
 800afa8:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800afac:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800afb0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800afb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800afb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afbc:	f002 0301 	and.w	r3, r2, #1
 800afc0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800afc4:	2300      	movs	r3, #0
 800afc6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800afca:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800afce:	460b      	mov	r3, r1
 800afd0:	4313      	orrs	r3, r2
 800afd2:	f000 8089 	beq.w	800b0e8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800afd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800afda:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800afdc:	2b28      	cmp	r3, #40	; 0x28
 800afde:	d86b      	bhi.n	800b0b8 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800afe0:	a201      	add	r2, pc, #4	; (adr r2, 800afe8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800afe2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afe6:	bf00      	nop
 800afe8:	0800b0c1 	.word	0x0800b0c1
 800afec:	0800b0b9 	.word	0x0800b0b9
 800aff0:	0800b0b9 	.word	0x0800b0b9
 800aff4:	0800b0b9 	.word	0x0800b0b9
 800aff8:	0800b0b9 	.word	0x0800b0b9
 800affc:	0800b0b9 	.word	0x0800b0b9
 800b000:	0800b0b9 	.word	0x0800b0b9
 800b004:	0800b0b9 	.word	0x0800b0b9
 800b008:	0800b08d 	.word	0x0800b08d
 800b00c:	0800b0b9 	.word	0x0800b0b9
 800b010:	0800b0b9 	.word	0x0800b0b9
 800b014:	0800b0b9 	.word	0x0800b0b9
 800b018:	0800b0b9 	.word	0x0800b0b9
 800b01c:	0800b0b9 	.word	0x0800b0b9
 800b020:	0800b0b9 	.word	0x0800b0b9
 800b024:	0800b0b9 	.word	0x0800b0b9
 800b028:	0800b0a3 	.word	0x0800b0a3
 800b02c:	0800b0b9 	.word	0x0800b0b9
 800b030:	0800b0b9 	.word	0x0800b0b9
 800b034:	0800b0b9 	.word	0x0800b0b9
 800b038:	0800b0b9 	.word	0x0800b0b9
 800b03c:	0800b0b9 	.word	0x0800b0b9
 800b040:	0800b0b9 	.word	0x0800b0b9
 800b044:	0800b0b9 	.word	0x0800b0b9
 800b048:	0800b0c1 	.word	0x0800b0c1
 800b04c:	0800b0b9 	.word	0x0800b0b9
 800b050:	0800b0b9 	.word	0x0800b0b9
 800b054:	0800b0b9 	.word	0x0800b0b9
 800b058:	0800b0b9 	.word	0x0800b0b9
 800b05c:	0800b0b9 	.word	0x0800b0b9
 800b060:	0800b0b9 	.word	0x0800b0b9
 800b064:	0800b0b9 	.word	0x0800b0b9
 800b068:	0800b0c1 	.word	0x0800b0c1
 800b06c:	0800b0b9 	.word	0x0800b0b9
 800b070:	0800b0b9 	.word	0x0800b0b9
 800b074:	0800b0b9 	.word	0x0800b0b9
 800b078:	0800b0b9 	.word	0x0800b0b9
 800b07c:	0800b0b9 	.word	0x0800b0b9
 800b080:	0800b0b9 	.word	0x0800b0b9
 800b084:	0800b0b9 	.word	0x0800b0b9
 800b088:	0800b0c1 	.word	0x0800b0c1
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b08c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b090:	3308      	adds	r3, #8
 800b092:	2101      	movs	r1, #1
 800b094:	4618      	mov	r0, r3
 800b096:	f001 feeb 	bl	800ce70 <RCCEx_PLL2_Config>
 800b09a:	4603      	mov	r3, r0
 800b09c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800b0a0:	e00f      	b.n	800b0c2 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b0a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b0a6:	3328      	adds	r3, #40	; 0x28
 800b0a8:	2101      	movs	r1, #1
 800b0aa:	4618      	mov	r0, r3
 800b0ac:	f001 ff92 	bl	800cfd4 <RCCEx_PLL3_Config>
 800b0b0:	4603      	mov	r3, r0
 800b0b2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800b0b6:	e004      	b.n	800b0c2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b0b8:	2301      	movs	r3, #1
 800b0ba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b0be:	e000      	b.n	800b0c2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800b0c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b0c2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d10a      	bne.n	800b0e0 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800b0ca:	4bbf      	ldr	r3, [pc, #764]	; (800b3c8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b0cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b0ce:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800b0d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b0d6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b0d8:	4abb      	ldr	r2, [pc, #748]	; (800b3c8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b0da:	430b      	orrs	r3, r1
 800b0dc:	6553      	str	r3, [r2, #84]	; 0x54
 800b0de:	e003      	b.n	800b0e8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b0e0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b0e4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800b0e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b0ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0f0:	f002 0302 	and.w	r3, r2, #2
 800b0f4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b0f8:	2300      	movs	r3, #0
 800b0fa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800b0fe:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800b102:	460b      	mov	r3, r1
 800b104:	4313      	orrs	r3, r2
 800b106:	d041      	beq.n	800b18c <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800b108:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b10c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b10e:	2b05      	cmp	r3, #5
 800b110:	d824      	bhi.n	800b15c <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800b112:	a201      	add	r2, pc, #4	; (adr r2, 800b118 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800b114:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b118:	0800b165 	.word	0x0800b165
 800b11c:	0800b131 	.word	0x0800b131
 800b120:	0800b147 	.word	0x0800b147
 800b124:	0800b165 	.word	0x0800b165
 800b128:	0800b165 	.word	0x0800b165
 800b12c:	0800b165 	.word	0x0800b165
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b130:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b134:	3308      	adds	r3, #8
 800b136:	2101      	movs	r1, #1
 800b138:	4618      	mov	r0, r3
 800b13a:	f001 fe99 	bl	800ce70 <RCCEx_PLL2_Config>
 800b13e:	4603      	mov	r3, r0
 800b140:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800b144:	e00f      	b.n	800b166 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b146:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b14a:	3328      	adds	r3, #40	; 0x28
 800b14c:	2101      	movs	r1, #1
 800b14e:	4618      	mov	r0, r3
 800b150:	f001 ff40 	bl	800cfd4 <RCCEx_PLL3_Config>
 800b154:	4603      	mov	r3, r0
 800b156:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800b15a:	e004      	b.n	800b166 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b15c:	2301      	movs	r3, #1
 800b15e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b162:	e000      	b.n	800b166 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800b164:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b166:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d10a      	bne.n	800b184 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800b16e:	4b96      	ldr	r3, [pc, #600]	; (800b3c8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b170:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b172:	f023 0107 	bic.w	r1, r3, #7
 800b176:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b17a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b17c:	4a92      	ldr	r2, [pc, #584]	; (800b3c8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b17e:	430b      	orrs	r3, r1
 800b180:	6553      	str	r3, [r2, #84]	; 0x54
 800b182:	e003      	b.n	800b18c <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b184:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b188:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b18c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b190:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b194:	f002 0304 	and.w	r3, r2, #4
 800b198:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b19c:	2300      	movs	r3, #0
 800b19e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b1a2:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800b1a6:	460b      	mov	r3, r1
 800b1a8:	4313      	orrs	r3, r2
 800b1aa:	d044      	beq.n	800b236 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800b1ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b1b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b1b4:	2b05      	cmp	r3, #5
 800b1b6:	d825      	bhi.n	800b204 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800b1b8:	a201      	add	r2, pc, #4	; (adr r2, 800b1c0 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800b1ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1be:	bf00      	nop
 800b1c0:	0800b20d 	.word	0x0800b20d
 800b1c4:	0800b1d9 	.word	0x0800b1d9
 800b1c8:	0800b1ef 	.word	0x0800b1ef
 800b1cc:	0800b20d 	.word	0x0800b20d
 800b1d0:	0800b20d 	.word	0x0800b20d
 800b1d4:	0800b20d 	.word	0x0800b20d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b1d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b1dc:	3308      	adds	r3, #8
 800b1de:	2101      	movs	r1, #1
 800b1e0:	4618      	mov	r0, r3
 800b1e2:	f001 fe45 	bl	800ce70 <RCCEx_PLL2_Config>
 800b1e6:	4603      	mov	r3, r0
 800b1e8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800b1ec:	e00f      	b.n	800b20e <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b1ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b1f2:	3328      	adds	r3, #40	; 0x28
 800b1f4:	2101      	movs	r1, #1
 800b1f6:	4618      	mov	r0, r3
 800b1f8:	f001 feec 	bl	800cfd4 <RCCEx_PLL3_Config>
 800b1fc:	4603      	mov	r3, r0
 800b1fe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800b202:	e004      	b.n	800b20e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b204:	2301      	movs	r3, #1
 800b206:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b20a:	e000      	b.n	800b20e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800b20c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b20e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b212:	2b00      	cmp	r3, #0
 800b214:	d10b      	bne.n	800b22e <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800b216:	4b6c      	ldr	r3, [pc, #432]	; (800b3c8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b218:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b21a:	f023 0107 	bic.w	r1, r3, #7
 800b21e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b222:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b226:	4a68      	ldr	r2, [pc, #416]	; (800b3c8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b228:	430b      	orrs	r3, r1
 800b22a:	6593      	str	r3, [r2, #88]	; 0x58
 800b22c:	e003      	b.n	800b236 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b22e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b232:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800b236:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b23a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b23e:	f002 0320 	and.w	r3, r2, #32
 800b242:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800b246:	2300      	movs	r3, #0
 800b248:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b24c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800b250:	460b      	mov	r3, r1
 800b252:	4313      	orrs	r3, r2
 800b254:	d055      	beq.n	800b302 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800b256:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b25a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b25e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b262:	d033      	beq.n	800b2cc <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800b264:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b268:	d82c      	bhi.n	800b2c4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800b26a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b26e:	d02f      	beq.n	800b2d0 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800b270:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b274:	d826      	bhi.n	800b2c4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800b276:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b27a:	d02b      	beq.n	800b2d4 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800b27c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b280:	d820      	bhi.n	800b2c4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800b282:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b286:	d012      	beq.n	800b2ae <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800b288:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b28c:	d81a      	bhi.n	800b2c4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d022      	beq.n	800b2d8 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800b292:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b296:	d115      	bne.n	800b2c4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b298:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b29c:	3308      	adds	r3, #8
 800b29e:	2100      	movs	r1, #0
 800b2a0:	4618      	mov	r0, r3
 800b2a2:	f001 fde5 	bl	800ce70 <RCCEx_PLL2_Config>
 800b2a6:	4603      	mov	r3, r0
 800b2a8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800b2ac:	e015      	b.n	800b2da <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b2ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b2b2:	3328      	adds	r3, #40	; 0x28
 800b2b4:	2102      	movs	r1, #2
 800b2b6:	4618      	mov	r0, r3
 800b2b8:	f001 fe8c 	bl	800cfd4 <RCCEx_PLL3_Config>
 800b2bc:	4603      	mov	r3, r0
 800b2be:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800b2c2:	e00a      	b.n	800b2da <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b2c4:	2301      	movs	r3, #1
 800b2c6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b2ca:	e006      	b.n	800b2da <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800b2cc:	bf00      	nop
 800b2ce:	e004      	b.n	800b2da <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800b2d0:	bf00      	nop
 800b2d2:	e002      	b.n	800b2da <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800b2d4:	bf00      	nop
 800b2d6:	e000      	b.n	800b2da <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800b2d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b2da:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d10b      	bne.n	800b2fa <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b2e2:	4b39      	ldr	r3, [pc, #228]	; (800b3c8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b2e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b2e6:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800b2ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b2ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b2f2:	4a35      	ldr	r2, [pc, #212]	; (800b3c8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b2f4:	430b      	orrs	r3, r1
 800b2f6:	6553      	str	r3, [r2, #84]	; 0x54
 800b2f8:	e003      	b.n	800b302 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b2fa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b2fe:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800b302:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b30a:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800b30e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800b312:	2300      	movs	r3, #0
 800b314:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800b318:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800b31c:	460b      	mov	r3, r1
 800b31e:	4313      	orrs	r3, r2
 800b320:	d058      	beq.n	800b3d4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800b322:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b326:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b32a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800b32e:	d033      	beq.n	800b398 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800b330:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800b334:	d82c      	bhi.n	800b390 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800b336:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b33a:	d02f      	beq.n	800b39c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800b33c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b340:	d826      	bhi.n	800b390 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800b342:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b346:	d02b      	beq.n	800b3a0 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800b348:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b34c:	d820      	bhi.n	800b390 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800b34e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b352:	d012      	beq.n	800b37a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800b354:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b358:	d81a      	bhi.n	800b390 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	d022      	beq.n	800b3a4 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800b35e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b362:	d115      	bne.n	800b390 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b364:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b368:	3308      	adds	r3, #8
 800b36a:	2100      	movs	r1, #0
 800b36c:	4618      	mov	r0, r3
 800b36e:	f001 fd7f 	bl	800ce70 <RCCEx_PLL2_Config>
 800b372:	4603      	mov	r3, r0
 800b374:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800b378:	e015      	b.n	800b3a6 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b37a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b37e:	3328      	adds	r3, #40	; 0x28
 800b380:	2102      	movs	r1, #2
 800b382:	4618      	mov	r0, r3
 800b384:	f001 fe26 	bl	800cfd4 <RCCEx_PLL3_Config>
 800b388:	4603      	mov	r3, r0
 800b38a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800b38e:	e00a      	b.n	800b3a6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b390:	2301      	movs	r3, #1
 800b392:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b396:	e006      	b.n	800b3a6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800b398:	bf00      	nop
 800b39a:	e004      	b.n	800b3a6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800b39c:	bf00      	nop
 800b39e:	e002      	b.n	800b3a6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800b3a0:	bf00      	nop
 800b3a2:	e000      	b.n	800b3a6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800b3a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b3a6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	d10e      	bne.n	800b3cc <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800b3ae:	4b06      	ldr	r3, [pc, #24]	; (800b3c8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b3b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b3b2:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800b3b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b3ba:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b3be:	4a02      	ldr	r2, [pc, #8]	; (800b3c8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b3c0:	430b      	orrs	r3, r1
 800b3c2:	6593      	str	r3, [r2, #88]	; 0x58
 800b3c4:	e006      	b.n	800b3d4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800b3c6:	bf00      	nop
 800b3c8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b3cc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b3d0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800b3d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b3d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3dc:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800b3e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b3e4:	2300      	movs	r3, #0
 800b3e6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b3ea:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800b3ee:	460b      	mov	r3, r1
 800b3f0:	4313      	orrs	r3, r2
 800b3f2:	d055      	beq.n	800b4a0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800b3f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b3f8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800b3fc:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800b400:	d033      	beq.n	800b46a <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800b402:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800b406:	d82c      	bhi.n	800b462 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800b408:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b40c:	d02f      	beq.n	800b46e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800b40e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b412:	d826      	bhi.n	800b462 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800b414:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800b418:	d02b      	beq.n	800b472 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800b41a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800b41e:	d820      	bhi.n	800b462 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800b420:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b424:	d012      	beq.n	800b44c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800b426:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b42a:	d81a      	bhi.n	800b462 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d022      	beq.n	800b476 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800b430:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b434:	d115      	bne.n	800b462 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b436:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b43a:	3308      	adds	r3, #8
 800b43c:	2100      	movs	r1, #0
 800b43e:	4618      	mov	r0, r3
 800b440:	f001 fd16 	bl	800ce70 <RCCEx_PLL2_Config>
 800b444:	4603      	mov	r3, r0
 800b446:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800b44a:	e015      	b.n	800b478 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b44c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b450:	3328      	adds	r3, #40	; 0x28
 800b452:	2102      	movs	r1, #2
 800b454:	4618      	mov	r0, r3
 800b456:	f001 fdbd 	bl	800cfd4 <RCCEx_PLL3_Config>
 800b45a:	4603      	mov	r3, r0
 800b45c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800b460:	e00a      	b.n	800b478 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b462:	2301      	movs	r3, #1
 800b464:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b468:	e006      	b.n	800b478 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800b46a:	bf00      	nop
 800b46c:	e004      	b.n	800b478 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800b46e:	bf00      	nop
 800b470:	e002      	b.n	800b478 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800b472:	bf00      	nop
 800b474:	e000      	b.n	800b478 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800b476:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b478:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d10b      	bne.n	800b498 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800b480:	4ba1      	ldr	r3, [pc, #644]	; (800b708 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b482:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b484:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800b488:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b48c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800b490:	4a9d      	ldr	r2, [pc, #628]	; (800b708 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b492:	430b      	orrs	r3, r1
 800b494:	6593      	str	r3, [r2, #88]	; 0x58
 800b496:	e003      	b.n	800b4a0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b498:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b49c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800b4a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b4a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4a8:	f002 0308 	and.w	r3, r2, #8
 800b4ac:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b4b0:	2300      	movs	r3, #0
 800b4b2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800b4b6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800b4ba:	460b      	mov	r3, r1
 800b4bc:	4313      	orrs	r3, r2
 800b4be:	d01e      	beq.n	800b4fe <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800b4c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b4c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b4c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b4cc:	d10c      	bne.n	800b4e8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b4ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b4d2:	3328      	adds	r3, #40	; 0x28
 800b4d4:	2102      	movs	r1, #2
 800b4d6:	4618      	mov	r0, r3
 800b4d8:	f001 fd7c 	bl	800cfd4 <RCCEx_PLL3_Config>
 800b4dc:	4603      	mov	r3, r0
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d002      	beq.n	800b4e8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800b4e2:	2301      	movs	r3, #1
 800b4e4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800b4e8:	4b87      	ldr	r3, [pc, #540]	; (800b708 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b4ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b4ec:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b4f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b4f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b4f8:	4a83      	ldr	r2, [pc, #524]	; (800b708 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b4fa:	430b      	orrs	r3, r1
 800b4fc:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800b4fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b502:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b506:	f002 0310 	and.w	r3, r2, #16
 800b50a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800b50e:	2300      	movs	r3, #0
 800b510:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800b514:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800b518:	460b      	mov	r3, r1
 800b51a:	4313      	orrs	r3, r2
 800b51c:	d01e      	beq.n	800b55c <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800b51e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b522:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b526:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b52a:	d10c      	bne.n	800b546 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b52c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b530:	3328      	adds	r3, #40	; 0x28
 800b532:	2102      	movs	r1, #2
 800b534:	4618      	mov	r0, r3
 800b536:	f001 fd4d 	bl	800cfd4 <RCCEx_PLL3_Config>
 800b53a:	4603      	mov	r3, r0
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d002      	beq.n	800b546 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800b540:	2301      	movs	r3, #1
 800b542:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800b546:	4b70      	ldr	r3, [pc, #448]	; (800b708 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b548:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b54a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800b54e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b552:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b556:	4a6c      	ldr	r2, [pc, #432]	; (800b708 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b558:	430b      	orrs	r3, r1
 800b55a:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800b55c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b560:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b564:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800b568:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b56c:	2300      	movs	r3, #0
 800b56e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b572:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800b576:	460b      	mov	r3, r1
 800b578:	4313      	orrs	r3, r2
 800b57a:	d03e      	beq.n	800b5fa <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800b57c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b580:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800b584:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b588:	d022      	beq.n	800b5d0 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800b58a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b58e:	d81b      	bhi.n	800b5c8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800b590:	2b00      	cmp	r3, #0
 800b592:	d003      	beq.n	800b59c <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800b594:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b598:	d00b      	beq.n	800b5b2 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800b59a:	e015      	b.n	800b5c8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b59c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b5a0:	3308      	adds	r3, #8
 800b5a2:	2100      	movs	r1, #0
 800b5a4:	4618      	mov	r0, r3
 800b5a6:	f001 fc63 	bl	800ce70 <RCCEx_PLL2_Config>
 800b5aa:	4603      	mov	r3, r0
 800b5ac:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800b5b0:	e00f      	b.n	800b5d2 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b5b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b5b6:	3328      	adds	r3, #40	; 0x28
 800b5b8:	2102      	movs	r1, #2
 800b5ba:	4618      	mov	r0, r3
 800b5bc:	f001 fd0a 	bl	800cfd4 <RCCEx_PLL3_Config>
 800b5c0:	4603      	mov	r3, r0
 800b5c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800b5c6:	e004      	b.n	800b5d2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b5c8:	2301      	movs	r3, #1
 800b5ca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b5ce:	e000      	b.n	800b5d2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800b5d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b5d2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d10b      	bne.n	800b5f2 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800b5da:	4b4b      	ldr	r3, [pc, #300]	; (800b708 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b5dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b5de:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800b5e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b5e6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800b5ea:	4a47      	ldr	r2, [pc, #284]	; (800b708 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b5ec:	430b      	orrs	r3, r1
 800b5ee:	6593      	str	r3, [r2, #88]	; 0x58
 800b5f0:	e003      	b.n	800b5fa <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b5f2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b5f6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800b5fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b5fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b602:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800b606:	67bb      	str	r3, [r7, #120]	; 0x78
 800b608:	2300      	movs	r3, #0
 800b60a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b60c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800b610:	460b      	mov	r3, r1
 800b612:	4313      	orrs	r3, r2
 800b614:	d03b      	beq.n	800b68e <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800b616:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b61a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b61e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b622:	d01f      	beq.n	800b664 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800b624:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b628:	d818      	bhi.n	800b65c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800b62a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b62e:	d003      	beq.n	800b638 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800b630:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b634:	d007      	beq.n	800b646 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800b636:	e011      	b.n	800b65c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b638:	4b33      	ldr	r3, [pc, #204]	; (800b708 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b63a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b63c:	4a32      	ldr	r2, [pc, #200]	; (800b708 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b63e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b642:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800b644:	e00f      	b.n	800b666 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b646:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b64a:	3328      	adds	r3, #40	; 0x28
 800b64c:	2101      	movs	r1, #1
 800b64e:	4618      	mov	r0, r3
 800b650:	f001 fcc0 	bl	800cfd4 <RCCEx_PLL3_Config>
 800b654:	4603      	mov	r3, r0
 800b656:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800b65a:	e004      	b.n	800b666 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b65c:	2301      	movs	r3, #1
 800b65e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b662:	e000      	b.n	800b666 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800b664:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b666:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d10b      	bne.n	800b686 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800b66e:	4b26      	ldr	r3, [pc, #152]	; (800b708 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b670:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b672:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800b676:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b67a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b67e:	4a22      	ldr	r2, [pc, #136]	; (800b708 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b680:	430b      	orrs	r3, r1
 800b682:	6553      	str	r3, [r2, #84]	; 0x54
 800b684:	e003      	b.n	800b68e <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b686:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b68a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800b68e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b692:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b696:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800b69a:	673b      	str	r3, [r7, #112]	; 0x70
 800b69c:	2300      	movs	r3, #0
 800b69e:	677b      	str	r3, [r7, #116]	; 0x74
 800b6a0:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800b6a4:	460b      	mov	r3, r1
 800b6a6:	4313      	orrs	r3, r2
 800b6a8:	d034      	beq.n	800b714 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800b6aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b6ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d003      	beq.n	800b6bc <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800b6b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b6b8:	d007      	beq.n	800b6ca <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800b6ba:	e011      	b.n	800b6e0 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b6bc:	4b12      	ldr	r3, [pc, #72]	; (800b708 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b6be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6c0:	4a11      	ldr	r2, [pc, #68]	; (800b708 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b6c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b6c6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800b6c8:	e00e      	b.n	800b6e8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b6ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b6ce:	3308      	adds	r3, #8
 800b6d0:	2102      	movs	r1, #2
 800b6d2:	4618      	mov	r0, r3
 800b6d4:	f001 fbcc 	bl	800ce70 <RCCEx_PLL2_Config>
 800b6d8:	4603      	mov	r3, r0
 800b6da:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800b6de:	e003      	b.n	800b6e8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800b6e0:	2301      	movs	r3, #1
 800b6e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b6e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b6e8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	d10d      	bne.n	800b70c <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800b6f0:	4b05      	ldr	r3, [pc, #20]	; (800b708 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b6f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b6f4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b6f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b6fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b6fe:	4a02      	ldr	r2, [pc, #8]	; (800b708 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b700:	430b      	orrs	r3, r1
 800b702:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b704:	e006      	b.n	800b714 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800b706:	bf00      	nop
 800b708:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b70c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b710:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800b714:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b71c:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800b720:	66bb      	str	r3, [r7, #104]	; 0x68
 800b722:	2300      	movs	r3, #0
 800b724:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b726:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800b72a:	460b      	mov	r3, r1
 800b72c:	4313      	orrs	r3, r2
 800b72e:	d00c      	beq.n	800b74a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b730:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b734:	3328      	adds	r3, #40	; 0x28
 800b736:	2102      	movs	r1, #2
 800b738:	4618      	mov	r0, r3
 800b73a:	f001 fc4b 	bl	800cfd4 <RCCEx_PLL3_Config>
 800b73e:	4603      	mov	r3, r0
 800b740:	2b00      	cmp	r3, #0
 800b742:	d002      	beq.n	800b74a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800b744:	2301      	movs	r3, #1
 800b746:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800b74a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b74e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b752:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800b756:	663b      	str	r3, [r7, #96]	; 0x60
 800b758:	2300      	movs	r3, #0
 800b75a:	667b      	str	r3, [r7, #100]	; 0x64
 800b75c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800b760:	460b      	mov	r3, r1
 800b762:	4313      	orrs	r3, r2
 800b764:	d038      	beq.n	800b7d8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800b766:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b76a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b76e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b772:	d018      	beq.n	800b7a6 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800b774:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b778:	d811      	bhi.n	800b79e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800b77a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b77e:	d014      	beq.n	800b7aa <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800b780:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b784:	d80b      	bhi.n	800b79e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800b786:	2b00      	cmp	r3, #0
 800b788:	d011      	beq.n	800b7ae <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800b78a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b78e:	d106      	bne.n	800b79e <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b790:	4bc3      	ldr	r3, [pc, #780]	; (800baa0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b794:	4ac2      	ldr	r2, [pc, #776]	; (800baa0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b796:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b79a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800b79c:	e008      	b.n	800b7b0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b79e:	2301      	movs	r3, #1
 800b7a0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b7a4:	e004      	b.n	800b7b0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800b7a6:	bf00      	nop
 800b7a8:	e002      	b.n	800b7b0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800b7aa:	bf00      	nop
 800b7ac:	e000      	b.n	800b7b0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800b7ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b7b0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d10b      	bne.n	800b7d0 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800b7b8:	4bb9      	ldr	r3, [pc, #740]	; (800baa0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b7ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b7bc:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800b7c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b7c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b7c8:	4ab5      	ldr	r2, [pc, #724]	; (800baa0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b7ca:	430b      	orrs	r3, r1
 800b7cc:	6553      	str	r3, [r2, #84]	; 0x54
 800b7ce:	e003      	b.n	800b7d8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b7d0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b7d4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800b7d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b7dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7e0:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800b7e4:	65bb      	str	r3, [r7, #88]	; 0x58
 800b7e6:	2300      	movs	r3, #0
 800b7e8:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b7ea:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800b7ee:	460b      	mov	r3, r1
 800b7f0:	4313      	orrs	r3, r2
 800b7f2:	d009      	beq.n	800b808 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800b7f4:	4baa      	ldr	r3, [pc, #680]	; (800baa0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b7f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b7f8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800b7fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b800:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b802:	4aa7      	ldr	r2, [pc, #668]	; (800baa0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b804:	430b      	orrs	r3, r1
 800b806:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800b808:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b80c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b810:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800b814:	653b      	str	r3, [r7, #80]	; 0x50
 800b816:	2300      	movs	r3, #0
 800b818:	657b      	str	r3, [r7, #84]	; 0x54
 800b81a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800b81e:	460b      	mov	r3, r1
 800b820:	4313      	orrs	r3, r2
 800b822:	d00a      	beq.n	800b83a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800b824:	4b9e      	ldr	r3, [pc, #632]	; (800baa0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b826:	691b      	ldr	r3, [r3, #16]
 800b828:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800b82c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b830:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800b834:	4a9a      	ldr	r2, [pc, #616]	; (800baa0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b836:	430b      	orrs	r3, r1
 800b838:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800b83a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b83e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b842:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800b846:	64bb      	str	r3, [r7, #72]	; 0x48
 800b848:	2300      	movs	r3, #0
 800b84a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b84c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800b850:	460b      	mov	r3, r1
 800b852:	4313      	orrs	r3, r2
 800b854:	d009      	beq.n	800b86a <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800b856:	4b92      	ldr	r3, [pc, #584]	; (800baa0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b858:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b85a:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800b85e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b862:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b864:	4a8e      	ldr	r2, [pc, #568]	; (800baa0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b866:	430b      	orrs	r3, r1
 800b868:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800b86a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b86e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b872:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800b876:	643b      	str	r3, [r7, #64]	; 0x40
 800b878:	2300      	movs	r3, #0
 800b87a:	647b      	str	r3, [r7, #68]	; 0x44
 800b87c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800b880:	460b      	mov	r3, r1
 800b882:	4313      	orrs	r3, r2
 800b884:	d00e      	beq.n	800b8a4 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800b886:	4b86      	ldr	r3, [pc, #536]	; (800baa0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b888:	691b      	ldr	r3, [r3, #16]
 800b88a:	4a85      	ldr	r2, [pc, #532]	; (800baa0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b88c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b890:	6113      	str	r3, [r2, #16]
 800b892:	4b83      	ldr	r3, [pc, #524]	; (800baa0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b894:	6919      	ldr	r1, [r3, #16]
 800b896:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b89a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800b89e:	4a80      	ldr	r2, [pc, #512]	; (800baa0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b8a0:	430b      	orrs	r3, r1
 800b8a2:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800b8a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b8a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8ac:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800b8b0:	63bb      	str	r3, [r7, #56]	; 0x38
 800b8b2:	2300      	movs	r3, #0
 800b8b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b8b6:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800b8ba:	460b      	mov	r3, r1
 800b8bc:	4313      	orrs	r3, r2
 800b8be:	d009      	beq.n	800b8d4 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800b8c0:	4b77      	ldr	r3, [pc, #476]	; (800baa0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b8c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b8c4:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800b8c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b8cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b8ce:	4a74      	ldr	r2, [pc, #464]	; (800baa0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b8d0:	430b      	orrs	r3, r1
 800b8d2:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800b8d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b8d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8dc:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800b8e0:	633b      	str	r3, [r7, #48]	; 0x30
 800b8e2:	2300      	movs	r3, #0
 800b8e4:	637b      	str	r3, [r7, #52]	; 0x34
 800b8e6:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800b8ea:	460b      	mov	r3, r1
 800b8ec:	4313      	orrs	r3, r2
 800b8ee:	d00a      	beq.n	800b906 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800b8f0:	4b6b      	ldr	r3, [pc, #428]	; (800baa0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b8f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b8f4:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800b8f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b8fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b900:	4a67      	ldr	r2, [pc, #412]	; (800baa0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b902:	430b      	orrs	r3, r1
 800b904:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800b906:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b90a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b90e:	2100      	movs	r1, #0
 800b910:	62b9      	str	r1, [r7, #40]	; 0x28
 800b912:	f003 0301 	and.w	r3, r3, #1
 800b916:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b918:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800b91c:	460b      	mov	r3, r1
 800b91e:	4313      	orrs	r3, r2
 800b920:	d011      	beq.n	800b946 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b922:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b926:	3308      	adds	r3, #8
 800b928:	2100      	movs	r1, #0
 800b92a:	4618      	mov	r0, r3
 800b92c:	f001 faa0 	bl	800ce70 <RCCEx_PLL2_Config>
 800b930:	4603      	mov	r3, r0
 800b932:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800b936:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d003      	beq.n	800b946 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b93e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b942:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800b946:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b94a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b94e:	2100      	movs	r1, #0
 800b950:	6239      	str	r1, [r7, #32]
 800b952:	f003 0302 	and.w	r3, r3, #2
 800b956:	627b      	str	r3, [r7, #36]	; 0x24
 800b958:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800b95c:	460b      	mov	r3, r1
 800b95e:	4313      	orrs	r3, r2
 800b960:	d011      	beq.n	800b986 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b962:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b966:	3308      	adds	r3, #8
 800b968:	2101      	movs	r1, #1
 800b96a:	4618      	mov	r0, r3
 800b96c:	f001 fa80 	bl	800ce70 <RCCEx_PLL2_Config>
 800b970:	4603      	mov	r3, r0
 800b972:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800b976:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d003      	beq.n	800b986 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b97e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b982:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800b986:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b98a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b98e:	2100      	movs	r1, #0
 800b990:	61b9      	str	r1, [r7, #24]
 800b992:	f003 0304 	and.w	r3, r3, #4
 800b996:	61fb      	str	r3, [r7, #28]
 800b998:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800b99c:	460b      	mov	r3, r1
 800b99e:	4313      	orrs	r3, r2
 800b9a0:	d011      	beq.n	800b9c6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b9a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b9a6:	3308      	adds	r3, #8
 800b9a8:	2102      	movs	r1, #2
 800b9aa:	4618      	mov	r0, r3
 800b9ac:	f001 fa60 	bl	800ce70 <RCCEx_PLL2_Config>
 800b9b0:	4603      	mov	r3, r0
 800b9b2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800b9b6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d003      	beq.n	800b9c6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b9be:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b9c2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800b9c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b9ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9ce:	2100      	movs	r1, #0
 800b9d0:	6139      	str	r1, [r7, #16]
 800b9d2:	f003 0308 	and.w	r3, r3, #8
 800b9d6:	617b      	str	r3, [r7, #20]
 800b9d8:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800b9dc:	460b      	mov	r3, r1
 800b9de:	4313      	orrs	r3, r2
 800b9e0:	d011      	beq.n	800ba06 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b9e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b9e6:	3328      	adds	r3, #40	; 0x28
 800b9e8:	2100      	movs	r1, #0
 800b9ea:	4618      	mov	r0, r3
 800b9ec:	f001 faf2 	bl	800cfd4 <RCCEx_PLL3_Config>
 800b9f0:	4603      	mov	r3, r0
 800b9f2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800b9f6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d003      	beq.n	800ba06 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b9fe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ba02:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800ba06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba0e:	2100      	movs	r1, #0
 800ba10:	60b9      	str	r1, [r7, #8]
 800ba12:	f003 0310 	and.w	r3, r3, #16
 800ba16:	60fb      	str	r3, [r7, #12]
 800ba18:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800ba1c:	460b      	mov	r3, r1
 800ba1e:	4313      	orrs	r3, r2
 800ba20:	d011      	beq.n	800ba46 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ba22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba26:	3328      	adds	r3, #40	; 0x28
 800ba28:	2101      	movs	r1, #1
 800ba2a:	4618      	mov	r0, r3
 800ba2c:	f001 fad2 	bl	800cfd4 <RCCEx_PLL3_Config>
 800ba30:	4603      	mov	r3, r0
 800ba32:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800ba36:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d003      	beq.n	800ba46 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba3e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ba42:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800ba46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba4e:	2100      	movs	r1, #0
 800ba50:	6039      	str	r1, [r7, #0]
 800ba52:	f003 0320 	and.w	r3, r3, #32
 800ba56:	607b      	str	r3, [r7, #4]
 800ba58:	e9d7 1200 	ldrd	r1, r2, [r7]
 800ba5c:	460b      	mov	r3, r1
 800ba5e:	4313      	orrs	r3, r2
 800ba60:	d011      	beq.n	800ba86 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ba62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba66:	3328      	adds	r3, #40	; 0x28
 800ba68:	2102      	movs	r1, #2
 800ba6a:	4618      	mov	r0, r3
 800ba6c:	f001 fab2 	bl	800cfd4 <RCCEx_PLL3_Config>
 800ba70:	4603      	mov	r3, r0
 800ba72:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800ba76:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	d003      	beq.n	800ba86 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba7e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ba82:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 800ba86:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	d101      	bne.n	800ba92 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800ba8e:	2300      	movs	r3, #0
 800ba90:	e000      	b.n	800ba94 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800ba92:	2301      	movs	r3, #1
}
 800ba94:	4618      	mov	r0, r3
 800ba96:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800ba9a:	46bd      	mov	sp, r7
 800ba9c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800baa0:	58024400 	.word	0x58024400

0800baa4 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800baa4:	b580      	push	{r7, lr}
 800baa6:	b090      	sub	sp, #64	; 0x40
 800baa8:	af00      	add	r7, sp, #0
 800baaa:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800baae:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bab2:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800bab6:	430b      	orrs	r3, r1
 800bab8:	f040 8094 	bne.w	800bbe4 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800babc:	4b9e      	ldr	r3, [pc, #632]	; (800bd38 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800babe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bac0:	f003 0307 	and.w	r3, r3, #7
 800bac4:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800bac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bac8:	2b04      	cmp	r3, #4
 800baca:	f200 8087 	bhi.w	800bbdc <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800bace:	a201      	add	r2, pc, #4	; (adr r2, 800bad4 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800bad0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bad4:	0800bae9 	.word	0x0800bae9
 800bad8:	0800bb11 	.word	0x0800bb11
 800badc:	0800bb39 	.word	0x0800bb39
 800bae0:	0800bbd5 	.word	0x0800bbd5
 800bae4:	0800bb61 	.word	0x0800bb61
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800bae8:	4b93      	ldr	r3, [pc, #588]	; (800bd38 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800baf0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800baf4:	d108      	bne.n	800bb08 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800baf6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bafa:	4618      	mov	r0, r3
 800bafc:	f001 f810 	bl	800cb20 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bb00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb02:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bb04:	f000 bd45 	b.w	800c592 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bb08:	2300      	movs	r3, #0
 800bb0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bb0c:	f000 bd41 	b.w	800c592 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bb10:	4b89      	ldr	r3, [pc, #548]	; (800bd38 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bb18:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bb1c:	d108      	bne.n	800bb30 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bb1e:	f107 0318 	add.w	r3, r7, #24
 800bb22:	4618      	mov	r0, r3
 800bb24:	f000 fd54 	bl	800c5d0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800bb28:	69bb      	ldr	r3, [r7, #24]
 800bb2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bb2c:	f000 bd31 	b.w	800c592 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bb30:	2300      	movs	r3, #0
 800bb32:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bb34:	f000 bd2d 	b.w	800c592 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800bb38:	4b7f      	ldr	r3, [pc, #508]	; (800bd38 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bb40:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bb44:	d108      	bne.n	800bb58 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bb46:	f107 030c 	add.w	r3, r7, #12
 800bb4a:	4618      	mov	r0, r3
 800bb4c:	f000 fe94 	bl	800c878 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bb54:	f000 bd1d 	b.w	800c592 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bb58:	2300      	movs	r3, #0
 800bb5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bb5c:	f000 bd19 	b.w	800c592 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800bb60:	4b75      	ldr	r3, [pc, #468]	; (800bd38 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bb62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bb64:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800bb68:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800bb6a:	4b73      	ldr	r3, [pc, #460]	; (800bd38 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	f003 0304 	and.w	r3, r3, #4
 800bb72:	2b04      	cmp	r3, #4
 800bb74:	d10c      	bne.n	800bb90 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800bb76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	d109      	bne.n	800bb90 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bb7c:	4b6e      	ldr	r3, [pc, #440]	; (800bd38 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	08db      	lsrs	r3, r3, #3
 800bb82:	f003 0303 	and.w	r3, r3, #3
 800bb86:	4a6d      	ldr	r2, [pc, #436]	; (800bd3c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800bb88:	fa22 f303 	lsr.w	r3, r2, r3
 800bb8c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bb8e:	e01f      	b.n	800bbd0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800bb90:	4b69      	ldr	r3, [pc, #420]	; (800bd38 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bb98:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bb9c:	d106      	bne.n	800bbac <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800bb9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bba0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bba4:	d102      	bne.n	800bbac <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800bba6:	4b66      	ldr	r3, [pc, #408]	; (800bd40 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800bba8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bbaa:	e011      	b.n	800bbd0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800bbac:	4b62      	ldr	r3, [pc, #392]	; (800bd38 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bbb4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bbb8:	d106      	bne.n	800bbc8 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800bbba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bbbc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bbc0:	d102      	bne.n	800bbc8 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800bbc2:	4b60      	ldr	r3, [pc, #384]	; (800bd44 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800bbc4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bbc6:	e003      	b.n	800bbd0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800bbc8:	2300      	movs	r3, #0
 800bbca:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800bbcc:	f000 bce1 	b.w	800c592 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800bbd0:	f000 bcdf 	b.w	800c592 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800bbd4:	4b5c      	ldr	r3, [pc, #368]	; (800bd48 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800bbd6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bbd8:	f000 bcdb 	b.w	800c592 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800bbdc:	2300      	movs	r3, #0
 800bbde:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bbe0:	f000 bcd7 	b.w	800c592 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800bbe4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bbe8:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 800bbec:	430b      	orrs	r3, r1
 800bbee:	f040 80ad 	bne.w	800bd4c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800bbf2:	4b51      	ldr	r3, [pc, #324]	; (800bd38 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bbf4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bbf6:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800bbfa:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800bbfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbfe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bc02:	d056      	beq.n	800bcb2 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800bc04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bc0a:	f200 8090 	bhi.w	800bd2e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800bc0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc10:	2bc0      	cmp	r3, #192	; 0xc0
 800bc12:	f000 8088 	beq.w	800bd26 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800bc16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc18:	2bc0      	cmp	r3, #192	; 0xc0
 800bc1a:	f200 8088 	bhi.w	800bd2e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800bc1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc20:	2b80      	cmp	r3, #128	; 0x80
 800bc22:	d032      	beq.n	800bc8a <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800bc24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc26:	2b80      	cmp	r3, #128	; 0x80
 800bc28:	f200 8081 	bhi.w	800bd2e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800bc2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	d003      	beq.n	800bc3a <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800bc32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc34:	2b40      	cmp	r3, #64	; 0x40
 800bc36:	d014      	beq.n	800bc62 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800bc38:	e079      	b.n	800bd2e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800bc3a:	4b3f      	ldr	r3, [pc, #252]	; (800bd38 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bc42:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bc46:	d108      	bne.n	800bc5a <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bc48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bc4c:	4618      	mov	r0, r3
 800bc4e:	f000 ff67 	bl	800cb20 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bc52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc54:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bc56:	f000 bc9c 	b.w	800c592 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bc5a:	2300      	movs	r3, #0
 800bc5c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bc5e:	f000 bc98 	b.w	800c592 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bc62:	4b35      	ldr	r3, [pc, #212]	; (800bd38 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bc6a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bc6e:	d108      	bne.n	800bc82 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bc70:	f107 0318 	add.w	r3, r7, #24
 800bc74:	4618      	mov	r0, r3
 800bc76:	f000 fcab 	bl	800c5d0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800bc7a:	69bb      	ldr	r3, [r7, #24]
 800bc7c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bc7e:	f000 bc88 	b.w	800c592 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bc82:	2300      	movs	r3, #0
 800bc84:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bc86:	f000 bc84 	b.w	800c592 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800bc8a:	4b2b      	ldr	r3, [pc, #172]	; (800bd38 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bc92:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bc96:	d108      	bne.n	800bcaa <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bc98:	f107 030c 	add.w	r3, r7, #12
 800bc9c:	4618      	mov	r0, r3
 800bc9e:	f000 fdeb 	bl	800c878 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800bca2:	68fb      	ldr	r3, [r7, #12]
 800bca4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bca6:	f000 bc74 	b.w	800c592 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bcaa:	2300      	movs	r3, #0
 800bcac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bcae:	f000 bc70 	b.w	800c592 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800bcb2:	4b21      	ldr	r3, [pc, #132]	; (800bd38 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bcb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bcb6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800bcba:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800bcbc:	4b1e      	ldr	r3, [pc, #120]	; (800bd38 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	f003 0304 	and.w	r3, r3, #4
 800bcc4:	2b04      	cmp	r3, #4
 800bcc6:	d10c      	bne.n	800bce2 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800bcc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	d109      	bne.n	800bce2 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bcce:	4b1a      	ldr	r3, [pc, #104]	; (800bd38 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bcd0:	681b      	ldr	r3, [r3, #0]
 800bcd2:	08db      	lsrs	r3, r3, #3
 800bcd4:	f003 0303 	and.w	r3, r3, #3
 800bcd8:	4a18      	ldr	r2, [pc, #96]	; (800bd3c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800bcda:	fa22 f303 	lsr.w	r3, r2, r3
 800bcde:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bce0:	e01f      	b.n	800bd22 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800bce2:	4b15      	ldr	r3, [pc, #84]	; (800bd38 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bcea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bcee:	d106      	bne.n	800bcfe <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800bcf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bcf2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bcf6:	d102      	bne.n	800bcfe <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800bcf8:	4b11      	ldr	r3, [pc, #68]	; (800bd40 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800bcfa:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bcfc:	e011      	b.n	800bd22 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800bcfe:	4b0e      	ldr	r3, [pc, #56]	; (800bd38 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bd00:	681b      	ldr	r3, [r3, #0]
 800bd02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bd06:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bd0a:	d106      	bne.n	800bd1a <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800bd0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd0e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bd12:	d102      	bne.n	800bd1a <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800bd14:	4b0b      	ldr	r3, [pc, #44]	; (800bd44 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800bd16:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bd18:	e003      	b.n	800bd22 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800bd1a:	2300      	movs	r3, #0
 800bd1c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800bd1e:	f000 bc38 	b.w	800c592 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800bd22:	f000 bc36 	b.w	800c592 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800bd26:	4b08      	ldr	r3, [pc, #32]	; (800bd48 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800bd28:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bd2a:	f000 bc32 	b.w	800c592 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800bd2e:	2300      	movs	r3, #0
 800bd30:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bd32:	f000 bc2e 	b.w	800c592 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800bd36:	bf00      	nop
 800bd38:	58024400 	.word	0x58024400
 800bd3c:	03d09000 	.word	0x03d09000
 800bd40:	003d0900 	.word	0x003d0900
 800bd44:	007f1b10 	.word	0x007f1b10
 800bd48:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800bd4c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bd50:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800bd54:	430b      	orrs	r3, r1
 800bd56:	f040 809c 	bne.w	800be92 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800bd5a:	4b9e      	ldr	r3, [pc, #632]	; (800bfd4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800bd5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bd5e:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800bd62:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800bd64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd66:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800bd6a:	d054      	beq.n	800be16 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800bd6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd6e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800bd72:	f200 808b 	bhi.w	800be8c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800bd76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd78:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800bd7c:	f000 8083 	beq.w	800be86 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800bd80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd82:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800bd86:	f200 8081 	bhi.w	800be8c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800bd8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd8c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bd90:	d02f      	beq.n	800bdf2 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800bd92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd94:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bd98:	d878      	bhi.n	800be8c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800bd9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	d004      	beq.n	800bdaa <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800bda0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bda2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800bda6:	d012      	beq.n	800bdce <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800bda8:	e070      	b.n	800be8c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800bdaa:	4b8a      	ldr	r3, [pc, #552]	; (800bfd4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bdb2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bdb6:	d107      	bne.n	800bdc8 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bdb8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bdbc:	4618      	mov	r0, r3
 800bdbe:	f000 feaf 	bl	800cb20 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bdc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdc4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bdc6:	e3e4      	b.n	800c592 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bdc8:	2300      	movs	r3, #0
 800bdca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bdcc:	e3e1      	b.n	800c592 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bdce:	4b81      	ldr	r3, [pc, #516]	; (800bfd4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800bdd0:	681b      	ldr	r3, [r3, #0]
 800bdd2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bdd6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bdda:	d107      	bne.n	800bdec <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bddc:	f107 0318 	add.w	r3, r7, #24
 800bde0:	4618      	mov	r0, r3
 800bde2:	f000 fbf5 	bl	800c5d0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800bde6:	69bb      	ldr	r3, [r7, #24]
 800bde8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bdea:	e3d2      	b.n	800c592 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bdec:	2300      	movs	r3, #0
 800bdee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bdf0:	e3cf      	b.n	800c592 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800bdf2:	4b78      	ldr	r3, [pc, #480]	; (800bfd4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800bdf4:	681b      	ldr	r3, [r3, #0]
 800bdf6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bdfa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bdfe:	d107      	bne.n	800be10 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800be00:	f107 030c 	add.w	r3, r7, #12
 800be04:	4618      	mov	r0, r3
 800be06:	f000 fd37 	bl	800c878 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800be0a:	68fb      	ldr	r3, [r7, #12]
 800be0c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800be0e:	e3c0      	b.n	800c592 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800be10:	2300      	movs	r3, #0
 800be12:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800be14:	e3bd      	b.n	800c592 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800be16:	4b6f      	ldr	r3, [pc, #444]	; (800bfd4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800be18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800be1a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800be1e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800be20:	4b6c      	ldr	r3, [pc, #432]	; (800bfd4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	f003 0304 	and.w	r3, r3, #4
 800be28:	2b04      	cmp	r3, #4
 800be2a:	d10c      	bne.n	800be46 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800be2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be2e:	2b00      	cmp	r3, #0
 800be30:	d109      	bne.n	800be46 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800be32:	4b68      	ldr	r3, [pc, #416]	; (800bfd4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	08db      	lsrs	r3, r3, #3
 800be38:	f003 0303 	and.w	r3, r3, #3
 800be3c:	4a66      	ldr	r2, [pc, #408]	; (800bfd8 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800be3e:	fa22 f303 	lsr.w	r3, r2, r3
 800be42:	63fb      	str	r3, [r7, #60]	; 0x3c
 800be44:	e01e      	b.n	800be84 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800be46:	4b63      	ldr	r3, [pc, #396]	; (800bfd4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800be4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800be52:	d106      	bne.n	800be62 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800be54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be56:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800be5a:	d102      	bne.n	800be62 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800be5c:	4b5f      	ldr	r3, [pc, #380]	; (800bfdc <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800be5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800be60:	e010      	b.n	800be84 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800be62:	4b5c      	ldr	r3, [pc, #368]	; (800bfd4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800be6a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800be6e:	d106      	bne.n	800be7e <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800be70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be72:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800be76:	d102      	bne.n	800be7e <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800be78:	4b59      	ldr	r3, [pc, #356]	; (800bfe0 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800be7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800be7c:	e002      	b.n	800be84 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800be7e:	2300      	movs	r3, #0
 800be80:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800be82:	e386      	b.n	800c592 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800be84:	e385      	b.n	800c592 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800be86:	4b57      	ldr	r3, [pc, #348]	; (800bfe4 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800be88:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800be8a:	e382      	b.n	800c592 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800be8c:	2300      	movs	r3, #0
 800be8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800be90:	e37f      	b.n	800c592 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800be92:	e9d7 2300 	ldrd	r2, r3, [r7]
 800be96:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800be9a:	430b      	orrs	r3, r1
 800be9c:	f040 80a7 	bne.w	800bfee <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800bea0:	4b4c      	ldr	r3, [pc, #304]	; (800bfd4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800bea2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bea4:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800bea8:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800beaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800beac:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800beb0:	d055      	beq.n	800bf5e <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800beb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800beb4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800beb8:	f200 8096 	bhi.w	800bfe8 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800bebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bebe:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800bec2:	f000 8084 	beq.w	800bfce <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800bec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bec8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800becc:	f200 808c 	bhi.w	800bfe8 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800bed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bed2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bed6:	d030      	beq.n	800bf3a <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800bed8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800beda:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bede:	f200 8083 	bhi.w	800bfe8 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800bee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d004      	beq.n	800bef2 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800bee8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800beea:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800beee:	d012      	beq.n	800bf16 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800bef0:	e07a      	b.n	800bfe8 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800bef2:	4b38      	ldr	r3, [pc, #224]	; (800bfd4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800bef4:	681b      	ldr	r3, [r3, #0]
 800bef6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800befa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800befe:	d107      	bne.n	800bf10 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bf00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bf04:	4618      	mov	r0, r3
 800bf06:	f000 fe0b 	bl	800cb20 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bf0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf0c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bf0e:	e340      	b.n	800c592 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bf10:	2300      	movs	r3, #0
 800bf12:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bf14:	e33d      	b.n	800c592 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bf16:	4b2f      	ldr	r3, [pc, #188]	; (800bfd4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bf1e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bf22:	d107      	bne.n	800bf34 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bf24:	f107 0318 	add.w	r3, r7, #24
 800bf28:	4618      	mov	r0, r3
 800bf2a:	f000 fb51 	bl	800c5d0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800bf2e:	69bb      	ldr	r3, [r7, #24]
 800bf30:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bf32:	e32e      	b.n	800c592 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bf34:	2300      	movs	r3, #0
 800bf36:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bf38:	e32b      	b.n	800c592 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800bf3a:	4b26      	ldr	r3, [pc, #152]	; (800bfd4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bf42:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bf46:	d107      	bne.n	800bf58 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bf48:	f107 030c 	add.w	r3, r7, #12
 800bf4c:	4618      	mov	r0, r3
 800bf4e:	f000 fc93 	bl	800c878 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800bf52:	68fb      	ldr	r3, [r7, #12]
 800bf54:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bf56:	e31c      	b.n	800c592 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bf58:	2300      	movs	r3, #0
 800bf5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bf5c:	e319      	b.n	800c592 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800bf5e:	4b1d      	ldr	r3, [pc, #116]	; (800bfd4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800bf60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bf62:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800bf66:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800bf68:	4b1a      	ldr	r3, [pc, #104]	; (800bfd4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	f003 0304 	and.w	r3, r3, #4
 800bf70:	2b04      	cmp	r3, #4
 800bf72:	d10c      	bne.n	800bf8e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800bf74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	d109      	bne.n	800bf8e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bf7a:	4b16      	ldr	r3, [pc, #88]	; (800bfd4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800bf7c:	681b      	ldr	r3, [r3, #0]
 800bf7e:	08db      	lsrs	r3, r3, #3
 800bf80:	f003 0303 	and.w	r3, r3, #3
 800bf84:	4a14      	ldr	r2, [pc, #80]	; (800bfd8 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800bf86:	fa22 f303 	lsr.w	r3, r2, r3
 800bf8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bf8c:	e01e      	b.n	800bfcc <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800bf8e:	4b11      	ldr	r3, [pc, #68]	; (800bfd4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800bf90:	681b      	ldr	r3, [r3, #0]
 800bf92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bf96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bf9a:	d106      	bne.n	800bfaa <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800bf9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf9e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bfa2:	d102      	bne.n	800bfaa <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800bfa4:	4b0d      	ldr	r3, [pc, #52]	; (800bfdc <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800bfa6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bfa8:	e010      	b.n	800bfcc <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800bfaa:	4b0a      	ldr	r3, [pc, #40]	; (800bfd4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bfb2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bfb6:	d106      	bne.n	800bfc6 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800bfb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bfba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bfbe:	d102      	bne.n	800bfc6 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800bfc0:	4b07      	ldr	r3, [pc, #28]	; (800bfe0 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800bfc2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bfc4:	e002      	b.n	800bfcc <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800bfc6:	2300      	movs	r3, #0
 800bfc8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800bfca:	e2e2      	b.n	800c592 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800bfcc:	e2e1      	b.n	800c592 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800bfce:	4b05      	ldr	r3, [pc, #20]	; (800bfe4 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800bfd0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bfd2:	e2de      	b.n	800c592 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800bfd4:	58024400 	.word	0x58024400
 800bfd8:	03d09000 	.word	0x03d09000
 800bfdc:	003d0900 	.word	0x003d0900
 800bfe0:	007f1b10 	.word	0x007f1b10
 800bfe4:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800bfe8:	2300      	movs	r3, #0
 800bfea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bfec:	e2d1      	b.n	800c592 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800bfee:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bff2:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800bff6:	430b      	orrs	r3, r1
 800bff8:	f040 809c 	bne.w	800c134 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800bffc:	4b93      	ldr	r3, [pc, #588]	; (800c24c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800bffe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c000:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800c004:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c006:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c008:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c00c:	d054      	beq.n	800c0b8 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800c00e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c010:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c014:	f200 808b 	bhi.w	800c12e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800c018:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c01a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c01e:	f000 8083 	beq.w	800c128 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800c022:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c024:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c028:	f200 8081 	bhi.w	800c12e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800c02c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c02e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c032:	d02f      	beq.n	800c094 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800c034:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c036:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c03a:	d878      	bhi.n	800c12e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800c03c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c03e:	2b00      	cmp	r3, #0
 800c040:	d004      	beq.n	800c04c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800c042:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c044:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c048:	d012      	beq.n	800c070 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800c04a:	e070      	b.n	800c12e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c04c:	4b7f      	ldr	r3, [pc, #508]	; (800c24c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c054:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c058:	d107      	bne.n	800c06a <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c05a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c05e:	4618      	mov	r0, r3
 800c060:	f000 fd5e 	bl	800cb20 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c066:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c068:	e293      	b.n	800c592 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c06a:	2300      	movs	r3, #0
 800c06c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c06e:	e290      	b.n	800c592 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c070:	4b76      	ldr	r3, [pc, #472]	; (800c24c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c072:	681b      	ldr	r3, [r3, #0]
 800c074:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c078:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c07c:	d107      	bne.n	800c08e <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c07e:	f107 0318 	add.w	r3, r7, #24
 800c082:	4618      	mov	r0, r3
 800c084:	f000 faa4 	bl	800c5d0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c088:	69bb      	ldr	r3, [r7, #24]
 800c08a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c08c:	e281      	b.n	800c592 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c08e:	2300      	movs	r3, #0
 800c090:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c092:	e27e      	b.n	800c592 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c094:	4b6d      	ldr	r3, [pc, #436]	; (800c24c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c096:	681b      	ldr	r3, [r3, #0]
 800c098:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c09c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c0a0:	d107      	bne.n	800c0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c0a2:	f107 030c 	add.w	r3, r7, #12
 800c0a6:	4618      	mov	r0, r3
 800c0a8:	f000 fbe6 	bl	800c878 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c0ac:	68fb      	ldr	r3, [r7, #12]
 800c0ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c0b0:	e26f      	b.n	800c592 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c0b2:	2300      	movs	r3, #0
 800c0b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c0b6:	e26c      	b.n	800c592 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c0b8:	4b64      	ldr	r3, [pc, #400]	; (800c24c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c0ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c0bc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c0c0:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c0c2:	4b62      	ldr	r3, [pc, #392]	; (800c24c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c0c4:	681b      	ldr	r3, [r3, #0]
 800c0c6:	f003 0304 	and.w	r3, r3, #4
 800c0ca:	2b04      	cmp	r3, #4
 800c0cc:	d10c      	bne.n	800c0e8 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800c0ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c0d0:	2b00      	cmp	r3, #0
 800c0d2:	d109      	bne.n	800c0e8 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c0d4:	4b5d      	ldr	r3, [pc, #372]	; (800c24c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c0d6:	681b      	ldr	r3, [r3, #0]
 800c0d8:	08db      	lsrs	r3, r3, #3
 800c0da:	f003 0303 	and.w	r3, r3, #3
 800c0de:	4a5c      	ldr	r2, [pc, #368]	; (800c250 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800c0e0:	fa22 f303 	lsr.w	r3, r2, r3
 800c0e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c0e6:	e01e      	b.n	800c126 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c0e8:	4b58      	ldr	r3, [pc, #352]	; (800c24c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c0f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c0f4:	d106      	bne.n	800c104 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800c0f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c0f8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c0fc:	d102      	bne.n	800c104 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c0fe:	4b55      	ldr	r3, [pc, #340]	; (800c254 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800c100:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c102:	e010      	b.n	800c126 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c104:	4b51      	ldr	r3, [pc, #324]	; (800c24c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c10c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c110:	d106      	bne.n	800c120 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800c112:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c114:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c118:	d102      	bne.n	800c120 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c11a:	4b4f      	ldr	r3, [pc, #316]	; (800c258 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800c11c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c11e:	e002      	b.n	800c126 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c120:	2300      	movs	r3, #0
 800c122:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c124:	e235      	b.n	800c592 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c126:	e234      	b.n	800c592 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c128:	4b4c      	ldr	r3, [pc, #304]	; (800c25c <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800c12a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c12c:	e231      	b.n	800c592 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800c12e:	2300      	movs	r3, #0
 800c130:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c132:	e22e      	b.n	800c592 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800c134:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c138:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800c13c:	430b      	orrs	r3, r1
 800c13e:	f040 808f 	bne.w	800c260 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800c142:	4b42      	ldr	r3, [pc, #264]	; (800c24c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c144:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c146:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800c14a:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800c14c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c14e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c152:	d06b      	beq.n	800c22c <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800c154:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c156:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c15a:	d874      	bhi.n	800c246 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800c15c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c15e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c162:	d056      	beq.n	800c212 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800c164:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c166:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c16a:	d86c      	bhi.n	800c246 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800c16c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c16e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c172:	d03b      	beq.n	800c1ec <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800c174:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c176:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c17a:	d864      	bhi.n	800c246 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800c17c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c17e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c182:	d021      	beq.n	800c1c8 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800c184:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c186:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c18a:	d85c      	bhi.n	800c246 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800c18c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c18e:	2b00      	cmp	r3, #0
 800c190:	d004      	beq.n	800c19c <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800c192:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c194:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c198:	d004      	beq.n	800c1a4 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800c19a:	e054      	b.n	800c246 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800c19c:	f7fe fa30 	bl	800a600 <HAL_RCC_GetPCLK1Freq>
 800c1a0:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c1a2:	e1f6      	b.n	800c592 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c1a4:	4b29      	ldr	r3, [pc, #164]	; (800c24c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c1a6:	681b      	ldr	r3, [r3, #0]
 800c1a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c1ac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c1b0:	d107      	bne.n	800c1c2 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c1b2:	f107 0318 	add.w	r3, r7, #24
 800c1b6:	4618      	mov	r0, r3
 800c1b8:	f000 fa0a 	bl	800c5d0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c1bc:	69fb      	ldr	r3, [r7, #28]
 800c1be:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c1c0:	e1e7      	b.n	800c592 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c1c2:	2300      	movs	r3, #0
 800c1c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c1c6:	e1e4      	b.n	800c592 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c1c8:	4b20      	ldr	r3, [pc, #128]	; (800c24c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c1d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c1d4:	d107      	bne.n	800c1e6 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c1d6:	f107 030c 	add.w	r3, r7, #12
 800c1da:	4618      	mov	r0, r3
 800c1dc:	f000 fb4c 	bl	800c878 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800c1e0:	693b      	ldr	r3, [r7, #16]
 800c1e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c1e4:	e1d5      	b.n	800c592 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c1e6:	2300      	movs	r3, #0
 800c1e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c1ea:	e1d2      	b.n	800c592 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c1ec:	4b17      	ldr	r3, [pc, #92]	; (800c24c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	f003 0304 	and.w	r3, r3, #4
 800c1f4:	2b04      	cmp	r3, #4
 800c1f6:	d109      	bne.n	800c20c <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c1f8:	4b14      	ldr	r3, [pc, #80]	; (800c24c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c1fa:	681b      	ldr	r3, [r3, #0]
 800c1fc:	08db      	lsrs	r3, r3, #3
 800c1fe:	f003 0303 	and.w	r3, r3, #3
 800c202:	4a13      	ldr	r2, [pc, #76]	; (800c250 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800c204:	fa22 f303 	lsr.w	r3, r2, r3
 800c208:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c20a:	e1c2      	b.n	800c592 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c20c:	2300      	movs	r3, #0
 800c20e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c210:	e1bf      	b.n	800c592 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800c212:	4b0e      	ldr	r3, [pc, #56]	; (800c24c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c214:	681b      	ldr	r3, [r3, #0]
 800c216:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c21a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c21e:	d102      	bne.n	800c226 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800c220:	4b0c      	ldr	r3, [pc, #48]	; (800c254 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800c222:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c224:	e1b5      	b.n	800c592 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c226:	2300      	movs	r3, #0
 800c228:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c22a:	e1b2      	b.n	800c592 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c22c:	4b07      	ldr	r3, [pc, #28]	; (800c24c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c234:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c238:	d102      	bne.n	800c240 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800c23a:	4b07      	ldr	r3, [pc, #28]	; (800c258 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800c23c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c23e:	e1a8      	b.n	800c592 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c240:	2300      	movs	r3, #0
 800c242:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c244:	e1a5      	b.n	800c592 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800c246:	2300      	movs	r3, #0
 800c248:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c24a:	e1a2      	b.n	800c592 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c24c:	58024400 	.word	0x58024400
 800c250:	03d09000 	.word	0x03d09000
 800c254:	003d0900 	.word	0x003d0900
 800c258:	007f1b10 	.word	0x007f1b10
 800c25c:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800c260:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c264:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800c268:	430b      	orrs	r3, r1
 800c26a:	d173      	bne.n	800c354 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800c26c:	4b9c      	ldr	r3, [pc, #624]	; (800c4e0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c26e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c270:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800c274:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c276:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c278:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c27c:	d02f      	beq.n	800c2de <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800c27e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c280:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c284:	d863      	bhi.n	800c34e <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800c286:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c288:	2b00      	cmp	r3, #0
 800c28a:	d004      	beq.n	800c296 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800c28c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c28e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c292:	d012      	beq.n	800c2ba <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800c294:	e05b      	b.n	800c34e <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c296:	4b92      	ldr	r3, [pc, #584]	; (800c4e0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c298:	681b      	ldr	r3, [r3, #0]
 800c29a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c29e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c2a2:	d107      	bne.n	800c2b4 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c2a4:	f107 0318 	add.w	r3, r7, #24
 800c2a8:	4618      	mov	r0, r3
 800c2aa:	f000 f991 	bl	800c5d0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c2ae:	69bb      	ldr	r3, [r7, #24]
 800c2b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c2b2:	e16e      	b.n	800c592 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c2b4:	2300      	movs	r3, #0
 800c2b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c2b8:	e16b      	b.n	800c592 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c2ba:	4b89      	ldr	r3, [pc, #548]	; (800c4e0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c2bc:	681b      	ldr	r3, [r3, #0]
 800c2be:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c2c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c2c6:	d107      	bne.n	800c2d8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c2c8:	f107 030c 	add.w	r3, r7, #12
 800c2cc:	4618      	mov	r0, r3
 800c2ce:	f000 fad3 	bl	800c878 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800c2d2:	697b      	ldr	r3, [r7, #20]
 800c2d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c2d6:	e15c      	b.n	800c592 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c2d8:	2300      	movs	r3, #0
 800c2da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c2dc:	e159      	b.n	800c592 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c2de:	4b80      	ldr	r3, [pc, #512]	; (800c4e0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c2e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c2e2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c2e6:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c2e8:	4b7d      	ldr	r3, [pc, #500]	; (800c4e0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c2ea:	681b      	ldr	r3, [r3, #0]
 800c2ec:	f003 0304 	and.w	r3, r3, #4
 800c2f0:	2b04      	cmp	r3, #4
 800c2f2:	d10c      	bne.n	800c30e <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800c2f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	d109      	bne.n	800c30e <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c2fa:	4b79      	ldr	r3, [pc, #484]	; (800c4e0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c2fc:	681b      	ldr	r3, [r3, #0]
 800c2fe:	08db      	lsrs	r3, r3, #3
 800c300:	f003 0303 	and.w	r3, r3, #3
 800c304:	4a77      	ldr	r2, [pc, #476]	; (800c4e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800c306:	fa22 f303 	lsr.w	r3, r2, r3
 800c30a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c30c:	e01e      	b.n	800c34c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c30e:	4b74      	ldr	r3, [pc, #464]	; (800c4e0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c316:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c31a:	d106      	bne.n	800c32a <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800c31c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c31e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c322:	d102      	bne.n	800c32a <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c324:	4b70      	ldr	r3, [pc, #448]	; (800c4e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800c326:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c328:	e010      	b.n	800c34c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c32a:	4b6d      	ldr	r3, [pc, #436]	; (800c4e0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c32c:	681b      	ldr	r3, [r3, #0]
 800c32e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c332:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c336:	d106      	bne.n	800c346 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800c338:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c33a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c33e:	d102      	bne.n	800c346 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c340:	4b6a      	ldr	r3, [pc, #424]	; (800c4ec <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800c342:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c344:	e002      	b.n	800c34c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c346:	2300      	movs	r3, #0
 800c348:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c34a:	e122      	b.n	800c592 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c34c:	e121      	b.n	800c592 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800c34e:	2300      	movs	r3, #0
 800c350:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c352:	e11e      	b.n	800c592 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800c354:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c358:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800c35c:	430b      	orrs	r3, r1
 800c35e:	d133      	bne.n	800c3c8 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800c360:	4b5f      	ldr	r3, [pc, #380]	; (800c4e0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c362:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c364:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c368:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c36a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	d004      	beq.n	800c37a <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800c370:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c372:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c376:	d012      	beq.n	800c39e <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800c378:	e023      	b.n	800c3c2 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c37a:	4b59      	ldr	r3, [pc, #356]	; (800c4e0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c37c:	681b      	ldr	r3, [r3, #0]
 800c37e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c382:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c386:	d107      	bne.n	800c398 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c388:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c38c:	4618      	mov	r0, r3
 800c38e:	f000 fbc7 	bl	800cb20 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c394:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c396:	e0fc      	b.n	800c592 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c398:	2300      	movs	r3, #0
 800c39a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c39c:	e0f9      	b.n	800c592 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c39e:	4b50      	ldr	r3, [pc, #320]	; (800c4e0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c3a0:	681b      	ldr	r3, [r3, #0]
 800c3a2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c3a6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c3aa:	d107      	bne.n	800c3bc <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c3ac:	f107 0318 	add.w	r3, r7, #24
 800c3b0:	4618      	mov	r0, r3
 800c3b2:	f000 f90d 	bl	800c5d0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800c3b6:	6a3b      	ldr	r3, [r7, #32]
 800c3b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c3ba:	e0ea      	b.n	800c592 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c3bc:	2300      	movs	r3, #0
 800c3be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c3c0:	e0e7      	b.n	800c592 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800c3c2:	2300      	movs	r3, #0
 800c3c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c3c6:	e0e4      	b.n	800c592 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800c3c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c3cc:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800c3d0:	430b      	orrs	r3, r1
 800c3d2:	f040 808d 	bne.w	800c4f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800c3d6:	4b42      	ldr	r3, [pc, #264]	; (800c4e0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c3d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c3da:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800c3de:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c3e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c3e6:	d06b      	beq.n	800c4c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800c3e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3ea:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c3ee:	d874      	bhi.n	800c4da <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800c3f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c3f6:	d056      	beq.n	800c4a6 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800c3f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c3fe:	d86c      	bhi.n	800c4da <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800c400:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c402:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c406:	d03b      	beq.n	800c480 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800c408:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c40a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c40e:	d864      	bhi.n	800c4da <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800c410:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c412:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c416:	d021      	beq.n	800c45c <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800c418:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c41a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c41e:	d85c      	bhi.n	800c4da <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800c420:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c422:	2b00      	cmp	r3, #0
 800c424:	d004      	beq.n	800c430 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800c426:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c428:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c42c:	d004      	beq.n	800c438 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800c42e:	e054      	b.n	800c4da <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800c430:	f000 f8b8 	bl	800c5a4 <HAL_RCCEx_GetD3PCLK1Freq>
 800c434:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c436:	e0ac      	b.n	800c592 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c438:	4b29      	ldr	r3, [pc, #164]	; (800c4e0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c43a:	681b      	ldr	r3, [r3, #0]
 800c43c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c440:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c444:	d107      	bne.n	800c456 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c446:	f107 0318 	add.w	r3, r7, #24
 800c44a:	4618      	mov	r0, r3
 800c44c:	f000 f8c0 	bl	800c5d0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c450:	69fb      	ldr	r3, [r7, #28]
 800c452:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c454:	e09d      	b.n	800c592 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c456:	2300      	movs	r3, #0
 800c458:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c45a:	e09a      	b.n	800c592 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c45c:	4b20      	ldr	r3, [pc, #128]	; (800c4e0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c464:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c468:	d107      	bne.n	800c47a <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c46a:	f107 030c 	add.w	r3, r7, #12
 800c46e:	4618      	mov	r0, r3
 800c470:	f000 fa02 	bl	800c878 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800c474:	693b      	ldr	r3, [r7, #16]
 800c476:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c478:	e08b      	b.n	800c592 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c47a:	2300      	movs	r3, #0
 800c47c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c47e:	e088      	b.n	800c592 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c480:	4b17      	ldr	r3, [pc, #92]	; (800c4e0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c482:	681b      	ldr	r3, [r3, #0]
 800c484:	f003 0304 	and.w	r3, r3, #4
 800c488:	2b04      	cmp	r3, #4
 800c48a:	d109      	bne.n	800c4a0 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c48c:	4b14      	ldr	r3, [pc, #80]	; (800c4e0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c48e:	681b      	ldr	r3, [r3, #0]
 800c490:	08db      	lsrs	r3, r3, #3
 800c492:	f003 0303 	and.w	r3, r3, #3
 800c496:	4a13      	ldr	r2, [pc, #76]	; (800c4e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800c498:	fa22 f303 	lsr.w	r3, r2, r3
 800c49c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c49e:	e078      	b.n	800c592 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c4a0:	2300      	movs	r3, #0
 800c4a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c4a4:	e075      	b.n	800c592 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800c4a6:	4b0e      	ldr	r3, [pc, #56]	; (800c4e0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c4a8:	681b      	ldr	r3, [r3, #0]
 800c4aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c4ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c4b2:	d102      	bne.n	800c4ba <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800c4b4:	4b0c      	ldr	r3, [pc, #48]	; (800c4e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800c4b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c4b8:	e06b      	b.n	800c592 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c4ba:	2300      	movs	r3, #0
 800c4bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c4be:	e068      	b.n	800c592 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c4c0:	4b07      	ldr	r3, [pc, #28]	; (800c4e0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c4c2:	681b      	ldr	r3, [r3, #0]
 800c4c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c4c8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c4cc:	d102      	bne.n	800c4d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800c4ce:	4b07      	ldr	r3, [pc, #28]	; (800c4ec <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800c4d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c4d2:	e05e      	b.n	800c592 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c4d4:	2300      	movs	r3, #0
 800c4d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c4d8:	e05b      	b.n	800c592 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800c4da:	2300      	movs	r3, #0
 800c4dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c4de:	e058      	b.n	800c592 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c4e0:	58024400 	.word	0x58024400
 800c4e4:	03d09000 	.word	0x03d09000
 800c4e8:	003d0900 	.word	0x003d0900
 800c4ec:	007f1b10 	.word	0x007f1b10
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800c4f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c4f4:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800c4f8:	430b      	orrs	r3, r1
 800c4fa:	d148      	bne.n	800c58e <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800c4fc:	4b27      	ldr	r3, [pc, #156]	; (800c59c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800c4fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c500:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c504:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c506:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c508:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c50c:	d02a      	beq.n	800c564 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800c50e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c510:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c514:	d838      	bhi.n	800c588 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800c516:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c518:	2b00      	cmp	r3, #0
 800c51a:	d004      	beq.n	800c526 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800c51c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c51e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c522:	d00d      	beq.n	800c540 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800c524:	e030      	b.n	800c588 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c526:	4b1d      	ldr	r3, [pc, #116]	; (800c59c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800c528:	681b      	ldr	r3, [r3, #0]
 800c52a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c52e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c532:	d102      	bne.n	800c53a <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800c534:	4b1a      	ldr	r3, [pc, #104]	; (800c5a0 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800c536:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c538:	e02b      	b.n	800c592 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c53a:	2300      	movs	r3, #0
 800c53c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c53e:	e028      	b.n	800c592 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c540:	4b16      	ldr	r3, [pc, #88]	; (800c59c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c548:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c54c:	d107      	bne.n	800c55e <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c54e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c552:	4618      	mov	r0, r3
 800c554:	f000 fae4 	bl	800cb20 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c55a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c55c:	e019      	b.n	800c592 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c55e:	2300      	movs	r3, #0
 800c560:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c562:	e016      	b.n	800c592 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c564:	4b0d      	ldr	r3, [pc, #52]	; (800c59c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800c566:	681b      	ldr	r3, [r3, #0]
 800c568:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c56c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c570:	d107      	bne.n	800c582 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c572:	f107 0318 	add.w	r3, r7, #24
 800c576:	4618      	mov	r0, r3
 800c578:	f000 f82a 	bl	800c5d0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c57c:	69fb      	ldr	r3, [r7, #28]
 800c57e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c580:	e007      	b.n	800c592 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c582:	2300      	movs	r3, #0
 800c584:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c586:	e004      	b.n	800c592 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800c588:	2300      	movs	r3, #0
 800c58a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c58c:	e001      	b.n	800c592 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800c58e:	2300      	movs	r3, #0
 800c590:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800c592:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800c594:	4618      	mov	r0, r3
 800c596:	3740      	adds	r7, #64	; 0x40
 800c598:	46bd      	mov	sp, r7
 800c59a:	bd80      	pop	{r7, pc}
 800c59c:	58024400 	.word	0x58024400
 800c5a0:	007f1b10 	.word	0x007f1b10

0800c5a4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800c5a4:	b580      	push	{r7, lr}
 800c5a6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800c5a8:	f7fd fffa 	bl	800a5a0 <HAL_RCC_GetHCLKFreq>
 800c5ac:	4602      	mov	r2, r0
 800c5ae:	4b06      	ldr	r3, [pc, #24]	; (800c5c8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800c5b0:	6a1b      	ldr	r3, [r3, #32]
 800c5b2:	091b      	lsrs	r3, r3, #4
 800c5b4:	f003 0307 	and.w	r3, r3, #7
 800c5b8:	4904      	ldr	r1, [pc, #16]	; (800c5cc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800c5ba:	5ccb      	ldrb	r3, [r1, r3]
 800c5bc:	f003 031f 	and.w	r3, r3, #31
 800c5c0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800c5c4:	4618      	mov	r0, r3
 800c5c6:	bd80      	pop	{r7, pc}
 800c5c8:	58024400 	.word	0x58024400
 800c5cc:	0801eb30 	.word	0x0801eb30

0800c5d0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800c5d0:	b480      	push	{r7}
 800c5d2:	b089      	sub	sp, #36	; 0x24
 800c5d4:	af00      	add	r7, sp, #0
 800c5d6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c5d8:	4ba1      	ldr	r3, [pc, #644]	; (800c860 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c5da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c5dc:	f003 0303 	and.w	r3, r3, #3
 800c5e0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800c5e2:	4b9f      	ldr	r3, [pc, #636]	; (800c860 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c5e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c5e6:	0b1b      	lsrs	r3, r3, #12
 800c5e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c5ec:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800c5ee:	4b9c      	ldr	r3, [pc, #624]	; (800c860 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c5f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5f2:	091b      	lsrs	r3, r3, #4
 800c5f4:	f003 0301 	and.w	r3, r3, #1
 800c5f8:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800c5fa:	4b99      	ldr	r3, [pc, #612]	; (800c860 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c5fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c5fe:	08db      	lsrs	r3, r3, #3
 800c600:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c604:	693a      	ldr	r2, [r7, #16]
 800c606:	fb02 f303 	mul.w	r3, r2, r3
 800c60a:	ee07 3a90 	vmov	s15, r3
 800c60e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c612:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800c616:	697b      	ldr	r3, [r7, #20]
 800c618:	2b00      	cmp	r3, #0
 800c61a:	f000 8111 	beq.w	800c840 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800c61e:	69bb      	ldr	r3, [r7, #24]
 800c620:	2b02      	cmp	r3, #2
 800c622:	f000 8083 	beq.w	800c72c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800c626:	69bb      	ldr	r3, [r7, #24]
 800c628:	2b02      	cmp	r3, #2
 800c62a:	f200 80a1 	bhi.w	800c770 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800c62e:	69bb      	ldr	r3, [r7, #24]
 800c630:	2b00      	cmp	r3, #0
 800c632:	d003      	beq.n	800c63c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800c634:	69bb      	ldr	r3, [r7, #24]
 800c636:	2b01      	cmp	r3, #1
 800c638:	d056      	beq.n	800c6e8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800c63a:	e099      	b.n	800c770 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c63c:	4b88      	ldr	r3, [pc, #544]	; (800c860 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c63e:	681b      	ldr	r3, [r3, #0]
 800c640:	f003 0320 	and.w	r3, r3, #32
 800c644:	2b00      	cmp	r3, #0
 800c646:	d02d      	beq.n	800c6a4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c648:	4b85      	ldr	r3, [pc, #532]	; (800c860 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c64a:	681b      	ldr	r3, [r3, #0]
 800c64c:	08db      	lsrs	r3, r3, #3
 800c64e:	f003 0303 	and.w	r3, r3, #3
 800c652:	4a84      	ldr	r2, [pc, #528]	; (800c864 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800c654:	fa22 f303 	lsr.w	r3, r2, r3
 800c658:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c65a:	68bb      	ldr	r3, [r7, #8]
 800c65c:	ee07 3a90 	vmov	s15, r3
 800c660:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c664:	697b      	ldr	r3, [r7, #20]
 800c666:	ee07 3a90 	vmov	s15, r3
 800c66a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c66e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c672:	4b7b      	ldr	r3, [pc, #492]	; (800c860 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c674:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c676:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c67a:	ee07 3a90 	vmov	s15, r3
 800c67e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c682:	ed97 6a03 	vldr	s12, [r7, #12]
 800c686:	eddf 5a78 	vldr	s11, [pc, #480]	; 800c868 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c68a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c68e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c692:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c696:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c69a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c69e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800c6a2:	e087      	b.n	800c7b4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c6a4:	697b      	ldr	r3, [r7, #20]
 800c6a6:	ee07 3a90 	vmov	s15, r3
 800c6aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c6ae:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800c86c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800c6b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c6b6:	4b6a      	ldr	r3, [pc, #424]	; (800c860 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c6b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c6be:	ee07 3a90 	vmov	s15, r3
 800c6c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c6c6:	ed97 6a03 	vldr	s12, [r7, #12]
 800c6ca:	eddf 5a67 	vldr	s11, [pc, #412]	; 800c868 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c6ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c6d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c6d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c6da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c6de:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c6e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c6e6:	e065      	b.n	800c7b4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c6e8:	697b      	ldr	r3, [r7, #20]
 800c6ea:	ee07 3a90 	vmov	s15, r3
 800c6ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c6f2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800c870 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800c6f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c6fa:	4b59      	ldr	r3, [pc, #356]	; (800c860 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c6fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c702:	ee07 3a90 	vmov	s15, r3
 800c706:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c70a:	ed97 6a03 	vldr	s12, [r7, #12]
 800c70e:	eddf 5a56 	vldr	s11, [pc, #344]	; 800c868 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c712:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c716:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c71a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c71e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c722:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c726:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c72a:	e043      	b.n	800c7b4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c72c:	697b      	ldr	r3, [r7, #20]
 800c72e:	ee07 3a90 	vmov	s15, r3
 800c732:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c736:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800c874 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800c73a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c73e:	4b48      	ldr	r3, [pc, #288]	; (800c860 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c740:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c742:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c746:	ee07 3a90 	vmov	s15, r3
 800c74a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c74e:	ed97 6a03 	vldr	s12, [r7, #12]
 800c752:	eddf 5a45 	vldr	s11, [pc, #276]	; 800c868 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c756:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c75a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c75e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c762:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c766:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c76a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c76e:	e021      	b.n	800c7b4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c770:	697b      	ldr	r3, [r7, #20]
 800c772:	ee07 3a90 	vmov	s15, r3
 800c776:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c77a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800c870 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800c77e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c782:	4b37      	ldr	r3, [pc, #220]	; (800c860 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c784:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c786:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c78a:	ee07 3a90 	vmov	s15, r3
 800c78e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c792:	ed97 6a03 	vldr	s12, [r7, #12]
 800c796:	eddf 5a34 	vldr	s11, [pc, #208]	; 800c868 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c79a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c79e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c7a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c7a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c7aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c7ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c7b2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800c7b4:	4b2a      	ldr	r3, [pc, #168]	; (800c860 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c7b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7b8:	0a5b      	lsrs	r3, r3, #9
 800c7ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c7be:	ee07 3a90 	vmov	s15, r3
 800c7c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c7c6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c7ca:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c7ce:	edd7 6a07 	vldr	s13, [r7, #28]
 800c7d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c7d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c7da:	ee17 2a90 	vmov	r2, s15
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800c7e2:	4b1f      	ldr	r3, [pc, #124]	; (800c860 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c7e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7e6:	0c1b      	lsrs	r3, r3, #16
 800c7e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c7ec:	ee07 3a90 	vmov	s15, r3
 800c7f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c7f4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c7f8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c7fc:	edd7 6a07 	vldr	s13, [r7, #28]
 800c800:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c804:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c808:	ee17 2a90 	vmov	r2, s15
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800c810:	4b13      	ldr	r3, [pc, #76]	; (800c860 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c812:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c814:	0e1b      	lsrs	r3, r3, #24
 800c816:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c81a:	ee07 3a90 	vmov	s15, r3
 800c81e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c822:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c826:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c82a:	edd7 6a07 	vldr	s13, [r7, #28]
 800c82e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c832:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c836:	ee17 2a90 	vmov	r2, s15
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800c83e:	e008      	b.n	800c852 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	2200      	movs	r2, #0
 800c844:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	2200      	movs	r2, #0
 800c84a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	2200      	movs	r2, #0
 800c850:	609a      	str	r2, [r3, #8]
}
 800c852:	bf00      	nop
 800c854:	3724      	adds	r7, #36	; 0x24
 800c856:	46bd      	mov	sp, r7
 800c858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c85c:	4770      	bx	lr
 800c85e:	bf00      	nop
 800c860:	58024400 	.word	0x58024400
 800c864:	03d09000 	.word	0x03d09000
 800c868:	46000000 	.word	0x46000000
 800c86c:	4c742400 	.word	0x4c742400
 800c870:	4a742400 	.word	0x4a742400
 800c874:	4afe3620 	.word	0x4afe3620

0800c878 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800c878:	b480      	push	{r7}
 800c87a:	b089      	sub	sp, #36	; 0x24
 800c87c:	af00      	add	r7, sp, #0
 800c87e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c880:	4ba1      	ldr	r3, [pc, #644]	; (800cb08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c882:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c884:	f003 0303 	and.w	r3, r3, #3
 800c888:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800c88a:	4b9f      	ldr	r3, [pc, #636]	; (800cb08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c88c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c88e:	0d1b      	lsrs	r3, r3, #20
 800c890:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c894:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800c896:	4b9c      	ldr	r3, [pc, #624]	; (800cb08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c898:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c89a:	0a1b      	lsrs	r3, r3, #8
 800c89c:	f003 0301 	and.w	r3, r3, #1
 800c8a0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800c8a2:	4b99      	ldr	r3, [pc, #612]	; (800cb08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c8a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c8a6:	08db      	lsrs	r3, r3, #3
 800c8a8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c8ac:	693a      	ldr	r2, [r7, #16]
 800c8ae:	fb02 f303 	mul.w	r3, r2, r3
 800c8b2:	ee07 3a90 	vmov	s15, r3
 800c8b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c8ba:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800c8be:	697b      	ldr	r3, [r7, #20]
 800c8c0:	2b00      	cmp	r3, #0
 800c8c2:	f000 8111 	beq.w	800cae8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800c8c6:	69bb      	ldr	r3, [r7, #24]
 800c8c8:	2b02      	cmp	r3, #2
 800c8ca:	f000 8083 	beq.w	800c9d4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800c8ce:	69bb      	ldr	r3, [r7, #24]
 800c8d0:	2b02      	cmp	r3, #2
 800c8d2:	f200 80a1 	bhi.w	800ca18 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800c8d6:	69bb      	ldr	r3, [r7, #24]
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	d003      	beq.n	800c8e4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800c8dc:	69bb      	ldr	r3, [r7, #24]
 800c8de:	2b01      	cmp	r3, #1
 800c8e0:	d056      	beq.n	800c990 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800c8e2:	e099      	b.n	800ca18 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c8e4:	4b88      	ldr	r3, [pc, #544]	; (800cb08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c8e6:	681b      	ldr	r3, [r3, #0]
 800c8e8:	f003 0320 	and.w	r3, r3, #32
 800c8ec:	2b00      	cmp	r3, #0
 800c8ee:	d02d      	beq.n	800c94c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c8f0:	4b85      	ldr	r3, [pc, #532]	; (800cb08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c8f2:	681b      	ldr	r3, [r3, #0]
 800c8f4:	08db      	lsrs	r3, r3, #3
 800c8f6:	f003 0303 	and.w	r3, r3, #3
 800c8fa:	4a84      	ldr	r2, [pc, #528]	; (800cb0c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800c8fc:	fa22 f303 	lsr.w	r3, r2, r3
 800c900:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c902:	68bb      	ldr	r3, [r7, #8]
 800c904:	ee07 3a90 	vmov	s15, r3
 800c908:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c90c:	697b      	ldr	r3, [r7, #20]
 800c90e:	ee07 3a90 	vmov	s15, r3
 800c912:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c916:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c91a:	4b7b      	ldr	r3, [pc, #492]	; (800cb08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c91c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c91e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c922:	ee07 3a90 	vmov	s15, r3
 800c926:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c92a:	ed97 6a03 	vldr	s12, [r7, #12]
 800c92e:	eddf 5a78 	vldr	s11, [pc, #480]	; 800cb10 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c932:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c936:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c93a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c93e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c942:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c946:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800c94a:	e087      	b.n	800ca5c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c94c:	697b      	ldr	r3, [r7, #20]
 800c94e:	ee07 3a90 	vmov	s15, r3
 800c952:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c956:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800cb14 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800c95a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c95e:	4b6a      	ldr	r3, [pc, #424]	; (800cb08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c962:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c966:	ee07 3a90 	vmov	s15, r3
 800c96a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c96e:	ed97 6a03 	vldr	s12, [r7, #12]
 800c972:	eddf 5a67 	vldr	s11, [pc, #412]	; 800cb10 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c976:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c97a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c97e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c982:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c986:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c98a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c98e:	e065      	b.n	800ca5c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c990:	697b      	ldr	r3, [r7, #20]
 800c992:	ee07 3a90 	vmov	s15, r3
 800c996:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c99a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800cb18 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800c99e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c9a2:	4b59      	ldr	r3, [pc, #356]	; (800cb08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c9a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c9a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c9aa:	ee07 3a90 	vmov	s15, r3
 800c9ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c9b2:	ed97 6a03 	vldr	s12, [r7, #12]
 800c9b6:	eddf 5a56 	vldr	s11, [pc, #344]	; 800cb10 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c9ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c9be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c9c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c9c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c9ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c9ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c9d2:	e043      	b.n	800ca5c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c9d4:	697b      	ldr	r3, [r7, #20]
 800c9d6:	ee07 3a90 	vmov	s15, r3
 800c9da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c9de:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800cb1c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800c9e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c9e6:	4b48      	ldr	r3, [pc, #288]	; (800cb08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c9e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c9ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c9ee:	ee07 3a90 	vmov	s15, r3
 800c9f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c9f6:	ed97 6a03 	vldr	s12, [r7, #12]
 800c9fa:	eddf 5a45 	vldr	s11, [pc, #276]	; 800cb10 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c9fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ca02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ca06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ca0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ca0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ca12:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ca16:	e021      	b.n	800ca5c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ca18:	697b      	ldr	r3, [r7, #20]
 800ca1a:	ee07 3a90 	vmov	s15, r3
 800ca1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca22:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800cb18 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800ca26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ca2a:	4b37      	ldr	r3, [pc, #220]	; (800cb08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ca2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ca32:	ee07 3a90 	vmov	s15, r3
 800ca36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ca3a:	ed97 6a03 	vldr	s12, [r7, #12]
 800ca3e:	eddf 5a34 	vldr	s11, [pc, #208]	; 800cb10 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ca42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ca46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ca4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ca4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ca52:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ca56:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ca5a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800ca5c:	4b2a      	ldr	r3, [pc, #168]	; (800cb08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ca5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca60:	0a5b      	lsrs	r3, r3, #9
 800ca62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ca66:	ee07 3a90 	vmov	s15, r3
 800ca6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca6e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ca72:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ca76:	edd7 6a07 	vldr	s13, [r7, #28]
 800ca7a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ca7e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ca82:	ee17 2a90 	vmov	r2, s15
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800ca8a:	4b1f      	ldr	r3, [pc, #124]	; (800cb08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ca8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca8e:	0c1b      	lsrs	r3, r3, #16
 800ca90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ca94:	ee07 3a90 	vmov	s15, r3
 800ca98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca9c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800caa0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800caa4:	edd7 6a07 	vldr	s13, [r7, #28]
 800caa8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800caac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cab0:	ee17 2a90 	vmov	r2, s15
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800cab8:	4b13      	ldr	r3, [pc, #76]	; (800cb08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800caba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cabc:	0e1b      	lsrs	r3, r3, #24
 800cabe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cac2:	ee07 3a90 	vmov	s15, r3
 800cac6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800caca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cace:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cad2:	edd7 6a07 	vldr	s13, [r7, #28]
 800cad6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cada:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cade:	ee17 2a90 	vmov	r2, s15
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800cae6:	e008      	b.n	800cafa <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	2200      	movs	r2, #0
 800caec:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	2200      	movs	r2, #0
 800caf2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	2200      	movs	r2, #0
 800caf8:	609a      	str	r2, [r3, #8]
}
 800cafa:	bf00      	nop
 800cafc:	3724      	adds	r7, #36	; 0x24
 800cafe:	46bd      	mov	sp, r7
 800cb00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb04:	4770      	bx	lr
 800cb06:	bf00      	nop
 800cb08:	58024400 	.word	0x58024400
 800cb0c:	03d09000 	.word	0x03d09000
 800cb10:	46000000 	.word	0x46000000
 800cb14:	4c742400 	.word	0x4c742400
 800cb18:	4a742400 	.word	0x4a742400
 800cb1c:	4afe3620 	.word	0x4afe3620

0800cb20 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800cb20:	b480      	push	{r7}
 800cb22:	b089      	sub	sp, #36	; 0x24
 800cb24:	af00      	add	r7, sp, #0
 800cb26:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800cb28:	4ba0      	ldr	r3, [pc, #640]	; (800cdac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cb2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb2c:	f003 0303 	and.w	r3, r3, #3
 800cb30:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800cb32:	4b9e      	ldr	r3, [pc, #632]	; (800cdac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cb34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb36:	091b      	lsrs	r3, r3, #4
 800cb38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cb3c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800cb3e:	4b9b      	ldr	r3, [pc, #620]	; (800cdac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cb40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb42:	f003 0301 	and.w	r3, r3, #1
 800cb46:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800cb48:	4b98      	ldr	r3, [pc, #608]	; (800cdac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cb4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cb4c:	08db      	lsrs	r3, r3, #3
 800cb4e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800cb52:	693a      	ldr	r2, [r7, #16]
 800cb54:	fb02 f303 	mul.w	r3, r2, r3
 800cb58:	ee07 3a90 	vmov	s15, r3
 800cb5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cb60:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800cb64:	697b      	ldr	r3, [r7, #20]
 800cb66:	2b00      	cmp	r3, #0
 800cb68:	f000 8111 	beq.w	800cd8e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800cb6c:	69bb      	ldr	r3, [r7, #24]
 800cb6e:	2b02      	cmp	r3, #2
 800cb70:	f000 8083 	beq.w	800cc7a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800cb74:	69bb      	ldr	r3, [r7, #24]
 800cb76:	2b02      	cmp	r3, #2
 800cb78:	f200 80a1 	bhi.w	800ccbe <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800cb7c:	69bb      	ldr	r3, [r7, #24]
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	d003      	beq.n	800cb8a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800cb82:	69bb      	ldr	r3, [r7, #24]
 800cb84:	2b01      	cmp	r3, #1
 800cb86:	d056      	beq.n	800cc36 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800cb88:	e099      	b.n	800ccbe <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cb8a:	4b88      	ldr	r3, [pc, #544]	; (800cdac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cb8c:	681b      	ldr	r3, [r3, #0]
 800cb8e:	f003 0320 	and.w	r3, r3, #32
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	d02d      	beq.n	800cbf2 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cb96:	4b85      	ldr	r3, [pc, #532]	; (800cdac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cb98:	681b      	ldr	r3, [r3, #0]
 800cb9a:	08db      	lsrs	r3, r3, #3
 800cb9c:	f003 0303 	and.w	r3, r3, #3
 800cba0:	4a83      	ldr	r2, [pc, #524]	; (800cdb0 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800cba2:	fa22 f303 	lsr.w	r3, r2, r3
 800cba6:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cba8:	68bb      	ldr	r3, [r7, #8]
 800cbaa:	ee07 3a90 	vmov	s15, r3
 800cbae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cbb2:	697b      	ldr	r3, [r7, #20]
 800cbb4:	ee07 3a90 	vmov	s15, r3
 800cbb8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cbbc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cbc0:	4b7a      	ldr	r3, [pc, #488]	; (800cdac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cbc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cbc4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cbc8:	ee07 3a90 	vmov	s15, r3
 800cbcc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cbd0:	ed97 6a03 	vldr	s12, [r7, #12]
 800cbd4:	eddf 5a77 	vldr	s11, [pc, #476]	; 800cdb4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800cbd8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cbdc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cbe0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cbe4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cbe8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cbec:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800cbf0:	e087      	b.n	800cd02 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cbf2:	697b      	ldr	r3, [r7, #20]
 800cbf4:	ee07 3a90 	vmov	s15, r3
 800cbf8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cbfc:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800cdb8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800cc00:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cc04:	4b69      	ldr	r3, [pc, #420]	; (800cdac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cc06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cc0c:	ee07 3a90 	vmov	s15, r3
 800cc10:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cc14:	ed97 6a03 	vldr	s12, [r7, #12]
 800cc18:	eddf 5a66 	vldr	s11, [pc, #408]	; 800cdb4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800cc1c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cc20:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cc24:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cc28:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cc2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cc30:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cc34:	e065      	b.n	800cd02 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cc36:	697b      	ldr	r3, [r7, #20]
 800cc38:	ee07 3a90 	vmov	s15, r3
 800cc3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cc40:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800cdbc <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800cc44:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cc48:	4b58      	ldr	r3, [pc, #352]	; (800cdac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cc4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cc50:	ee07 3a90 	vmov	s15, r3
 800cc54:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cc58:	ed97 6a03 	vldr	s12, [r7, #12]
 800cc5c:	eddf 5a55 	vldr	s11, [pc, #340]	; 800cdb4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800cc60:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cc64:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cc68:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cc6c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cc70:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cc74:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cc78:	e043      	b.n	800cd02 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cc7a:	697b      	ldr	r3, [r7, #20]
 800cc7c:	ee07 3a90 	vmov	s15, r3
 800cc80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cc84:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800cdc0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800cc88:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cc8c:	4b47      	ldr	r3, [pc, #284]	; (800cdac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cc8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cc94:	ee07 3a90 	vmov	s15, r3
 800cc98:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cc9c:	ed97 6a03 	vldr	s12, [r7, #12]
 800cca0:	eddf 5a44 	vldr	s11, [pc, #272]	; 800cdb4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800cca4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cca8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ccac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ccb0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ccb4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ccb8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ccbc:	e021      	b.n	800cd02 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ccbe:	697b      	ldr	r3, [r7, #20]
 800ccc0:	ee07 3a90 	vmov	s15, r3
 800ccc4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ccc8:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800cdb8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800cccc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ccd0:	4b36      	ldr	r3, [pc, #216]	; (800cdac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ccd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ccd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ccd8:	ee07 3a90 	vmov	s15, r3
 800ccdc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cce0:	ed97 6a03 	vldr	s12, [r7, #12]
 800cce4:	eddf 5a33 	vldr	s11, [pc, #204]	; 800cdb4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800cce8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ccec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ccf0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ccf4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ccf8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ccfc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cd00:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800cd02:	4b2a      	ldr	r3, [pc, #168]	; (800cdac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cd04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cd06:	0a5b      	lsrs	r3, r3, #9
 800cd08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cd0c:	ee07 3a90 	vmov	s15, r3
 800cd10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cd14:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cd18:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cd1c:	edd7 6a07 	vldr	s13, [r7, #28]
 800cd20:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cd24:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cd28:	ee17 2a90 	vmov	r2, s15
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800cd30:	4b1e      	ldr	r3, [pc, #120]	; (800cdac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cd32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cd34:	0c1b      	lsrs	r3, r3, #16
 800cd36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cd3a:	ee07 3a90 	vmov	s15, r3
 800cd3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cd42:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cd46:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cd4a:	edd7 6a07 	vldr	s13, [r7, #28]
 800cd4e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cd52:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cd56:	ee17 2a90 	vmov	r2, s15
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800cd5e:	4b13      	ldr	r3, [pc, #76]	; (800cdac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cd60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cd62:	0e1b      	lsrs	r3, r3, #24
 800cd64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cd68:	ee07 3a90 	vmov	s15, r3
 800cd6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cd70:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cd74:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cd78:	edd7 6a07 	vldr	s13, [r7, #28]
 800cd7c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cd80:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cd84:	ee17 2a90 	vmov	r2, s15
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800cd8c:	e008      	b.n	800cda0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	2200      	movs	r2, #0
 800cd92:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	2200      	movs	r2, #0
 800cd98:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	2200      	movs	r2, #0
 800cd9e:	609a      	str	r2, [r3, #8]
}
 800cda0:	bf00      	nop
 800cda2:	3724      	adds	r7, #36	; 0x24
 800cda4:	46bd      	mov	sp, r7
 800cda6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdaa:	4770      	bx	lr
 800cdac:	58024400 	.word	0x58024400
 800cdb0:	03d09000 	.word	0x03d09000
 800cdb4:	46000000 	.word	0x46000000
 800cdb8:	4c742400 	.word	0x4c742400
 800cdbc:	4a742400 	.word	0x4a742400
 800cdc0:	4afe3620 	.word	0x4afe3620

0800cdc4 <HAL_RCCEx_CRSConfig>:
  * @brief  Start automatic synchronization for polling mode
  * @param  pInit Pointer on RCC_CRSInitTypeDef structure
  * @retval None
  */
void HAL_RCCEx_CRSConfig(RCC_CRSInitTypeDef *pInit)
{
 800cdc4:	b580      	push	{r7, lr}
 800cdc6:	b084      	sub	sp, #16
 800cdc8:	af00      	add	r7, sp, #0
 800cdca:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_CRS_HSI48CALIBRATION(pInit->HSI48CalibrationValue));

  /* CONFIGURATION */

  /* Before configuration, reset CRS registers to their default values*/
  __HAL_RCC_CRS_FORCE_RESET();
 800cdcc:	4b26      	ldr	r3, [pc, #152]	; (800ce68 <HAL_RCCEx_CRSConfig+0xa4>)
 800cdce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800cdd2:	4a25      	ldr	r2, [pc, #148]	; (800ce68 <HAL_RCCEx_CRSConfig+0xa4>)
 800cdd4:	f043 0302 	orr.w	r3, r3, #2
 800cdd8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  __HAL_RCC_CRS_RELEASE_RESET();
 800cddc:	4b22      	ldr	r3, [pc, #136]	; (800ce68 <HAL_RCCEx_CRSConfig+0xa4>)
 800cdde:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800cde2:	4a21      	ldr	r2, [pc, #132]	; (800ce68 <HAL_RCCEx_CRSConfig+0xa4>)
 800cde4:	f023 0302 	bic.w	r3, r3, #2
 800cde8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /* Set the SYNCDIV[2:0] bits according to Pre-scaler value */
  /* Set the SYNCSRC[1:0] bits according to Source value */
  /* Set the SYNCSPOL bit according to Polarity value */
  if ((HAL_GetREVID() <= REV_ID_Y) && (pInit->Source == RCC_CRS_SYNC_SOURCE_USB2))
 800cdec:	f7f6 fed2 	bl	8003b94 <HAL_GetREVID>
 800cdf0:	4603      	mov	r3, r0
 800cdf2:	f241 0203 	movw	r2, #4099	; 0x1003
 800cdf6:	4293      	cmp	r3, r2
 800cdf8:	d80b      	bhi.n	800ce12 <HAL_RCCEx_CRSConfig+0x4e>
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	685b      	ldr	r3, [r3, #4]
 800cdfe:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800ce02:	d106      	bne.n	800ce12 <HAL_RCCEx_CRSConfig+0x4e>
  {
    /* Use Rev.Y value of USB2 */
    value = (pInit->Prescaler | RCC_CRS_SYNC_SOURCE_PIN | pInit->Polarity);
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	681a      	ldr	r2, [r3, #0]
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	689b      	ldr	r3, [r3, #8]
 800ce0c:	4313      	orrs	r3, r2
 800ce0e:	60fb      	str	r3, [r7, #12]
 800ce10:	e008      	b.n	800ce24 <HAL_RCCEx_CRSConfig+0x60>
  }
  else
  {
    value = (pInit->Prescaler | pInit->Source | pInit->Polarity);
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	681a      	ldr	r2, [r3, #0]
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	685b      	ldr	r3, [r3, #4]
 800ce1a:	431a      	orrs	r2, r3
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	689b      	ldr	r3, [r3, #8]
 800ce20:	4313      	orrs	r3, r2
 800ce22:	60fb      	str	r3, [r7, #12]
  }
  /* Set the RELOAD[15:0] bits according to ReloadValue value */
  value |= pInit->ReloadValue;
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	68db      	ldr	r3, [r3, #12]
 800ce28:	68fa      	ldr	r2, [r7, #12]
 800ce2a:	4313      	orrs	r3, r2
 800ce2c:	60fb      	str	r3, [r7, #12]
  /* Set the FELIM[7:0] bits according to ErrorLimitValue value */
  value |= (pInit->ErrorLimitValue << CRS_CFGR_FELIM_Pos);
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	691b      	ldr	r3, [r3, #16]
 800ce32:	041b      	lsls	r3, r3, #16
 800ce34:	68fa      	ldr	r2, [r7, #12]
 800ce36:	4313      	orrs	r3, r2
 800ce38:	60fb      	str	r3, [r7, #12]
  WRITE_REG(CRS->CFGR, value);
 800ce3a:	4a0c      	ldr	r2, [pc, #48]	; (800ce6c <HAL_RCCEx_CRSConfig+0xa8>)
 800ce3c:	68fb      	ldr	r3, [r7, #12]
 800ce3e:	6053      	str	r3, [r2, #4]

  /* Adjust HSI48 oscillator smooth trimming */
  /* Set the TRIM[5:0] bits according to RCC_CRS_HSI48CalibrationValue value */
  MODIFY_REG(CRS->CR, CRS_CR_TRIM, (pInit->HSI48CalibrationValue << CRS_CR_TRIM_Pos));
 800ce40:	4b0a      	ldr	r3, [pc, #40]	; (800ce6c <HAL_RCCEx_CRSConfig+0xa8>)
 800ce42:	681b      	ldr	r3, [r3, #0]
 800ce44:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	695b      	ldr	r3, [r3, #20]
 800ce4c:	021b      	lsls	r3, r3, #8
 800ce4e:	4907      	ldr	r1, [pc, #28]	; (800ce6c <HAL_RCCEx_CRSConfig+0xa8>)
 800ce50:	4313      	orrs	r3, r2
 800ce52:	600b      	str	r3, [r1, #0]

  /* START AUTOMATIC SYNCHRONIZATION*/

  /* Enable Automatic trimming & Frequency error counter */
  SET_BIT(CRS->CR, CRS_CR_AUTOTRIMEN | CRS_CR_CEN);
 800ce54:	4b05      	ldr	r3, [pc, #20]	; (800ce6c <HAL_RCCEx_CRSConfig+0xa8>)
 800ce56:	681b      	ldr	r3, [r3, #0]
 800ce58:	4a04      	ldr	r2, [pc, #16]	; (800ce6c <HAL_RCCEx_CRSConfig+0xa8>)
 800ce5a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800ce5e:	6013      	str	r3, [r2, #0]
}
 800ce60:	bf00      	nop
 800ce62:	3710      	adds	r7, #16
 800ce64:	46bd      	mov	sp, r7
 800ce66:	bd80      	pop	{r7, pc}
 800ce68:	58024400 	.word	0x58024400
 800ce6c:	40008400 	.word	0x40008400

0800ce70 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800ce70:	b580      	push	{r7, lr}
 800ce72:	b084      	sub	sp, #16
 800ce74:	af00      	add	r7, sp, #0
 800ce76:	6078      	str	r0, [r7, #4]
 800ce78:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ce7a:	2300      	movs	r3, #0
 800ce7c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800ce7e:	4b53      	ldr	r3, [pc, #332]	; (800cfcc <RCCEx_PLL2_Config+0x15c>)
 800ce80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce82:	f003 0303 	and.w	r3, r3, #3
 800ce86:	2b03      	cmp	r3, #3
 800ce88:	d101      	bne.n	800ce8e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800ce8a:	2301      	movs	r3, #1
 800ce8c:	e099      	b.n	800cfc2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800ce8e:	4b4f      	ldr	r3, [pc, #316]	; (800cfcc <RCCEx_PLL2_Config+0x15c>)
 800ce90:	681b      	ldr	r3, [r3, #0]
 800ce92:	4a4e      	ldr	r2, [pc, #312]	; (800cfcc <RCCEx_PLL2_Config+0x15c>)
 800ce94:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800ce98:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ce9a:	f7f6 fe4b 	bl	8003b34 <HAL_GetTick>
 800ce9e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800cea0:	e008      	b.n	800ceb4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800cea2:	f7f6 fe47 	bl	8003b34 <HAL_GetTick>
 800cea6:	4602      	mov	r2, r0
 800cea8:	68bb      	ldr	r3, [r7, #8]
 800ceaa:	1ad3      	subs	r3, r2, r3
 800ceac:	2b02      	cmp	r3, #2
 800ceae:	d901      	bls.n	800ceb4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800ceb0:	2303      	movs	r3, #3
 800ceb2:	e086      	b.n	800cfc2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800ceb4:	4b45      	ldr	r3, [pc, #276]	; (800cfcc <RCCEx_PLL2_Config+0x15c>)
 800ceb6:	681b      	ldr	r3, [r3, #0]
 800ceb8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cebc:	2b00      	cmp	r3, #0
 800cebe:	d1f0      	bne.n	800cea2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800cec0:	4b42      	ldr	r3, [pc, #264]	; (800cfcc <RCCEx_PLL2_Config+0x15c>)
 800cec2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cec4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	681b      	ldr	r3, [r3, #0]
 800cecc:	031b      	lsls	r3, r3, #12
 800cece:	493f      	ldr	r1, [pc, #252]	; (800cfcc <RCCEx_PLL2_Config+0x15c>)
 800ced0:	4313      	orrs	r3, r2
 800ced2:	628b      	str	r3, [r1, #40]	; 0x28
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	685b      	ldr	r3, [r3, #4]
 800ced8:	3b01      	subs	r3, #1
 800ceda:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	689b      	ldr	r3, [r3, #8]
 800cee2:	3b01      	subs	r3, #1
 800cee4:	025b      	lsls	r3, r3, #9
 800cee6:	b29b      	uxth	r3, r3
 800cee8:	431a      	orrs	r2, r3
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	68db      	ldr	r3, [r3, #12]
 800ceee:	3b01      	subs	r3, #1
 800cef0:	041b      	lsls	r3, r3, #16
 800cef2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800cef6:	431a      	orrs	r2, r3
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	691b      	ldr	r3, [r3, #16]
 800cefc:	3b01      	subs	r3, #1
 800cefe:	061b      	lsls	r3, r3, #24
 800cf00:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800cf04:	4931      	ldr	r1, [pc, #196]	; (800cfcc <RCCEx_PLL2_Config+0x15c>)
 800cf06:	4313      	orrs	r3, r2
 800cf08:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800cf0a:	4b30      	ldr	r3, [pc, #192]	; (800cfcc <RCCEx_PLL2_Config+0x15c>)
 800cf0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf0e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	695b      	ldr	r3, [r3, #20]
 800cf16:	492d      	ldr	r1, [pc, #180]	; (800cfcc <RCCEx_PLL2_Config+0x15c>)
 800cf18:	4313      	orrs	r3, r2
 800cf1a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800cf1c:	4b2b      	ldr	r3, [pc, #172]	; (800cfcc <RCCEx_PLL2_Config+0x15c>)
 800cf1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf20:	f023 0220 	bic.w	r2, r3, #32
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	699b      	ldr	r3, [r3, #24]
 800cf28:	4928      	ldr	r1, [pc, #160]	; (800cfcc <RCCEx_PLL2_Config+0x15c>)
 800cf2a:	4313      	orrs	r3, r2
 800cf2c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800cf2e:	4b27      	ldr	r3, [pc, #156]	; (800cfcc <RCCEx_PLL2_Config+0x15c>)
 800cf30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf32:	4a26      	ldr	r2, [pc, #152]	; (800cfcc <RCCEx_PLL2_Config+0x15c>)
 800cf34:	f023 0310 	bic.w	r3, r3, #16
 800cf38:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800cf3a:	4b24      	ldr	r3, [pc, #144]	; (800cfcc <RCCEx_PLL2_Config+0x15c>)
 800cf3c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cf3e:	4b24      	ldr	r3, [pc, #144]	; (800cfd0 <RCCEx_PLL2_Config+0x160>)
 800cf40:	4013      	ands	r3, r2
 800cf42:	687a      	ldr	r2, [r7, #4]
 800cf44:	69d2      	ldr	r2, [r2, #28]
 800cf46:	00d2      	lsls	r2, r2, #3
 800cf48:	4920      	ldr	r1, [pc, #128]	; (800cfcc <RCCEx_PLL2_Config+0x15c>)
 800cf4a:	4313      	orrs	r3, r2
 800cf4c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800cf4e:	4b1f      	ldr	r3, [pc, #124]	; (800cfcc <RCCEx_PLL2_Config+0x15c>)
 800cf50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf52:	4a1e      	ldr	r2, [pc, #120]	; (800cfcc <RCCEx_PLL2_Config+0x15c>)
 800cf54:	f043 0310 	orr.w	r3, r3, #16
 800cf58:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800cf5a:	683b      	ldr	r3, [r7, #0]
 800cf5c:	2b00      	cmp	r3, #0
 800cf5e:	d106      	bne.n	800cf6e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800cf60:	4b1a      	ldr	r3, [pc, #104]	; (800cfcc <RCCEx_PLL2_Config+0x15c>)
 800cf62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf64:	4a19      	ldr	r2, [pc, #100]	; (800cfcc <RCCEx_PLL2_Config+0x15c>)
 800cf66:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800cf6a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800cf6c:	e00f      	b.n	800cf8e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800cf6e:	683b      	ldr	r3, [r7, #0]
 800cf70:	2b01      	cmp	r3, #1
 800cf72:	d106      	bne.n	800cf82 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800cf74:	4b15      	ldr	r3, [pc, #84]	; (800cfcc <RCCEx_PLL2_Config+0x15c>)
 800cf76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf78:	4a14      	ldr	r2, [pc, #80]	; (800cfcc <RCCEx_PLL2_Config+0x15c>)
 800cf7a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cf7e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800cf80:	e005      	b.n	800cf8e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800cf82:	4b12      	ldr	r3, [pc, #72]	; (800cfcc <RCCEx_PLL2_Config+0x15c>)
 800cf84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf86:	4a11      	ldr	r2, [pc, #68]	; (800cfcc <RCCEx_PLL2_Config+0x15c>)
 800cf88:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800cf8c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800cf8e:	4b0f      	ldr	r3, [pc, #60]	; (800cfcc <RCCEx_PLL2_Config+0x15c>)
 800cf90:	681b      	ldr	r3, [r3, #0]
 800cf92:	4a0e      	ldr	r2, [pc, #56]	; (800cfcc <RCCEx_PLL2_Config+0x15c>)
 800cf94:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800cf98:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cf9a:	f7f6 fdcb 	bl	8003b34 <HAL_GetTick>
 800cf9e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800cfa0:	e008      	b.n	800cfb4 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800cfa2:	f7f6 fdc7 	bl	8003b34 <HAL_GetTick>
 800cfa6:	4602      	mov	r2, r0
 800cfa8:	68bb      	ldr	r3, [r7, #8]
 800cfaa:	1ad3      	subs	r3, r2, r3
 800cfac:	2b02      	cmp	r3, #2
 800cfae:	d901      	bls.n	800cfb4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800cfb0:	2303      	movs	r3, #3
 800cfb2:	e006      	b.n	800cfc2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800cfb4:	4b05      	ldr	r3, [pc, #20]	; (800cfcc <RCCEx_PLL2_Config+0x15c>)
 800cfb6:	681b      	ldr	r3, [r3, #0]
 800cfb8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	d0f0      	beq.n	800cfa2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800cfc0:	7bfb      	ldrb	r3, [r7, #15]
}
 800cfc2:	4618      	mov	r0, r3
 800cfc4:	3710      	adds	r7, #16
 800cfc6:	46bd      	mov	sp, r7
 800cfc8:	bd80      	pop	{r7, pc}
 800cfca:	bf00      	nop
 800cfcc:	58024400 	.word	0x58024400
 800cfd0:	ffff0007 	.word	0xffff0007

0800cfd4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800cfd4:	b580      	push	{r7, lr}
 800cfd6:	b084      	sub	sp, #16
 800cfd8:	af00      	add	r7, sp, #0
 800cfda:	6078      	str	r0, [r7, #4]
 800cfdc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800cfde:	2300      	movs	r3, #0
 800cfe0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800cfe2:	4b53      	ldr	r3, [pc, #332]	; (800d130 <RCCEx_PLL3_Config+0x15c>)
 800cfe4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cfe6:	f003 0303 	and.w	r3, r3, #3
 800cfea:	2b03      	cmp	r3, #3
 800cfec:	d101      	bne.n	800cff2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800cfee:	2301      	movs	r3, #1
 800cff0:	e099      	b.n	800d126 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800cff2:	4b4f      	ldr	r3, [pc, #316]	; (800d130 <RCCEx_PLL3_Config+0x15c>)
 800cff4:	681b      	ldr	r3, [r3, #0]
 800cff6:	4a4e      	ldr	r2, [pc, #312]	; (800d130 <RCCEx_PLL3_Config+0x15c>)
 800cff8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800cffc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cffe:	f7f6 fd99 	bl	8003b34 <HAL_GetTick>
 800d002:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d004:	e008      	b.n	800d018 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800d006:	f7f6 fd95 	bl	8003b34 <HAL_GetTick>
 800d00a:	4602      	mov	r2, r0
 800d00c:	68bb      	ldr	r3, [r7, #8]
 800d00e:	1ad3      	subs	r3, r2, r3
 800d010:	2b02      	cmp	r3, #2
 800d012:	d901      	bls.n	800d018 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800d014:	2303      	movs	r3, #3
 800d016:	e086      	b.n	800d126 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d018:	4b45      	ldr	r3, [pc, #276]	; (800d130 <RCCEx_PLL3_Config+0x15c>)
 800d01a:	681b      	ldr	r3, [r3, #0]
 800d01c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d020:	2b00      	cmp	r3, #0
 800d022:	d1f0      	bne.n	800d006 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800d024:	4b42      	ldr	r3, [pc, #264]	; (800d130 <RCCEx_PLL3_Config+0x15c>)
 800d026:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d028:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	681b      	ldr	r3, [r3, #0]
 800d030:	051b      	lsls	r3, r3, #20
 800d032:	493f      	ldr	r1, [pc, #252]	; (800d130 <RCCEx_PLL3_Config+0x15c>)
 800d034:	4313      	orrs	r3, r2
 800d036:	628b      	str	r3, [r1, #40]	; 0x28
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	685b      	ldr	r3, [r3, #4]
 800d03c:	3b01      	subs	r3, #1
 800d03e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	689b      	ldr	r3, [r3, #8]
 800d046:	3b01      	subs	r3, #1
 800d048:	025b      	lsls	r3, r3, #9
 800d04a:	b29b      	uxth	r3, r3
 800d04c:	431a      	orrs	r2, r3
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	68db      	ldr	r3, [r3, #12]
 800d052:	3b01      	subs	r3, #1
 800d054:	041b      	lsls	r3, r3, #16
 800d056:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800d05a:	431a      	orrs	r2, r3
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	691b      	ldr	r3, [r3, #16]
 800d060:	3b01      	subs	r3, #1
 800d062:	061b      	lsls	r3, r3, #24
 800d064:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800d068:	4931      	ldr	r1, [pc, #196]	; (800d130 <RCCEx_PLL3_Config+0x15c>)
 800d06a:	4313      	orrs	r3, r2
 800d06c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800d06e:	4b30      	ldr	r3, [pc, #192]	; (800d130 <RCCEx_PLL3_Config+0x15c>)
 800d070:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d072:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	695b      	ldr	r3, [r3, #20]
 800d07a:	492d      	ldr	r1, [pc, #180]	; (800d130 <RCCEx_PLL3_Config+0x15c>)
 800d07c:	4313      	orrs	r3, r2
 800d07e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800d080:	4b2b      	ldr	r3, [pc, #172]	; (800d130 <RCCEx_PLL3_Config+0x15c>)
 800d082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d084:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	699b      	ldr	r3, [r3, #24]
 800d08c:	4928      	ldr	r1, [pc, #160]	; (800d130 <RCCEx_PLL3_Config+0x15c>)
 800d08e:	4313      	orrs	r3, r2
 800d090:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800d092:	4b27      	ldr	r3, [pc, #156]	; (800d130 <RCCEx_PLL3_Config+0x15c>)
 800d094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d096:	4a26      	ldr	r2, [pc, #152]	; (800d130 <RCCEx_PLL3_Config+0x15c>)
 800d098:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d09c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800d09e:	4b24      	ldr	r3, [pc, #144]	; (800d130 <RCCEx_PLL3_Config+0x15c>)
 800d0a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d0a2:	4b24      	ldr	r3, [pc, #144]	; (800d134 <RCCEx_PLL3_Config+0x160>)
 800d0a4:	4013      	ands	r3, r2
 800d0a6:	687a      	ldr	r2, [r7, #4]
 800d0a8:	69d2      	ldr	r2, [r2, #28]
 800d0aa:	00d2      	lsls	r2, r2, #3
 800d0ac:	4920      	ldr	r1, [pc, #128]	; (800d130 <RCCEx_PLL3_Config+0x15c>)
 800d0ae:	4313      	orrs	r3, r2
 800d0b0:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800d0b2:	4b1f      	ldr	r3, [pc, #124]	; (800d130 <RCCEx_PLL3_Config+0x15c>)
 800d0b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0b6:	4a1e      	ldr	r2, [pc, #120]	; (800d130 <RCCEx_PLL3_Config+0x15c>)
 800d0b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d0bc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800d0be:	683b      	ldr	r3, [r7, #0]
 800d0c0:	2b00      	cmp	r3, #0
 800d0c2:	d106      	bne.n	800d0d2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800d0c4:	4b1a      	ldr	r3, [pc, #104]	; (800d130 <RCCEx_PLL3_Config+0x15c>)
 800d0c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0c8:	4a19      	ldr	r2, [pc, #100]	; (800d130 <RCCEx_PLL3_Config+0x15c>)
 800d0ca:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800d0ce:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d0d0:	e00f      	b.n	800d0f2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800d0d2:	683b      	ldr	r3, [r7, #0]
 800d0d4:	2b01      	cmp	r3, #1
 800d0d6:	d106      	bne.n	800d0e6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800d0d8:	4b15      	ldr	r3, [pc, #84]	; (800d130 <RCCEx_PLL3_Config+0x15c>)
 800d0da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0dc:	4a14      	ldr	r2, [pc, #80]	; (800d130 <RCCEx_PLL3_Config+0x15c>)
 800d0de:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800d0e2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d0e4:	e005      	b.n	800d0f2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800d0e6:	4b12      	ldr	r3, [pc, #72]	; (800d130 <RCCEx_PLL3_Config+0x15c>)
 800d0e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0ea:	4a11      	ldr	r2, [pc, #68]	; (800d130 <RCCEx_PLL3_Config+0x15c>)
 800d0ec:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d0f0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800d0f2:	4b0f      	ldr	r3, [pc, #60]	; (800d130 <RCCEx_PLL3_Config+0x15c>)
 800d0f4:	681b      	ldr	r3, [r3, #0]
 800d0f6:	4a0e      	ldr	r2, [pc, #56]	; (800d130 <RCCEx_PLL3_Config+0x15c>)
 800d0f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d0fc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d0fe:	f7f6 fd19 	bl	8003b34 <HAL_GetTick>
 800d102:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d104:	e008      	b.n	800d118 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800d106:	f7f6 fd15 	bl	8003b34 <HAL_GetTick>
 800d10a:	4602      	mov	r2, r0
 800d10c:	68bb      	ldr	r3, [r7, #8]
 800d10e:	1ad3      	subs	r3, r2, r3
 800d110:	2b02      	cmp	r3, #2
 800d112:	d901      	bls.n	800d118 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800d114:	2303      	movs	r3, #3
 800d116:	e006      	b.n	800d126 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d118:	4b05      	ldr	r3, [pc, #20]	; (800d130 <RCCEx_PLL3_Config+0x15c>)
 800d11a:	681b      	ldr	r3, [r3, #0]
 800d11c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d120:	2b00      	cmp	r3, #0
 800d122:	d0f0      	beq.n	800d106 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800d124:	7bfb      	ldrb	r3, [r7, #15]
}
 800d126:	4618      	mov	r0, r3
 800d128:	3710      	adds	r7, #16
 800d12a:	46bd      	mov	sp, r7
 800d12c:	bd80      	pop	{r7, pc}
 800d12e:	bf00      	nop
 800d130:	58024400 	.word	0x58024400
 800d134:	ffff0007 	.word	0xffff0007

0800d138 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d138:	b580      	push	{r7, lr}
 800d13a:	b082      	sub	sp, #8
 800d13c:	af00      	add	r7, sp, #0
 800d13e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	2b00      	cmp	r3, #0
 800d144:	d101      	bne.n	800d14a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d146:	2301      	movs	r3, #1
 800d148:	e049      	b.n	800d1de <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d150:	b2db      	uxtb	r3, r3
 800d152:	2b00      	cmp	r3, #0
 800d154:	d106      	bne.n	800d164 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	2200      	movs	r2, #0
 800d15a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800d15e:	6878      	ldr	r0, [r7, #4]
 800d160:	f7f5 ff8c 	bl	800307c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	2202      	movs	r2, #2
 800d168:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	681a      	ldr	r2, [r3, #0]
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	3304      	adds	r3, #4
 800d174:	4619      	mov	r1, r3
 800d176:	4610      	mov	r0, r2
 800d178:	f000 f92e 	bl	800d3d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	2201      	movs	r2, #1
 800d180:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	2201      	movs	r2, #1
 800d188:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	2201      	movs	r2, #1
 800d190:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	2201      	movs	r2, #1
 800d198:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	2201      	movs	r2, #1
 800d1a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	2201      	movs	r2, #1
 800d1a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	2201      	movs	r2, #1
 800d1b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	2201      	movs	r2, #1
 800d1b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	2201      	movs	r2, #1
 800d1c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	2201      	movs	r2, #1
 800d1c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	2201      	movs	r2, #1
 800d1d0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	2201      	movs	r2, #1
 800d1d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d1dc:	2300      	movs	r3, #0
}
 800d1de:	4618      	mov	r0, r3
 800d1e0:	3708      	adds	r7, #8
 800d1e2:	46bd      	mov	sp, r7
 800d1e4:	bd80      	pop	{r7, pc}
	...

0800d1e8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800d1e8:	b580      	push	{r7, lr}
 800d1ea:	b084      	sub	sp, #16
 800d1ec:	af00      	add	r7, sp, #0
 800d1ee:	6078      	str	r0, [r7, #4]
 800d1f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800d1f2:	2300      	movs	r3, #0
 800d1f4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d1fc:	2b01      	cmp	r3, #1
 800d1fe:	d101      	bne.n	800d204 <HAL_TIM_ConfigClockSource+0x1c>
 800d200:	2302      	movs	r3, #2
 800d202:	e0dc      	b.n	800d3be <HAL_TIM_ConfigClockSource+0x1d6>
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	2201      	movs	r2, #1
 800d208:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	2202      	movs	r2, #2
 800d210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	681b      	ldr	r3, [r3, #0]
 800d218:	689b      	ldr	r3, [r3, #8]
 800d21a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800d21c:	68ba      	ldr	r2, [r7, #8]
 800d21e:	4b6a      	ldr	r3, [pc, #424]	; (800d3c8 <HAL_TIM_ConfigClockSource+0x1e0>)
 800d220:	4013      	ands	r3, r2
 800d222:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d224:	68bb      	ldr	r3, [r7, #8]
 800d226:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d22a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	681b      	ldr	r3, [r3, #0]
 800d230:	68ba      	ldr	r2, [r7, #8]
 800d232:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800d234:	683b      	ldr	r3, [r7, #0]
 800d236:	681b      	ldr	r3, [r3, #0]
 800d238:	4a64      	ldr	r2, [pc, #400]	; (800d3cc <HAL_TIM_ConfigClockSource+0x1e4>)
 800d23a:	4293      	cmp	r3, r2
 800d23c:	f000 80a9 	beq.w	800d392 <HAL_TIM_ConfigClockSource+0x1aa>
 800d240:	4a62      	ldr	r2, [pc, #392]	; (800d3cc <HAL_TIM_ConfigClockSource+0x1e4>)
 800d242:	4293      	cmp	r3, r2
 800d244:	f200 80ae 	bhi.w	800d3a4 <HAL_TIM_ConfigClockSource+0x1bc>
 800d248:	4a61      	ldr	r2, [pc, #388]	; (800d3d0 <HAL_TIM_ConfigClockSource+0x1e8>)
 800d24a:	4293      	cmp	r3, r2
 800d24c:	f000 80a1 	beq.w	800d392 <HAL_TIM_ConfigClockSource+0x1aa>
 800d250:	4a5f      	ldr	r2, [pc, #380]	; (800d3d0 <HAL_TIM_ConfigClockSource+0x1e8>)
 800d252:	4293      	cmp	r3, r2
 800d254:	f200 80a6 	bhi.w	800d3a4 <HAL_TIM_ConfigClockSource+0x1bc>
 800d258:	4a5e      	ldr	r2, [pc, #376]	; (800d3d4 <HAL_TIM_ConfigClockSource+0x1ec>)
 800d25a:	4293      	cmp	r3, r2
 800d25c:	f000 8099 	beq.w	800d392 <HAL_TIM_ConfigClockSource+0x1aa>
 800d260:	4a5c      	ldr	r2, [pc, #368]	; (800d3d4 <HAL_TIM_ConfigClockSource+0x1ec>)
 800d262:	4293      	cmp	r3, r2
 800d264:	f200 809e 	bhi.w	800d3a4 <HAL_TIM_ConfigClockSource+0x1bc>
 800d268:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800d26c:	f000 8091 	beq.w	800d392 <HAL_TIM_ConfigClockSource+0x1aa>
 800d270:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800d274:	f200 8096 	bhi.w	800d3a4 <HAL_TIM_ConfigClockSource+0x1bc>
 800d278:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d27c:	f000 8089 	beq.w	800d392 <HAL_TIM_ConfigClockSource+0x1aa>
 800d280:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d284:	f200 808e 	bhi.w	800d3a4 <HAL_TIM_ConfigClockSource+0x1bc>
 800d288:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d28c:	d03e      	beq.n	800d30c <HAL_TIM_ConfigClockSource+0x124>
 800d28e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d292:	f200 8087 	bhi.w	800d3a4 <HAL_TIM_ConfigClockSource+0x1bc>
 800d296:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d29a:	f000 8086 	beq.w	800d3aa <HAL_TIM_ConfigClockSource+0x1c2>
 800d29e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d2a2:	d87f      	bhi.n	800d3a4 <HAL_TIM_ConfigClockSource+0x1bc>
 800d2a4:	2b70      	cmp	r3, #112	; 0x70
 800d2a6:	d01a      	beq.n	800d2de <HAL_TIM_ConfigClockSource+0xf6>
 800d2a8:	2b70      	cmp	r3, #112	; 0x70
 800d2aa:	d87b      	bhi.n	800d3a4 <HAL_TIM_ConfigClockSource+0x1bc>
 800d2ac:	2b60      	cmp	r3, #96	; 0x60
 800d2ae:	d050      	beq.n	800d352 <HAL_TIM_ConfigClockSource+0x16a>
 800d2b0:	2b60      	cmp	r3, #96	; 0x60
 800d2b2:	d877      	bhi.n	800d3a4 <HAL_TIM_ConfigClockSource+0x1bc>
 800d2b4:	2b50      	cmp	r3, #80	; 0x50
 800d2b6:	d03c      	beq.n	800d332 <HAL_TIM_ConfigClockSource+0x14a>
 800d2b8:	2b50      	cmp	r3, #80	; 0x50
 800d2ba:	d873      	bhi.n	800d3a4 <HAL_TIM_ConfigClockSource+0x1bc>
 800d2bc:	2b40      	cmp	r3, #64	; 0x40
 800d2be:	d058      	beq.n	800d372 <HAL_TIM_ConfigClockSource+0x18a>
 800d2c0:	2b40      	cmp	r3, #64	; 0x40
 800d2c2:	d86f      	bhi.n	800d3a4 <HAL_TIM_ConfigClockSource+0x1bc>
 800d2c4:	2b30      	cmp	r3, #48	; 0x30
 800d2c6:	d064      	beq.n	800d392 <HAL_TIM_ConfigClockSource+0x1aa>
 800d2c8:	2b30      	cmp	r3, #48	; 0x30
 800d2ca:	d86b      	bhi.n	800d3a4 <HAL_TIM_ConfigClockSource+0x1bc>
 800d2cc:	2b20      	cmp	r3, #32
 800d2ce:	d060      	beq.n	800d392 <HAL_TIM_ConfigClockSource+0x1aa>
 800d2d0:	2b20      	cmp	r3, #32
 800d2d2:	d867      	bhi.n	800d3a4 <HAL_TIM_ConfigClockSource+0x1bc>
 800d2d4:	2b00      	cmp	r3, #0
 800d2d6:	d05c      	beq.n	800d392 <HAL_TIM_ConfigClockSource+0x1aa>
 800d2d8:	2b10      	cmp	r3, #16
 800d2da:	d05a      	beq.n	800d392 <HAL_TIM_ConfigClockSource+0x1aa>
 800d2dc:	e062      	b.n	800d3a4 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800d2e2:	683b      	ldr	r3, [r7, #0]
 800d2e4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800d2e6:	683b      	ldr	r3, [r7, #0]
 800d2e8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800d2ea:	683b      	ldr	r3, [r7, #0]
 800d2ec:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800d2ee:	f000 f98b 	bl	800d608 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	681b      	ldr	r3, [r3, #0]
 800d2f6:	689b      	ldr	r3, [r3, #8]
 800d2f8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800d2fa:	68bb      	ldr	r3, [r7, #8]
 800d2fc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800d300:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	681b      	ldr	r3, [r3, #0]
 800d306:	68ba      	ldr	r2, [r7, #8]
 800d308:	609a      	str	r2, [r3, #8]
      break;
 800d30a:	e04f      	b.n	800d3ac <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800d310:	683b      	ldr	r3, [r7, #0]
 800d312:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800d314:	683b      	ldr	r3, [r7, #0]
 800d316:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800d318:	683b      	ldr	r3, [r7, #0]
 800d31a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800d31c:	f000 f974 	bl	800d608 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	681b      	ldr	r3, [r3, #0]
 800d324:	689a      	ldr	r2, [r3, #8]
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	681b      	ldr	r3, [r3, #0]
 800d32a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d32e:	609a      	str	r2, [r3, #8]
      break;
 800d330:	e03c      	b.n	800d3ac <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800d336:	683b      	ldr	r3, [r7, #0]
 800d338:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800d33a:	683b      	ldr	r3, [r7, #0]
 800d33c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d33e:	461a      	mov	r2, r3
 800d340:	f000 f8e4 	bl	800d50c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	681b      	ldr	r3, [r3, #0]
 800d348:	2150      	movs	r1, #80	; 0x50
 800d34a:	4618      	mov	r0, r3
 800d34c:	f000 f93e 	bl	800d5cc <TIM_ITRx_SetConfig>
      break;
 800d350:	e02c      	b.n	800d3ac <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800d356:	683b      	ldr	r3, [r7, #0]
 800d358:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800d35a:	683b      	ldr	r3, [r7, #0]
 800d35c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800d35e:	461a      	mov	r2, r3
 800d360:	f000 f903 	bl	800d56a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	681b      	ldr	r3, [r3, #0]
 800d368:	2160      	movs	r1, #96	; 0x60
 800d36a:	4618      	mov	r0, r3
 800d36c:	f000 f92e 	bl	800d5cc <TIM_ITRx_SetConfig>
      break;
 800d370:	e01c      	b.n	800d3ac <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800d376:	683b      	ldr	r3, [r7, #0]
 800d378:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800d37a:	683b      	ldr	r3, [r7, #0]
 800d37c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d37e:	461a      	mov	r2, r3
 800d380:	f000 f8c4 	bl	800d50c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	681b      	ldr	r3, [r3, #0]
 800d388:	2140      	movs	r1, #64	; 0x40
 800d38a:	4618      	mov	r0, r3
 800d38c:	f000 f91e 	bl	800d5cc <TIM_ITRx_SetConfig>
      break;
 800d390:	e00c      	b.n	800d3ac <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	681a      	ldr	r2, [r3, #0]
 800d396:	683b      	ldr	r3, [r7, #0]
 800d398:	681b      	ldr	r3, [r3, #0]
 800d39a:	4619      	mov	r1, r3
 800d39c:	4610      	mov	r0, r2
 800d39e:	f000 f915 	bl	800d5cc <TIM_ITRx_SetConfig>
      break;
 800d3a2:	e003      	b.n	800d3ac <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800d3a4:	2301      	movs	r3, #1
 800d3a6:	73fb      	strb	r3, [r7, #15]
      break;
 800d3a8:	e000      	b.n	800d3ac <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800d3aa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	2201      	movs	r2, #1
 800d3b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	2200      	movs	r2, #0
 800d3b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800d3bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800d3be:	4618      	mov	r0, r3
 800d3c0:	3710      	adds	r7, #16
 800d3c2:	46bd      	mov	sp, r7
 800d3c4:	bd80      	pop	{r7, pc}
 800d3c6:	bf00      	nop
 800d3c8:	ffceff88 	.word	0xffceff88
 800d3cc:	00100040 	.word	0x00100040
 800d3d0:	00100030 	.word	0x00100030
 800d3d4:	00100020 	.word	0x00100020

0800d3d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800d3d8:	b480      	push	{r7}
 800d3da:	b085      	sub	sp, #20
 800d3dc:	af00      	add	r7, sp, #0
 800d3de:	6078      	str	r0, [r7, #4]
 800d3e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	681b      	ldr	r3, [r3, #0]
 800d3e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	4a40      	ldr	r2, [pc, #256]	; (800d4ec <TIM_Base_SetConfig+0x114>)
 800d3ec:	4293      	cmp	r3, r2
 800d3ee:	d013      	beq.n	800d418 <TIM_Base_SetConfig+0x40>
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d3f6:	d00f      	beq.n	800d418 <TIM_Base_SetConfig+0x40>
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	4a3d      	ldr	r2, [pc, #244]	; (800d4f0 <TIM_Base_SetConfig+0x118>)
 800d3fc:	4293      	cmp	r3, r2
 800d3fe:	d00b      	beq.n	800d418 <TIM_Base_SetConfig+0x40>
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	4a3c      	ldr	r2, [pc, #240]	; (800d4f4 <TIM_Base_SetConfig+0x11c>)
 800d404:	4293      	cmp	r3, r2
 800d406:	d007      	beq.n	800d418 <TIM_Base_SetConfig+0x40>
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	4a3b      	ldr	r2, [pc, #236]	; (800d4f8 <TIM_Base_SetConfig+0x120>)
 800d40c:	4293      	cmp	r3, r2
 800d40e:	d003      	beq.n	800d418 <TIM_Base_SetConfig+0x40>
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	4a3a      	ldr	r2, [pc, #232]	; (800d4fc <TIM_Base_SetConfig+0x124>)
 800d414:	4293      	cmp	r3, r2
 800d416:	d108      	bne.n	800d42a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d418:	68fb      	ldr	r3, [r7, #12]
 800d41a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d41e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d420:	683b      	ldr	r3, [r7, #0]
 800d422:	685b      	ldr	r3, [r3, #4]
 800d424:	68fa      	ldr	r2, [r7, #12]
 800d426:	4313      	orrs	r3, r2
 800d428:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	4a2f      	ldr	r2, [pc, #188]	; (800d4ec <TIM_Base_SetConfig+0x114>)
 800d42e:	4293      	cmp	r3, r2
 800d430:	d01f      	beq.n	800d472 <TIM_Base_SetConfig+0x9a>
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d438:	d01b      	beq.n	800d472 <TIM_Base_SetConfig+0x9a>
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	4a2c      	ldr	r2, [pc, #176]	; (800d4f0 <TIM_Base_SetConfig+0x118>)
 800d43e:	4293      	cmp	r3, r2
 800d440:	d017      	beq.n	800d472 <TIM_Base_SetConfig+0x9a>
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	4a2b      	ldr	r2, [pc, #172]	; (800d4f4 <TIM_Base_SetConfig+0x11c>)
 800d446:	4293      	cmp	r3, r2
 800d448:	d013      	beq.n	800d472 <TIM_Base_SetConfig+0x9a>
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	4a2a      	ldr	r2, [pc, #168]	; (800d4f8 <TIM_Base_SetConfig+0x120>)
 800d44e:	4293      	cmp	r3, r2
 800d450:	d00f      	beq.n	800d472 <TIM_Base_SetConfig+0x9a>
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	4a29      	ldr	r2, [pc, #164]	; (800d4fc <TIM_Base_SetConfig+0x124>)
 800d456:	4293      	cmp	r3, r2
 800d458:	d00b      	beq.n	800d472 <TIM_Base_SetConfig+0x9a>
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	4a28      	ldr	r2, [pc, #160]	; (800d500 <TIM_Base_SetConfig+0x128>)
 800d45e:	4293      	cmp	r3, r2
 800d460:	d007      	beq.n	800d472 <TIM_Base_SetConfig+0x9a>
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	4a27      	ldr	r2, [pc, #156]	; (800d504 <TIM_Base_SetConfig+0x12c>)
 800d466:	4293      	cmp	r3, r2
 800d468:	d003      	beq.n	800d472 <TIM_Base_SetConfig+0x9a>
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	4a26      	ldr	r2, [pc, #152]	; (800d508 <TIM_Base_SetConfig+0x130>)
 800d46e:	4293      	cmp	r3, r2
 800d470:	d108      	bne.n	800d484 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d472:	68fb      	ldr	r3, [r7, #12]
 800d474:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d478:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d47a:	683b      	ldr	r3, [r7, #0]
 800d47c:	68db      	ldr	r3, [r3, #12]
 800d47e:	68fa      	ldr	r2, [r7, #12]
 800d480:	4313      	orrs	r3, r2
 800d482:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d484:	68fb      	ldr	r3, [r7, #12]
 800d486:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800d48a:	683b      	ldr	r3, [r7, #0]
 800d48c:	695b      	ldr	r3, [r3, #20]
 800d48e:	4313      	orrs	r3, r2
 800d490:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	68fa      	ldr	r2, [r7, #12]
 800d496:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d498:	683b      	ldr	r3, [r7, #0]
 800d49a:	689a      	ldr	r2, [r3, #8]
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d4a0:	683b      	ldr	r3, [r7, #0]
 800d4a2:	681a      	ldr	r2, [r3, #0]
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	4a10      	ldr	r2, [pc, #64]	; (800d4ec <TIM_Base_SetConfig+0x114>)
 800d4ac:	4293      	cmp	r3, r2
 800d4ae:	d00f      	beq.n	800d4d0 <TIM_Base_SetConfig+0xf8>
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	4a12      	ldr	r2, [pc, #72]	; (800d4fc <TIM_Base_SetConfig+0x124>)
 800d4b4:	4293      	cmp	r3, r2
 800d4b6:	d00b      	beq.n	800d4d0 <TIM_Base_SetConfig+0xf8>
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	4a11      	ldr	r2, [pc, #68]	; (800d500 <TIM_Base_SetConfig+0x128>)
 800d4bc:	4293      	cmp	r3, r2
 800d4be:	d007      	beq.n	800d4d0 <TIM_Base_SetConfig+0xf8>
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	4a10      	ldr	r2, [pc, #64]	; (800d504 <TIM_Base_SetConfig+0x12c>)
 800d4c4:	4293      	cmp	r3, r2
 800d4c6:	d003      	beq.n	800d4d0 <TIM_Base_SetConfig+0xf8>
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	4a0f      	ldr	r2, [pc, #60]	; (800d508 <TIM_Base_SetConfig+0x130>)
 800d4cc:	4293      	cmp	r3, r2
 800d4ce:	d103      	bne.n	800d4d8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d4d0:	683b      	ldr	r3, [r7, #0]
 800d4d2:	691a      	ldr	r2, [r3, #16]
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	2201      	movs	r2, #1
 800d4dc:	615a      	str	r2, [r3, #20]
}
 800d4de:	bf00      	nop
 800d4e0:	3714      	adds	r7, #20
 800d4e2:	46bd      	mov	sp, r7
 800d4e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4e8:	4770      	bx	lr
 800d4ea:	bf00      	nop
 800d4ec:	40010000 	.word	0x40010000
 800d4f0:	40000400 	.word	0x40000400
 800d4f4:	40000800 	.word	0x40000800
 800d4f8:	40000c00 	.word	0x40000c00
 800d4fc:	40010400 	.word	0x40010400
 800d500:	40014000 	.word	0x40014000
 800d504:	40014400 	.word	0x40014400
 800d508:	40014800 	.word	0x40014800

0800d50c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d50c:	b480      	push	{r7}
 800d50e:	b087      	sub	sp, #28
 800d510:	af00      	add	r7, sp, #0
 800d512:	60f8      	str	r0, [r7, #12]
 800d514:	60b9      	str	r1, [r7, #8]
 800d516:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800d518:	68fb      	ldr	r3, [r7, #12]
 800d51a:	6a1b      	ldr	r3, [r3, #32]
 800d51c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d51e:	68fb      	ldr	r3, [r7, #12]
 800d520:	6a1b      	ldr	r3, [r3, #32]
 800d522:	f023 0201 	bic.w	r2, r3, #1
 800d526:	68fb      	ldr	r3, [r7, #12]
 800d528:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d52a:	68fb      	ldr	r3, [r7, #12]
 800d52c:	699b      	ldr	r3, [r3, #24]
 800d52e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d530:	693b      	ldr	r3, [r7, #16]
 800d532:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d536:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	011b      	lsls	r3, r3, #4
 800d53c:	693a      	ldr	r2, [r7, #16]
 800d53e:	4313      	orrs	r3, r2
 800d540:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d542:	697b      	ldr	r3, [r7, #20]
 800d544:	f023 030a 	bic.w	r3, r3, #10
 800d548:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800d54a:	697a      	ldr	r2, [r7, #20]
 800d54c:	68bb      	ldr	r3, [r7, #8]
 800d54e:	4313      	orrs	r3, r2
 800d550:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800d552:	68fb      	ldr	r3, [r7, #12]
 800d554:	693a      	ldr	r2, [r7, #16]
 800d556:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d558:	68fb      	ldr	r3, [r7, #12]
 800d55a:	697a      	ldr	r2, [r7, #20]
 800d55c:	621a      	str	r2, [r3, #32]
}
 800d55e:	bf00      	nop
 800d560:	371c      	adds	r7, #28
 800d562:	46bd      	mov	sp, r7
 800d564:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d568:	4770      	bx	lr

0800d56a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d56a:	b480      	push	{r7}
 800d56c:	b087      	sub	sp, #28
 800d56e:	af00      	add	r7, sp, #0
 800d570:	60f8      	str	r0, [r7, #12]
 800d572:	60b9      	str	r1, [r7, #8]
 800d574:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d576:	68fb      	ldr	r3, [r7, #12]
 800d578:	6a1b      	ldr	r3, [r3, #32]
 800d57a:	f023 0210 	bic.w	r2, r3, #16
 800d57e:	68fb      	ldr	r3, [r7, #12]
 800d580:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d582:	68fb      	ldr	r3, [r7, #12]
 800d584:	699b      	ldr	r3, [r3, #24]
 800d586:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800d588:	68fb      	ldr	r3, [r7, #12]
 800d58a:	6a1b      	ldr	r3, [r3, #32]
 800d58c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800d58e:	697b      	ldr	r3, [r7, #20]
 800d590:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800d594:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	031b      	lsls	r3, r3, #12
 800d59a:	697a      	ldr	r2, [r7, #20]
 800d59c:	4313      	orrs	r3, r2
 800d59e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800d5a0:	693b      	ldr	r3, [r7, #16]
 800d5a2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800d5a6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800d5a8:	68bb      	ldr	r3, [r7, #8]
 800d5aa:	011b      	lsls	r3, r3, #4
 800d5ac:	693a      	ldr	r2, [r7, #16]
 800d5ae:	4313      	orrs	r3, r2
 800d5b0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800d5b2:	68fb      	ldr	r3, [r7, #12]
 800d5b4:	697a      	ldr	r2, [r7, #20]
 800d5b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d5b8:	68fb      	ldr	r3, [r7, #12]
 800d5ba:	693a      	ldr	r2, [r7, #16]
 800d5bc:	621a      	str	r2, [r3, #32]
}
 800d5be:	bf00      	nop
 800d5c0:	371c      	adds	r7, #28
 800d5c2:	46bd      	mov	sp, r7
 800d5c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5c8:	4770      	bx	lr
	...

0800d5cc <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800d5cc:	b480      	push	{r7}
 800d5ce:	b085      	sub	sp, #20
 800d5d0:	af00      	add	r7, sp, #0
 800d5d2:	6078      	str	r0, [r7, #4]
 800d5d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	689b      	ldr	r3, [r3, #8]
 800d5da:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800d5dc:	68fa      	ldr	r2, [r7, #12]
 800d5de:	4b09      	ldr	r3, [pc, #36]	; (800d604 <TIM_ITRx_SetConfig+0x38>)
 800d5e0:	4013      	ands	r3, r2
 800d5e2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800d5e4:	683a      	ldr	r2, [r7, #0]
 800d5e6:	68fb      	ldr	r3, [r7, #12]
 800d5e8:	4313      	orrs	r3, r2
 800d5ea:	f043 0307 	orr.w	r3, r3, #7
 800d5ee:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	68fa      	ldr	r2, [r7, #12]
 800d5f4:	609a      	str	r2, [r3, #8]
}
 800d5f6:	bf00      	nop
 800d5f8:	3714      	adds	r7, #20
 800d5fa:	46bd      	mov	sp, r7
 800d5fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d600:	4770      	bx	lr
 800d602:	bf00      	nop
 800d604:	ffcfff8f 	.word	0xffcfff8f

0800d608 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800d608:	b480      	push	{r7}
 800d60a:	b087      	sub	sp, #28
 800d60c:	af00      	add	r7, sp, #0
 800d60e:	60f8      	str	r0, [r7, #12]
 800d610:	60b9      	str	r1, [r7, #8]
 800d612:	607a      	str	r2, [r7, #4]
 800d614:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800d616:	68fb      	ldr	r3, [r7, #12]
 800d618:	689b      	ldr	r3, [r3, #8]
 800d61a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d61c:	697b      	ldr	r3, [r7, #20]
 800d61e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d622:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800d624:	683b      	ldr	r3, [r7, #0]
 800d626:	021a      	lsls	r2, r3, #8
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	431a      	orrs	r2, r3
 800d62c:	68bb      	ldr	r3, [r7, #8]
 800d62e:	4313      	orrs	r3, r2
 800d630:	697a      	ldr	r2, [r7, #20]
 800d632:	4313      	orrs	r3, r2
 800d634:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d636:	68fb      	ldr	r3, [r7, #12]
 800d638:	697a      	ldr	r2, [r7, #20]
 800d63a:	609a      	str	r2, [r3, #8]
}
 800d63c:	bf00      	nop
 800d63e:	371c      	adds	r7, #28
 800d640:	46bd      	mov	sp, r7
 800d642:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d646:	4770      	bx	lr

0800d648 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d648:	b480      	push	{r7}
 800d64a:	b085      	sub	sp, #20
 800d64c:	af00      	add	r7, sp, #0
 800d64e:	6078      	str	r0, [r7, #4]
 800d650:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d658:	2b01      	cmp	r3, #1
 800d65a:	d101      	bne.n	800d660 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d65c:	2302      	movs	r3, #2
 800d65e:	e06d      	b.n	800d73c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	2201      	movs	r2, #1
 800d664:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	2202      	movs	r2, #2
 800d66c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	681b      	ldr	r3, [r3, #0]
 800d674:	685b      	ldr	r3, [r3, #4]
 800d676:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	681b      	ldr	r3, [r3, #0]
 800d67c:	689b      	ldr	r3, [r3, #8]
 800d67e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	681b      	ldr	r3, [r3, #0]
 800d684:	4a30      	ldr	r2, [pc, #192]	; (800d748 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800d686:	4293      	cmp	r3, r2
 800d688:	d004      	beq.n	800d694 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	681b      	ldr	r3, [r3, #0]
 800d68e:	4a2f      	ldr	r2, [pc, #188]	; (800d74c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800d690:	4293      	cmp	r3, r2
 800d692:	d108      	bne.n	800d6a6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800d694:	68fb      	ldr	r3, [r7, #12]
 800d696:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800d69a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800d69c:	683b      	ldr	r3, [r7, #0]
 800d69e:	685b      	ldr	r3, [r3, #4]
 800d6a0:	68fa      	ldr	r2, [r7, #12]
 800d6a2:	4313      	orrs	r3, r2
 800d6a4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d6a6:	68fb      	ldr	r3, [r7, #12]
 800d6a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d6ac:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d6ae:	683b      	ldr	r3, [r7, #0]
 800d6b0:	681b      	ldr	r3, [r3, #0]
 800d6b2:	68fa      	ldr	r2, [r7, #12]
 800d6b4:	4313      	orrs	r3, r2
 800d6b6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	681b      	ldr	r3, [r3, #0]
 800d6bc:	68fa      	ldr	r2, [r7, #12]
 800d6be:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	681b      	ldr	r3, [r3, #0]
 800d6c4:	4a20      	ldr	r2, [pc, #128]	; (800d748 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800d6c6:	4293      	cmp	r3, r2
 800d6c8:	d022      	beq.n	800d710 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	681b      	ldr	r3, [r3, #0]
 800d6ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d6d2:	d01d      	beq.n	800d710 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	681b      	ldr	r3, [r3, #0]
 800d6d8:	4a1d      	ldr	r2, [pc, #116]	; (800d750 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800d6da:	4293      	cmp	r3, r2
 800d6dc:	d018      	beq.n	800d710 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	681b      	ldr	r3, [r3, #0]
 800d6e2:	4a1c      	ldr	r2, [pc, #112]	; (800d754 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800d6e4:	4293      	cmp	r3, r2
 800d6e6:	d013      	beq.n	800d710 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	681b      	ldr	r3, [r3, #0]
 800d6ec:	4a1a      	ldr	r2, [pc, #104]	; (800d758 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800d6ee:	4293      	cmp	r3, r2
 800d6f0:	d00e      	beq.n	800d710 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	681b      	ldr	r3, [r3, #0]
 800d6f6:	4a15      	ldr	r2, [pc, #84]	; (800d74c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800d6f8:	4293      	cmp	r3, r2
 800d6fa:	d009      	beq.n	800d710 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	681b      	ldr	r3, [r3, #0]
 800d700:	4a16      	ldr	r2, [pc, #88]	; (800d75c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800d702:	4293      	cmp	r3, r2
 800d704:	d004      	beq.n	800d710 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	681b      	ldr	r3, [r3, #0]
 800d70a:	4a15      	ldr	r2, [pc, #84]	; (800d760 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800d70c:	4293      	cmp	r3, r2
 800d70e:	d10c      	bne.n	800d72a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d710:	68bb      	ldr	r3, [r7, #8]
 800d712:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d716:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d718:	683b      	ldr	r3, [r7, #0]
 800d71a:	689b      	ldr	r3, [r3, #8]
 800d71c:	68ba      	ldr	r2, [r7, #8]
 800d71e:	4313      	orrs	r3, r2
 800d720:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	681b      	ldr	r3, [r3, #0]
 800d726:	68ba      	ldr	r2, [r7, #8]
 800d728:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	2201      	movs	r2, #1
 800d72e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	2200      	movs	r2, #0
 800d736:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d73a:	2300      	movs	r3, #0
}
 800d73c:	4618      	mov	r0, r3
 800d73e:	3714      	adds	r7, #20
 800d740:	46bd      	mov	sp, r7
 800d742:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d746:	4770      	bx	lr
 800d748:	40010000 	.word	0x40010000
 800d74c:	40010400 	.word	0x40010400
 800d750:	40000400 	.word	0x40000400
 800d754:	40000800 	.word	0x40000800
 800d758:	40000c00 	.word	0x40000c00
 800d75c:	40001800 	.word	0x40001800
 800d760:	40014000 	.word	0x40014000

0800d764 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d764:	b580      	push	{r7, lr}
 800d766:	b082      	sub	sp, #8
 800d768:	af00      	add	r7, sp, #0
 800d76a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	2b00      	cmp	r3, #0
 800d770:	d101      	bne.n	800d776 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d772:	2301      	movs	r3, #1
 800d774:	e042      	b.n	800d7fc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d77c:	2b00      	cmp	r3, #0
 800d77e:	d106      	bne.n	800d78e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	2200      	movs	r2, #0
 800d784:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d788:	6878      	ldr	r0, [r7, #4]
 800d78a:	f7f5 fcf3 	bl	8003174 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	2224      	movs	r2, #36	; 0x24
 800d792:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	681b      	ldr	r3, [r3, #0]
 800d79a:	681a      	ldr	r2, [r3, #0]
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	681b      	ldr	r3, [r3, #0]
 800d7a0:	f022 0201 	bic.w	r2, r2, #1
 800d7a4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800d7a6:	6878      	ldr	r0, [r7, #4]
 800d7a8:	f000 f8ba 	bl	800d920 <UART_SetConfig>
 800d7ac:	4603      	mov	r3, r0
 800d7ae:	2b01      	cmp	r3, #1
 800d7b0:	d101      	bne.n	800d7b6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800d7b2:	2301      	movs	r3, #1
 800d7b4:	e022      	b.n	800d7fc <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d7ba:	2b00      	cmp	r3, #0
 800d7bc:	d002      	beq.n	800d7c4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800d7be:	6878      	ldr	r0, [r7, #4]
 800d7c0:	f000 fe16 	bl	800e3f0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	681b      	ldr	r3, [r3, #0]
 800d7c8:	685a      	ldr	r2, [r3, #4]
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	681b      	ldr	r3, [r3, #0]
 800d7ce:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800d7d2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	681b      	ldr	r3, [r3, #0]
 800d7d8:	689a      	ldr	r2, [r3, #8]
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	681b      	ldr	r3, [r3, #0]
 800d7de:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800d7e2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	681b      	ldr	r3, [r3, #0]
 800d7e8:	681a      	ldr	r2, [r3, #0]
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	681b      	ldr	r3, [r3, #0]
 800d7ee:	f042 0201 	orr.w	r2, r2, #1
 800d7f2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800d7f4:	6878      	ldr	r0, [r7, #4]
 800d7f6:	f000 fe9d 	bl	800e534 <UART_CheckIdleState>
 800d7fa:	4603      	mov	r3, r0
}
 800d7fc:	4618      	mov	r0, r3
 800d7fe:	3708      	adds	r7, #8
 800d800:	46bd      	mov	sp, r7
 800d802:	bd80      	pop	{r7, pc}

0800d804 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d804:	b580      	push	{r7, lr}
 800d806:	b08a      	sub	sp, #40	; 0x28
 800d808:	af02      	add	r7, sp, #8
 800d80a:	60f8      	str	r0, [r7, #12]
 800d80c:	60b9      	str	r1, [r7, #8]
 800d80e:	603b      	str	r3, [r7, #0]
 800d810:	4613      	mov	r3, r2
 800d812:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800d814:	68fb      	ldr	r3, [r7, #12]
 800d816:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d81a:	2b20      	cmp	r3, #32
 800d81c:	d17b      	bne.n	800d916 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800d81e:	68bb      	ldr	r3, [r7, #8]
 800d820:	2b00      	cmp	r3, #0
 800d822:	d002      	beq.n	800d82a <HAL_UART_Transmit+0x26>
 800d824:	88fb      	ldrh	r3, [r7, #6]
 800d826:	2b00      	cmp	r3, #0
 800d828:	d101      	bne.n	800d82e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800d82a:	2301      	movs	r3, #1
 800d82c:	e074      	b.n	800d918 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d82e:	68fb      	ldr	r3, [r7, #12]
 800d830:	2200      	movs	r2, #0
 800d832:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800d836:	68fb      	ldr	r3, [r7, #12]
 800d838:	2221      	movs	r2, #33	; 0x21
 800d83a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800d83e:	f7f6 f979 	bl	8003b34 <HAL_GetTick>
 800d842:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800d844:	68fb      	ldr	r3, [r7, #12]
 800d846:	88fa      	ldrh	r2, [r7, #6]
 800d848:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800d84c:	68fb      	ldr	r3, [r7, #12]
 800d84e:	88fa      	ldrh	r2, [r7, #6]
 800d850:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d854:	68fb      	ldr	r3, [r7, #12]
 800d856:	689b      	ldr	r3, [r3, #8]
 800d858:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d85c:	d108      	bne.n	800d870 <HAL_UART_Transmit+0x6c>
 800d85e:	68fb      	ldr	r3, [r7, #12]
 800d860:	691b      	ldr	r3, [r3, #16]
 800d862:	2b00      	cmp	r3, #0
 800d864:	d104      	bne.n	800d870 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800d866:	2300      	movs	r3, #0
 800d868:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800d86a:	68bb      	ldr	r3, [r7, #8]
 800d86c:	61bb      	str	r3, [r7, #24]
 800d86e:	e003      	b.n	800d878 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800d870:	68bb      	ldr	r3, [r7, #8]
 800d872:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800d874:	2300      	movs	r3, #0
 800d876:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800d878:	e030      	b.n	800d8dc <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800d87a:	683b      	ldr	r3, [r7, #0]
 800d87c:	9300      	str	r3, [sp, #0]
 800d87e:	697b      	ldr	r3, [r7, #20]
 800d880:	2200      	movs	r2, #0
 800d882:	2180      	movs	r1, #128	; 0x80
 800d884:	68f8      	ldr	r0, [r7, #12]
 800d886:	f000 feff 	bl	800e688 <UART_WaitOnFlagUntilTimeout>
 800d88a:	4603      	mov	r3, r0
 800d88c:	2b00      	cmp	r3, #0
 800d88e:	d005      	beq.n	800d89c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800d890:	68fb      	ldr	r3, [r7, #12]
 800d892:	2220      	movs	r2, #32
 800d894:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800d898:	2303      	movs	r3, #3
 800d89a:	e03d      	b.n	800d918 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800d89c:	69fb      	ldr	r3, [r7, #28]
 800d89e:	2b00      	cmp	r3, #0
 800d8a0:	d10b      	bne.n	800d8ba <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800d8a2:	69bb      	ldr	r3, [r7, #24]
 800d8a4:	881b      	ldrh	r3, [r3, #0]
 800d8a6:	461a      	mov	r2, r3
 800d8a8:	68fb      	ldr	r3, [r7, #12]
 800d8aa:	681b      	ldr	r3, [r3, #0]
 800d8ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d8b0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800d8b2:	69bb      	ldr	r3, [r7, #24]
 800d8b4:	3302      	adds	r3, #2
 800d8b6:	61bb      	str	r3, [r7, #24]
 800d8b8:	e007      	b.n	800d8ca <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800d8ba:	69fb      	ldr	r3, [r7, #28]
 800d8bc:	781a      	ldrb	r2, [r3, #0]
 800d8be:	68fb      	ldr	r3, [r7, #12]
 800d8c0:	681b      	ldr	r3, [r3, #0]
 800d8c2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800d8c4:	69fb      	ldr	r3, [r7, #28]
 800d8c6:	3301      	adds	r3, #1
 800d8c8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800d8ca:	68fb      	ldr	r3, [r7, #12]
 800d8cc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800d8d0:	b29b      	uxth	r3, r3
 800d8d2:	3b01      	subs	r3, #1
 800d8d4:	b29a      	uxth	r2, r3
 800d8d6:	68fb      	ldr	r3, [r7, #12]
 800d8d8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800d8dc:	68fb      	ldr	r3, [r7, #12]
 800d8de:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800d8e2:	b29b      	uxth	r3, r3
 800d8e4:	2b00      	cmp	r3, #0
 800d8e6:	d1c8      	bne.n	800d87a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800d8e8:	683b      	ldr	r3, [r7, #0]
 800d8ea:	9300      	str	r3, [sp, #0]
 800d8ec:	697b      	ldr	r3, [r7, #20]
 800d8ee:	2200      	movs	r2, #0
 800d8f0:	2140      	movs	r1, #64	; 0x40
 800d8f2:	68f8      	ldr	r0, [r7, #12]
 800d8f4:	f000 fec8 	bl	800e688 <UART_WaitOnFlagUntilTimeout>
 800d8f8:	4603      	mov	r3, r0
 800d8fa:	2b00      	cmp	r3, #0
 800d8fc:	d005      	beq.n	800d90a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800d8fe:	68fb      	ldr	r3, [r7, #12]
 800d900:	2220      	movs	r2, #32
 800d902:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800d906:	2303      	movs	r3, #3
 800d908:	e006      	b.n	800d918 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800d90a:	68fb      	ldr	r3, [r7, #12]
 800d90c:	2220      	movs	r2, #32
 800d90e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800d912:	2300      	movs	r3, #0
 800d914:	e000      	b.n	800d918 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800d916:	2302      	movs	r3, #2
  }
}
 800d918:	4618      	mov	r0, r3
 800d91a:	3720      	adds	r7, #32
 800d91c:	46bd      	mov	sp, r7
 800d91e:	bd80      	pop	{r7, pc}

0800d920 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d920:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d924:	b092      	sub	sp, #72	; 0x48
 800d926:	af00      	add	r7, sp, #0
 800d928:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800d92a:	2300      	movs	r3, #0
 800d92c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d930:	697b      	ldr	r3, [r7, #20]
 800d932:	689a      	ldr	r2, [r3, #8]
 800d934:	697b      	ldr	r3, [r7, #20]
 800d936:	691b      	ldr	r3, [r3, #16]
 800d938:	431a      	orrs	r2, r3
 800d93a:	697b      	ldr	r3, [r7, #20]
 800d93c:	695b      	ldr	r3, [r3, #20]
 800d93e:	431a      	orrs	r2, r3
 800d940:	697b      	ldr	r3, [r7, #20]
 800d942:	69db      	ldr	r3, [r3, #28]
 800d944:	4313      	orrs	r3, r2
 800d946:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d948:	697b      	ldr	r3, [r7, #20]
 800d94a:	681b      	ldr	r3, [r3, #0]
 800d94c:	681a      	ldr	r2, [r3, #0]
 800d94e:	4bbe      	ldr	r3, [pc, #760]	; (800dc48 <UART_SetConfig+0x328>)
 800d950:	4013      	ands	r3, r2
 800d952:	697a      	ldr	r2, [r7, #20]
 800d954:	6812      	ldr	r2, [r2, #0]
 800d956:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d958:	430b      	orrs	r3, r1
 800d95a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d95c:	697b      	ldr	r3, [r7, #20]
 800d95e:	681b      	ldr	r3, [r3, #0]
 800d960:	685b      	ldr	r3, [r3, #4]
 800d962:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800d966:	697b      	ldr	r3, [r7, #20]
 800d968:	68da      	ldr	r2, [r3, #12]
 800d96a:	697b      	ldr	r3, [r7, #20]
 800d96c:	681b      	ldr	r3, [r3, #0]
 800d96e:	430a      	orrs	r2, r1
 800d970:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d972:	697b      	ldr	r3, [r7, #20]
 800d974:	699b      	ldr	r3, [r3, #24]
 800d976:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800d978:	697b      	ldr	r3, [r7, #20]
 800d97a:	681b      	ldr	r3, [r3, #0]
 800d97c:	4ab3      	ldr	r2, [pc, #716]	; (800dc4c <UART_SetConfig+0x32c>)
 800d97e:	4293      	cmp	r3, r2
 800d980:	d004      	beq.n	800d98c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800d982:	697b      	ldr	r3, [r7, #20]
 800d984:	6a1b      	ldr	r3, [r3, #32]
 800d986:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d988:	4313      	orrs	r3, r2
 800d98a:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d98c:	697b      	ldr	r3, [r7, #20]
 800d98e:	681b      	ldr	r3, [r3, #0]
 800d990:	689a      	ldr	r2, [r3, #8]
 800d992:	4baf      	ldr	r3, [pc, #700]	; (800dc50 <UART_SetConfig+0x330>)
 800d994:	4013      	ands	r3, r2
 800d996:	697a      	ldr	r2, [r7, #20]
 800d998:	6812      	ldr	r2, [r2, #0]
 800d99a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d99c:	430b      	orrs	r3, r1
 800d99e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800d9a0:	697b      	ldr	r3, [r7, #20]
 800d9a2:	681b      	ldr	r3, [r3, #0]
 800d9a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d9a6:	f023 010f 	bic.w	r1, r3, #15
 800d9aa:	697b      	ldr	r3, [r7, #20]
 800d9ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d9ae:	697b      	ldr	r3, [r7, #20]
 800d9b0:	681b      	ldr	r3, [r3, #0]
 800d9b2:	430a      	orrs	r2, r1
 800d9b4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d9b6:	697b      	ldr	r3, [r7, #20]
 800d9b8:	681b      	ldr	r3, [r3, #0]
 800d9ba:	4aa6      	ldr	r2, [pc, #664]	; (800dc54 <UART_SetConfig+0x334>)
 800d9bc:	4293      	cmp	r3, r2
 800d9be:	d177      	bne.n	800dab0 <UART_SetConfig+0x190>
 800d9c0:	4ba5      	ldr	r3, [pc, #660]	; (800dc58 <UART_SetConfig+0x338>)
 800d9c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d9c4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d9c8:	2b28      	cmp	r3, #40	; 0x28
 800d9ca:	d86d      	bhi.n	800daa8 <UART_SetConfig+0x188>
 800d9cc:	a201      	add	r2, pc, #4	; (adr r2, 800d9d4 <UART_SetConfig+0xb4>)
 800d9ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d9d2:	bf00      	nop
 800d9d4:	0800da79 	.word	0x0800da79
 800d9d8:	0800daa9 	.word	0x0800daa9
 800d9dc:	0800daa9 	.word	0x0800daa9
 800d9e0:	0800daa9 	.word	0x0800daa9
 800d9e4:	0800daa9 	.word	0x0800daa9
 800d9e8:	0800daa9 	.word	0x0800daa9
 800d9ec:	0800daa9 	.word	0x0800daa9
 800d9f0:	0800daa9 	.word	0x0800daa9
 800d9f4:	0800da81 	.word	0x0800da81
 800d9f8:	0800daa9 	.word	0x0800daa9
 800d9fc:	0800daa9 	.word	0x0800daa9
 800da00:	0800daa9 	.word	0x0800daa9
 800da04:	0800daa9 	.word	0x0800daa9
 800da08:	0800daa9 	.word	0x0800daa9
 800da0c:	0800daa9 	.word	0x0800daa9
 800da10:	0800daa9 	.word	0x0800daa9
 800da14:	0800da89 	.word	0x0800da89
 800da18:	0800daa9 	.word	0x0800daa9
 800da1c:	0800daa9 	.word	0x0800daa9
 800da20:	0800daa9 	.word	0x0800daa9
 800da24:	0800daa9 	.word	0x0800daa9
 800da28:	0800daa9 	.word	0x0800daa9
 800da2c:	0800daa9 	.word	0x0800daa9
 800da30:	0800daa9 	.word	0x0800daa9
 800da34:	0800da91 	.word	0x0800da91
 800da38:	0800daa9 	.word	0x0800daa9
 800da3c:	0800daa9 	.word	0x0800daa9
 800da40:	0800daa9 	.word	0x0800daa9
 800da44:	0800daa9 	.word	0x0800daa9
 800da48:	0800daa9 	.word	0x0800daa9
 800da4c:	0800daa9 	.word	0x0800daa9
 800da50:	0800daa9 	.word	0x0800daa9
 800da54:	0800da99 	.word	0x0800da99
 800da58:	0800daa9 	.word	0x0800daa9
 800da5c:	0800daa9 	.word	0x0800daa9
 800da60:	0800daa9 	.word	0x0800daa9
 800da64:	0800daa9 	.word	0x0800daa9
 800da68:	0800daa9 	.word	0x0800daa9
 800da6c:	0800daa9 	.word	0x0800daa9
 800da70:	0800daa9 	.word	0x0800daa9
 800da74:	0800daa1 	.word	0x0800daa1
 800da78:	2301      	movs	r3, #1
 800da7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da7e:	e222      	b.n	800dec6 <UART_SetConfig+0x5a6>
 800da80:	2304      	movs	r3, #4
 800da82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da86:	e21e      	b.n	800dec6 <UART_SetConfig+0x5a6>
 800da88:	2308      	movs	r3, #8
 800da8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da8e:	e21a      	b.n	800dec6 <UART_SetConfig+0x5a6>
 800da90:	2310      	movs	r3, #16
 800da92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da96:	e216      	b.n	800dec6 <UART_SetConfig+0x5a6>
 800da98:	2320      	movs	r3, #32
 800da9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da9e:	e212      	b.n	800dec6 <UART_SetConfig+0x5a6>
 800daa0:	2340      	movs	r3, #64	; 0x40
 800daa2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800daa6:	e20e      	b.n	800dec6 <UART_SetConfig+0x5a6>
 800daa8:	2380      	movs	r3, #128	; 0x80
 800daaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800daae:	e20a      	b.n	800dec6 <UART_SetConfig+0x5a6>
 800dab0:	697b      	ldr	r3, [r7, #20]
 800dab2:	681b      	ldr	r3, [r3, #0]
 800dab4:	4a69      	ldr	r2, [pc, #420]	; (800dc5c <UART_SetConfig+0x33c>)
 800dab6:	4293      	cmp	r3, r2
 800dab8:	d130      	bne.n	800db1c <UART_SetConfig+0x1fc>
 800daba:	4b67      	ldr	r3, [pc, #412]	; (800dc58 <UART_SetConfig+0x338>)
 800dabc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dabe:	f003 0307 	and.w	r3, r3, #7
 800dac2:	2b05      	cmp	r3, #5
 800dac4:	d826      	bhi.n	800db14 <UART_SetConfig+0x1f4>
 800dac6:	a201      	add	r2, pc, #4	; (adr r2, 800dacc <UART_SetConfig+0x1ac>)
 800dac8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dacc:	0800dae5 	.word	0x0800dae5
 800dad0:	0800daed 	.word	0x0800daed
 800dad4:	0800daf5 	.word	0x0800daf5
 800dad8:	0800dafd 	.word	0x0800dafd
 800dadc:	0800db05 	.word	0x0800db05
 800dae0:	0800db0d 	.word	0x0800db0d
 800dae4:	2300      	movs	r3, #0
 800dae6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800daea:	e1ec      	b.n	800dec6 <UART_SetConfig+0x5a6>
 800daec:	2304      	movs	r3, #4
 800daee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800daf2:	e1e8      	b.n	800dec6 <UART_SetConfig+0x5a6>
 800daf4:	2308      	movs	r3, #8
 800daf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dafa:	e1e4      	b.n	800dec6 <UART_SetConfig+0x5a6>
 800dafc:	2310      	movs	r3, #16
 800dafe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db02:	e1e0      	b.n	800dec6 <UART_SetConfig+0x5a6>
 800db04:	2320      	movs	r3, #32
 800db06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db0a:	e1dc      	b.n	800dec6 <UART_SetConfig+0x5a6>
 800db0c:	2340      	movs	r3, #64	; 0x40
 800db0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db12:	e1d8      	b.n	800dec6 <UART_SetConfig+0x5a6>
 800db14:	2380      	movs	r3, #128	; 0x80
 800db16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db1a:	e1d4      	b.n	800dec6 <UART_SetConfig+0x5a6>
 800db1c:	697b      	ldr	r3, [r7, #20]
 800db1e:	681b      	ldr	r3, [r3, #0]
 800db20:	4a4f      	ldr	r2, [pc, #316]	; (800dc60 <UART_SetConfig+0x340>)
 800db22:	4293      	cmp	r3, r2
 800db24:	d130      	bne.n	800db88 <UART_SetConfig+0x268>
 800db26:	4b4c      	ldr	r3, [pc, #304]	; (800dc58 <UART_SetConfig+0x338>)
 800db28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800db2a:	f003 0307 	and.w	r3, r3, #7
 800db2e:	2b05      	cmp	r3, #5
 800db30:	d826      	bhi.n	800db80 <UART_SetConfig+0x260>
 800db32:	a201      	add	r2, pc, #4	; (adr r2, 800db38 <UART_SetConfig+0x218>)
 800db34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db38:	0800db51 	.word	0x0800db51
 800db3c:	0800db59 	.word	0x0800db59
 800db40:	0800db61 	.word	0x0800db61
 800db44:	0800db69 	.word	0x0800db69
 800db48:	0800db71 	.word	0x0800db71
 800db4c:	0800db79 	.word	0x0800db79
 800db50:	2300      	movs	r3, #0
 800db52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db56:	e1b6      	b.n	800dec6 <UART_SetConfig+0x5a6>
 800db58:	2304      	movs	r3, #4
 800db5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db5e:	e1b2      	b.n	800dec6 <UART_SetConfig+0x5a6>
 800db60:	2308      	movs	r3, #8
 800db62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db66:	e1ae      	b.n	800dec6 <UART_SetConfig+0x5a6>
 800db68:	2310      	movs	r3, #16
 800db6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db6e:	e1aa      	b.n	800dec6 <UART_SetConfig+0x5a6>
 800db70:	2320      	movs	r3, #32
 800db72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db76:	e1a6      	b.n	800dec6 <UART_SetConfig+0x5a6>
 800db78:	2340      	movs	r3, #64	; 0x40
 800db7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db7e:	e1a2      	b.n	800dec6 <UART_SetConfig+0x5a6>
 800db80:	2380      	movs	r3, #128	; 0x80
 800db82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db86:	e19e      	b.n	800dec6 <UART_SetConfig+0x5a6>
 800db88:	697b      	ldr	r3, [r7, #20]
 800db8a:	681b      	ldr	r3, [r3, #0]
 800db8c:	4a35      	ldr	r2, [pc, #212]	; (800dc64 <UART_SetConfig+0x344>)
 800db8e:	4293      	cmp	r3, r2
 800db90:	d130      	bne.n	800dbf4 <UART_SetConfig+0x2d4>
 800db92:	4b31      	ldr	r3, [pc, #196]	; (800dc58 <UART_SetConfig+0x338>)
 800db94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800db96:	f003 0307 	and.w	r3, r3, #7
 800db9a:	2b05      	cmp	r3, #5
 800db9c:	d826      	bhi.n	800dbec <UART_SetConfig+0x2cc>
 800db9e:	a201      	add	r2, pc, #4	; (adr r2, 800dba4 <UART_SetConfig+0x284>)
 800dba0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dba4:	0800dbbd 	.word	0x0800dbbd
 800dba8:	0800dbc5 	.word	0x0800dbc5
 800dbac:	0800dbcd 	.word	0x0800dbcd
 800dbb0:	0800dbd5 	.word	0x0800dbd5
 800dbb4:	0800dbdd 	.word	0x0800dbdd
 800dbb8:	0800dbe5 	.word	0x0800dbe5
 800dbbc:	2300      	movs	r3, #0
 800dbbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dbc2:	e180      	b.n	800dec6 <UART_SetConfig+0x5a6>
 800dbc4:	2304      	movs	r3, #4
 800dbc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dbca:	e17c      	b.n	800dec6 <UART_SetConfig+0x5a6>
 800dbcc:	2308      	movs	r3, #8
 800dbce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dbd2:	e178      	b.n	800dec6 <UART_SetConfig+0x5a6>
 800dbd4:	2310      	movs	r3, #16
 800dbd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dbda:	e174      	b.n	800dec6 <UART_SetConfig+0x5a6>
 800dbdc:	2320      	movs	r3, #32
 800dbde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dbe2:	e170      	b.n	800dec6 <UART_SetConfig+0x5a6>
 800dbe4:	2340      	movs	r3, #64	; 0x40
 800dbe6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dbea:	e16c      	b.n	800dec6 <UART_SetConfig+0x5a6>
 800dbec:	2380      	movs	r3, #128	; 0x80
 800dbee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dbf2:	e168      	b.n	800dec6 <UART_SetConfig+0x5a6>
 800dbf4:	697b      	ldr	r3, [r7, #20]
 800dbf6:	681b      	ldr	r3, [r3, #0]
 800dbf8:	4a1b      	ldr	r2, [pc, #108]	; (800dc68 <UART_SetConfig+0x348>)
 800dbfa:	4293      	cmp	r3, r2
 800dbfc:	d142      	bne.n	800dc84 <UART_SetConfig+0x364>
 800dbfe:	4b16      	ldr	r3, [pc, #88]	; (800dc58 <UART_SetConfig+0x338>)
 800dc00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dc02:	f003 0307 	and.w	r3, r3, #7
 800dc06:	2b05      	cmp	r3, #5
 800dc08:	d838      	bhi.n	800dc7c <UART_SetConfig+0x35c>
 800dc0a:	a201      	add	r2, pc, #4	; (adr r2, 800dc10 <UART_SetConfig+0x2f0>)
 800dc0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc10:	0800dc29 	.word	0x0800dc29
 800dc14:	0800dc31 	.word	0x0800dc31
 800dc18:	0800dc39 	.word	0x0800dc39
 800dc1c:	0800dc41 	.word	0x0800dc41
 800dc20:	0800dc6d 	.word	0x0800dc6d
 800dc24:	0800dc75 	.word	0x0800dc75
 800dc28:	2300      	movs	r3, #0
 800dc2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc2e:	e14a      	b.n	800dec6 <UART_SetConfig+0x5a6>
 800dc30:	2304      	movs	r3, #4
 800dc32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc36:	e146      	b.n	800dec6 <UART_SetConfig+0x5a6>
 800dc38:	2308      	movs	r3, #8
 800dc3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc3e:	e142      	b.n	800dec6 <UART_SetConfig+0x5a6>
 800dc40:	2310      	movs	r3, #16
 800dc42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc46:	e13e      	b.n	800dec6 <UART_SetConfig+0x5a6>
 800dc48:	cfff69f3 	.word	0xcfff69f3
 800dc4c:	58000c00 	.word	0x58000c00
 800dc50:	11fff4ff 	.word	0x11fff4ff
 800dc54:	40011000 	.word	0x40011000
 800dc58:	58024400 	.word	0x58024400
 800dc5c:	40004400 	.word	0x40004400
 800dc60:	40004800 	.word	0x40004800
 800dc64:	40004c00 	.word	0x40004c00
 800dc68:	40005000 	.word	0x40005000
 800dc6c:	2320      	movs	r3, #32
 800dc6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc72:	e128      	b.n	800dec6 <UART_SetConfig+0x5a6>
 800dc74:	2340      	movs	r3, #64	; 0x40
 800dc76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc7a:	e124      	b.n	800dec6 <UART_SetConfig+0x5a6>
 800dc7c:	2380      	movs	r3, #128	; 0x80
 800dc7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc82:	e120      	b.n	800dec6 <UART_SetConfig+0x5a6>
 800dc84:	697b      	ldr	r3, [r7, #20]
 800dc86:	681b      	ldr	r3, [r3, #0]
 800dc88:	4acb      	ldr	r2, [pc, #812]	; (800dfb8 <UART_SetConfig+0x698>)
 800dc8a:	4293      	cmp	r3, r2
 800dc8c:	d176      	bne.n	800dd7c <UART_SetConfig+0x45c>
 800dc8e:	4bcb      	ldr	r3, [pc, #812]	; (800dfbc <UART_SetConfig+0x69c>)
 800dc90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dc92:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800dc96:	2b28      	cmp	r3, #40	; 0x28
 800dc98:	d86c      	bhi.n	800dd74 <UART_SetConfig+0x454>
 800dc9a:	a201      	add	r2, pc, #4	; (adr r2, 800dca0 <UART_SetConfig+0x380>)
 800dc9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dca0:	0800dd45 	.word	0x0800dd45
 800dca4:	0800dd75 	.word	0x0800dd75
 800dca8:	0800dd75 	.word	0x0800dd75
 800dcac:	0800dd75 	.word	0x0800dd75
 800dcb0:	0800dd75 	.word	0x0800dd75
 800dcb4:	0800dd75 	.word	0x0800dd75
 800dcb8:	0800dd75 	.word	0x0800dd75
 800dcbc:	0800dd75 	.word	0x0800dd75
 800dcc0:	0800dd4d 	.word	0x0800dd4d
 800dcc4:	0800dd75 	.word	0x0800dd75
 800dcc8:	0800dd75 	.word	0x0800dd75
 800dccc:	0800dd75 	.word	0x0800dd75
 800dcd0:	0800dd75 	.word	0x0800dd75
 800dcd4:	0800dd75 	.word	0x0800dd75
 800dcd8:	0800dd75 	.word	0x0800dd75
 800dcdc:	0800dd75 	.word	0x0800dd75
 800dce0:	0800dd55 	.word	0x0800dd55
 800dce4:	0800dd75 	.word	0x0800dd75
 800dce8:	0800dd75 	.word	0x0800dd75
 800dcec:	0800dd75 	.word	0x0800dd75
 800dcf0:	0800dd75 	.word	0x0800dd75
 800dcf4:	0800dd75 	.word	0x0800dd75
 800dcf8:	0800dd75 	.word	0x0800dd75
 800dcfc:	0800dd75 	.word	0x0800dd75
 800dd00:	0800dd5d 	.word	0x0800dd5d
 800dd04:	0800dd75 	.word	0x0800dd75
 800dd08:	0800dd75 	.word	0x0800dd75
 800dd0c:	0800dd75 	.word	0x0800dd75
 800dd10:	0800dd75 	.word	0x0800dd75
 800dd14:	0800dd75 	.word	0x0800dd75
 800dd18:	0800dd75 	.word	0x0800dd75
 800dd1c:	0800dd75 	.word	0x0800dd75
 800dd20:	0800dd65 	.word	0x0800dd65
 800dd24:	0800dd75 	.word	0x0800dd75
 800dd28:	0800dd75 	.word	0x0800dd75
 800dd2c:	0800dd75 	.word	0x0800dd75
 800dd30:	0800dd75 	.word	0x0800dd75
 800dd34:	0800dd75 	.word	0x0800dd75
 800dd38:	0800dd75 	.word	0x0800dd75
 800dd3c:	0800dd75 	.word	0x0800dd75
 800dd40:	0800dd6d 	.word	0x0800dd6d
 800dd44:	2301      	movs	r3, #1
 800dd46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd4a:	e0bc      	b.n	800dec6 <UART_SetConfig+0x5a6>
 800dd4c:	2304      	movs	r3, #4
 800dd4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd52:	e0b8      	b.n	800dec6 <UART_SetConfig+0x5a6>
 800dd54:	2308      	movs	r3, #8
 800dd56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd5a:	e0b4      	b.n	800dec6 <UART_SetConfig+0x5a6>
 800dd5c:	2310      	movs	r3, #16
 800dd5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd62:	e0b0      	b.n	800dec6 <UART_SetConfig+0x5a6>
 800dd64:	2320      	movs	r3, #32
 800dd66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd6a:	e0ac      	b.n	800dec6 <UART_SetConfig+0x5a6>
 800dd6c:	2340      	movs	r3, #64	; 0x40
 800dd6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd72:	e0a8      	b.n	800dec6 <UART_SetConfig+0x5a6>
 800dd74:	2380      	movs	r3, #128	; 0x80
 800dd76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd7a:	e0a4      	b.n	800dec6 <UART_SetConfig+0x5a6>
 800dd7c:	697b      	ldr	r3, [r7, #20]
 800dd7e:	681b      	ldr	r3, [r3, #0]
 800dd80:	4a8f      	ldr	r2, [pc, #572]	; (800dfc0 <UART_SetConfig+0x6a0>)
 800dd82:	4293      	cmp	r3, r2
 800dd84:	d130      	bne.n	800dde8 <UART_SetConfig+0x4c8>
 800dd86:	4b8d      	ldr	r3, [pc, #564]	; (800dfbc <UART_SetConfig+0x69c>)
 800dd88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dd8a:	f003 0307 	and.w	r3, r3, #7
 800dd8e:	2b05      	cmp	r3, #5
 800dd90:	d826      	bhi.n	800dde0 <UART_SetConfig+0x4c0>
 800dd92:	a201      	add	r2, pc, #4	; (adr r2, 800dd98 <UART_SetConfig+0x478>)
 800dd94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd98:	0800ddb1 	.word	0x0800ddb1
 800dd9c:	0800ddb9 	.word	0x0800ddb9
 800dda0:	0800ddc1 	.word	0x0800ddc1
 800dda4:	0800ddc9 	.word	0x0800ddc9
 800dda8:	0800ddd1 	.word	0x0800ddd1
 800ddac:	0800ddd9 	.word	0x0800ddd9
 800ddb0:	2300      	movs	r3, #0
 800ddb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ddb6:	e086      	b.n	800dec6 <UART_SetConfig+0x5a6>
 800ddb8:	2304      	movs	r3, #4
 800ddba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ddbe:	e082      	b.n	800dec6 <UART_SetConfig+0x5a6>
 800ddc0:	2308      	movs	r3, #8
 800ddc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ddc6:	e07e      	b.n	800dec6 <UART_SetConfig+0x5a6>
 800ddc8:	2310      	movs	r3, #16
 800ddca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ddce:	e07a      	b.n	800dec6 <UART_SetConfig+0x5a6>
 800ddd0:	2320      	movs	r3, #32
 800ddd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ddd6:	e076      	b.n	800dec6 <UART_SetConfig+0x5a6>
 800ddd8:	2340      	movs	r3, #64	; 0x40
 800ddda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ddde:	e072      	b.n	800dec6 <UART_SetConfig+0x5a6>
 800dde0:	2380      	movs	r3, #128	; 0x80
 800dde2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dde6:	e06e      	b.n	800dec6 <UART_SetConfig+0x5a6>
 800dde8:	697b      	ldr	r3, [r7, #20]
 800ddea:	681b      	ldr	r3, [r3, #0]
 800ddec:	4a75      	ldr	r2, [pc, #468]	; (800dfc4 <UART_SetConfig+0x6a4>)
 800ddee:	4293      	cmp	r3, r2
 800ddf0:	d130      	bne.n	800de54 <UART_SetConfig+0x534>
 800ddf2:	4b72      	ldr	r3, [pc, #456]	; (800dfbc <UART_SetConfig+0x69c>)
 800ddf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ddf6:	f003 0307 	and.w	r3, r3, #7
 800ddfa:	2b05      	cmp	r3, #5
 800ddfc:	d826      	bhi.n	800de4c <UART_SetConfig+0x52c>
 800ddfe:	a201      	add	r2, pc, #4	; (adr r2, 800de04 <UART_SetConfig+0x4e4>)
 800de00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de04:	0800de1d 	.word	0x0800de1d
 800de08:	0800de25 	.word	0x0800de25
 800de0c:	0800de2d 	.word	0x0800de2d
 800de10:	0800de35 	.word	0x0800de35
 800de14:	0800de3d 	.word	0x0800de3d
 800de18:	0800de45 	.word	0x0800de45
 800de1c:	2300      	movs	r3, #0
 800de1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de22:	e050      	b.n	800dec6 <UART_SetConfig+0x5a6>
 800de24:	2304      	movs	r3, #4
 800de26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de2a:	e04c      	b.n	800dec6 <UART_SetConfig+0x5a6>
 800de2c:	2308      	movs	r3, #8
 800de2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de32:	e048      	b.n	800dec6 <UART_SetConfig+0x5a6>
 800de34:	2310      	movs	r3, #16
 800de36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de3a:	e044      	b.n	800dec6 <UART_SetConfig+0x5a6>
 800de3c:	2320      	movs	r3, #32
 800de3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de42:	e040      	b.n	800dec6 <UART_SetConfig+0x5a6>
 800de44:	2340      	movs	r3, #64	; 0x40
 800de46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de4a:	e03c      	b.n	800dec6 <UART_SetConfig+0x5a6>
 800de4c:	2380      	movs	r3, #128	; 0x80
 800de4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de52:	e038      	b.n	800dec6 <UART_SetConfig+0x5a6>
 800de54:	697b      	ldr	r3, [r7, #20]
 800de56:	681b      	ldr	r3, [r3, #0]
 800de58:	4a5b      	ldr	r2, [pc, #364]	; (800dfc8 <UART_SetConfig+0x6a8>)
 800de5a:	4293      	cmp	r3, r2
 800de5c:	d130      	bne.n	800dec0 <UART_SetConfig+0x5a0>
 800de5e:	4b57      	ldr	r3, [pc, #348]	; (800dfbc <UART_SetConfig+0x69c>)
 800de60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800de62:	f003 0307 	and.w	r3, r3, #7
 800de66:	2b05      	cmp	r3, #5
 800de68:	d826      	bhi.n	800deb8 <UART_SetConfig+0x598>
 800de6a:	a201      	add	r2, pc, #4	; (adr r2, 800de70 <UART_SetConfig+0x550>)
 800de6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de70:	0800de89 	.word	0x0800de89
 800de74:	0800de91 	.word	0x0800de91
 800de78:	0800de99 	.word	0x0800de99
 800de7c:	0800dea1 	.word	0x0800dea1
 800de80:	0800dea9 	.word	0x0800dea9
 800de84:	0800deb1 	.word	0x0800deb1
 800de88:	2302      	movs	r3, #2
 800de8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de8e:	e01a      	b.n	800dec6 <UART_SetConfig+0x5a6>
 800de90:	2304      	movs	r3, #4
 800de92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de96:	e016      	b.n	800dec6 <UART_SetConfig+0x5a6>
 800de98:	2308      	movs	r3, #8
 800de9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de9e:	e012      	b.n	800dec6 <UART_SetConfig+0x5a6>
 800dea0:	2310      	movs	r3, #16
 800dea2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dea6:	e00e      	b.n	800dec6 <UART_SetConfig+0x5a6>
 800dea8:	2320      	movs	r3, #32
 800deaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800deae:	e00a      	b.n	800dec6 <UART_SetConfig+0x5a6>
 800deb0:	2340      	movs	r3, #64	; 0x40
 800deb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800deb6:	e006      	b.n	800dec6 <UART_SetConfig+0x5a6>
 800deb8:	2380      	movs	r3, #128	; 0x80
 800deba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800debe:	e002      	b.n	800dec6 <UART_SetConfig+0x5a6>
 800dec0:	2380      	movs	r3, #128	; 0x80
 800dec2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800dec6:	697b      	ldr	r3, [r7, #20]
 800dec8:	681b      	ldr	r3, [r3, #0]
 800deca:	4a3f      	ldr	r2, [pc, #252]	; (800dfc8 <UART_SetConfig+0x6a8>)
 800decc:	4293      	cmp	r3, r2
 800dece:	f040 80f8 	bne.w	800e0c2 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800ded2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800ded6:	2b20      	cmp	r3, #32
 800ded8:	dc46      	bgt.n	800df68 <UART_SetConfig+0x648>
 800deda:	2b02      	cmp	r3, #2
 800dedc:	f2c0 8082 	blt.w	800dfe4 <UART_SetConfig+0x6c4>
 800dee0:	3b02      	subs	r3, #2
 800dee2:	2b1e      	cmp	r3, #30
 800dee4:	d87e      	bhi.n	800dfe4 <UART_SetConfig+0x6c4>
 800dee6:	a201      	add	r2, pc, #4	; (adr r2, 800deec <UART_SetConfig+0x5cc>)
 800dee8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800deec:	0800df6f 	.word	0x0800df6f
 800def0:	0800dfe5 	.word	0x0800dfe5
 800def4:	0800df77 	.word	0x0800df77
 800def8:	0800dfe5 	.word	0x0800dfe5
 800defc:	0800dfe5 	.word	0x0800dfe5
 800df00:	0800dfe5 	.word	0x0800dfe5
 800df04:	0800df87 	.word	0x0800df87
 800df08:	0800dfe5 	.word	0x0800dfe5
 800df0c:	0800dfe5 	.word	0x0800dfe5
 800df10:	0800dfe5 	.word	0x0800dfe5
 800df14:	0800dfe5 	.word	0x0800dfe5
 800df18:	0800dfe5 	.word	0x0800dfe5
 800df1c:	0800dfe5 	.word	0x0800dfe5
 800df20:	0800dfe5 	.word	0x0800dfe5
 800df24:	0800df97 	.word	0x0800df97
 800df28:	0800dfe5 	.word	0x0800dfe5
 800df2c:	0800dfe5 	.word	0x0800dfe5
 800df30:	0800dfe5 	.word	0x0800dfe5
 800df34:	0800dfe5 	.word	0x0800dfe5
 800df38:	0800dfe5 	.word	0x0800dfe5
 800df3c:	0800dfe5 	.word	0x0800dfe5
 800df40:	0800dfe5 	.word	0x0800dfe5
 800df44:	0800dfe5 	.word	0x0800dfe5
 800df48:	0800dfe5 	.word	0x0800dfe5
 800df4c:	0800dfe5 	.word	0x0800dfe5
 800df50:	0800dfe5 	.word	0x0800dfe5
 800df54:	0800dfe5 	.word	0x0800dfe5
 800df58:	0800dfe5 	.word	0x0800dfe5
 800df5c:	0800dfe5 	.word	0x0800dfe5
 800df60:	0800dfe5 	.word	0x0800dfe5
 800df64:	0800dfd7 	.word	0x0800dfd7
 800df68:	2b40      	cmp	r3, #64	; 0x40
 800df6a:	d037      	beq.n	800dfdc <UART_SetConfig+0x6bc>
 800df6c:	e03a      	b.n	800dfe4 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800df6e:	f7fe fb19 	bl	800c5a4 <HAL_RCCEx_GetD3PCLK1Freq>
 800df72:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800df74:	e03c      	b.n	800dff0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800df76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800df7a:	4618      	mov	r0, r3
 800df7c:	f7fe fb28 	bl	800c5d0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800df80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df82:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800df84:	e034      	b.n	800dff0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800df86:	f107 0318 	add.w	r3, r7, #24
 800df8a:	4618      	mov	r0, r3
 800df8c:	f7fe fc74 	bl	800c878 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800df90:	69fb      	ldr	r3, [r7, #28]
 800df92:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800df94:	e02c      	b.n	800dff0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800df96:	4b09      	ldr	r3, [pc, #36]	; (800dfbc <UART_SetConfig+0x69c>)
 800df98:	681b      	ldr	r3, [r3, #0]
 800df9a:	f003 0320 	and.w	r3, r3, #32
 800df9e:	2b00      	cmp	r3, #0
 800dfa0:	d016      	beq.n	800dfd0 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800dfa2:	4b06      	ldr	r3, [pc, #24]	; (800dfbc <UART_SetConfig+0x69c>)
 800dfa4:	681b      	ldr	r3, [r3, #0]
 800dfa6:	08db      	lsrs	r3, r3, #3
 800dfa8:	f003 0303 	and.w	r3, r3, #3
 800dfac:	4a07      	ldr	r2, [pc, #28]	; (800dfcc <UART_SetConfig+0x6ac>)
 800dfae:	fa22 f303 	lsr.w	r3, r2, r3
 800dfb2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800dfb4:	e01c      	b.n	800dff0 <UART_SetConfig+0x6d0>
 800dfb6:	bf00      	nop
 800dfb8:	40011400 	.word	0x40011400
 800dfbc:	58024400 	.word	0x58024400
 800dfc0:	40007800 	.word	0x40007800
 800dfc4:	40007c00 	.word	0x40007c00
 800dfc8:	58000c00 	.word	0x58000c00
 800dfcc:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800dfd0:	4b9d      	ldr	r3, [pc, #628]	; (800e248 <UART_SetConfig+0x928>)
 800dfd2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dfd4:	e00c      	b.n	800dff0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800dfd6:	4b9d      	ldr	r3, [pc, #628]	; (800e24c <UART_SetConfig+0x92c>)
 800dfd8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dfda:	e009      	b.n	800dff0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800dfdc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800dfe0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dfe2:	e005      	b.n	800dff0 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800dfe4:	2300      	movs	r3, #0
 800dfe6:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800dfe8:	2301      	movs	r3, #1
 800dfea:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800dfee:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800dff0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dff2:	2b00      	cmp	r3, #0
 800dff4:	f000 81de 	beq.w	800e3b4 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800dff8:	697b      	ldr	r3, [r7, #20]
 800dffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dffc:	4a94      	ldr	r2, [pc, #592]	; (800e250 <UART_SetConfig+0x930>)
 800dffe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e002:	461a      	mov	r2, r3
 800e004:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e006:	fbb3 f3f2 	udiv	r3, r3, r2
 800e00a:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e00c:	697b      	ldr	r3, [r7, #20]
 800e00e:	685a      	ldr	r2, [r3, #4]
 800e010:	4613      	mov	r3, r2
 800e012:	005b      	lsls	r3, r3, #1
 800e014:	4413      	add	r3, r2
 800e016:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e018:	429a      	cmp	r2, r3
 800e01a:	d305      	bcc.n	800e028 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800e01c:	697b      	ldr	r3, [r7, #20]
 800e01e:	685b      	ldr	r3, [r3, #4]
 800e020:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e022:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e024:	429a      	cmp	r2, r3
 800e026:	d903      	bls.n	800e030 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800e028:	2301      	movs	r3, #1
 800e02a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800e02e:	e1c1      	b.n	800e3b4 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e030:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e032:	2200      	movs	r2, #0
 800e034:	60bb      	str	r3, [r7, #8]
 800e036:	60fa      	str	r2, [r7, #12]
 800e038:	697b      	ldr	r3, [r7, #20]
 800e03a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e03c:	4a84      	ldr	r2, [pc, #528]	; (800e250 <UART_SetConfig+0x930>)
 800e03e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e042:	b29b      	uxth	r3, r3
 800e044:	2200      	movs	r2, #0
 800e046:	603b      	str	r3, [r7, #0]
 800e048:	607a      	str	r2, [r7, #4]
 800e04a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e04e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800e052:	f7f3 fc4d 	bl	80018f0 <__aeabi_uldivmod>
 800e056:	4602      	mov	r2, r0
 800e058:	460b      	mov	r3, r1
 800e05a:	4610      	mov	r0, r2
 800e05c:	4619      	mov	r1, r3
 800e05e:	f04f 0200 	mov.w	r2, #0
 800e062:	f04f 0300 	mov.w	r3, #0
 800e066:	020b      	lsls	r3, r1, #8
 800e068:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800e06c:	0202      	lsls	r2, r0, #8
 800e06e:	6979      	ldr	r1, [r7, #20]
 800e070:	6849      	ldr	r1, [r1, #4]
 800e072:	0849      	lsrs	r1, r1, #1
 800e074:	2000      	movs	r0, #0
 800e076:	460c      	mov	r4, r1
 800e078:	4605      	mov	r5, r0
 800e07a:	eb12 0804 	adds.w	r8, r2, r4
 800e07e:	eb43 0905 	adc.w	r9, r3, r5
 800e082:	697b      	ldr	r3, [r7, #20]
 800e084:	685b      	ldr	r3, [r3, #4]
 800e086:	2200      	movs	r2, #0
 800e088:	469a      	mov	sl, r3
 800e08a:	4693      	mov	fp, r2
 800e08c:	4652      	mov	r2, sl
 800e08e:	465b      	mov	r3, fp
 800e090:	4640      	mov	r0, r8
 800e092:	4649      	mov	r1, r9
 800e094:	f7f3 fc2c 	bl	80018f0 <__aeabi_uldivmod>
 800e098:	4602      	mov	r2, r0
 800e09a:	460b      	mov	r3, r1
 800e09c:	4613      	mov	r3, r2
 800e09e:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800e0a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0a2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e0a6:	d308      	bcc.n	800e0ba <UART_SetConfig+0x79a>
 800e0a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e0ae:	d204      	bcs.n	800e0ba <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800e0b0:	697b      	ldr	r3, [r7, #20]
 800e0b2:	681b      	ldr	r3, [r3, #0]
 800e0b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e0b6:	60da      	str	r2, [r3, #12]
 800e0b8:	e17c      	b.n	800e3b4 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800e0ba:	2301      	movs	r3, #1
 800e0bc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800e0c0:	e178      	b.n	800e3b4 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e0c2:	697b      	ldr	r3, [r7, #20]
 800e0c4:	69db      	ldr	r3, [r3, #28]
 800e0c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e0ca:	f040 80c5 	bne.w	800e258 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800e0ce:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e0d2:	2b20      	cmp	r3, #32
 800e0d4:	dc48      	bgt.n	800e168 <UART_SetConfig+0x848>
 800e0d6:	2b00      	cmp	r3, #0
 800e0d8:	db7b      	blt.n	800e1d2 <UART_SetConfig+0x8b2>
 800e0da:	2b20      	cmp	r3, #32
 800e0dc:	d879      	bhi.n	800e1d2 <UART_SetConfig+0x8b2>
 800e0de:	a201      	add	r2, pc, #4	; (adr r2, 800e0e4 <UART_SetConfig+0x7c4>)
 800e0e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e0e4:	0800e16f 	.word	0x0800e16f
 800e0e8:	0800e177 	.word	0x0800e177
 800e0ec:	0800e1d3 	.word	0x0800e1d3
 800e0f0:	0800e1d3 	.word	0x0800e1d3
 800e0f4:	0800e17f 	.word	0x0800e17f
 800e0f8:	0800e1d3 	.word	0x0800e1d3
 800e0fc:	0800e1d3 	.word	0x0800e1d3
 800e100:	0800e1d3 	.word	0x0800e1d3
 800e104:	0800e18f 	.word	0x0800e18f
 800e108:	0800e1d3 	.word	0x0800e1d3
 800e10c:	0800e1d3 	.word	0x0800e1d3
 800e110:	0800e1d3 	.word	0x0800e1d3
 800e114:	0800e1d3 	.word	0x0800e1d3
 800e118:	0800e1d3 	.word	0x0800e1d3
 800e11c:	0800e1d3 	.word	0x0800e1d3
 800e120:	0800e1d3 	.word	0x0800e1d3
 800e124:	0800e19f 	.word	0x0800e19f
 800e128:	0800e1d3 	.word	0x0800e1d3
 800e12c:	0800e1d3 	.word	0x0800e1d3
 800e130:	0800e1d3 	.word	0x0800e1d3
 800e134:	0800e1d3 	.word	0x0800e1d3
 800e138:	0800e1d3 	.word	0x0800e1d3
 800e13c:	0800e1d3 	.word	0x0800e1d3
 800e140:	0800e1d3 	.word	0x0800e1d3
 800e144:	0800e1d3 	.word	0x0800e1d3
 800e148:	0800e1d3 	.word	0x0800e1d3
 800e14c:	0800e1d3 	.word	0x0800e1d3
 800e150:	0800e1d3 	.word	0x0800e1d3
 800e154:	0800e1d3 	.word	0x0800e1d3
 800e158:	0800e1d3 	.word	0x0800e1d3
 800e15c:	0800e1d3 	.word	0x0800e1d3
 800e160:	0800e1d3 	.word	0x0800e1d3
 800e164:	0800e1c5 	.word	0x0800e1c5
 800e168:	2b40      	cmp	r3, #64	; 0x40
 800e16a:	d02e      	beq.n	800e1ca <UART_SetConfig+0x8aa>
 800e16c:	e031      	b.n	800e1d2 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e16e:	f7fc fa47 	bl	800a600 <HAL_RCC_GetPCLK1Freq>
 800e172:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e174:	e033      	b.n	800e1de <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e176:	f7fc fa59 	bl	800a62c <HAL_RCC_GetPCLK2Freq>
 800e17a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e17c:	e02f      	b.n	800e1de <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e17e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e182:	4618      	mov	r0, r3
 800e184:	f7fe fa24 	bl	800c5d0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e18a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e18c:	e027      	b.n	800e1de <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e18e:	f107 0318 	add.w	r3, r7, #24
 800e192:	4618      	mov	r0, r3
 800e194:	f7fe fb70 	bl	800c878 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e198:	69fb      	ldr	r3, [r7, #28]
 800e19a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e19c:	e01f      	b.n	800e1de <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e19e:	4b2d      	ldr	r3, [pc, #180]	; (800e254 <UART_SetConfig+0x934>)
 800e1a0:	681b      	ldr	r3, [r3, #0]
 800e1a2:	f003 0320 	and.w	r3, r3, #32
 800e1a6:	2b00      	cmp	r3, #0
 800e1a8:	d009      	beq.n	800e1be <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e1aa:	4b2a      	ldr	r3, [pc, #168]	; (800e254 <UART_SetConfig+0x934>)
 800e1ac:	681b      	ldr	r3, [r3, #0]
 800e1ae:	08db      	lsrs	r3, r3, #3
 800e1b0:	f003 0303 	and.w	r3, r3, #3
 800e1b4:	4a24      	ldr	r2, [pc, #144]	; (800e248 <UART_SetConfig+0x928>)
 800e1b6:	fa22 f303 	lsr.w	r3, r2, r3
 800e1ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e1bc:	e00f      	b.n	800e1de <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800e1be:	4b22      	ldr	r3, [pc, #136]	; (800e248 <UART_SetConfig+0x928>)
 800e1c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e1c2:	e00c      	b.n	800e1de <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e1c4:	4b21      	ldr	r3, [pc, #132]	; (800e24c <UART_SetConfig+0x92c>)
 800e1c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e1c8:	e009      	b.n	800e1de <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e1ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e1ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e1d0:	e005      	b.n	800e1de <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800e1d2:	2300      	movs	r3, #0
 800e1d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800e1d6:	2301      	movs	r3, #1
 800e1d8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800e1dc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800e1de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e1e0:	2b00      	cmp	r3, #0
 800e1e2:	f000 80e7 	beq.w	800e3b4 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e1e6:	697b      	ldr	r3, [r7, #20]
 800e1e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e1ea:	4a19      	ldr	r2, [pc, #100]	; (800e250 <UART_SetConfig+0x930>)
 800e1ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e1f0:	461a      	mov	r2, r3
 800e1f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e1f4:	fbb3 f3f2 	udiv	r3, r3, r2
 800e1f8:	005a      	lsls	r2, r3, #1
 800e1fa:	697b      	ldr	r3, [r7, #20]
 800e1fc:	685b      	ldr	r3, [r3, #4]
 800e1fe:	085b      	lsrs	r3, r3, #1
 800e200:	441a      	add	r2, r3
 800e202:	697b      	ldr	r3, [r7, #20]
 800e204:	685b      	ldr	r3, [r3, #4]
 800e206:	fbb2 f3f3 	udiv	r3, r2, r3
 800e20a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e20c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e20e:	2b0f      	cmp	r3, #15
 800e210:	d916      	bls.n	800e240 <UART_SetConfig+0x920>
 800e212:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e214:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e218:	d212      	bcs.n	800e240 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800e21a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e21c:	b29b      	uxth	r3, r3
 800e21e:	f023 030f 	bic.w	r3, r3, #15
 800e222:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800e224:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e226:	085b      	lsrs	r3, r3, #1
 800e228:	b29b      	uxth	r3, r3
 800e22a:	f003 0307 	and.w	r3, r3, #7
 800e22e:	b29a      	uxth	r2, r3
 800e230:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800e232:	4313      	orrs	r3, r2
 800e234:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800e236:	697b      	ldr	r3, [r7, #20]
 800e238:	681b      	ldr	r3, [r3, #0]
 800e23a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800e23c:	60da      	str	r2, [r3, #12]
 800e23e:	e0b9      	b.n	800e3b4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800e240:	2301      	movs	r3, #1
 800e242:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800e246:	e0b5      	b.n	800e3b4 <UART_SetConfig+0xa94>
 800e248:	03d09000 	.word	0x03d09000
 800e24c:	003d0900 	.word	0x003d0900
 800e250:	0801eb40 	.word	0x0801eb40
 800e254:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800e258:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e25c:	2b20      	cmp	r3, #32
 800e25e:	dc49      	bgt.n	800e2f4 <UART_SetConfig+0x9d4>
 800e260:	2b00      	cmp	r3, #0
 800e262:	db7c      	blt.n	800e35e <UART_SetConfig+0xa3e>
 800e264:	2b20      	cmp	r3, #32
 800e266:	d87a      	bhi.n	800e35e <UART_SetConfig+0xa3e>
 800e268:	a201      	add	r2, pc, #4	; (adr r2, 800e270 <UART_SetConfig+0x950>)
 800e26a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e26e:	bf00      	nop
 800e270:	0800e2fb 	.word	0x0800e2fb
 800e274:	0800e303 	.word	0x0800e303
 800e278:	0800e35f 	.word	0x0800e35f
 800e27c:	0800e35f 	.word	0x0800e35f
 800e280:	0800e30b 	.word	0x0800e30b
 800e284:	0800e35f 	.word	0x0800e35f
 800e288:	0800e35f 	.word	0x0800e35f
 800e28c:	0800e35f 	.word	0x0800e35f
 800e290:	0800e31b 	.word	0x0800e31b
 800e294:	0800e35f 	.word	0x0800e35f
 800e298:	0800e35f 	.word	0x0800e35f
 800e29c:	0800e35f 	.word	0x0800e35f
 800e2a0:	0800e35f 	.word	0x0800e35f
 800e2a4:	0800e35f 	.word	0x0800e35f
 800e2a8:	0800e35f 	.word	0x0800e35f
 800e2ac:	0800e35f 	.word	0x0800e35f
 800e2b0:	0800e32b 	.word	0x0800e32b
 800e2b4:	0800e35f 	.word	0x0800e35f
 800e2b8:	0800e35f 	.word	0x0800e35f
 800e2bc:	0800e35f 	.word	0x0800e35f
 800e2c0:	0800e35f 	.word	0x0800e35f
 800e2c4:	0800e35f 	.word	0x0800e35f
 800e2c8:	0800e35f 	.word	0x0800e35f
 800e2cc:	0800e35f 	.word	0x0800e35f
 800e2d0:	0800e35f 	.word	0x0800e35f
 800e2d4:	0800e35f 	.word	0x0800e35f
 800e2d8:	0800e35f 	.word	0x0800e35f
 800e2dc:	0800e35f 	.word	0x0800e35f
 800e2e0:	0800e35f 	.word	0x0800e35f
 800e2e4:	0800e35f 	.word	0x0800e35f
 800e2e8:	0800e35f 	.word	0x0800e35f
 800e2ec:	0800e35f 	.word	0x0800e35f
 800e2f0:	0800e351 	.word	0x0800e351
 800e2f4:	2b40      	cmp	r3, #64	; 0x40
 800e2f6:	d02e      	beq.n	800e356 <UART_SetConfig+0xa36>
 800e2f8:	e031      	b.n	800e35e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e2fa:	f7fc f981 	bl	800a600 <HAL_RCC_GetPCLK1Freq>
 800e2fe:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e300:	e033      	b.n	800e36a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e302:	f7fc f993 	bl	800a62c <HAL_RCC_GetPCLK2Freq>
 800e306:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e308:	e02f      	b.n	800e36a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e30a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e30e:	4618      	mov	r0, r3
 800e310:	f7fe f95e 	bl	800c5d0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e316:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e318:	e027      	b.n	800e36a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e31a:	f107 0318 	add.w	r3, r7, #24
 800e31e:	4618      	mov	r0, r3
 800e320:	f7fe faaa 	bl	800c878 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e324:	69fb      	ldr	r3, [r7, #28]
 800e326:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e328:	e01f      	b.n	800e36a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e32a:	4b2d      	ldr	r3, [pc, #180]	; (800e3e0 <UART_SetConfig+0xac0>)
 800e32c:	681b      	ldr	r3, [r3, #0]
 800e32e:	f003 0320 	and.w	r3, r3, #32
 800e332:	2b00      	cmp	r3, #0
 800e334:	d009      	beq.n	800e34a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e336:	4b2a      	ldr	r3, [pc, #168]	; (800e3e0 <UART_SetConfig+0xac0>)
 800e338:	681b      	ldr	r3, [r3, #0]
 800e33a:	08db      	lsrs	r3, r3, #3
 800e33c:	f003 0303 	and.w	r3, r3, #3
 800e340:	4a28      	ldr	r2, [pc, #160]	; (800e3e4 <UART_SetConfig+0xac4>)
 800e342:	fa22 f303 	lsr.w	r3, r2, r3
 800e346:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e348:	e00f      	b.n	800e36a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800e34a:	4b26      	ldr	r3, [pc, #152]	; (800e3e4 <UART_SetConfig+0xac4>)
 800e34c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e34e:	e00c      	b.n	800e36a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e350:	4b25      	ldr	r3, [pc, #148]	; (800e3e8 <UART_SetConfig+0xac8>)
 800e352:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e354:	e009      	b.n	800e36a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e356:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e35a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e35c:	e005      	b.n	800e36a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800e35e:	2300      	movs	r3, #0
 800e360:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800e362:	2301      	movs	r3, #1
 800e364:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800e368:	bf00      	nop
    }

    if (pclk != 0U)
 800e36a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e36c:	2b00      	cmp	r3, #0
 800e36e:	d021      	beq.n	800e3b4 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e370:	697b      	ldr	r3, [r7, #20]
 800e372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e374:	4a1d      	ldr	r2, [pc, #116]	; (800e3ec <UART_SetConfig+0xacc>)
 800e376:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e37a:	461a      	mov	r2, r3
 800e37c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e37e:	fbb3 f2f2 	udiv	r2, r3, r2
 800e382:	697b      	ldr	r3, [r7, #20]
 800e384:	685b      	ldr	r3, [r3, #4]
 800e386:	085b      	lsrs	r3, r3, #1
 800e388:	441a      	add	r2, r3
 800e38a:	697b      	ldr	r3, [r7, #20]
 800e38c:	685b      	ldr	r3, [r3, #4]
 800e38e:	fbb2 f3f3 	udiv	r3, r2, r3
 800e392:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e394:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e396:	2b0f      	cmp	r3, #15
 800e398:	d909      	bls.n	800e3ae <UART_SetConfig+0xa8e>
 800e39a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e39c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e3a0:	d205      	bcs.n	800e3ae <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800e3a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3a4:	b29a      	uxth	r2, r3
 800e3a6:	697b      	ldr	r3, [r7, #20]
 800e3a8:	681b      	ldr	r3, [r3, #0]
 800e3aa:	60da      	str	r2, [r3, #12]
 800e3ac:	e002      	b.n	800e3b4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800e3ae:	2301      	movs	r3, #1
 800e3b0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800e3b4:	697b      	ldr	r3, [r7, #20]
 800e3b6:	2201      	movs	r2, #1
 800e3b8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800e3bc:	697b      	ldr	r3, [r7, #20]
 800e3be:	2201      	movs	r2, #1
 800e3c0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800e3c4:	697b      	ldr	r3, [r7, #20]
 800e3c6:	2200      	movs	r2, #0
 800e3c8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800e3ca:	697b      	ldr	r3, [r7, #20]
 800e3cc:	2200      	movs	r2, #0
 800e3ce:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800e3d0:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800e3d4:	4618      	mov	r0, r3
 800e3d6:	3748      	adds	r7, #72	; 0x48
 800e3d8:	46bd      	mov	sp, r7
 800e3da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e3de:	bf00      	nop
 800e3e0:	58024400 	.word	0x58024400
 800e3e4:	03d09000 	.word	0x03d09000
 800e3e8:	003d0900 	.word	0x003d0900
 800e3ec:	0801eb40 	.word	0x0801eb40

0800e3f0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800e3f0:	b480      	push	{r7}
 800e3f2:	b083      	sub	sp, #12
 800e3f4:	af00      	add	r7, sp, #0
 800e3f6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e3fc:	f003 0301 	and.w	r3, r3, #1
 800e400:	2b00      	cmp	r3, #0
 800e402:	d00a      	beq.n	800e41a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	681b      	ldr	r3, [r3, #0]
 800e408:	685b      	ldr	r3, [r3, #4]
 800e40a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	681b      	ldr	r3, [r3, #0]
 800e416:	430a      	orrs	r2, r1
 800e418:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800e41a:	687b      	ldr	r3, [r7, #4]
 800e41c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e41e:	f003 0302 	and.w	r3, r3, #2
 800e422:	2b00      	cmp	r3, #0
 800e424:	d00a      	beq.n	800e43c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	681b      	ldr	r3, [r3, #0]
 800e42a:	685b      	ldr	r3, [r3, #4]
 800e42c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	681b      	ldr	r3, [r3, #0]
 800e438:	430a      	orrs	r2, r1
 800e43a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e440:	f003 0304 	and.w	r3, r3, #4
 800e444:	2b00      	cmp	r3, #0
 800e446:	d00a      	beq.n	800e45e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	681b      	ldr	r3, [r3, #0]
 800e44c:	685b      	ldr	r3, [r3, #4]
 800e44e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	681b      	ldr	r3, [r3, #0]
 800e45a:	430a      	orrs	r2, r1
 800e45c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e462:	f003 0308 	and.w	r3, r3, #8
 800e466:	2b00      	cmp	r3, #0
 800e468:	d00a      	beq.n	800e480 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	681b      	ldr	r3, [r3, #0]
 800e46e:	685b      	ldr	r3, [r3, #4]
 800e470:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	681b      	ldr	r3, [r3, #0]
 800e47c:	430a      	orrs	r2, r1
 800e47e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e484:	f003 0310 	and.w	r3, r3, #16
 800e488:	2b00      	cmp	r3, #0
 800e48a:	d00a      	beq.n	800e4a2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	681b      	ldr	r3, [r3, #0]
 800e490:	689b      	ldr	r3, [r3, #8]
 800e492:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	681b      	ldr	r3, [r3, #0]
 800e49e:	430a      	orrs	r2, r1
 800e4a0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e4a6:	f003 0320 	and.w	r3, r3, #32
 800e4aa:	2b00      	cmp	r3, #0
 800e4ac:	d00a      	beq.n	800e4c4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800e4ae:	687b      	ldr	r3, [r7, #4]
 800e4b0:	681b      	ldr	r3, [r3, #0]
 800e4b2:	689b      	ldr	r3, [r3, #8]
 800e4b4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	681b      	ldr	r3, [r3, #0]
 800e4c0:	430a      	orrs	r2, r1
 800e4c2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e4c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e4cc:	2b00      	cmp	r3, #0
 800e4ce:	d01a      	beq.n	800e506 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	681b      	ldr	r3, [r3, #0]
 800e4d4:	685b      	ldr	r3, [r3, #4]
 800e4d6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	681b      	ldr	r3, [r3, #0]
 800e4e2:	430a      	orrs	r2, r1
 800e4e4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e4ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e4ee:	d10a      	bne.n	800e506 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	681b      	ldr	r3, [r3, #0]
 800e4f4:	685b      	ldr	r3, [r3, #4]
 800e4f6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	681b      	ldr	r3, [r3, #0]
 800e502:	430a      	orrs	r2, r1
 800e504:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e50a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e50e:	2b00      	cmp	r3, #0
 800e510:	d00a      	beq.n	800e528 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	681b      	ldr	r3, [r3, #0]
 800e516:	685b      	ldr	r3, [r3, #4]
 800e518:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	681b      	ldr	r3, [r3, #0]
 800e524:	430a      	orrs	r2, r1
 800e526:	605a      	str	r2, [r3, #4]
  }
}
 800e528:	bf00      	nop
 800e52a:	370c      	adds	r7, #12
 800e52c:	46bd      	mov	sp, r7
 800e52e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e532:	4770      	bx	lr

0800e534 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800e534:	b580      	push	{r7, lr}
 800e536:	b098      	sub	sp, #96	; 0x60
 800e538:	af02      	add	r7, sp, #8
 800e53a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	2200      	movs	r2, #0
 800e540:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800e544:	f7f5 faf6 	bl	8003b34 <HAL_GetTick>
 800e548:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	681b      	ldr	r3, [r3, #0]
 800e54e:	681b      	ldr	r3, [r3, #0]
 800e550:	f003 0308 	and.w	r3, r3, #8
 800e554:	2b08      	cmp	r3, #8
 800e556:	d12f      	bne.n	800e5b8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e558:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e55c:	9300      	str	r3, [sp, #0]
 800e55e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e560:	2200      	movs	r2, #0
 800e562:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800e566:	6878      	ldr	r0, [r7, #4]
 800e568:	f000 f88e 	bl	800e688 <UART_WaitOnFlagUntilTimeout>
 800e56c:	4603      	mov	r3, r0
 800e56e:	2b00      	cmp	r3, #0
 800e570:	d022      	beq.n	800e5b8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	681b      	ldr	r3, [r3, #0]
 800e576:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e578:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e57a:	e853 3f00 	ldrex	r3, [r3]
 800e57e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800e580:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e582:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e586:	653b      	str	r3, [r7, #80]	; 0x50
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	681b      	ldr	r3, [r3, #0]
 800e58c:	461a      	mov	r2, r3
 800e58e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e590:	647b      	str	r3, [r7, #68]	; 0x44
 800e592:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e594:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e596:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e598:	e841 2300 	strex	r3, r2, [r1]
 800e59c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800e59e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e5a0:	2b00      	cmp	r3, #0
 800e5a2:	d1e6      	bne.n	800e572 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	2220      	movs	r2, #32
 800e5a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	2200      	movs	r2, #0
 800e5b0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e5b4:	2303      	movs	r3, #3
 800e5b6:	e063      	b.n	800e680 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	681b      	ldr	r3, [r3, #0]
 800e5bc:	681b      	ldr	r3, [r3, #0]
 800e5be:	f003 0304 	and.w	r3, r3, #4
 800e5c2:	2b04      	cmp	r3, #4
 800e5c4:	d149      	bne.n	800e65a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e5c6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e5ca:	9300      	str	r3, [sp, #0]
 800e5cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e5ce:	2200      	movs	r2, #0
 800e5d0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800e5d4:	6878      	ldr	r0, [r7, #4]
 800e5d6:	f000 f857 	bl	800e688 <UART_WaitOnFlagUntilTimeout>
 800e5da:	4603      	mov	r3, r0
 800e5dc:	2b00      	cmp	r3, #0
 800e5de:	d03c      	beq.n	800e65a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	681b      	ldr	r3, [r3, #0]
 800e5e4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e5e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5e8:	e853 3f00 	ldrex	r3, [r3]
 800e5ec:	623b      	str	r3, [r7, #32]
   return(result);
 800e5ee:	6a3b      	ldr	r3, [r7, #32]
 800e5f0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e5f4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	681b      	ldr	r3, [r3, #0]
 800e5fa:	461a      	mov	r2, r3
 800e5fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e5fe:	633b      	str	r3, [r7, #48]	; 0x30
 800e600:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e602:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e604:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e606:	e841 2300 	strex	r3, r2, [r1]
 800e60a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e60c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e60e:	2b00      	cmp	r3, #0
 800e610:	d1e6      	bne.n	800e5e0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e612:	687b      	ldr	r3, [r7, #4]
 800e614:	681b      	ldr	r3, [r3, #0]
 800e616:	3308      	adds	r3, #8
 800e618:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e61a:	693b      	ldr	r3, [r7, #16]
 800e61c:	e853 3f00 	ldrex	r3, [r3]
 800e620:	60fb      	str	r3, [r7, #12]
   return(result);
 800e622:	68fb      	ldr	r3, [r7, #12]
 800e624:	f023 0301 	bic.w	r3, r3, #1
 800e628:	64bb      	str	r3, [r7, #72]	; 0x48
 800e62a:	687b      	ldr	r3, [r7, #4]
 800e62c:	681b      	ldr	r3, [r3, #0]
 800e62e:	3308      	adds	r3, #8
 800e630:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e632:	61fa      	str	r2, [r7, #28]
 800e634:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e636:	69b9      	ldr	r1, [r7, #24]
 800e638:	69fa      	ldr	r2, [r7, #28]
 800e63a:	e841 2300 	strex	r3, r2, [r1]
 800e63e:	617b      	str	r3, [r7, #20]
   return(result);
 800e640:	697b      	ldr	r3, [r7, #20]
 800e642:	2b00      	cmp	r3, #0
 800e644:	d1e5      	bne.n	800e612 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	2220      	movs	r2, #32
 800e64a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	2200      	movs	r2, #0
 800e652:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e656:	2303      	movs	r3, #3
 800e658:	e012      	b.n	800e680 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	2220      	movs	r2, #32
 800e65e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	2220      	movs	r2, #32
 800e666:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e66a:	687b      	ldr	r3, [r7, #4]
 800e66c:	2200      	movs	r2, #0
 800e66e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	2200      	movs	r2, #0
 800e674:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	2200      	movs	r2, #0
 800e67a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800e67e:	2300      	movs	r3, #0
}
 800e680:	4618      	mov	r0, r3
 800e682:	3758      	adds	r7, #88	; 0x58
 800e684:	46bd      	mov	sp, r7
 800e686:	bd80      	pop	{r7, pc}

0800e688 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800e688:	b580      	push	{r7, lr}
 800e68a:	b084      	sub	sp, #16
 800e68c:	af00      	add	r7, sp, #0
 800e68e:	60f8      	str	r0, [r7, #12]
 800e690:	60b9      	str	r1, [r7, #8]
 800e692:	603b      	str	r3, [r7, #0]
 800e694:	4613      	mov	r3, r2
 800e696:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e698:	e049      	b.n	800e72e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e69a:	69bb      	ldr	r3, [r7, #24]
 800e69c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e6a0:	d045      	beq.n	800e72e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e6a2:	f7f5 fa47 	bl	8003b34 <HAL_GetTick>
 800e6a6:	4602      	mov	r2, r0
 800e6a8:	683b      	ldr	r3, [r7, #0]
 800e6aa:	1ad3      	subs	r3, r2, r3
 800e6ac:	69ba      	ldr	r2, [r7, #24]
 800e6ae:	429a      	cmp	r2, r3
 800e6b0:	d302      	bcc.n	800e6b8 <UART_WaitOnFlagUntilTimeout+0x30>
 800e6b2:	69bb      	ldr	r3, [r7, #24]
 800e6b4:	2b00      	cmp	r3, #0
 800e6b6:	d101      	bne.n	800e6bc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800e6b8:	2303      	movs	r3, #3
 800e6ba:	e048      	b.n	800e74e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800e6bc:	68fb      	ldr	r3, [r7, #12]
 800e6be:	681b      	ldr	r3, [r3, #0]
 800e6c0:	681b      	ldr	r3, [r3, #0]
 800e6c2:	f003 0304 	and.w	r3, r3, #4
 800e6c6:	2b00      	cmp	r3, #0
 800e6c8:	d031      	beq.n	800e72e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800e6ca:	68fb      	ldr	r3, [r7, #12]
 800e6cc:	681b      	ldr	r3, [r3, #0]
 800e6ce:	69db      	ldr	r3, [r3, #28]
 800e6d0:	f003 0308 	and.w	r3, r3, #8
 800e6d4:	2b08      	cmp	r3, #8
 800e6d6:	d110      	bne.n	800e6fa <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e6d8:	68fb      	ldr	r3, [r7, #12]
 800e6da:	681b      	ldr	r3, [r3, #0]
 800e6dc:	2208      	movs	r2, #8
 800e6de:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800e6e0:	68f8      	ldr	r0, [r7, #12]
 800e6e2:	f000 f839 	bl	800e758 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800e6e6:	68fb      	ldr	r3, [r7, #12]
 800e6e8:	2208      	movs	r2, #8
 800e6ea:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800e6ee:	68fb      	ldr	r3, [r7, #12]
 800e6f0:	2200      	movs	r2, #0
 800e6f2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800e6f6:	2301      	movs	r3, #1
 800e6f8:	e029      	b.n	800e74e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800e6fa:	68fb      	ldr	r3, [r7, #12]
 800e6fc:	681b      	ldr	r3, [r3, #0]
 800e6fe:	69db      	ldr	r3, [r3, #28]
 800e700:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e704:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e708:	d111      	bne.n	800e72e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e70a:	68fb      	ldr	r3, [r7, #12]
 800e70c:	681b      	ldr	r3, [r3, #0]
 800e70e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e712:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800e714:	68f8      	ldr	r0, [r7, #12]
 800e716:	f000 f81f 	bl	800e758 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800e71a:	68fb      	ldr	r3, [r7, #12]
 800e71c:	2220      	movs	r2, #32
 800e71e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e722:	68fb      	ldr	r3, [r7, #12]
 800e724:	2200      	movs	r2, #0
 800e726:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800e72a:	2303      	movs	r3, #3
 800e72c:	e00f      	b.n	800e74e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e72e:	68fb      	ldr	r3, [r7, #12]
 800e730:	681b      	ldr	r3, [r3, #0]
 800e732:	69da      	ldr	r2, [r3, #28]
 800e734:	68bb      	ldr	r3, [r7, #8]
 800e736:	4013      	ands	r3, r2
 800e738:	68ba      	ldr	r2, [r7, #8]
 800e73a:	429a      	cmp	r2, r3
 800e73c:	bf0c      	ite	eq
 800e73e:	2301      	moveq	r3, #1
 800e740:	2300      	movne	r3, #0
 800e742:	b2db      	uxtb	r3, r3
 800e744:	461a      	mov	r2, r3
 800e746:	79fb      	ldrb	r3, [r7, #7]
 800e748:	429a      	cmp	r2, r3
 800e74a:	d0a6      	beq.n	800e69a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e74c:	2300      	movs	r3, #0
}
 800e74e:	4618      	mov	r0, r3
 800e750:	3710      	adds	r7, #16
 800e752:	46bd      	mov	sp, r7
 800e754:	bd80      	pop	{r7, pc}
	...

0800e758 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800e758:	b480      	push	{r7}
 800e75a:	b095      	sub	sp, #84	; 0x54
 800e75c:	af00      	add	r7, sp, #0
 800e75e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	681b      	ldr	r3, [r3, #0]
 800e764:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e766:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e768:	e853 3f00 	ldrex	r3, [r3]
 800e76c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800e76e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e770:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e774:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	681b      	ldr	r3, [r3, #0]
 800e77a:	461a      	mov	r2, r3
 800e77c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e77e:	643b      	str	r3, [r7, #64]	; 0x40
 800e780:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e782:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e784:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e786:	e841 2300 	strex	r3, r2, [r1]
 800e78a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e78c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e78e:	2b00      	cmp	r3, #0
 800e790:	d1e6      	bne.n	800e760 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	681b      	ldr	r3, [r3, #0]
 800e796:	3308      	adds	r3, #8
 800e798:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e79a:	6a3b      	ldr	r3, [r7, #32]
 800e79c:	e853 3f00 	ldrex	r3, [r3]
 800e7a0:	61fb      	str	r3, [r7, #28]
   return(result);
 800e7a2:	69fa      	ldr	r2, [r7, #28]
 800e7a4:	4b1e      	ldr	r3, [pc, #120]	; (800e820 <UART_EndRxTransfer+0xc8>)
 800e7a6:	4013      	ands	r3, r2
 800e7a8:	64bb      	str	r3, [r7, #72]	; 0x48
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	681b      	ldr	r3, [r3, #0]
 800e7ae:	3308      	adds	r3, #8
 800e7b0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e7b2:	62fa      	str	r2, [r7, #44]	; 0x2c
 800e7b4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e7b6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e7b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e7ba:	e841 2300 	strex	r3, r2, [r1]
 800e7be:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e7c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7c2:	2b00      	cmp	r3, #0
 800e7c4:	d1e5      	bne.n	800e792 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e7c6:	687b      	ldr	r3, [r7, #4]
 800e7c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e7ca:	2b01      	cmp	r3, #1
 800e7cc:	d118      	bne.n	800e800 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	681b      	ldr	r3, [r3, #0]
 800e7d2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e7d4:	68fb      	ldr	r3, [r7, #12]
 800e7d6:	e853 3f00 	ldrex	r3, [r3]
 800e7da:	60bb      	str	r3, [r7, #8]
   return(result);
 800e7dc:	68bb      	ldr	r3, [r7, #8]
 800e7de:	f023 0310 	bic.w	r3, r3, #16
 800e7e2:	647b      	str	r3, [r7, #68]	; 0x44
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	681b      	ldr	r3, [r3, #0]
 800e7e8:	461a      	mov	r2, r3
 800e7ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e7ec:	61bb      	str	r3, [r7, #24]
 800e7ee:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e7f0:	6979      	ldr	r1, [r7, #20]
 800e7f2:	69ba      	ldr	r2, [r7, #24]
 800e7f4:	e841 2300 	strex	r3, r2, [r1]
 800e7f8:	613b      	str	r3, [r7, #16]
   return(result);
 800e7fa:	693b      	ldr	r3, [r7, #16]
 800e7fc:	2b00      	cmp	r3, #0
 800e7fe:	d1e6      	bne.n	800e7ce <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	2220      	movs	r2, #32
 800e804:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	2200      	movs	r2, #0
 800e80c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	2200      	movs	r2, #0
 800e812:	675a      	str	r2, [r3, #116]	; 0x74
}
 800e814:	bf00      	nop
 800e816:	3754      	adds	r7, #84	; 0x54
 800e818:	46bd      	mov	sp, r7
 800e81a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e81e:	4770      	bx	lr
 800e820:	effffffe 	.word	0xeffffffe

0800e824 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800e824:	b480      	push	{r7}
 800e826:	b085      	sub	sp, #20
 800e828:	af00      	add	r7, sp, #0
 800e82a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800e832:	2b01      	cmp	r3, #1
 800e834:	d101      	bne.n	800e83a <HAL_UARTEx_DisableFifoMode+0x16>
 800e836:	2302      	movs	r3, #2
 800e838:	e027      	b.n	800e88a <HAL_UARTEx_DisableFifoMode+0x66>
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	2201      	movs	r2, #1
 800e83e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	2224      	movs	r2, #36	; 0x24
 800e846:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	681b      	ldr	r3, [r3, #0]
 800e84e:	681b      	ldr	r3, [r3, #0]
 800e850:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	681b      	ldr	r3, [r3, #0]
 800e856:	681a      	ldr	r2, [r3, #0]
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	681b      	ldr	r3, [r3, #0]
 800e85c:	f022 0201 	bic.w	r2, r2, #1
 800e860:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800e862:	68fb      	ldr	r3, [r7, #12]
 800e864:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800e868:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	2200      	movs	r2, #0
 800e86e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	681b      	ldr	r3, [r3, #0]
 800e874:	68fa      	ldr	r2, [r7, #12]
 800e876:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	2220      	movs	r2, #32
 800e87c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	2200      	movs	r2, #0
 800e884:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800e888:	2300      	movs	r3, #0
}
 800e88a:	4618      	mov	r0, r3
 800e88c:	3714      	adds	r7, #20
 800e88e:	46bd      	mov	sp, r7
 800e890:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e894:	4770      	bx	lr

0800e896 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e896:	b580      	push	{r7, lr}
 800e898:	b084      	sub	sp, #16
 800e89a:	af00      	add	r7, sp, #0
 800e89c:	6078      	str	r0, [r7, #4]
 800e89e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800e8a6:	2b01      	cmp	r3, #1
 800e8a8:	d101      	bne.n	800e8ae <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800e8aa:	2302      	movs	r3, #2
 800e8ac:	e02d      	b.n	800e90a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	2201      	movs	r2, #1
 800e8b2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	2224      	movs	r2, #36	; 0x24
 800e8ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	681b      	ldr	r3, [r3, #0]
 800e8c2:	681b      	ldr	r3, [r3, #0]
 800e8c4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	681b      	ldr	r3, [r3, #0]
 800e8ca:	681a      	ldr	r2, [r3, #0]
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	681b      	ldr	r3, [r3, #0]
 800e8d0:	f022 0201 	bic.w	r2, r2, #1
 800e8d4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	681b      	ldr	r3, [r3, #0]
 800e8da:	689b      	ldr	r3, [r3, #8]
 800e8dc:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	681b      	ldr	r3, [r3, #0]
 800e8e4:	683a      	ldr	r2, [r7, #0]
 800e8e6:	430a      	orrs	r2, r1
 800e8e8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e8ea:	6878      	ldr	r0, [r7, #4]
 800e8ec:	f000 f850 	bl	800e990 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	681b      	ldr	r3, [r3, #0]
 800e8f4:	68fa      	ldr	r2, [r7, #12]
 800e8f6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	2220      	movs	r2, #32
 800e8fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	2200      	movs	r2, #0
 800e904:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800e908:	2300      	movs	r3, #0
}
 800e90a:	4618      	mov	r0, r3
 800e90c:	3710      	adds	r7, #16
 800e90e:	46bd      	mov	sp, r7
 800e910:	bd80      	pop	{r7, pc}

0800e912 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e912:	b580      	push	{r7, lr}
 800e914:	b084      	sub	sp, #16
 800e916:	af00      	add	r7, sp, #0
 800e918:	6078      	str	r0, [r7, #4]
 800e91a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800e922:	2b01      	cmp	r3, #1
 800e924:	d101      	bne.n	800e92a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800e926:	2302      	movs	r3, #2
 800e928:	e02d      	b.n	800e986 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	2201      	movs	r2, #1
 800e92e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e932:	687b      	ldr	r3, [r7, #4]
 800e934:	2224      	movs	r2, #36	; 0x24
 800e936:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	681b      	ldr	r3, [r3, #0]
 800e93e:	681b      	ldr	r3, [r3, #0]
 800e940:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	681b      	ldr	r3, [r3, #0]
 800e946:	681a      	ldr	r2, [r3, #0]
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	681b      	ldr	r3, [r3, #0]
 800e94c:	f022 0201 	bic.w	r2, r2, #1
 800e950:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	681b      	ldr	r3, [r3, #0]
 800e956:	689b      	ldr	r3, [r3, #8]
 800e958:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	681b      	ldr	r3, [r3, #0]
 800e960:	683a      	ldr	r2, [r7, #0]
 800e962:	430a      	orrs	r2, r1
 800e964:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e966:	6878      	ldr	r0, [r7, #4]
 800e968:	f000 f812 	bl	800e990 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	681b      	ldr	r3, [r3, #0]
 800e970:	68fa      	ldr	r2, [r7, #12]
 800e972:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	2220      	movs	r2, #32
 800e978:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	2200      	movs	r2, #0
 800e980:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800e984:	2300      	movs	r3, #0
}
 800e986:	4618      	mov	r0, r3
 800e988:	3710      	adds	r7, #16
 800e98a:	46bd      	mov	sp, r7
 800e98c:	bd80      	pop	{r7, pc}
	...

0800e990 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800e990:	b480      	push	{r7}
 800e992:	b085      	sub	sp, #20
 800e994:	af00      	add	r7, sp, #0
 800e996:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e99c:	2b00      	cmp	r3, #0
 800e99e:	d108      	bne.n	800e9b2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	2201      	movs	r2, #1
 800e9a4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	2201      	movs	r2, #1
 800e9ac:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800e9b0:	e031      	b.n	800ea16 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800e9b2:	2310      	movs	r3, #16
 800e9b4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800e9b6:	2310      	movs	r3, #16
 800e9b8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	681b      	ldr	r3, [r3, #0]
 800e9be:	689b      	ldr	r3, [r3, #8]
 800e9c0:	0e5b      	lsrs	r3, r3, #25
 800e9c2:	b2db      	uxtb	r3, r3
 800e9c4:	f003 0307 	and.w	r3, r3, #7
 800e9c8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	681b      	ldr	r3, [r3, #0]
 800e9ce:	689b      	ldr	r3, [r3, #8]
 800e9d0:	0f5b      	lsrs	r3, r3, #29
 800e9d2:	b2db      	uxtb	r3, r3
 800e9d4:	f003 0307 	and.w	r3, r3, #7
 800e9d8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e9da:	7bbb      	ldrb	r3, [r7, #14]
 800e9dc:	7b3a      	ldrb	r2, [r7, #12]
 800e9de:	4911      	ldr	r1, [pc, #68]	; (800ea24 <UARTEx_SetNbDataToProcess+0x94>)
 800e9e0:	5c8a      	ldrb	r2, [r1, r2]
 800e9e2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800e9e6:	7b3a      	ldrb	r2, [r7, #12]
 800e9e8:	490f      	ldr	r1, [pc, #60]	; (800ea28 <UARTEx_SetNbDataToProcess+0x98>)
 800e9ea:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e9ec:	fb93 f3f2 	sdiv	r3, r3, r2
 800e9f0:	b29a      	uxth	r2, r3
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e9f8:	7bfb      	ldrb	r3, [r7, #15]
 800e9fa:	7b7a      	ldrb	r2, [r7, #13]
 800e9fc:	4909      	ldr	r1, [pc, #36]	; (800ea24 <UARTEx_SetNbDataToProcess+0x94>)
 800e9fe:	5c8a      	ldrb	r2, [r1, r2]
 800ea00:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800ea04:	7b7a      	ldrb	r2, [r7, #13]
 800ea06:	4908      	ldr	r1, [pc, #32]	; (800ea28 <UARTEx_SetNbDataToProcess+0x98>)
 800ea08:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ea0a:	fb93 f3f2 	sdiv	r3, r3, r2
 800ea0e:	b29a      	uxth	r2, r3
 800ea10:	687b      	ldr	r3, [r7, #4]
 800ea12:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800ea16:	bf00      	nop
 800ea18:	3714      	adds	r7, #20
 800ea1a:	46bd      	mov	sp, r7
 800ea1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea20:	4770      	bx	lr
 800ea22:	bf00      	nop
 800ea24:	0801eb58 	.word	0x0801eb58
 800ea28:	0801eb60 	.word	0x0801eb60

0800ea2c <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800ea2c:	b580      	push	{r7, lr}
 800ea2e:	b084      	sub	sp, #16
 800ea30:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 800ea32:	4b87      	ldr	r3, [pc, #540]	; (800ec50 <MX_LWIP_Init+0x224>)
 800ea34:	22c0      	movs	r2, #192	; 0xc0
 800ea36:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 800ea38:	4b85      	ldr	r3, [pc, #532]	; (800ec50 <MX_LWIP_Init+0x224>)
 800ea3a:	22a8      	movs	r2, #168	; 0xa8
 800ea3c:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 800ea3e:	4b84      	ldr	r3, [pc, #528]	; (800ec50 <MX_LWIP_Init+0x224>)
 800ea40:	2201      	movs	r2, #1
 800ea42:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 10;
 800ea44:	4b82      	ldr	r3, [pc, #520]	; (800ec50 <MX_LWIP_Init+0x224>)
 800ea46:	220a      	movs	r2, #10
 800ea48:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800ea4a:	4b82      	ldr	r3, [pc, #520]	; (800ec54 <MX_LWIP_Init+0x228>)
 800ea4c:	22ff      	movs	r2, #255	; 0xff
 800ea4e:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 800ea50:	4b80      	ldr	r3, [pc, #512]	; (800ec54 <MX_LWIP_Init+0x228>)
 800ea52:	22ff      	movs	r2, #255	; 0xff
 800ea54:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 0;
 800ea56:	4b7f      	ldr	r3, [pc, #508]	; (800ec54 <MX_LWIP_Init+0x228>)
 800ea58:	2200      	movs	r2, #0
 800ea5a:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 800ea5c:	4b7d      	ldr	r3, [pc, #500]	; (800ec54 <MX_LWIP_Init+0x228>)
 800ea5e:	2200      	movs	r2, #0
 800ea60:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 800ea62:	4b7d      	ldr	r3, [pc, #500]	; (800ec58 <MX_LWIP_Init+0x22c>)
 800ea64:	22c0      	movs	r2, #192	; 0xc0
 800ea66:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 800ea68:	4b7b      	ldr	r3, [pc, #492]	; (800ec58 <MX_LWIP_Init+0x22c>)
 800ea6a:	22a8      	movs	r2, #168	; 0xa8
 800ea6c:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 1;
 800ea6e:	4b7a      	ldr	r3, [pc, #488]	; (800ec58 <MX_LWIP_Init+0x22c>)
 800ea70:	2201      	movs	r2, #1
 800ea72:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 800ea74:	4b78      	ldr	r3, [pc, #480]	; (800ec58 <MX_LWIP_Init+0x22c>)
 800ea76:	2201      	movs	r2, #1
 800ea78:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 800ea7a:	f000 fd31 	bl	800f4e0 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800ea7e:	4b74      	ldr	r3, [pc, #464]	; (800ec50 <MX_LWIP_Init+0x224>)
 800ea80:	781b      	ldrb	r3, [r3, #0]
 800ea82:	061a      	lsls	r2, r3, #24
 800ea84:	4b72      	ldr	r3, [pc, #456]	; (800ec50 <MX_LWIP_Init+0x224>)
 800ea86:	785b      	ldrb	r3, [r3, #1]
 800ea88:	041b      	lsls	r3, r3, #16
 800ea8a:	431a      	orrs	r2, r3
 800ea8c:	4b70      	ldr	r3, [pc, #448]	; (800ec50 <MX_LWIP_Init+0x224>)
 800ea8e:	789b      	ldrb	r3, [r3, #2]
 800ea90:	021b      	lsls	r3, r3, #8
 800ea92:	4313      	orrs	r3, r2
 800ea94:	4a6e      	ldr	r2, [pc, #440]	; (800ec50 <MX_LWIP_Init+0x224>)
 800ea96:	78d2      	ldrb	r2, [r2, #3]
 800ea98:	4313      	orrs	r3, r2
 800ea9a:	061a      	lsls	r2, r3, #24
 800ea9c:	4b6c      	ldr	r3, [pc, #432]	; (800ec50 <MX_LWIP_Init+0x224>)
 800ea9e:	781b      	ldrb	r3, [r3, #0]
 800eaa0:	0619      	lsls	r1, r3, #24
 800eaa2:	4b6b      	ldr	r3, [pc, #428]	; (800ec50 <MX_LWIP_Init+0x224>)
 800eaa4:	785b      	ldrb	r3, [r3, #1]
 800eaa6:	041b      	lsls	r3, r3, #16
 800eaa8:	4319      	orrs	r1, r3
 800eaaa:	4b69      	ldr	r3, [pc, #420]	; (800ec50 <MX_LWIP_Init+0x224>)
 800eaac:	789b      	ldrb	r3, [r3, #2]
 800eaae:	021b      	lsls	r3, r3, #8
 800eab0:	430b      	orrs	r3, r1
 800eab2:	4967      	ldr	r1, [pc, #412]	; (800ec50 <MX_LWIP_Init+0x224>)
 800eab4:	78c9      	ldrb	r1, [r1, #3]
 800eab6:	430b      	orrs	r3, r1
 800eab8:	021b      	lsls	r3, r3, #8
 800eaba:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800eabe:	431a      	orrs	r2, r3
 800eac0:	4b63      	ldr	r3, [pc, #396]	; (800ec50 <MX_LWIP_Init+0x224>)
 800eac2:	781b      	ldrb	r3, [r3, #0]
 800eac4:	0619      	lsls	r1, r3, #24
 800eac6:	4b62      	ldr	r3, [pc, #392]	; (800ec50 <MX_LWIP_Init+0x224>)
 800eac8:	785b      	ldrb	r3, [r3, #1]
 800eaca:	041b      	lsls	r3, r3, #16
 800eacc:	4319      	orrs	r1, r3
 800eace:	4b60      	ldr	r3, [pc, #384]	; (800ec50 <MX_LWIP_Init+0x224>)
 800ead0:	789b      	ldrb	r3, [r3, #2]
 800ead2:	021b      	lsls	r3, r3, #8
 800ead4:	430b      	orrs	r3, r1
 800ead6:	495e      	ldr	r1, [pc, #376]	; (800ec50 <MX_LWIP_Init+0x224>)
 800ead8:	78c9      	ldrb	r1, [r1, #3]
 800eada:	430b      	orrs	r3, r1
 800eadc:	0a1b      	lsrs	r3, r3, #8
 800eade:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800eae2:	431a      	orrs	r2, r3
 800eae4:	4b5a      	ldr	r3, [pc, #360]	; (800ec50 <MX_LWIP_Init+0x224>)
 800eae6:	781b      	ldrb	r3, [r3, #0]
 800eae8:	0619      	lsls	r1, r3, #24
 800eaea:	4b59      	ldr	r3, [pc, #356]	; (800ec50 <MX_LWIP_Init+0x224>)
 800eaec:	785b      	ldrb	r3, [r3, #1]
 800eaee:	041b      	lsls	r3, r3, #16
 800eaf0:	4319      	orrs	r1, r3
 800eaf2:	4b57      	ldr	r3, [pc, #348]	; (800ec50 <MX_LWIP_Init+0x224>)
 800eaf4:	789b      	ldrb	r3, [r3, #2]
 800eaf6:	021b      	lsls	r3, r3, #8
 800eaf8:	430b      	orrs	r3, r1
 800eafa:	4955      	ldr	r1, [pc, #340]	; (800ec50 <MX_LWIP_Init+0x224>)
 800eafc:	78c9      	ldrb	r1, [r1, #3]
 800eafe:	430b      	orrs	r3, r1
 800eb00:	0e1b      	lsrs	r3, r3, #24
 800eb02:	4313      	orrs	r3, r2
 800eb04:	4a55      	ldr	r2, [pc, #340]	; (800ec5c <MX_LWIP_Init+0x230>)
 800eb06:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800eb08:	4b52      	ldr	r3, [pc, #328]	; (800ec54 <MX_LWIP_Init+0x228>)
 800eb0a:	781b      	ldrb	r3, [r3, #0]
 800eb0c:	061a      	lsls	r2, r3, #24
 800eb0e:	4b51      	ldr	r3, [pc, #324]	; (800ec54 <MX_LWIP_Init+0x228>)
 800eb10:	785b      	ldrb	r3, [r3, #1]
 800eb12:	041b      	lsls	r3, r3, #16
 800eb14:	431a      	orrs	r2, r3
 800eb16:	4b4f      	ldr	r3, [pc, #316]	; (800ec54 <MX_LWIP_Init+0x228>)
 800eb18:	789b      	ldrb	r3, [r3, #2]
 800eb1a:	021b      	lsls	r3, r3, #8
 800eb1c:	4313      	orrs	r3, r2
 800eb1e:	4a4d      	ldr	r2, [pc, #308]	; (800ec54 <MX_LWIP_Init+0x228>)
 800eb20:	78d2      	ldrb	r2, [r2, #3]
 800eb22:	4313      	orrs	r3, r2
 800eb24:	061a      	lsls	r2, r3, #24
 800eb26:	4b4b      	ldr	r3, [pc, #300]	; (800ec54 <MX_LWIP_Init+0x228>)
 800eb28:	781b      	ldrb	r3, [r3, #0]
 800eb2a:	0619      	lsls	r1, r3, #24
 800eb2c:	4b49      	ldr	r3, [pc, #292]	; (800ec54 <MX_LWIP_Init+0x228>)
 800eb2e:	785b      	ldrb	r3, [r3, #1]
 800eb30:	041b      	lsls	r3, r3, #16
 800eb32:	4319      	orrs	r1, r3
 800eb34:	4b47      	ldr	r3, [pc, #284]	; (800ec54 <MX_LWIP_Init+0x228>)
 800eb36:	789b      	ldrb	r3, [r3, #2]
 800eb38:	021b      	lsls	r3, r3, #8
 800eb3a:	430b      	orrs	r3, r1
 800eb3c:	4945      	ldr	r1, [pc, #276]	; (800ec54 <MX_LWIP_Init+0x228>)
 800eb3e:	78c9      	ldrb	r1, [r1, #3]
 800eb40:	430b      	orrs	r3, r1
 800eb42:	021b      	lsls	r3, r3, #8
 800eb44:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800eb48:	431a      	orrs	r2, r3
 800eb4a:	4b42      	ldr	r3, [pc, #264]	; (800ec54 <MX_LWIP_Init+0x228>)
 800eb4c:	781b      	ldrb	r3, [r3, #0]
 800eb4e:	0619      	lsls	r1, r3, #24
 800eb50:	4b40      	ldr	r3, [pc, #256]	; (800ec54 <MX_LWIP_Init+0x228>)
 800eb52:	785b      	ldrb	r3, [r3, #1]
 800eb54:	041b      	lsls	r3, r3, #16
 800eb56:	4319      	orrs	r1, r3
 800eb58:	4b3e      	ldr	r3, [pc, #248]	; (800ec54 <MX_LWIP_Init+0x228>)
 800eb5a:	789b      	ldrb	r3, [r3, #2]
 800eb5c:	021b      	lsls	r3, r3, #8
 800eb5e:	430b      	orrs	r3, r1
 800eb60:	493c      	ldr	r1, [pc, #240]	; (800ec54 <MX_LWIP_Init+0x228>)
 800eb62:	78c9      	ldrb	r1, [r1, #3]
 800eb64:	430b      	orrs	r3, r1
 800eb66:	0a1b      	lsrs	r3, r3, #8
 800eb68:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800eb6c:	431a      	orrs	r2, r3
 800eb6e:	4b39      	ldr	r3, [pc, #228]	; (800ec54 <MX_LWIP_Init+0x228>)
 800eb70:	781b      	ldrb	r3, [r3, #0]
 800eb72:	0619      	lsls	r1, r3, #24
 800eb74:	4b37      	ldr	r3, [pc, #220]	; (800ec54 <MX_LWIP_Init+0x228>)
 800eb76:	785b      	ldrb	r3, [r3, #1]
 800eb78:	041b      	lsls	r3, r3, #16
 800eb7a:	4319      	orrs	r1, r3
 800eb7c:	4b35      	ldr	r3, [pc, #212]	; (800ec54 <MX_LWIP_Init+0x228>)
 800eb7e:	789b      	ldrb	r3, [r3, #2]
 800eb80:	021b      	lsls	r3, r3, #8
 800eb82:	430b      	orrs	r3, r1
 800eb84:	4933      	ldr	r1, [pc, #204]	; (800ec54 <MX_LWIP_Init+0x228>)
 800eb86:	78c9      	ldrb	r1, [r1, #3]
 800eb88:	430b      	orrs	r3, r1
 800eb8a:	0e1b      	lsrs	r3, r3, #24
 800eb8c:	4313      	orrs	r3, r2
 800eb8e:	4a34      	ldr	r2, [pc, #208]	; (800ec60 <MX_LWIP_Init+0x234>)
 800eb90:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800eb92:	4b31      	ldr	r3, [pc, #196]	; (800ec58 <MX_LWIP_Init+0x22c>)
 800eb94:	781b      	ldrb	r3, [r3, #0]
 800eb96:	061a      	lsls	r2, r3, #24
 800eb98:	4b2f      	ldr	r3, [pc, #188]	; (800ec58 <MX_LWIP_Init+0x22c>)
 800eb9a:	785b      	ldrb	r3, [r3, #1]
 800eb9c:	041b      	lsls	r3, r3, #16
 800eb9e:	431a      	orrs	r2, r3
 800eba0:	4b2d      	ldr	r3, [pc, #180]	; (800ec58 <MX_LWIP_Init+0x22c>)
 800eba2:	789b      	ldrb	r3, [r3, #2]
 800eba4:	021b      	lsls	r3, r3, #8
 800eba6:	4313      	orrs	r3, r2
 800eba8:	4a2b      	ldr	r2, [pc, #172]	; (800ec58 <MX_LWIP_Init+0x22c>)
 800ebaa:	78d2      	ldrb	r2, [r2, #3]
 800ebac:	4313      	orrs	r3, r2
 800ebae:	061a      	lsls	r2, r3, #24
 800ebb0:	4b29      	ldr	r3, [pc, #164]	; (800ec58 <MX_LWIP_Init+0x22c>)
 800ebb2:	781b      	ldrb	r3, [r3, #0]
 800ebb4:	0619      	lsls	r1, r3, #24
 800ebb6:	4b28      	ldr	r3, [pc, #160]	; (800ec58 <MX_LWIP_Init+0x22c>)
 800ebb8:	785b      	ldrb	r3, [r3, #1]
 800ebba:	041b      	lsls	r3, r3, #16
 800ebbc:	4319      	orrs	r1, r3
 800ebbe:	4b26      	ldr	r3, [pc, #152]	; (800ec58 <MX_LWIP_Init+0x22c>)
 800ebc0:	789b      	ldrb	r3, [r3, #2]
 800ebc2:	021b      	lsls	r3, r3, #8
 800ebc4:	430b      	orrs	r3, r1
 800ebc6:	4924      	ldr	r1, [pc, #144]	; (800ec58 <MX_LWIP_Init+0x22c>)
 800ebc8:	78c9      	ldrb	r1, [r1, #3]
 800ebca:	430b      	orrs	r3, r1
 800ebcc:	021b      	lsls	r3, r3, #8
 800ebce:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ebd2:	431a      	orrs	r2, r3
 800ebd4:	4b20      	ldr	r3, [pc, #128]	; (800ec58 <MX_LWIP_Init+0x22c>)
 800ebd6:	781b      	ldrb	r3, [r3, #0]
 800ebd8:	0619      	lsls	r1, r3, #24
 800ebda:	4b1f      	ldr	r3, [pc, #124]	; (800ec58 <MX_LWIP_Init+0x22c>)
 800ebdc:	785b      	ldrb	r3, [r3, #1]
 800ebde:	041b      	lsls	r3, r3, #16
 800ebe0:	4319      	orrs	r1, r3
 800ebe2:	4b1d      	ldr	r3, [pc, #116]	; (800ec58 <MX_LWIP_Init+0x22c>)
 800ebe4:	789b      	ldrb	r3, [r3, #2]
 800ebe6:	021b      	lsls	r3, r3, #8
 800ebe8:	430b      	orrs	r3, r1
 800ebea:	491b      	ldr	r1, [pc, #108]	; (800ec58 <MX_LWIP_Init+0x22c>)
 800ebec:	78c9      	ldrb	r1, [r1, #3]
 800ebee:	430b      	orrs	r3, r1
 800ebf0:	0a1b      	lsrs	r3, r3, #8
 800ebf2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800ebf6:	431a      	orrs	r2, r3
 800ebf8:	4b17      	ldr	r3, [pc, #92]	; (800ec58 <MX_LWIP_Init+0x22c>)
 800ebfa:	781b      	ldrb	r3, [r3, #0]
 800ebfc:	0619      	lsls	r1, r3, #24
 800ebfe:	4b16      	ldr	r3, [pc, #88]	; (800ec58 <MX_LWIP_Init+0x22c>)
 800ec00:	785b      	ldrb	r3, [r3, #1]
 800ec02:	041b      	lsls	r3, r3, #16
 800ec04:	4319      	orrs	r1, r3
 800ec06:	4b14      	ldr	r3, [pc, #80]	; (800ec58 <MX_LWIP_Init+0x22c>)
 800ec08:	789b      	ldrb	r3, [r3, #2]
 800ec0a:	021b      	lsls	r3, r3, #8
 800ec0c:	430b      	orrs	r3, r1
 800ec0e:	4912      	ldr	r1, [pc, #72]	; (800ec58 <MX_LWIP_Init+0x22c>)
 800ec10:	78c9      	ldrb	r1, [r1, #3]
 800ec12:	430b      	orrs	r3, r1
 800ec14:	0e1b      	lsrs	r3, r3, #24
 800ec16:	4313      	orrs	r3, r2
 800ec18:	4a12      	ldr	r2, [pc, #72]	; (800ec64 <MX_LWIP_Init+0x238>)
 800ec1a:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 800ec1c:	4b12      	ldr	r3, [pc, #72]	; (800ec68 <MX_LWIP_Init+0x23c>)
 800ec1e:	9302      	str	r3, [sp, #8]
 800ec20:	4b12      	ldr	r3, [pc, #72]	; (800ec6c <MX_LWIP_Init+0x240>)
 800ec22:	9301      	str	r3, [sp, #4]
 800ec24:	2300      	movs	r3, #0
 800ec26:	9300      	str	r3, [sp, #0]
 800ec28:	4b0e      	ldr	r3, [pc, #56]	; (800ec64 <MX_LWIP_Init+0x238>)
 800ec2a:	4a0d      	ldr	r2, [pc, #52]	; (800ec60 <MX_LWIP_Init+0x234>)
 800ec2c:	490b      	ldr	r1, [pc, #44]	; (800ec5c <MX_LWIP_Init+0x230>)
 800ec2e:	4810      	ldr	r0, [pc, #64]	; (800ec70 <MX_LWIP_Init+0x244>)
 800ec30:	f001 f92c 	bl	800fe8c <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800ec34:	480e      	ldr	r0, [pc, #56]	; (800ec70 <MX_LWIP_Init+0x244>)
 800ec36:	f001 fadb 	bl	80101f0 <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 800ec3a:	480d      	ldr	r0, [pc, #52]	; (800ec70 <MX_LWIP_Init+0x244>)
 800ec3c:	f001 fae8 	bl	8010210 <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 800ec40:	490c      	ldr	r1, [pc, #48]	; (800ec74 <MX_LWIP_Init+0x248>)
 800ec42:	480b      	ldr	r0, [pc, #44]	; (800ec70 <MX_LWIP_Init+0x244>)
 800ec44:	f001 fbe6 	bl	8010414 <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800ec48:	bf00      	nop
 800ec4a:	46bd      	mov	sp, r7
 800ec4c:	bd80      	pop	{r7, pc}
 800ec4e:	bf00      	nop
 800ec50:	20000694 	.word	0x20000694
 800ec54:	20000698 	.word	0x20000698
 800ec58:	2000069c 	.word	0x2000069c
 800ec5c:	20000688 	.word	0x20000688
 800ec60:	2000068c 	.word	0x2000068c
 800ec64:	20000690 	.word	0x20000690
 800ec68:	08018c61 	.word	0x08018c61
 800ec6c:	0800eebd 	.word	0x0800eebd
 800ec70:	20000654 	.word	0x20000654
 800ec74:	0800ec79 	.word	0x0800ec79

0800ec78 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 800ec78:	b480      	push	{r7}
 800ec7a:	b083      	sub	sp, #12
 800ec7c:	af00      	add	r7, sp, #0
 800ec7e:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 800ec80:	bf00      	nop
 800ec82:	370c      	adds	r7, #12
 800ec84:	46bd      	mov	sp, r7
 800ec86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec8a:	4770      	bx	lr

0800ec8c <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800ec8c:	b580      	push	{r7, lr}
 800ec8e:	b084      	sub	sp, #16
 800ec90:	af00      	add	r7, sp, #0
 800ec92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 800ec94:	2300      	movs	r3, #0
 800ec96:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800ec98:	4b3f      	ldr	r3, [pc, #252]	; (800ed98 <low_level_init+0x10c>)
 800ec9a:	4a40      	ldr	r2, [pc, #256]	; (800ed9c <low_level_init+0x110>)
 800ec9c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800ec9e:	2300      	movs	r3, #0
 800eca0:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 800eca2:	2380      	movs	r3, #128	; 0x80
 800eca4:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 800eca6:	23e1      	movs	r3, #225	; 0xe1
 800eca8:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 800ecaa:	2300      	movs	r3, #0
 800ecac:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 800ecae:	2300      	movs	r3, #0
 800ecb0:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 800ecb2:	2300      	movs	r3, #0
 800ecb4:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 800ecb6:	4a38      	ldr	r2, [pc, #224]	; (800ed98 <low_level_init+0x10c>)
 800ecb8:	f107 0308 	add.w	r3, r7, #8
 800ecbc:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800ecbe:	4b36      	ldr	r3, [pc, #216]	; (800ed98 <low_level_init+0x10c>)
 800ecc0:	2201      	movs	r2, #1
 800ecc2:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800ecc4:	4b34      	ldr	r3, [pc, #208]	; (800ed98 <low_level_init+0x10c>)
 800ecc6:	4a36      	ldr	r2, [pc, #216]	; (800eda0 <low_level_init+0x114>)
 800ecc8:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800ecca:	4b33      	ldr	r3, [pc, #204]	; (800ed98 <low_level_init+0x10c>)
 800eccc:	4a35      	ldr	r2, [pc, #212]	; (800eda4 <low_level_init+0x118>)
 800ecce:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 800ecd0:	4b31      	ldr	r3, [pc, #196]	; (800ed98 <low_level_init+0x10c>)
 800ecd2:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800ecd6:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800ecd8:	482f      	ldr	r0, [pc, #188]	; (800ed98 <low_level_init+0x10c>)
 800ecda:	f7f7 f85b 	bl	8005d94 <HAL_ETH_Init>
 800ecde:	4603      	mov	r3, r0
 800ece0:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800ece2:	2238      	movs	r2, #56	; 0x38
 800ece4:	2100      	movs	r1, #0
 800ece6:	4830      	ldr	r0, [pc, #192]	; (800eda8 <low_level_init+0x11c>)
 800ece8:	f00a ff20 	bl	8019b2c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800ecec:	4b2e      	ldr	r3, [pc, #184]	; (800eda8 <low_level_init+0x11c>)
 800ecee:	2221      	movs	r2, #33	; 0x21
 800ecf0:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800ecf2:	4b2d      	ldr	r3, [pc, #180]	; (800eda8 <low_level_init+0x11c>)
 800ecf4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800ecf8:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800ecfa:	4b2b      	ldr	r3, [pc, #172]	; (800eda8 <low_level_init+0x11c>)
 800ecfc:	2200      	movs	r2, #0
 800ecfe:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 800ed00:	482a      	ldr	r0, [pc, #168]	; (800edac <low_level_init+0x120>)
 800ed02:	f000 ff8b 	bl	800fc1c <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800ed06:	687b      	ldr	r3, [r7, #4]
 800ed08:	2206      	movs	r2, #6
 800ed0a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800ed0e:	4b22      	ldr	r3, [pc, #136]	; (800ed98 <low_level_init+0x10c>)
 800ed10:	685b      	ldr	r3, [r3, #4]
 800ed12:	781a      	ldrb	r2, [r3, #0]
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800ed1a:	4b1f      	ldr	r3, [pc, #124]	; (800ed98 <low_level_init+0x10c>)
 800ed1c:	685b      	ldr	r3, [r3, #4]
 800ed1e:	785a      	ldrb	r2, [r3, #1]
 800ed20:	687b      	ldr	r3, [r7, #4]
 800ed22:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800ed26:	4b1c      	ldr	r3, [pc, #112]	; (800ed98 <low_level_init+0x10c>)
 800ed28:	685b      	ldr	r3, [r3, #4]
 800ed2a:	789a      	ldrb	r2, [r3, #2]
 800ed2c:	687b      	ldr	r3, [r7, #4]
 800ed2e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800ed32:	4b19      	ldr	r3, [pc, #100]	; (800ed98 <low_level_init+0x10c>)
 800ed34:	685b      	ldr	r3, [r3, #4]
 800ed36:	78da      	ldrb	r2, [r3, #3]
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800ed3e:	4b16      	ldr	r3, [pc, #88]	; (800ed98 <low_level_init+0x10c>)
 800ed40:	685b      	ldr	r3, [r3, #4]
 800ed42:	791a      	ldrb	r2, [r3, #4]
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800ed4a:	4b13      	ldr	r3, [pc, #76]	; (800ed98 <low_level_init+0x10c>)
 800ed4c:	685b      	ldr	r3, [r3, #4]
 800ed4e:	795a      	ldrb	r2, [r3, #5]
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800ed5c:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800ed5e:	687b      	ldr	r3, [r7, #4]
 800ed60:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ed64:	f043 030a 	orr.w	r3, r3, #10
 800ed68:	b2da      	uxtb	r2, r3
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 800ed70:	490f      	ldr	r1, [pc, #60]	; (800edb0 <low_level_init+0x124>)
 800ed72:	4810      	ldr	r0, [pc, #64]	; (800edb4 <low_level_init+0x128>)
 800ed74:	f7f4 fcf7 	bl	8003766 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 800ed78:	480e      	ldr	r0, [pc, #56]	; (800edb4 <low_level_init+0x128>)
 800ed7a:	f7f4 fd26 	bl	80037ca <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 800ed7e:	7bfb      	ldrb	r3, [r7, #15]
 800ed80:	2b00      	cmp	r3, #0
 800ed82:	d103      	bne.n	800ed8c <low_level_init+0x100>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 800ed84:	6878      	ldr	r0, [r7, #4]
 800ed86:	f000 fa05 	bl	800f194 <ethernet_link_check_state>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800ed8a:	e001      	b.n	800ed90 <low_level_init+0x104>
    Error_Handler();
 800ed8c:	f7f3 ff94 	bl	8002cb8 <Error_Handler>
}
 800ed90:	bf00      	nop
 800ed92:	3710      	adds	r7, #16
 800ed94:	46bd      	mov	sp, r7
 800ed96:	bd80      	pop	{r7, pc}
 800ed98:	200006a8 	.word	0x200006a8
 800ed9c:	40028000 	.word	0x40028000
 800eda0:	30040060 	.word	0x30040060
 800eda4:	30040000 	.word	0x30040000
 800eda8:	20000758 	.word	0x20000758
 800edac:	0801eb68 	.word	0x0801eb68
 800edb0:	20000044 	.word	0x20000044
 800edb4:	20000790 	.word	0x20000790

0800edb8 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800edb8:	b580      	push	{r7, lr}
 800edba:	b092      	sub	sp, #72	; 0x48
 800edbc:	af00      	add	r7, sp, #0
 800edbe:	6078      	str	r0, [r7, #4]
 800edc0:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 800edc2:	2300      	movs	r3, #0
 800edc4:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 800edc6:	2300      	movs	r3, #0
 800edc8:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 800edca:	2300      	movs	r3, #0
 800edcc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 800edd0:	f107 030c 	add.w	r3, r7, #12
 800edd4:	2230      	movs	r2, #48	; 0x30
 800edd6:	2100      	movs	r1, #0
 800edd8:	4618      	mov	r0, r3
 800edda:	f00a fea7 	bl	8019b2c <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800edde:	f107 030c 	add.w	r3, r7, #12
 800ede2:	2230      	movs	r2, #48	; 0x30
 800ede4:	2100      	movs	r1, #0
 800ede6:	4618      	mov	r0, r3
 800ede8:	f00a fea0 	bl	8019b2c <memset>

  for(q = p; q != NULL; q = q->next)
 800edec:	683b      	ldr	r3, [r7, #0]
 800edee:	643b      	str	r3, [r7, #64]	; 0x40
 800edf0:	e045      	b.n	800ee7e <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 800edf2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800edf4:	2b03      	cmp	r3, #3
 800edf6:	d902      	bls.n	800edfe <low_level_output+0x46>
      return ERR_IF;
 800edf8:	f06f 030b 	mvn.w	r3, #11
 800edfc:	e055      	b.n	800eeaa <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 800edfe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ee00:	6859      	ldr	r1, [r3, #4]
 800ee02:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ee04:	4613      	mov	r3, r2
 800ee06:	005b      	lsls	r3, r3, #1
 800ee08:	4413      	add	r3, r2
 800ee0a:	009b      	lsls	r3, r3, #2
 800ee0c:	3348      	adds	r3, #72	; 0x48
 800ee0e:	443b      	add	r3, r7
 800ee10:	3b3c      	subs	r3, #60	; 0x3c
 800ee12:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 800ee14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ee16:	895b      	ldrh	r3, [r3, #10]
 800ee18:	4619      	mov	r1, r3
 800ee1a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ee1c:	4613      	mov	r3, r2
 800ee1e:	005b      	lsls	r3, r3, #1
 800ee20:	4413      	add	r3, r2
 800ee22:	009b      	lsls	r3, r3, #2
 800ee24:	3348      	adds	r3, #72	; 0x48
 800ee26:	443b      	add	r3, r7
 800ee28:	3b38      	subs	r3, #56	; 0x38
 800ee2a:	6019      	str	r1, [r3, #0]

    if(i>0)
 800ee2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ee2e:	2b00      	cmp	r3, #0
 800ee30:	d011      	beq.n	800ee56 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800ee32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ee34:	1e5a      	subs	r2, r3, #1
 800ee36:	f107 000c 	add.w	r0, r7, #12
 800ee3a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ee3c:	460b      	mov	r3, r1
 800ee3e:	005b      	lsls	r3, r3, #1
 800ee40:	440b      	add	r3, r1
 800ee42:	009b      	lsls	r3, r3, #2
 800ee44:	18c1      	adds	r1, r0, r3
 800ee46:	4613      	mov	r3, r2
 800ee48:	005b      	lsls	r3, r3, #1
 800ee4a:	4413      	add	r3, r2
 800ee4c:	009b      	lsls	r3, r3, #2
 800ee4e:	3348      	adds	r3, #72	; 0x48
 800ee50:	443b      	add	r3, r7
 800ee52:	3b34      	subs	r3, #52	; 0x34
 800ee54:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 800ee56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ee58:	681b      	ldr	r3, [r3, #0]
 800ee5a:	2b00      	cmp	r3, #0
 800ee5c:	d109      	bne.n	800ee72 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 800ee5e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ee60:	4613      	mov	r3, r2
 800ee62:	005b      	lsls	r3, r3, #1
 800ee64:	4413      	add	r3, r2
 800ee66:	009b      	lsls	r3, r3, #2
 800ee68:	3348      	adds	r3, #72	; 0x48
 800ee6a:	443b      	add	r3, r7
 800ee6c:	3b34      	subs	r3, #52	; 0x34
 800ee6e:	2200      	movs	r2, #0
 800ee70:	601a      	str	r2, [r3, #0]
    }

    i++;
 800ee72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ee74:	3301      	adds	r3, #1
 800ee76:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 800ee78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ee7a:	681b      	ldr	r3, [r3, #0]
 800ee7c:	643b      	str	r3, [r7, #64]	; 0x40
 800ee7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ee80:	2b00      	cmp	r3, #0
 800ee82:	d1b6      	bne.n	800edf2 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 800ee84:	683b      	ldr	r3, [r7, #0]
 800ee86:	891b      	ldrh	r3, [r3, #8]
 800ee88:	461a      	mov	r2, r3
 800ee8a:	4b0a      	ldr	r3, [pc, #40]	; (800eeb4 <low_level_output+0xfc>)
 800ee8c:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800ee8e:	4a09      	ldr	r2, [pc, #36]	; (800eeb4 <low_level_output+0xfc>)
 800ee90:	f107 030c 	add.w	r3, r7, #12
 800ee94:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 800ee96:	4a07      	ldr	r2, [pc, #28]	; (800eeb4 <low_level_output+0xfc>)
 800ee98:	683b      	ldr	r3, [r7, #0]
 800ee9a:	6353      	str	r3, [r2, #52]	; 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 800ee9c:	2214      	movs	r2, #20
 800ee9e:	4905      	ldr	r1, [pc, #20]	; (800eeb4 <low_level_output+0xfc>)
 800eea0:	4805      	ldr	r0, [pc, #20]	; (800eeb8 <low_level_output+0x100>)
 800eea2:	f7f7 f90f 	bl	80060c4 <HAL_ETH_Transmit>

  return errval;
 800eea6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800eeaa:	4618      	mov	r0, r3
 800eeac:	3748      	adds	r7, #72	; 0x48
 800eeae:	46bd      	mov	sp, r7
 800eeb0:	bd80      	pop	{r7, pc}
 800eeb2:	bf00      	nop
 800eeb4:	20000758 	.word	0x20000758
 800eeb8:	200006a8 	.word	0x200006a8

0800eebc <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800eebc:	b580      	push	{r7, lr}
 800eebe:	b082      	sub	sp, #8
 800eec0:	af00      	add	r7, sp, #0
 800eec2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	2b00      	cmp	r3, #0
 800eec8:	d106      	bne.n	800eed8 <ethernetif_init+0x1c>
 800eeca:	4b0e      	ldr	r3, [pc, #56]	; (800ef04 <ethernetif_init+0x48>)
 800eecc:	f240 1285 	movw	r2, #389	; 0x185
 800eed0:	490d      	ldr	r1, [pc, #52]	; (800ef08 <ethernetif_init+0x4c>)
 800eed2:	480e      	ldr	r0, [pc, #56]	; (800ef0c <ethernetif_init+0x50>)
 800eed4:	f00a fcd4 	bl	8019880 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	2273      	movs	r2, #115	; 0x73
 800eedc:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	2274      	movs	r2, #116	; 0x74
 800eee4:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	4a09      	ldr	r2, [pc, #36]	; (800ef10 <ethernetif_init+0x54>)
 800eeec:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	4a08      	ldr	r2, [pc, #32]	; (800ef14 <ethernetif_init+0x58>)
 800eef2:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800eef4:	6878      	ldr	r0, [r7, #4]
 800eef6:	f7ff fec9 	bl	800ec8c <low_level_init>

  return ERR_OK;
 800eefa:	2300      	movs	r3, #0
}
 800eefc:	4618      	mov	r0, r3
 800eefe:	3708      	adds	r7, #8
 800ef00:	46bd      	mov	sp, r7
 800ef02:	bd80      	pop	{r7, pc}
 800ef04:	0801c130 	.word	0x0801c130
 800ef08:	0801c14c 	.word	0x0801c14c
 800ef0c:	0801c15c 	.word	0x0801c15c
 800ef10:	080170cd 	.word	0x080170cd
 800ef14:	0800edb9 	.word	0x0800edb9

0800ef18 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 800ef18:	b580      	push	{r7, lr}
 800ef1a:	b084      	sub	sp, #16
 800ef1c:	af00      	add	r7, sp, #0
 800ef1e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 800ef20:	687b      	ldr	r3, [r7, #4]
 800ef22:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 800ef24:	68f9      	ldr	r1, [r7, #12]
 800ef26:	4807      	ldr	r0, [pc, #28]	; (800ef44 <pbuf_free_custom+0x2c>)
 800ef28:	f000 ff5a 	bl	800fde0 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 800ef2c:	4b06      	ldr	r3, [pc, #24]	; (800ef48 <pbuf_free_custom+0x30>)
 800ef2e:	781b      	ldrb	r3, [r3, #0]
 800ef30:	2b01      	cmp	r3, #1
 800ef32:	d102      	bne.n	800ef3a <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 800ef34:	4b04      	ldr	r3, [pc, #16]	; (800ef48 <pbuf_free_custom+0x30>)
 800ef36:	2200      	movs	r2, #0
 800ef38:	701a      	strb	r2, [r3, #0]
  }
}
 800ef3a:	bf00      	nop
 800ef3c:	3710      	adds	r7, #16
 800ef3e:	46bd      	mov	sp, r7
 800ef40:	bd80      	pop	{r7, pc}
 800ef42:	bf00      	nop
 800ef44:	0801eb68 	.word	0x0801eb68
 800ef48:	200006a4 	.word	0x200006a4

0800ef4c <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 800ef4c:	b580      	push	{r7, lr}
 800ef4e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800ef50:	f7f4 fdf0 	bl	8003b34 <HAL_GetTick>
 800ef54:	4603      	mov	r3, r0
}
 800ef56:	4618      	mov	r0, r3
 800ef58:	bd80      	pop	{r7, pc}
	...

0800ef5c <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800ef5c:	b580      	push	{r7, lr}
 800ef5e:	b08e      	sub	sp, #56	; 0x38
 800ef60:	af00      	add	r7, sp, #0
 800ef62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ef64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ef68:	2200      	movs	r2, #0
 800ef6a:	601a      	str	r2, [r3, #0]
 800ef6c:	605a      	str	r2, [r3, #4]
 800ef6e:	609a      	str	r2, [r3, #8]
 800ef70:	60da      	str	r2, [r3, #12]
 800ef72:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	681b      	ldr	r3, [r3, #0]
 800ef78:	4a59      	ldr	r2, [pc, #356]	; (800f0e0 <HAL_ETH_MspInit+0x184>)
 800ef7a:	4293      	cmp	r3, r2
 800ef7c:	f040 80ab 	bne.w	800f0d6 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 800ef80:	4b58      	ldr	r3, [pc, #352]	; (800f0e4 <HAL_ETH_MspInit+0x188>)
 800ef82:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800ef86:	4a57      	ldr	r2, [pc, #348]	; (800f0e4 <HAL_ETH_MspInit+0x188>)
 800ef88:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ef8c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800ef90:	4b54      	ldr	r3, [pc, #336]	; (800f0e4 <HAL_ETH_MspInit+0x188>)
 800ef92:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800ef96:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ef9a:	623b      	str	r3, [r7, #32]
 800ef9c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 800ef9e:	4b51      	ldr	r3, [pc, #324]	; (800f0e4 <HAL_ETH_MspInit+0x188>)
 800efa0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800efa4:	4a4f      	ldr	r2, [pc, #316]	; (800f0e4 <HAL_ETH_MspInit+0x188>)
 800efa6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800efaa:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800efae:	4b4d      	ldr	r3, [pc, #308]	; (800f0e4 <HAL_ETH_MspInit+0x188>)
 800efb0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800efb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800efb8:	61fb      	str	r3, [r7, #28]
 800efba:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 800efbc:	4b49      	ldr	r3, [pc, #292]	; (800f0e4 <HAL_ETH_MspInit+0x188>)
 800efbe:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800efc2:	4a48      	ldr	r2, [pc, #288]	; (800f0e4 <HAL_ETH_MspInit+0x188>)
 800efc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800efc8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800efcc:	4b45      	ldr	r3, [pc, #276]	; (800f0e4 <HAL_ETH_MspInit+0x188>)
 800efce:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800efd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800efd6:	61bb      	str	r3, [r7, #24]
 800efd8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800efda:	4b42      	ldr	r3, [pc, #264]	; (800f0e4 <HAL_ETH_MspInit+0x188>)
 800efdc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800efe0:	4a40      	ldr	r2, [pc, #256]	; (800f0e4 <HAL_ETH_MspInit+0x188>)
 800efe2:	f043 0304 	orr.w	r3, r3, #4
 800efe6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800efea:	4b3e      	ldr	r3, [pc, #248]	; (800f0e4 <HAL_ETH_MspInit+0x188>)
 800efec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800eff0:	f003 0304 	and.w	r3, r3, #4
 800eff4:	617b      	str	r3, [r7, #20]
 800eff6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800eff8:	4b3a      	ldr	r3, [pc, #232]	; (800f0e4 <HAL_ETH_MspInit+0x188>)
 800effa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800effe:	4a39      	ldr	r2, [pc, #228]	; (800f0e4 <HAL_ETH_MspInit+0x188>)
 800f000:	f043 0301 	orr.w	r3, r3, #1
 800f004:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800f008:	4b36      	ldr	r3, [pc, #216]	; (800f0e4 <HAL_ETH_MspInit+0x188>)
 800f00a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f00e:	f003 0301 	and.w	r3, r3, #1
 800f012:	613b      	str	r3, [r7, #16]
 800f014:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800f016:	4b33      	ldr	r3, [pc, #204]	; (800f0e4 <HAL_ETH_MspInit+0x188>)
 800f018:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f01c:	4a31      	ldr	r2, [pc, #196]	; (800f0e4 <HAL_ETH_MspInit+0x188>)
 800f01e:	f043 0302 	orr.w	r3, r3, #2
 800f022:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800f026:	4b2f      	ldr	r3, [pc, #188]	; (800f0e4 <HAL_ETH_MspInit+0x188>)
 800f028:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f02c:	f003 0302 	and.w	r3, r3, #2
 800f030:	60fb      	str	r3, [r7, #12]
 800f032:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800f034:	4b2b      	ldr	r3, [pc, #172]	; (800f0e4 <HAL_ETH_MspInit+0x188>)
 800f036:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f03a:	4a2a      	ldr	r2, [pc, #168]	; (800f0e4 <HAL_ETH_MspInit+0x188>)
 800f03c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f040:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800f044:	4b27      	ldr	r3, [pc, #156]	; (800f0e4 <HAL_ETH_MspInit+0x188>)
 800f046:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f04a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f04e:	60bb      	str	r3, [r7, #8]
 800f050:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800f052:	2332      	movs	r3, #50	; 0x32
 800f054:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f056:	2302      	movs	r3, #2
 800f058:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f05a:	2300      	movs	r3, #0
 800f05c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f05e:	2300      	movs	r3, #0
 800f060:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800f062:	230b      	movs	r3, #11
 800f064:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800f066:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f06a:	4619      	mov	r1, r3
 800f06c:	481e      	ldr	r0, [pc, #120]	; (800f0e8 <HAL_ETH_MspInit+0x18c>)
 800f06e:	f7f8 f991 	bl	8007394 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800f072:	2386      	movs	r3, #134	; 0x86
 800f074:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f076:	2302      	movs	r3, #2
 800f078:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f07a:	2300      	movs	r3, #0
 800f07c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f07e:	2300      	movs	r3, #0
 800f080:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800f082:	230b      	movs	r3, #11
 800f084:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f086:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f08a:	4619      	mov	r1, r3
 800f08c:	4817      	ldr	r0, [pc, #92]	; (800f0ec <HAL_ETH_MspInit+0x190>)
 800f08e:	f7f8 f981 	bl	8007394 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800f092:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800f096:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f098:	2302      	movs	r3, #2
 800f09a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f09c:	2300      	movs	r3, #0
 800f09e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f0a0:	2300      	movs	r3, #0
 800f0a2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800f0a4:	230b      	movs	r3, #11
 800f0a6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800f0a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f0ac:	4619      	mov	r1, r3
 800f0ae:	4810      	ldr	r0, [pc, #64]	; (800f0f0 <HAL_ETH_MspInit+0x194>)
 800f0b0:	f7f8 f970 	bl	8007394 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 800f0b4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800f0b8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f0ba:	2302      	movs	r3, #2
 800f0bc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f0be:	2300      	movs	r3, #0
 800f0c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f0c2:	2300      	movs	r3, #0
 800f0c4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800f0c6:	230b      	movs	r3, #11
 800f0c8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800f0ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f0ce:	4619      	mov	r1, r3
 800f0d0:	4808      	ldr	r0, [pc, #32]	; (800f0f4 <HAL_ETH_MspInit+0x198>)
 800f0d2:	f7f8 f95f 	bl	8007394 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800f0d6:	bf00      	nop
 800f0d8:	3738      	adds	r7, #56	; 0x38
 800f0da:	46bd      	mov	sp, r7
 800f0dc:	bd80      	pop	{r7, pc}
 800f0de:	bf00      	nop
 800f0e0:	40028000 	.word	0x40028000
 800f0e4:	58024400 	.word	0x58024400
 800f0e8:	58020800 	.word	0x58020800
 800f0ec:	58020000 	.word	0x58020000
 800f0f0:	58020400 	.word	0x58020400
 800f0f4:	58021800 	.word	0x58021800

0800f0f8 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 800f0f8:	b580      	push	{r7, lr}
 800f0fa:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 800f0fc:	4802      	ldr	r0, [pc, #8]	; (800f108 <ETH_PHY_IO_Init+0x10>)
 800f0fe:	f7f7 fb7d 	bl	80067fc <HAL_ETH_SetMDIOClockRange>

  return 0;
 800f102:	2300      	movs	r3, #0
}
 800f104:	4618      	mov	r0, r3
 800f106:	bd80      	pop	{r7, pc}
 800f108:	200006a8 	.word	0x200006a8

0800f10c <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 800f10c:	b480      	push	{r7}
 800f10e:	af00      	add	r7, sp, #0
  return 0;
 800f110:	2300      	movs	r3, #0
}
 800f112:	4618      	mov	r0, r3
 800f114:	46bd      	mov	sp, r7
 800f116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f11a:	4770      	bx	lr

0800f11c <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 800f11c:	b580      	push	{r7, lr}
 800f11e:	b084      	sub	sp, #16
 800f120:	af00      	add	r7, sp, #0
 800f122:	60f8      	str	r0, [r7, #12]
 800f124:	60b9      	str	r1, [r7, #8]
 800f126:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 800f128:	687b      	ldr	r3, [r7, #4]
 800f12a:	68ba      	ldr	r2, [r7, #8]
 800f12c:	68f9      	ldr	r1, [r7, #12]
 800f12e:	4807      	ldr	r0, [pc, #28]	; (800f14c <ETH_PHY_IO_ReadReg+0x30>)
 800f130:	f7f7 f8cd 	bl	80062ce <HAL_ETH_ReadPHYRegister>
 800f134:	4603      	mov	r3, r0
 800f136:	2b00      	cmp	r3, #0
 800f138:	d002      	beq.n	800f140 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 800f13a:	f04f 33ff 	mov.w	r3, #4294967295
 800f13e:	e000      	b.n	800f142 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 800f140:	2300      	movs	r3, #0
}
 800f142:	4618      	mov	r0, r3
 800f144:	3710      	adds	r7, #16
 800f146:	46bd      	mov	sp, r7
 800f148:	bd80      	pop	{r7, pc}
 800f14a:	bf00      	nop
 800f14c:	200006a8 	.word	0x200006a8

0800f150 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 800f150:	b580      	push	{r7, lr}
 800f152:	b084      	sub	sp, #16
 800f154:	af00      	add	r7, sp, #0
 800f156:	60f8      	str	r0, [r7, #12]
 800f158:	60b9      	str	r1, [r7, #8]
 800f15a:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 800f15c:	687b      	ldr	r3, [r7, #4]
 800f15e:	68ba      	ldr	r2, [r7, #8]
 800f160:	68f9      	ldr	r1, [r7, #12]
 800f162:	4807      	ldr	r0, [pc, #28]	; (800f180 <ETH_PHY_IO_WriteReg+0x30>)
 800f164:	f7f7 f908 	bl	8006378 <HAL_ETH_WritePHYRegister>
 800f168:	4603      	mov	r3, r0
 800f16a:	2b00      	cmp	r3, #0
 800f16c:	d002      	beq.n	800f174 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 800f16e:	f04f 33ff 	mov.w	r3, #4294967295
 800f172:	e000      	b.n	800f176 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 800f174:	2300      	movs	r3, #0
}
 800f176:	4618      	mov	r0, r3
 800f178:	3710      	adds	r7, #16
 800f17a:	46bd      	mov	sp, r7
 800f17c:	bd80      	pop	{r7, pc}
 800f17e:	bf00      	nop
 800f180:	200006a8 	.word	0x200006a8

0800f184 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 800f184:	b580      	push	{r7, lr}
 800f186:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800f188:	f7f4 fcd4 	bl	8003b34 <HAL_GetTick>
 800f18c:	4603      	mov	r3, r0
}
 800f18e:	4618      	mov	r0, r3
 800f190:	bd80      	pop	{r7, pc}
	...

0800f194 <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 800f194:	b580      	push	{r7, lr}
 800f196:	b0a0      	sub	sp, #128	; 0x80
 800f198:	af00      	add	r7, sp, #0
 800f19a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 800f19c:	f107 030c 	add.w	r3, r7, #12
 800f1a0:	2264      	movs	r2, #100	; 0x64
 800f1a2:	2100      	movs	r1, #0
 800f1a4:	4618      	mov	r0, r3
 800f1a6:	f00a fcc1 	bl	8019b2c <memset>
  int32_t PHYLinkState = 0;
 800f1aa:	2300      	movs	r3, #0
 800f1ac:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 800f1ae:	2300      	movs	r3, #0
 800f1b0:	67fb      	str	r3, [r7, #124]	; 0x7c
 800f1b2:	2300      	movs	r3, #0
 800f1b4:	67bb      	str	r3, [r7, #120]	; 0x78
 800f1b6:	2300      	movs	r3, #0
 800f1b8:	677b      	str	r3, [r7, #116]	; 0x74

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800f1ba:	483a      	ldr	r0, [pc, #232]	; (800f2a4 <ethernet_link_check_state+0x110>)
 800f1bc:	f7f4 fbad 	bl	800391a <LAN8742_GetLinkState>
 800f1c0:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 800f1c2:	687b      	ldr	r3, [r7, #4]
 800f1c4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f1c8:	089b      	lsrs	r3, r3, #2
 800f1ca:	f003 0301 	and.w	r3, r3, #1
 800f1ce:	b2db      	uxtb	r3, r3
 800f1d0:	2b00      	cmp	r3, #0
 800f1d2:	d00c      	beq.n	800f1ee <ethernet_link_check_state+0x5a>
 800f1d4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f1d6:	2b01      	cmp	r3, #1
 800f1d8:	dc09      	bgt.n	800f1ee <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop(&heth);
 800f1da:	4833      	ldr	r0, [pc, #204]	; (800f2a8 <ethernet_link_check_state+0x114>)
 800f1dc:	f7f6 ff22 	bl	8006024 <HAL_ETH_Stop>
    netif_set_down(netif);
 800f1e0:	6878      	ldr	r0, [r7, #4]
 800f1e2:	f001 f881 	bl	80102e8 <netif_set_down>
    netif_set_link_down(netif);
 800f1e6:	6878      	ldr	r0, [r7, #4]
 800f1e8:	f001 f8e4 	bl	80103b4 <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 800f1ec:	e055      	b.n	800f29a <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f1f4:	f003 0304 	and.w	r3, r3, #4
 800f1f8:	2b00      	cmp	r3, #0
 800f1fa:	d14e      	bne.n	800f29a <ethernet_link_check_state+0x106>
 800f1fc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f1fe:	2b01      	cmp	r3, #1
 800f200:	dd4b      	ble.n	800f29a <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 800f202:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f204:	3b02      	subs	r3, #2
 800f206:	2b03      	cmp	r3, #3
 800f208:	d82a      	bhi.n	800f260 <ethernet_link_check_state+0xcc>
 800f20a:	a201      	add	r2, pc, #4	; (adr r2, 800f210 <ethernet_link_check_state+0x7c>)
 800f20c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f210:	0800f221 	.word	0x0800f221
 800f214:	0800f233 	.word	0x0800f233
 800f218:	0800f243 	.word	0x0800f243
 800f21c:	0800f253 	.word	0x0800f253
      duplex = ETH_FULLDUPLEX_MODE;
 800f220:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800f224:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800f226:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800f22a:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800f22c:	2301      	movs	r3, #1
 800f22e:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800f230:	e017      	b.n	800f262 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 800f232:	2300      	movs	r3, #0
 800f234:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800f236:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800f23a:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800f23c:	2301      	movs	r3, #1
 800f23e:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800f240:	e00f      	b.n	800f262 <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 800f242:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800f246:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 800f248:	2300      	movs	r3, #0
 800f24a:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800f24c:	2301      	movs	r3, #1
 800f24e:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800f250:	e007      	b.n	800f262 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 800f252:	2300      	movs	r3, #0
 800f254:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 800f256:	2300      	movs	r3, #0
 800f258:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800f25a:	2301      	movs	r3, #1
 800f25c:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800f25e:	e000      	b.n	800f262 <ethernet_link_check_state+0xce>
      break;
 800f260:	bf00      	nop
    if(linkchanged)
 800f262:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800f264:	2b00      	cmp	r3, #0
 800f266:	d018      	beq.n	800f29a <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 800f268:	f107 030c 	add.w	r3, r7, #12
 800f26c:	4619      	mov	r1, r3
 800f26e:	480e      	ldr	r0, [pc, #56]	; (800f2a8 <ethernet_link_check_state+0x114>)
 800f270:	f7f7 f8d6 	bl	8006420 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 800f274:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f276:	627b      	str	r3, [r7, #36]	; 0x24
      MACConf.Speed = speed;
 800f278:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f27a:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 800f27c:	f107 030c 	add.w	r3, r7, #12
 800f280:	4619      	mov	r1, r3
 800f282:	4809      	ldr	r0, [pc, #36]	; (800f2a8 <ethernet_link_check_state+0x114>)
 800f284:	f7f7 faa0 	bl	80067c8 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 800f288:	4807      	ldr	r0, [pc, #28]	; (800f2a8 <ethernet_link_check_state+0x114>)
 800f28a:	f7f6 fe69 	bl	8005f60 <HAL_ETH_Start>
      netif_set_up(netif);
 800f28e:	6878      	ldr	r0, [r7, #4]
 800f290:	f000 ffbe 	bl	8010210 <netif_set_up>
      netif_set_link_up(netif);
 800f294:	6878      	ldr	r0, [r7, #4]
 800f296:	f001 f859 	bl	801034c <netif_set_link_up>
}
 800f29a:	bf00      	nop
 800f29c:	3780      	adds	r7, #128	; 0x80
 800f29e:	46bd      	mov	sp, r7
 800f2a0:	bd80      	pop	{r7, pc}
 800f2a2:	bf00      	nop
 800f2a4:	20000790 	.word	0x20000790
 800f2a8:	200006a8 	.word	0x200006a8

0800f2ac <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 800f2ac:	b580      	push	{r7, lr}
 800f2ae:	b086      	sub	sp, #24
 800f2b0:	af02      	add	r7, sp, #8
 800f2b2:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 800f2b4:	4812      	ldr	r0, [pc, #72]	; (800f300 <HAL_ETH_RxAllocateCallback+0x54>)
 800f2b6:	f000 fd25 	bl	800fd04 <memp_malloc_pool>
 800f2ba:	60f8      	str	r0, [r7, #12]
  if (p)
 800f2bc:	68fb      	ldr	r3, [r7, #12]
 800f2be:	2b00      	cmp	r3, #0
 800f2c0:	d014      	beq.n	800f2ec <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 800f2c2:	68fb      	ldr	r3, [r7, #12]
 800f2c4:	f103 0220 	add.w	r2, r3, #32
 800f2c8:	687b      	ldr	r3, [r7, #4]
 800f2ca:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 800f2cc:	68fb      	ldr	r3, [r7, #12]
 800f2ce:	4a0d      	ldr	r2, [pc, #52]	; (800f304 <HAL_ETH_RxAllocateCallback+0x58>)
 800f2d0:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	681b      	ldr	r3, [r3, #0]
 800f2d6:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800f2da:	9201      	str	r2, [sp, #4]
 800f2dc:	9300      	str	r3, [sp, #0]
 800f2de:	68fb      	ldr	r3, [r7, #12]
 800f2e0:	2241      	movs	r2, #65	; 0x41
 800f2e2:	2100      	movs	r1, #0
 800f2e4:	2000      	movs	r0, #0
 800f2e6:	f001 fa3d 	bl	8010764 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 800f2ea:	e005      	b.n	800f2f8 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 800f2ec:	4b06      	ldr	r3, [pc, #24]	; (800f308 <HAL_ETH_RxAllocateCallback+0x5c>)
 800f2ee:	2201      	movs	r2, #1
 800f2f0:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	2200      	movs	r2, #0
 800f2f6:	601a      	str	r2, [r3, #0]
}
 800f2f8:	bf00      	nop
 800f2fa:	3710      	adds	r7, #16
 800f2fc:	46bd      	mov	sp, r7
 800f2fe:	bd80      	pop	{r7, pc}
 800f300:	0801eb68 	.word	0x0801eb68
 800f304:	0800ef19 	.word	0x0800ef19
 800f308:	200006a4 	.word	0x200006a4

0800f30c <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800f30c:	b480      	push	{r7}
 800f30e:	b083      	sub	sp, #12
 800f310:	af00      	add	r7, sp, #0
 800f312:	4603      	mov	r3, r0
 800f314:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800f316:	88fb      	ldrh	r3, [r7, #6]
 800f318:	021b      	lsls	r3, r3, #8
 800f31a:	b21a      	sxth	r2, r3
 800f31c:	88fb      	ldrh	r3, [r7, #6]
 800f31e:	0a1b      	lsrs	r3, r3, #8
 800f320:	b29b      	uxth	r3, r3
 800f322:	b21b      	sxth	r3, r3
 800f324:	4313      	orrs	r3, r2
 800f326:	b21b      	sxth	r3, r3
 800f328:	b29b      	uxth	r3, r3
}
 800f32a:	4618      	mov	r0, r3
 800f32c:	370c      	adds	r7, #12
 800f32e:	46bd      	mov	sp, r7
 800f330:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f334:	4770      	bx	lr

0800f336 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800f336:	b480      	push	{r7}
 800f338:	b083      	sub	sp, #12
 800f33a:	af00      	add	r7, sp, #0
 800f33c:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800f33e:	687b      	ldr	r3, [r7, #4]
 800f340:	061a      	lsls	r2, r3, #24
 800f342:	687b      	ldr	r3, [r7, #4]
 800f344:	021b      	lsls	r3, r3, #8
 800f346:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800f34a:	431a      	orrs	r2, r3
 800f34c:	687b      	ldr	r3, [r7, #4]
 800f34e:	0a1b      	lsrs	r3, r3, #8
 800f350:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800f354:	431a      	orrs	r2, r3
 800f356:	687b      	ldr	r3, [r7, #4]
 800f358:	0e1b      	lsrs	r3, r3, #24
 800f35a:	4313      	orrs	r3, r2
}
 800f35c:	4618      	mov	r0, r3
 800f35e:	370c      	adds	r7, #12
 800f360:	46bd      	mov	sp, r7
 800f362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f366:	4770      	bx	lr

0800f368 <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 800f368:	b480      	push	{r7}
 800f36a:	b089      	sub	sp, #36	; 0x24
 800f36c:	af00      	add	r7, sp, #0
 800f36e:	6078      	str	r0, [r7, #4]
 800f370:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 800f372:	687b      	ldr	r3, [r7, #4]
 800f374:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 800f376:	2300      	movs	r3, #0
 800f378:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 800f37a:	2300      	movs	r3, #0
 800f37c:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 800f37e:	69fb      	ldr	r3, [r7, #28]
 800f380:	f003 0301 	and.w	r3, r3, #1
 800f384:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 800f386:	693b      	ldr	r3, [r7, #16]
 800f388:	2b00      	cmp	r3, #0
 800f38a:	d00d      	beq.n	800f3a8 <lwip_standard_chksum+0x40>
 800f38c:	683b      	ldr	r3, [r7, #0]
 800f38e:	2b00      	cmp	r3, #0
 800f390:	dd0a      	ble.n	800f3a8 <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 800f392:	69fa      	ldr	r2, [r7, #28]
 800f394:	1c53      	adds	r3, r2, #1
 800f396:	61fb      	str	r3, [r7, #28]
 800f398:	f107 030e 	add.w	r3, r7, #14
 800f39c:	3301      	adds	r3, #1
 800f39e:	7812      	ldrb	r2, [r2, #0]
 800f3a0:	701a      	strb	r2, [r3, #0]
    len--;
 800f3a2:	683b      	ldr	r3, [r7, #0]
 800f3a4:	3b01      	subs	r3, #1
 800f3a6:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 800f3a8:	69fb      	ldr	r3, [r7, #28]
 800f3aa:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 800f3ac:	e00a      	b.n	800f3c4 <lwip_standard_chksum+0x5c>
    sum += *ps++;
 800f3ae:	69bb      	ldr	r3, [r7, #24]
 800f3b0:	1c9a      	adds	r2, r3, #2
 800f3b2:	61ba      	str	r2, [r7, #24]
 800f3b4:	881b      	ldrh	r3, [r3, #0]
 800f3b6:	461a      	mov	r2, r3
 800f3b8:	697b      	ldr	r3, [r7, #20]
 800f3ba:	4413      	add	r3, r2
 800f3bc:	617b      	str	r3, [r7, #20]
    len -= 2;
 800f3be:	683b      	ldr	r3, [r7, #0]
 800f3c0:	3b02      	subs	r3, #2
 800f3c2:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 800f3c4:	683b      	ldr	r3, [r7, #0]
 800f3c6:	2b01      	cmp	r3, #1
 800f3c8:	dcf1      	bgt.n	800f3ae <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 800f3ca:	683b      	ldr	r3, [r7, #0]
 800f3cc:	2b00      	cmp	r3, #0
 800f3ce:	dd04      	ble.n	800f3da <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 800f3d0:	f107 030e 	add.w	r3, r7, #14
 800f3d4:	69ba      	ldr	r2, [r7, #24]
 800f3d6:	7812      	ldrb	r2, [r2, #0]
 800f3d8:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 800f3da:	89fb      	ldrh	r3, [r7, #14]
 800f3dc:	461a      	mov	r2, r3
 800f3de:	697b      	ldr	r3, [r7, #20]
 800f3e0:	4413      	add	r3, r2
 800f3e2:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 800f3e4:	697b      	ldr	r3, [r7, #20]
 800f3e6:	0c1a      	lsrs	r2, r3, #16
 800f3e8:	697b      	ldr	r3, [r7, #20]
 800f3ea:	b29b      	uxth	r3, r3
 800f3ec:	4413      	add	r3, r2
 800f3ee:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 800f3f0:	697b      	ldr	r3, [r7, #20]
 800f3f2:	0c1a      	lsrs	r2, r3, #16
 800f3f4:	697b      	ldr	r3, [r7, #20]
 800f3f6:	b29b      	uxth	r3, r3
 800f3f8:	4413      	add	r3, r2
 800f3fa:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 800f3fc:	693b      	ldr	r3, [r7, #16]
 800f3fe:	2b00      	cmp	r3, #0
 800f400:	d007      	beq.n	800f412 <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 800f402:	697b      	ldr	r3, [r7, #20]
 800f404:	021b      	lsls	r3, r3, #8
 800f406:	b29a      	uxth	r2, r3
 800f408:	697b      	ldr	r3, [r7, #20]
 800f40a:	0a1b      	lsrs	r3, r3, #8
 800f40c:	b2db      	uxtb	r3, r3
 800f40e:	4313      	orrs	r3, r2
 800f410:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 800f412:	697b      	ldr	r3, [r7, #20]
 800f414:	b29b      	uxth	r3, r3
}
 800f416:	4618      	mov	r0, r3
 800f418:	3724      	adds	r7, #36	; 0x24
 800f41a:	46bd      	mov	sp, r7
 800f41c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f420:	4770      	bx	lr

0800f422 <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 800f422:	b580      	push	{r7, lr}
 800f424:	b082      	sub	sp, #8
 800f426:	af00      	add	r7, sp, #0
 800f428:	6078      	str	r0, [r7, #4]
 800f42a:	460b      	mov	r3, r1
 800f42c:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 800f42e:	887b      	ldrh	r3, [r7, #2]
 800f430:	4619      	mov	r1, r3
 800f432:	6878      	ldr	r0, [r7, #4]
 800f434:	f7ff ff98 	bl	800f368 <lwip_standard_chksum>
 800f438:	4603      	mov	r3, r0
 800f43a:	43db      	mvns	r3, r3
 800f43c:	b29b      	uxth	r3, r3
}
 800f43e:	4618      	mov	r0, r3
 800f440:	3708      	adds	r7, #8
 800f442:	46bd      	mov	sp, r7
 800f444:	bd80      	pop	{r7, pc}

0800f446 <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 800f446:	b580      	push	{r7, lr}
 800f448:	b086      	sub	sp, #24
 800f44a:	af00      	add	r7, sp, #0
 800f44c:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 800f44e:	2300      	movs	r3, #0
 800f450:	60fb      	str	r3, [r7, #12]

  acc = 0;
 800f452:	2300      	movs	r3, #0
 800f454:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 800f456:	687b      	ldr	r3, [r7, #4]
 800f458:	613b      	str	r3, [r7, #16]
 800f45a:	e02b      	b.n	800f4b4 <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 800f45c:	693b      	ldr	r3, [r7, #16]
 800f45e:	685a      	ldr	r2, [r3, #4]
 800f460:	693b      	ldr	r3, [r7, #16]
 800f462:	895b      	ldrh	r3, [r3, #10]
 800f464:	4619      	mov	r1, r3
 800f466:	4610      	mov	r0, r2
 800f468:	f7ff ff7e 	bl	800f368 <lwip_standard_chksum>
 800f46c:	4603      	mov	r3, r0
 800f46e:	461a      	mov	r2, r3
 800f470:	697b      	ldr	r3, [r7, #20]
 800f472:	4413      	add	r3, r2
 800f474:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 800f476:	697b      	ldr	r3, [r7, #20]
 800f478:	0c1a      	lsrs	r2, r3, #16
 800f47a:	697b      	ldr	r3, [r7, #20]
 800f47c:	b29b      	uxth	r3, r3
 800f47e:	4413      	add	r3, r2
 800f480:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 800f482:	693b      	ldr	r3, [r7, #16]
 800f484:	895b      	ldrh	r3, [r3, #10]
 800f486:	f003 0301 	and.w	r3, r3, #1
 800f48a:	b29b      	uxth	r3, r3
 800f48c:	2b00      	cmp	r3, #0
 800f48e:	d00e      	beq.n	800f4ae <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 800f490:	68fb      	ldr	r3, [r7, #12]
 800f492:	2b00      	cmp	r3, #0
 800f494:	bf0c      	ite	eq
 800f496:	2301      	moveq	r3, #1
 800f498:	2300      	movne	r3, #0
 800f49a:	b2db      	uxtb	r3, r3
 800f49c:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 800f49e:	697b      	ldr	r3, [r7, #20]
 800f4a0:	021b      	lsls	r3, r3, #8
 800f4a2:	b29a      	uxth	r2, r3
 800f4a4:	697b      	ldr	r3, [r7, #20]
 800f4a6:	0a1b      	lsrs	r3, r3, #8
 800f4a8:	b2db      	uxtb	r3, r3
 800f4aa:	4313      	orrs	r3, r2
 800f4ac:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 800f4ae:	693b      	ldr	r3, [r7, #16]
 800f4b0:	681b      	ldr	r3, [r3, #0]
 800f4b2:	613b      	str	r3, [r7, #16]
 800f4b4:	693b      	ldr	r3, [r7, #16]
 800f4b6:	2b00      	cmp	r3, #0
 800f4b8:	d1d0      	bne.n	800f45c <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 800f4ba:	68fb      	ldr	r3, [r7, #12]
 800f4bc:	2b00      	cmp	r3, #0
 800f4be:	d007      	beq.n	800f4d0 <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 800f4c0:	697b      	ldr	r3, [r7, #20]
 800f4c2:	021b      	lsls	r3, r3, #8
 800f4c4:	b29a      	uxth	r2, r3
 800f4c6:	697b      	ldr	r3, [r7, #20]
 800f4c8:	0a1b      	lsrs	r3, r3, #8
 800f4ca:	b2db      	uxtb	r3, r3
 800f4cc:	4313      	orrs	r3, r2
 800f4ce:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 800f4d0:	697b      	ldr	r3, [r7, #20]
 800f4d2:	b29b      	uxth	r3, r3
 800f4d4:	43db      	mvns	r3, r3
 800f4d6:	b29b      	uxth	r3, r3
}
 800f4d8:	4618      	mov	r0, r3
 800f4da:	3718      	adds	r7, #24
 800f4dc:	46bd      	mov	sp, r7
 800f4de:	bd80      	pop	{r7, pc}

0800f4e0 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800f4e0:	b580      	push	{r7, lr}
 800f4e2:	b082      	sub	sp, #8
 800f4e4:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800f4e6:	2300      	movs	r3, #0
 800f4e8:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 800f4ea:	f000 f8d3 	bl	800f694 <mem_init>
  memp_init();
 800f4ee:	f000 fbc5 	bl	800fc7c <memp_init>
  pbuf_init();
  netif_init();
 800f4f2:	f000 fcc3 	bl	800fe7c <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800f4f6:	f006 ffe3 	bl	80164c0 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800f4fa:	f001 fd79 	bl	8010ff0 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800f4fe:	f006 ff97 	bl	8016430 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800f502:	bf00      	nop
 800f504:	3708      	adds	r7, #8
 800f506:	46bd      	mov	sp, r7
 800f508:	bd80      	pop	{r7, pc}
	...

0800f50c <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800f50c:	b480      	push	{r7}
 800f50e:	b083      	sub	sp, #12
 800f510:	af00      	add	r7, sp, #0
 800f512:	6078      	str	r0, [r7, #4]
  return (struct mem *)(void *)&ram[ptr];
 800f514:	4b04      	ldr	r3, [pc, #16]	; (800f528 <ptr_to_mem+0x1c>)
 800f516:	681a      	ldr	r2, [r3, #0]
 800f518:	687b      	ldr	r3, [r7, #4]
 800f51a:	4413      	add	r3, r2
}
 800f51c:	4618      	mov	r0, r3
 800f51e:	370c      	adds	r7, #12
 800f520:	46bd      	mov	sp, r7
 800f522:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f526:	4770      	bx	lr
 800f528:	200007c8 	.word	0x200007c8

0800f52c <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800f52c:	b480      	push	{r7}
 800f52e:	b083      	sub	sp, #12
 800f530:	af00      	add	r7, sp, #0
 800f532:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800f534:	4b04      	ldr	r3, [pc, #16]	; (800f548 <mem_to_ptr+0x1c>)
 800f536:	681b      	ldr	r3, [r3, #0]
 800f538:	687a      	ldr	r2, [r7, #4]
 800f53a:	1ad3      	subs	r3, r2, r3
}
 800f53c:	4618      	mov	r0, r3
 800f53e:	370c      	adds	r7, #12
 800f540:	46bd      	mov	sp, r7
 800f542:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f546:	4770      	bx	lr
 800f548:	200007c8 	.word	0x200007c8

0800f54c <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800f54c:	b590      	push	{r4, r7, lr}
 800f54e:	b085      	sub	sp, #20
 800f550:	af00      	add	r7, sp, #0
 800f552:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800f554:	4b45      	ldr	r3, [pc, #276]	; (800f66c <plug_holes+0x120>)
 800f556:	681b      	ldr	r3, [r3, #0]
 800f558:	687a      	ldr	r2, [r7, #4]
 800f55a:	429a      	cmp	r2, r3
 800f55c:	d206      	bcs.n	800f56c <plug_holes+0x20>
 800f55e:	4b44      	ldr	r3, [pc, #272]	; (800f670 <plug_holes+0x124>)
 800f560:	f240 12df 	movw	r2, #479	; 0x1df
 800f564:	4943      	ldr	r1, [pc, #268]	; (800f674 <plug_holes+0x128>)
 800f566:	4844      	ldr	r0, [pc, #272]	; (800f678 <plug_holes+0x12c>)
 800f568:	f00a f98a 	bl	8019880 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800f56c:	4b43      	ldr	r3, [pc, #268]	; (800f67c <plug_holes+0x130>)
 800f56e:	681b      	ldr	r3, [r3, #0]
 800f570:	687a      	ldr	r2, [r7, #4]
 800f572:	429a      	cmp	r2, r3
 800f574:	d306      	bcc.n	800f584 <plug_holes+0x38>
 800f576:	4b3e      	ldr	r3, [pc, #248]	; (800f670 <plug_holes+0x124>)
 800f578:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800f57c:	4940      	ldr	r1, [pc, #256]	; (800f680 <plug_holes+0x134>)
 800f57e:	483e      	ldr	r0, [pc, #248]	; (800f678 <plug_holes+0x12c>)
 800f580:	f00a f97e 	bl	8019880 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800f584:	687b      	ldr	r3, [r7, #4]
 800f586:	7a1b      	ldrb	r3, [r3, #8]
 800f588:	2b00      	cmp	r3, #0
 800f58a:	d006      	beq.n	800f59a <plug_holes+0x4e>
 800f58c:	4b38      	ldr	r3, [pc, #224]	; (800f670 <plug_holes+0x124>)
 800f58e:	f240 12e1 	movw	r2, #481	; 0x1e1
 800f592:	493c      	ldr	r1, [pc, #240]	; (800f684 <plug_holes+0x138>)
 800f594:	4838      	ldr	r0, [pc, #224]	; (800f678 <plug_holes+0x12c>)
 800f596:	f00a f973 	bl	8019880 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800f59a:	687b      	ldr	r3, [r7, #4]
 800f59c:	681b      	ldr	r3, [r3, #0]
 800f59e:	4a3a      	ldr	r2, [pc, #232]	; (800f688 <plug_holes+0x13c>)
 800f5a0:	4293      	cmp	r3, r2
 800f5a2:	d906      	bls.n	800f5b2 <plug_holes+0x66>
 800f5a4:	4b32      	ldr	r3, [pc, #200]	; (800f670 <plug_holes+0x124>)
 800f5a6:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800f5aa:	4938      	ldr	r1, [pc, #224]	; (800f68c <plug_holes+0x140>)
 800f5ac:	4832      	ldr	r0, [pc, #200]	; (800f678 <plug_holes+0x12c>)
 800f5ae:	f00a f967 	bl	8019880 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800f5b2:	687b      	ldr	r3, [r7, #4]
 800f5b4:	681b      	ldr	r3, [r3, #0]
 800f5b6:	4618      	mov	r0, r3
 800f5b8:	f7ff ffa8 	bl	800f50c <ptr_to_mem>
 800f5bc:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800f5be:	687a      	ldr	r2, [r7, #4]
 800f5c0:	68fb      	ldr	r3, [r7, #12]
 800f5c2:	429a      	cmp	r2, r3
 800f5c4:	d024      	beq.n	800f610 <plug_holes+0xc4>
 800f5c6:	68fb      	ldr	r3, [r7, #12]
 800f5c8:	7a1b      	ldrb	r3, [r3, #8]
 800f5ca:	2b00      	cmp	r3, #0
 800f5cc:	d120      	bne.n	800f610 <plug_holes+0xc4>
 800f5ce:	4b2b      	ldr	r3, [pc, #172]	; (800f67c <plug_holes+0x130>)
 800f5d0:	681b      	ldr	r3, [r3, #0]
 800f5d2:	68fa      	ldr	r2, [r7, #12]
 800f5d4:	429a      	cmp	r2, r3
 800f5d6:	d01b      	beq.n	800f610 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800f5d8:	4b2d      	ldr	r3, [pc, #180]	; (800f690 <plug_holes+0x144>)
 800f5da:	681b      	ldr	r3, [r3, #0]
 800f5dc:	68fa      	ldr	r2, [r7, #12]
 800f5de:	429a      	cmp	r2, r3
 800f5e0:	d102      	bne.n	800f5e8 <plug_holes+0x9c>
      lfree = mem;
 800f5e2:	4a2b      	ldr	r2, [pc, #172]	; (800f690 <plug_holes+0x144>)
 800f5e4:	687b      	ldr	r3, [r7, #4]
 800f5e6:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800f5e8:	68fb      	ldr	r3, [r7, #12]
 800f5ea:	681a      	ldr	r2, [r3, #0]
 800f5ec:	687b      	ldr	r3, [r7, #4]
 800f5ee:	601a      	str	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800f5f0:	68fb      	ldr	r3, [r7, #12]
 800f5f2:	681b      	ldr	r3, [r3, #0]
 800f5f4:	4a24      	ldr	r2, [pc, #144]	; (800f688 <plug_holes+0x13c>)
 800f5f6:	4293      	cmp	r3, r2
 800f5f8:	d00a      	beq.n	800f610 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800f5fa:	68fb      	ldr	r3, [r7, #12]
 800f5fc:	681b      	ldr	r3, [r3, #0]
 800f5fe:	4618      	mov	r0, r3
 800f600:	f7ff ff84 	bl	800f50c <ptr_to_mem>
 800f604:	4604      	mov	r4, r0
 800f606:	6878      	ldr	r0, [r7, #4]
 800f608:	f7ff ff90 	bl	800f52c <mem_to_ptr>
 800f60c:	4603      	mov	r3, r0
 800f60e:	6063      	str	r3, [r4, #4]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800f610:	687b      	ldr	r3, [r7, #4]
 800f612:	685b      	ldr	r3, [r3, #4]
 800f614:	4618      	mov	r0, r3
 800f616:	f7ff ff79 	bl	800f50c <ptr_to_mem>
 800f61a:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800f61c:	68ba      	ldr	r2, [r7, #8]
 800f61e:	687b      	ldr	r3, [r7, #4]
 800f620:	429a      	cmp	r2, r3
 800f622:	d01f      	beq.n	800f664 <plug_holes+0x118>
 800f624:	68bb      	ldr	r3, [r7, #8]
 800f626:	7a1b      	ldrb	r3, [r3, #8]
 800f628:	2b00      	cmp	r3, #0
 800f62a:	d11b      	bne.n	800f664 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800f62c:	4b18      	ldr	r3, [pc, #96]	; (800f690 <plug_holes+0x144>)
 800f62e:	681b      	ldr	r3, [r3, #0]
 800f630:	687a      	ldr	r2, [r7, #4]
 800f632:	429a      	cmp	r2, r3
 800f634:	d102      	bne.n	800f63c <plug_holes+0xf0>
      lfree = pmem;
 800f636:	4a16      	ldr	r2, [pc, #88]	; (800f690 <plug_holes+0x144>)
 800f638:	68bb      	ldr	r3, [r7, #8]
 800f63a:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800f63c:	687b      	ldr	r3, [r7, #4]
 800f63e:	681a      	ldr	r2, [r3, #0]
 800f640:	68bb      	ldr	r3, [r7, #8]
 800f642:	601a      	str	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	681b      	ldr	r3, [r3, #0]
 800f648:	4a0f      	ldr	r2, [pc, #60]	; (800f688 <plug_holes+0x13c>)
 800f64a:	4293      	cmp	r3, r2
 800f64c:	d00a      	beq.n	800f664 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800f64e:	687b      	ldr	r3, [r7, #4]
 800f650:	681b      	ldr	r3, [r3, #0]
 800f652:	4618      	mov	r0, r3
 800f654:	f7ff ff5a 	bl	800f50c <ptr_to_mem>
 800f658:	4604      	mov	r4, r0
 800f65a:	68b8      	ldr	r0, [r7, #8]
 800f65c:	f7ff ff66 	bl	800f52c <mem_to_ptr>
 800f660:	4603      	mov	r3, r0
 800f662:	6063      	str	r3, [r4, #4]
    }
  }
}
 800f664:	bf00      	nop
 800f666:	3714      	adds	r7, #20
 800f668:	46bd      	mov	sp, r7
 800f66a:	bd90      	pop	{r4, r7, pc}
 800f66c:	200007c8 	.word	0x200007c8
 800f670:	0801c184 	.word	0x0801c184
 800f674:	0801c1b4 	.word	0x0801c1b4
 800f678:	0801c1cc 	.word	0x0801c1cc
 800f67c:	200007cc 	.word	0x200007cc
 800f680:	0801c1f4 	.word	0x0801c1f4
 800f684:	0801c210 	.word	0x0801c210
 800f688:	0001ffe8 	.word	0x0001ffe8
 800f68c:	0801c22c 	.word	0x0801c22c
 800f690:	200007d0 	.word	0x200007d0

0800f694 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800f694:	b580      	push	{r7, lr}
 800f696:	b082      	sub	sp, #8
 800f698:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800f69a:	4b14      	ldr	r3, [pc, #80]	; (800f6ec <mem_init+0x58>)
 800f69c:	4a14      	ldr	r2, [pc, #80]	; (800f6f0 <mem_init+0x5c>)
 800f69e:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800f6a0:	4b12      	ldr	r3, [pc, #72]	; (800f6ec <mem_init+0x58>)
 800f6a2:	681b      	ldr	r3, [r3, #0]
 800f6a4:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800f6a6:	687b      	ldr	r3, [r7, #4]
 800f6a8:	4a12      	ldr	r2, [pc, #72]	; (800f6f4 <mem_init+0x60>)
 800f6aa:	601a      	str	r2, [r3, #0]
  mem->prev = 0;
 800f6ac:	687b      	ldr	r3, [r7, #4]
 800f6ae:	2200      	movs	r2, #0
 800f6b0:	605a      	str	r2, [r3, #4]
  mem->used = 0;
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	2200      	movs	r2, #0
 800f6b6:	721a      	strb	r2, [r3, #8]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800f6b8:	480e      	ldr	r0, [pc, #56]	; (800f6f4 <mem_init+0x60>)
 800f6ba:	f7ff ff27 	bl	800f50c <ptr_to_mem>
 800f6be:	4603      	mov	r3, r0
 800f6c0:	4a0d      	ldr	r2, [pc, #52]	; (800f6f8 <mem_init+0x64>)
 800f6c2:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800f6c4:	4b0c      	ldr	r3, [pc, #48]	; (800f6f8 <mem_init+0x64>)
 800f6c6:	681b      	ldr	r3, [r3, #0]
 800f6c8:	2201      	movs	r2, #1
 800f6ca:	721a      	strb	r2, [r3, #8]
  ram_end->next = MEM_SIZE_ALIGNED;
 800f6cc:	4b0a      	ldr	r3, [pc, #40]	; (800f6f8 <mem_init+0x64>)
 800f6ce:	681b      	ldr	r3, [r3, #0]
 800f6d0:	4a08      	ldr	r2, [pc, #32]	; (800f6f4 <mem_init+0x60>)
 800f6d2:	601a      	str	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800f6d4:	4b08      	ldr	r3, [pc, #32]	; (800f6f8 <mem_init+0x64>)
 800f6d6:	681b      	ldr	r3, [r3, #0]
 800f6d8:	4a06      	ldr	r2, [pc, #24]	; (800f6f4 <mem_init+0x60>)
 800f6da:	605a      	str	r2, [r3, #4]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800f6dc:	4b03      	ldr	r3, [pc, #12]	; (800f6ec <mem_init+0x58>)
 800f6de:	681b      	ldr	r3, [r3, #0]
 800f6e0:	4a06      	ldr	r2, [pc, #24]	; (800f6fc <mem_init+0x68>)
 800f6e2:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 800f6e4:	bf00      	nop
 800f6e6:	3708      	adds	r7, #8
 800f6e8:	46bd      	mov	sp, r7
 800f6ea:	bd80      	pop	{r7, pc}
 800f6ec:	200007c8 	.word	0x200007c8
 800f6f0:	30020000 	.word	0x30020000
 800f6f4:	0001ffe8 	.word	0x0001ffe8
 800f6f8:	200007cc 	.word	0x200007cc
 800f6fc:	200007d0 	.word	0x200007d0

0800f700 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800f700:	b580      	push	{r7, lr}
 800f702:	b086      	sub	sp, #24
 800f704:	af00      	add	r7, sp, #0
 800f706:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800f708:	6878      	ldr	r0, [r7, #4]
 800f70a:	f7ff ff0f 	bl	800f52c <mem_to_ptr>
 800f70e:	6178      	str	r0, [r7, #20]
  nmem = ptr_to_mem(mem->next);
 800f710:	687b      	ldr	r3, [r7, #4]
 800f712:	681b      	ldr	r3, [r3, #0]
 800f714:	4618      	mov	r0, r3
 800f716:	f7ff fef9 	bl	800f50c <ptr_to_mem>
 800f71a:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800f71c:	687b      	ldr	r3, [r7, #4]
 800f71e:	685b      	ldr	r3, [r3, #4]
 800f720:	4618      	mov	r0, r3
 800f722:	f7ff fef3 	bl	800f50c <ptr_to_mem>
 800f726:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800f728:	687b      	ldr	r3, [r7, #4]
 800f72a:	681b      	ldr	r3, [r3, #0]
 800f72c:	4a11      	ldr	r2, [pc, #68]	; (800f774 <mem_link_valid+0x74>)
 800f72e:	4293      	cmp	r3, r2
 800f730:	d818      	bhi.n	800f764 <mem_link_valid+0x64>
 800f732:	687b      	ldr	r3, [r7, #4]
 800f734:	685b      	ldr	r3, [r3, #4]
 800f736:	4a0f      	ldr	r2, [pc, #60]	; (800f774 <mem_link_valid+0x74>)
 800f738:	4293      	cmp	r3, r2
 800f73a:	d813      	bhi.n	800f764 <mem_link_valid+0x64>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800f73c:	687b      	ldr	r3, [r7, #4]
 800f73e:	685b      	ldr	r3, [r3, #4]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800f740:	697a      	ldr	r2, [r7, #20]
 800f742:	429a      	cmp	r2, r3
 800f744:	d004      	beq.n	800f750 <mem_link_valid+0x50>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800f746:	68fb      	ldr	r3, [r7, #12]
 800f748:	681b      	ldr	r3, [r3, #0]
 800f74a:	697a      	ldr	r2, [r7, #20]
 800f74c:	429a      	cmp	r2, r3
 800f74e:	d109      	bne.n	800f764 <mem_link_valid+0x64>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800f750:	4b09      	ldr	r3, [pc, #36]	; (800f778 <mem_link_valid+0x78>)
 800f752:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800f754:	693a      	ldr	r2, [r7, #16]
 800f756:	429a      	cmp	r2, r3
 800f758:	d006      	beq.n	800f768 <mem_link_valid+0x68>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800f75a:	693b      	ldr	r3, [r7, #16]
 800f75c:	685b      	ldr	r3, [r3, #4]
 800f75e:	697a      	ldr	r2, [r7, #20]
 800f760:	429a      	cmp	r2, r3
 800f762:	d001      	beq.n	800f768 <mem_link_valid+0x68>
    return 0;
 800f764:	2300      	movs	r3, #0
 800f766:	e000      	b.n	800f76a <mem_link_valid+0x6a>
  }
  return 1;
 800f768:	2301      	movs	r3, #1
}
 800f76a:	4618      	mov	r0, r3
 800f76c:	3718      	adds	r7, #24
 800f76e:	46bd      	mov	sp, r7
 800f770:	bd80      	pop	{r7, pc}
 800f772:	bf00      	nop
 800f774:	0001ffe8 	.word	0x0001ffe8
 800f778:	200007cc 	.word	0x200007cc

0800f77c <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800f77c:	b580      	push	{r7, lr}
 800f77e:	b084      	sub	sp, #16
 800f780:	af00      	add	r7, sp, #0
 800f782:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800f784:	687b      	ldr	r3, [r7, #4]
 800f786:	2b00      	cmp	r3, #0
 800f788:	d04c      	beq.n	800f824 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800f78a:	687b      	ldr	r3, [r7, #4]
 800f78c:	f003 0303 	and.w	r3, r3, #3
 800f790:	2b00      	cmp	r3, #0
 800f792:	d007      	beq.n	800f7a4 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800f794:	4b25      	ldr	r3, [pc, #148]	; (800f82c <mem_free+0xb0>)
 800f796:	f240 2273 	movw	r2, #627	; 0x273
 800f79a:	4925      	ldr	r1, [pc, #148]	; (800f830 <mem_free+0xb4>)
 800f79c:	4825      	ldr	r0, [pc, #148]	; (800f834 <mem_free+0xb8>)
 800f79e:	f00a f86f 	bl	8019880 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800f7a2:	e040      	b.n	800f826 <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800f7a4:	687b      	ldr	r3, [r7, #4]
 800f7a6:	3b0c      	subs	r3, #12
 800f7a8:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800f7aa:	4b23      	ldr	r3, [pc, #140]	; (800f838 <mem_free+0xbc>)
 800f7ac:	681b      	ldr	r3, [r3, #0]
 800f7ae:	68fa      	ldr	r2, [r7, #12]
 800f7b0:	429a      	cmp	r2, r3
 800f7b2:	d306      	bcc.n	800f7c2 <mem_free+0x46>
 800f7b4:	687b      	ldr	r3, [r7, #4]
 800f7b6:	f103 020c 	add.w	r2, r3, #12
 800f7ba:	4b20      	ldr	r3, [pc, #128]	; (800f83c <mem_free+0xc0>)
 800f7bc:	681b      	ldr	r3, [r3, #0]
 800f7be:	429a      	cmp	r2, r3
 800f7c0:	d907      	bls.n	800f7d2 <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800f7c2:	4b1a      	ldr	r3, [pc, #104]	; (800f82c <mem_free+0xb0>)
 800f7c4:	f240 227f 	movw	r2, #639	; 0x27f
 800f7c8:	491d      	ldr	r1, [pc, #116]	; (800f840 <mem_free+0xc4>)
 800f7ca:	481a      	ldr	r0, [pc, #104]	; (800f834 <mem_free+0xb8>)
 800f7cc:	f00a f858 	bl	8019880 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800f7d0:	e029      	b.n	800f826 <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 800f7d2:	68fb      	ldr	r3, [r7, #12]
 800f7d4:	7a1b      	ldrb	r3, [r3, #8]
 800f7d6:	2b00      	cmp	r3, #0
 800f7d8:	d107      	bne.n	800f7ea <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800f7da:	4b14      	ldr	r3, [pc, #80]	; (800f82c <mem_free+0xb0>)
 800f7dc:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800f7e0:	4918      	ldr	r1, [pc, #96]	; (800f844 <mem_free+0xc8>)
 800f7e2:	4814      	ldr	r0, [pc, #80]	; (800f834 <mem_free+0xb8>)
 800f7e4:	f00a f84c 	bl	8019880 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800f7e8:	e01d      	b.n	800f826 <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 800f7ea:	68f8      	ldr	r0, [r7, #12]
 800f7ec:	f7ff ff88 	bl	800f700 <mem_link_valid>
 800f7f0:	4603      	mov	r3, r0
 800f7f2:	2b00      	cmp	r3, #0
 800f7f4:	d107      	bne.n	800f806 <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800f7f6:	4b0d      	ldr	r3, [pc, #52]	; (800f82c <mem_free+0xb0>)
 800f7f8:	f240 2295 	movw	r2, #661	; 0x295
 800f7fc:	4912      	ldr	r1, [pc, #72]	; (800f848 <mem_free+0xcc>)
 800f7fe:	480d      	ldr	r0, [pc, #52]	; (800f834 <mem_free+0xb8>)
 800f800:	f00a f83e 	bl	8019880 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800f804:	e00f      	b.n	800f826 <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 800f806:	68fb      	ldr	r3, [r7, #12]
 800f808:	2200      	movs	r2, #0
 800f80a:	721a      	strb	r2, [r3, #8]

  if (mem < lfree) {
 800f80c:	4b0f      	ldr	r3, [pc, #60]	; (800f84c <mem_free+0xd0>)
 800f80e:	681b      	ldr	r3, [r3, #0]
 800f810:	68fa      	ldr	r2, [r7, #12]
 800f812:	429a      	cmp	r2, r3
 800f814:	d202      	bcs.n	800f81c <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800f816:	4a0d      	ldr	r2, [pc, #52]	; (800f84c <mem_free+0xd0>)
 800f818:	68fb      	ldr	r3, [r7, #12]
 800f81a:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800f81c:	68f8      	ldr	r0, [r7, #12]
 800f81e:	f7ff fe95 	bl	800f54c <plug_holes>
 800f822:	e000      	b.n	800f826 <mem_free+0xaa>
    return;
 800f824:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 800f826:	3710      	adds	r7, #16
 800f828:	46bd      	mov	sp, r7
 800f82a:	bd80      	pop	{r7, pc}
 800f82c:	0801c184 	.word	0x0801c184
 800f830:	0801c258 	.word	0x0801c258
 800f834:	0801c1cc 	.word	0x0801c1cc
 800f838:	200007c8 	.word	0x200007c8
 800f83c:	200007cc 	.word	0x200007cc
 800f840:	0801c27c 	.word	0x0801c27c
 800f844:	0801c298 	.word	0x0801c298
 800f848:	0801c2c0 	.word	0x0801c2c0
 800f84c:	200007d0 	.word	0x200007d0

0800f850 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800f850:	b580      	push	{r7, lr}
 800f852:	b08a      	sub	sp, #40	; 0x28
 800f854:	af00      	add	r7, sp, #0
 800f856:	6078      	str	r0, [r7, #4]
 800f858:	6039      	str	r1, [r7, #0]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800f85a:	683b      	ldr	r3, [r7, #0]
 800f85c:	3303      	adds	r3, #3
 800f85e:	f023 0303 	bic.w	r3, r3, #3
 800f862:	627b      	str	r3, [r7, #36]	; 0x24
  if (newsize < MIN_SIZE_ALIGNED) {
 800f864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f866:	2b0b      	cmp	r3, #11
 800f868:	d801      	bhi.n	800f86e <mem_trim+0x1e>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800f86a:	230c      	movs	r3, #12
 800f86c:	627b      	str	r3, [r7, #36]	; 0x24
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800f86e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f870:	4a68      	ldr	r2, [pc, #416]	; (800fa14 <mem_trim+0x1c4>)
 800f872:	4293      	cmp	r3, r2
 800f874:	d803      	bhi.n	800f87e <mem_trim+0x2e>
 800f876:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f878:	683b      	ldr	r3, [r7, #0]
 800f87a:	429a      	cmp	r2, r3
 800f87c:	d201      	bcs.n	800f882 <mem_trim+0x32>
    return NULL;
 800f87e:	2300      	movs	r3, #0
 800f880:	e0c4      	b.n	800fa0c <mem_trim+0x1bc>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800f882:	4b65      	ldr	r3, [pc, #404]	; (800fa18 <mem_trim+0x1c8>)
 800f884:	681b      	ldr	r3, [r3, #0]
 800f886:	687a      	ldr	r2, [r7, #4]
 800f888:	429a      	cmp	r2, r3
 800f88a:	d304      	bcc.n	800f896 <mem_trim+0x46>
 800f88c:	4b63      	ldr	r3, [pc, #396]	; (800fa1c <mem_trim+0x1cc>)
 800f88e:	681b      	ldr	r3, [r3, #0]
 800f890:	687a      	ldr	r2, [r7, #4]
 800f892:	429a      	cmp	r2, r3
 800f894:	d306      	bcc.n	800f8a4 <mem_trim+0x54>
 800f896:	4b62      	ldr	r3, [pc, #392]	; (800fa20 <mem_trim+0x1d0>)
 800f898:	f240 22d1 	movw	r2, #721	; 0x2d1
 800f89c:	4961      	ldr	r1, [pc, #388]	; (800fa24 <mem_trim+0x1d4>)
 800f89e:	4862      	ldr	r0, [pc, #392]	; (800fa28 <mem_trim+0x1d8>)
 800f8a0:	f009 ffee 	bl	8019880 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800f8a4:	4b5c      	ldr	r3, [pc, #368]	; (800fa18 <mem_trim+0x1c8>)
 800f8a6:	681b      	ldr	r3, [r3, #0]
 800f8a8:	687a      	ldr	r2, [r7, #4]
 800f8aa:	429a      	cmp	r2, r3
 800f8ac:	d304      	bcc.n	800f8b8 <mem_trim+0x68>
 800f8ae:	4b5b      	ldr	r3, [pc, #364]	; (800fa1c <mem_trim+0x1cc>)
 800f8b0:	681b      	ldr	r3, [r3, #0]
 800f8b2:	687a      	ldr	r2, [r7, #4]
 800f8b4:	429a      	cmp	r2, r3
 800f8b6:	d301      	bcc.n	800f8bc <mem_trim+0x6c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 800f8b8:	687b      	ldr	r3, [r7, #4]
 800f8ba:	e0a7      	b.n	800fa0c <mem_trim+0x1bc>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800f8bc:	687b      	ldr	r3, [r7, #4]
 800f8be:	3b0c      	subs	r3, #12
 800f8c0:	623b      	str	r3, [r7, #32]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800f8c2:	6a38      	ldr	r0, [r7, #32]
 800f8c4:	f7ff fe32 	bl	800f52c <mem_to_ptr>
 800f8c8:	61f8      	str	r0, [r7, #28]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800f8ca:	6a3b      	ldr	r3, [r7, #32]
 800f8cc:	681a      	ldr	r2, [r3, #0]
 800f8ce:	69fb      	ldr	r3, [r7, #28]
 800f8d0:	1ad3      	subs	r3, r2, r3
 800f8d2:	3b0c      	subs	r3, #12
 800f8d4:	61bb      	str	r3, [r7, #24]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800f8d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f8d8:	69bb      	ldr	r3, [r7, #24]
 800f8da:	429a      	cmp	r2, r3
 800f8dc:	d906      	bls.n	800f8ec <mem_trim+0x9c>
 800f8de:	4b50      	ldr	r3, [pc, #320]	; (800fa20 <mem_trim+0x1d0>)
 800f8e0:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800f8e4:	4951      	ldr	r1, [pc, #324]	; (800fa2c <mem_trim+0x1dc>)
 800f8e6:	4850      	ldr	r0, [pc, #320]	; (800fa28 <mem_trim+0x1d8>)
 800f8e8:	f009 ffca 	bl	8019880 <iprintf>
  if (newsize > size) {
 800f8ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f8ee:	69bb      	ldr	r3, [r7, #24]
 800f8f0:	429a      	cmp	r2, r3
 800f8f2:	d901      	bls.n	800f8f8 <mem_trim+0xa8>
    /* not supported */
    return NULL;
 800f8f4:	2300      	movs	r3, #0
 800f8f6:	e089      	b.n	800fa0c <mem_trim+0x1bc>
  }
  if (newsize == size) {
 800f8f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f8fa:	69bb      	ldr	r3, [r7, #24]
 800f8fc:	429a      	cmp	r2, r3
 800f8fe:	d101      	bne.n	800f904 <mem_trim+0xb4>
    /* No change in size, simply return */
    return rmem;
 800f900:	687b      	ldr	r3, [r7, #4]
 800f902:	e083      	b.n	800fa0c <mem_trim+0x1bc>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 800f904:	6a3b      	ldr	r3, [r7, #32]
 800f906:	681b      	ldr	r3, [r3, #0]
 800f908:	4618      	mov	r0, r3
 800f90a:	f7ff fdff 	bl	800f50c <ptr_to_mem>
 800f90e:	6178      	str	r0, [r7, #20]
  if (mem2->used == 0) {
 800f910:	697b      	ldr	r3, [r7, #20]
 800f912:	7a1b      	ldrb	r3, [r3, #8]
 800f914:	2b00      	cmp	r3, #0
 800f916:	d13c      	bne.n	800f992 <mem_trim+0x142>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800f918:	6a3b      	ldr	r3, [r7, #32]
 800f91a:	681b      	ldr	r3, [r3, #0]
 800f91c:	4a3d      	ldr	r2, [pc, #244]	; (800fa14 <mem_trim+0x1c4>)
 800f91e:	4293      	cmp	r3, r2
 800f920:	d106      	bne.n	800f930 <mem_trim+0xe0>
 800f922:	4b3f      	ldr	r3, [pc, #252]	; (800fa20 <mem_trim+0x1d0>)
 800f924:	f240 22f5 	movw	r2, #757	; 0x2f5
 800f928:	4941      	ldr	r1, [pc, #260]	; (800fa30 <mem_trim+0x1e0>)
 800f92a:	483f      	ldr	r0, [pc, #252]	; (800fa28 <mem_trim+0x1d8>)
 800f92c:	f009 ffa8 	bl	8019880 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800f930:	697b      	ldr	r3, [r7, #20]
 800f932:	681b      	ldr	r3, [r3, #0]
 800f934:	60fb      	str	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800f936:	69fa      	ldr	r2, [r7, #28]
 800f938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f93a:	4413      	add	r3, r2
 800f93c:	330c      	adds	r3, #12
 800f93e:	613b      	str	r3, [r7, #16]
    if (lfree == mem2) {
 800f940:	4b3c      	ldr	r3, [pc, #240]	; (800fa34 <mem_trim+0x1e4>)
 800f942:	681b      	ldr	r3, [r3, #0]
 800f944:	697a      	ldr	r2, [r7, #20]
 800f946:	429a      	cmp	r2, r3
 800f948:	d105      	bne.n	800f956 <mem_trim+0x106>
      lfree = ptr_to_mem(ptr2);
 800f94a:	6938      	ldr	r0, [r7, #16]
 800f94c:	f7ff fdde 	bl	800f50c <ptr_to_mem>
 800f950:	4603      	mov	r3, r0
 800f952:	4a38      	ldr	r2, [pc, #224]	; (800fa34 <mem_trim+0x1e4>)
 800f954:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800f956:	6938      	ldr	r0, [r7, #16]
 800f958:	f7ff fdd8 	bl	800f50c <ptr_to_mem>
 800f95c:	6178      	str	r0, [r7, #20]
    mem2->used = 0;
 800f95e:	697b      	ldr	r3, [r7, #20]
 800f960:	2200      	movs	r2, #0
 800f962:	721a      	strb	r2, [r3, #8]
    /* restore the next pointer */
    mem2->next = next;
 800f964:	697b      	ldr	r3, [r7, #20]
 800f966:	68fa      	ldr	r2, [r7, #12]
 800f968:	601a      	str	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800f96a:	697b      	ldr	r3, [r7, #20]
 800f96c:	69fa      	ldr	r2, [r7, #28]
 800f96e:	605a      	str	r2, [r3, #4]
    /* link mem to it */
    mem->next = ptr2;
 800f970:	6a3b      	ldr	r3, [r7, #32]
 800f972:	693a      	ldr	r2, [r7, #16]
 800f974:	601a      	str	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800f976:	697b      	ldr	r3, [r7, #20]
 800f978:	681b      	ldr	r3, [r3, #0]
 800f97a:	4a26      	ldr	r2, [pc, #152]	; (800fa14 <mem_trim+0x1c4>)
 800f97c:	4293      	cmp	r3, r2
 800f97e:	d044      	beq.n	800fa0a <mem_trim+0x1ba>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800f980:	697b      	ldr	r3, [r7, #20]
 800f982:	681b      	ldr	r3, [r3, #0]
 800f984:	4618      	mov	r0, r3
 800f986:	f7ff fdc1 	bl	800f50c <ptr_to_mem>
 800f98a:	4602      	mov	r2, r0
 800f98c:	693b      	ldr	r3, [r7, #16]
 800f98e:	6053      	str	r3, [r2, #4]
 800f990:	e03b      	b.n	800fa0a <mem_trim+0x1ba>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800f992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f994:	3318      	adds	r3, #24
 800f996:	69ba      	ldr	r2, [r7, #24]
 800f998:	429a      	cmp	r2, r3
 800f99a:	d336      	bcc.n	800fa0a <mem_trim+0x1ba>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800f99c:	69fa      	ldr	r2, [r7, #28]
 800f99e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9a0:	4413      	add	r3, r2
 800f9a2:	330c      	adds	r3, #12
 800f9a4:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800f9a6:	6a3b      	ldr	r3, [r7, #32]
 800f9a8:	681b      	ldr	r3, [r3, #0]
 800f9aa:	4a1a      	ldr	r2, [pc, #104]	; (800fa14 <mem_trim+0x1c4>)
 800f9ac:	4293      	cmp	r3, r2
 800f9ae:	d106      	bne.n	800f9be <mem_trim+0x16e>
 800f9b0:	4b1b      	ldr	r3, [pc, #108]	; (800fa20 <mem_trim+0x1d0>)
 800f9b2:	f240 3216 	movw	r2, #790	; 0x316
 800f9b6:	491e      	ldr	r1, [pc, #120]	; (800fa30 <mem_trim+0x1e0>)
 800f9b8:	481b      	ldr	r0, [pc, #108]	; (800fa28 <mem_trim+0x1d8>)
 800f9ba:	f009 ff61 	bl	8019880 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800f9be:	6938      	ldr	r0, [r7, #16]
 800f9c0:	f7ff fda4 	bl	800f50c <ptr_to_mem>
 800f9c4:	6178      	str	r0, [r7, #20]
    if (mem2 < lfree) {
 800f9c6:	4b1b      	ldr	r3, [pc, #108]	; (800fa34 <mem_trim+0x1e4>)
 800f9c8:	681b      	ldr	r3, [r3, #0]
 800f9ca:	697a      	ldr	r2, [r7, #20]
 800f9cc:	429a      	cmp	r2, r3
 800f9ce:	d202      	bcs.n	800f9d6 <mem_trim+0x186>
      lfree = mem2;
 800f9d0:	4a18      	ldr	r2, [pc, #96]	; (800fa34 <mem_trim+0x1e4>)
 800f9d2:	697b      	ldr	r3, [r7, #20]
 800f9d4:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800f9d6:	697b      	ldr	r3, [r7, #20]
 800f9d8:	2200      	movs	r2, #0
 800f9da:	721a      	strb	r2, [r3, #8]
    mem2->next = mem->next;
 800f9dc:	6a3b      	ldr	r3, [r7, #32]
 800f9de:	681a      	ldr	r2, [r3, #0]
 800f9e0:	697b      	ldr	r3, [r7, #20]
 800f9e2:	601a      	str	r2, [r3, #0]
    mem2->prev = ptr;
 800f9e4:	697b      	ldr	r3, [r7, #20]
 800f9e6:	69fa      	ldr	r2, [r7, #28]
 800f9e8:	605a      	str	r2, [r3, #4]
    mem->next = ptr2;
 800f9ea:	6a3b      	ldr	r3, [r7, #32]
 800f9ec:	693a      	ldr	r2, [r7, #16]
 800f9ee:	601a      	str	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800f9f0:	697b      	ldr	r3, [r7, #20]
 800f9f2:	681b      	ldr	r3, [r3, #0]
 800f9f4:	4a07      	ldr	r2, [pc, #28]	; (800fa14 <mem_trim+0x1c4>)
 800f9f6:	4293      	cmp	r3, r2
 800f9f8:	d007      	beq.n	800fa0a <mem_trim+0x1ba>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800f9fa:	697b      	ldr	r3, [r7, #20]
 800f9fc:	681b      	ldr	r3, [r3, #0]
 800f9fe:	4618      	mov	r0, r3
 800fa00:	f7ff fd84 	bl	800f50c <ptr_to_mem>
 800fa04:	4602      	mov	r2, r0
 800fa06:	693b      	ldr	r3, [r7, #16]
 800fa08:	6053      	str	r3, [r2, #4]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 800fa0a:	687b      	ldr	r3, [r7, #4]
}
 800fa0c:	4618      	mov	r0, r3
 800fa0e:	3728      	adds	r7, #40	; 0x28
 800fa10:	46bd      	mov	sp, r7
 800fa12:	bd80      	pop	{r7, pc}
 800fa14:	0001ffe8 	.word	0x0001ffe8
 800fa18:	200007c8 	.word	0x200007c8
 800fa1c:	200007cc 	.word	0x200007cc
 800fa20:	0801c184 	.word	0x0801c184
 800fa24:	0801c2f4 	.word	0x0801c2f4
 800fa28:	0801c1cc 	.word	0x0801c1cc
 800fa2c:	0801c30c 	.word	0x0801c30c
 800fa30:	0801c32c 	.word	0x0801c32c
 800fa34:	200007d0 	.word	0x200007d0

0800fa38 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800fa38:	b580      	push	{r7, lr}
 800fa3a:	b088      	sub	sp, #32
 800fa3c:	af00      	add	r7, sp, #0
 800fa3e:	6078      	str	r0, [r7, #4]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800fa40:	687b      	ldr	r3, [r7, #4]
 800fa42:	2b00      	cmp	r3, #0
 800fa44:	d101      	bne.n	800fa4a <mem_malloc+0x12>
    return NULL;
 800fa46:	2300      	movs	r3, #0
 800fa48:	e0d0      	b.n	800fbec <mem_malloc+0x1b4>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800fa4a:	687b      	ldr	r3, [r7, #4]
 800fa4c:	3303      	adds	r3, #3
 800fa4e:	f023 0303 	bic.w	r3, r3, #3
 800fa52:	61bb      	str	r3, [r7, #24]
  if (size < MIN_SIZE_ALIGNED) {
 800fa54:	69bb      	ldr	r3, [r7, #24]
 800fa56:	2b0b      	cmp	r3, #11
 800fa58:	d801      	bhi.n	800fa5e <mem_malloc+0x26>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800fa5a:	230c      	movs	r3, #12
 800fa5c:	61bb      	str	r3, [r7, #24]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800fa5e:	69bb      	ldr	r3, [r7, #24]
 800fa60:	4a64      	ldr	r2, [pc, #400]	; (800fbf4 <mem_malloc+0x1bc>)
 800fa62:	4293      	cmp	r3, r2
 800fa64:	d803      	bhi.n	800fa6e <mem_malloc+0x36>
 800fa66:	69ba      	ldr	r2, [r7, #24]
 800fa68:	687b      	ldr	r3, [r7, #4]
 800fa6a:	429a      	cmp	r2, r3
 800fa6c:	d201      	bcs.n	800fa72 <mem_malloc+0x3a>
    return NULL;
 800fa6e:	2300      	movs	r3, #0
 800fa70:	e0bc      	b.n	800fbec <mem_malloc+0x1b4>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800fa72:	4b61      	ldr	r3, [pc, #388]	; (800fbf8 <mem_malloc+0x1c0>)
 800fa74:	681b      	ldr	r3, [r3, #0]
 800fa76:	4618      	mov	r0, r3
 800fa78:	f7ff fd58 	bl	800f52c <mem_to_ptr>
 800fa7c:	61f8      	str	r0, [r7, #28]
 800fa7e:	e0ad      	b.n	800fbdc <mem_malloc+0x1a4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800fa80:	69f8      	ldr	r0, [r7, #28]
 800fa82:	f7ff fd43 	bl	800f50c <ptr_to_mem>
 800fa86:	6138      	str	r0, [r7, #16]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800fa88:	693b      	ldr	r3, [r7, #16]
 800fa8a:	7a1b      	ldrb	r3, [r3, #8]
 800fa8c:	2b00      	cmp	r3, #0
 800fa8e:	f040 809f 	bne.w	800fbd0 <mem_malloc+0x198>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800fa92:	693b      	ldr	r3, [r7, #16]
 800fa94:	681a      	ldr	r2, [r3, #0]
 800fa96:	69fb      	ldr	r3, [r7, #28]
 800fa98:	1ad3      	subs	r3, r2, r3
 800fa9a:	3b0c      	subs	r3, #12
      if ((!mem->used) &&
 800fa9c:	69ba      	ldr	r2, [r7, #24]
 800fa9e:	429a      	cmp	r2, r3
 800faa0:	f200 8096 	bhi.w	800fbd0 <mem_malloc+0x198>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800faa4:	693b      	ldr	r3, [r7, #16]
 800faa6:	681a      	ldr	r2, [r3, #0]
 800faa8:	69fb      	ldr	r3, [r7, #28]
 800faaa:	1ad3      	subs	r3, r2, r3
 800faac:	f1a3 020c 	sub.w	r2, r3, #12
 800fab0:	69bb      	ldr	r3, [r7, #24]
 800fab2:	3318      	adds	r3, #24
 800fab4:	429a      	cmp	r2, r3
 800fab6:	d331      	bcc.n	800fb1c <mem_malloc+0xe4>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800fab8:	69fa      	ldr	r2, [r7, #28]
 800faba:	69bb      	ldr	r3, [r7, #24]
 800fabc:	4413      	add	r3, r2
 800fabe:	330c      	adds	r3, #12
 800fac0:	60fb      	str	r3, [r7, #12]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800fac2:	68fb      	ldr	r3, [r7, #12]
 800fac4:	4a4b      	ldr	r2, [pc, #300]	; (800fbf4 <mem_malloc+0x1bc>)
 800fac6:	4293      	cmp	r3, r2
 800fac8:	d106      	bne.n	800fad8 <mem_malloc+0xa0>
 800faca:	4b4c      	ldr	r3, [pc, #304]	; (800fbfc <mem_malloc+0x1c4>)
 800facc:	f240 3287 	movw	r2, #903	; 0x387
 800fad0:	494b      	ldr	r1, [pc, #300]	; (800fc00 <mem_malloc+0x1c8>)
 800fad2:	484c      	ldr	r0, [pc, #304]	; (800fc04 <mem_malloc+0x1cc>)
 800fad4:	f009 fed4 	bl	8019880 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800fad8:	68f8      	ldr	r0, [r7, #12]
 800fada:	f7ff fd17 	bl	800f50c <ptr_to_mem>
 800fade:	60b8      	str	r0, [r7, #8]
          mem2->used = 0;
 800fae0:	68bb      	ldr	r3, [r7, #8]
 800fae2:	2200      	movs	r2, #0
 800fae4:	721a      	strb	r2, [r3, #8]
          mem2->next = mem->next;
 800fae6:	693b      	ldr	r3, [r7, #16]
 800fae8:	681a      	ldr	r2, [r3, #0]
 800faea:	68bb      	ldr	r3, [r7, #8]
 800faec:	601a      	str	r2, [r3, #0]
          mem2->prev = ptr;
 800faee:	68bb      	ldr	r3, [r7, #8]
 800faf0:	69fa      	ldr	r2, [r7, #28]
 800faf2:	605a      	str	r2, [r3, #4]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800faf4:	693b      	ldr	r3, [r7, #16]
 800faf6:	68fa      	ldr	r2, [r7, #12]
 800faf8:	601a      	str	r2, [r3, #0]
          mem->used = 1;
 800fafa:	693b      	ldr	r3, [r7, #16]
 800fafc:	2201      	movs	r2, #1
 800fafe:	721a      	strb	r2, [r3, #8]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800fb00:	68bb      	ldr	r3, [r7, #8]
 800fb02:	681b      	ldr	r3, [r3, #0]
 800fb04:	4a3b      	ldr	r2, [pc, #236]	; (800fbf4 <mem_malloc+0x1bc>)
 800fb06:	4293      	cmp	r3, r2
 800fb08:	d00b      	beq.n	800fb22 <mem_malloc+0xea>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800fb0a:	68bb      	ldr	r3, [r7, #8]
 800fb0c:	681b      	ldr	r3, [r3, #0]
 800fb0e:	4618      	mov	r0, r3
 800fb10:	f7ff fcfc 	bl	800f50c <ptr_to_mem>
 800fb14:	4602      	mov	r2, r0
 800fb16:	68fb      	ldr	r3, [r7, #12]
 800fb18:	6053      	str	r3, [r2, #4]
 800fb1a:	e002      	b.n	800fb22 <mem_malloc+0xea>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800fb1c:	693b      	ldr	r3, [r7, #16]
 800fb1e:	2201      	movs	r2, #1
 800fb20:	721a      	strb	r2, [r3, #8]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800fb22:	4b35      	ldr	r3, [pc, #212]	; (800fbf8 <mem_malloc+0x1c0>)
 800fb24:	681b      	ldr	r3, [r3, #0]
 800fb26:	693a      	ldr	r2, [r7, #16]
 800fb28:	429a      	cmp	r2, r3
 800fb2a:	d127      	bne.n	800fb7c <mem_malloc+0x144>
          struct mem *cur = lfree;
 800fb2c:	4b32      	ldr	r3, [pc, #200]	; (800fbf8 <mem_malloc+0x1c0>)
 800fb2e:	681b      	ldr	r3, [r3, #0]
 800fb30:	617b      	str	r3, [r7, #20]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800fb32:	e005      	b.n	800fb40 <mem_malloc+0x108>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800fb34:	697b      	ldr	r3, [r7, #20]
 800fb36:	681b      	ldr	r3, [r3, #0]
 800fb38:	4618      	mov	r0, r3
 800fb3a:	f7ff fce7 	bl	800f50c <ptr_to_mem>
 800fb3e:	6178      	str	r0, [r7, #20]
          while (cur->used && cur != ram_end) {
 800fb40:	697b      	ldr	r3, [r7, #20]
 800fb42:	7a1b      	ldrb	r3, [r3, #8]
 800fb44:	2b00      	cmp	r3, #0
 800fb46:	d004      	beq.n	800fb52 <mem_malloc+0x11a>
 800fb48:	4b2f      	ldr	r3, [pc, #188]	; (800fc08 <mem_malloc+0x1d0>)
 800fb4a:	681b      	ldr	r3, [r3, #0]
 800fb4c:	697a      	ldr	r2, [r7, #20]
 800fb4e:	429a      	cmp	r2, r3
 800fb50:	d1f0      	bne.n	800fb34 <mem_malloc+0xfc>
          }
          lfree = cur;
 800fb52:	4a29      	ldr	r2, [pc, #164]	; (800fbf8 <mem_malloc+0x1c0>)
 800fb54:	697b      	ldr	r3, [r7, #20]
 800fb56:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800fb58:	4b27      	ldr	r3, [pc, #156]	; (800fbf8 <mem_malloc+0x1c0>)
 800fb5a:	681a      	ldr	r2, [r3, #0]
 800fb5c:	4b2a      	ldr	r3, [pc, #168]	; (800fc08 <mem_malloc+0x1d0>)
 800fb5e:	681b      	ldr	r3, [r3, #0]
 800fb60:	429a      	cmp	r2, r3
 800fb62:	d00b      	beq.n	800fb7c <mem_malloc+0x144>
 800fb64:	4b24      	ldr	r3, [pc, #144]	; (800fbf8 <mem_malloc+0x1c0>)
 800fb66:	681b      	ldr	r3, [r3, #0]
 800fb68:	7a1b      	ldrb	r3, [r3, #8]
 800fb6a:	2b00      	cmp	r3, #0
 800fb6c:	d006      	beq.n	800fb7c <mem_malloc+0x144>
 800fb6e:	4b23      	ldr	r3, [pc, #140]	; (800fbfc <mem_malloc+0x1c4>)
 800fb70:	f240 32b5 	movw	r2, #949	; 0x3b5
 800fb74:	4925      	ldr	r1, [pc, #148]	; (800fc0c <mem_malloc+0x1d4>)
 800fb76:	4823      	ldr	r0, [pc, #140]	; (800fc04 <mem_malloc+0x1cc>)
 800fb78:	f009 fe82 	bl	8019880 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800fb7c:	693a      	ldr	r2, [r7, #16]
 800fb7e:	69bb      	ldr	r3, [r7, #24]
 800fb80:	4413      	add	r3, r2
 800fb82:	330c      	adds	r3, #12
 800fb84:	4a20      	ldr	r2, [pc, #128]	; (800fc08 <mem_malloc+0x1d0>)
 800fb86:	6812      	ldr	r2, [r2, #0]
 800fb88:	4293      	cmp	r3, r2
 800fb8a:	d906      	bls.n	800fb9a <mem_malloc+0x162>
 800fb8c:	4b1b      	ldr	r3, [pc, #108]	; (800fbfc <mem_malloc+0x1c4>)
 800fb8e:	f240 32b9 	movw	r2, #953	; 0x3b9
 800fb92:	491f      	ldr	r1, [pc, #124]	; (800fc10 <mem_malloc+0x1d8>)
 800fb94:	481b      	ldr	r0, [pc, #108]	; (800fc04 <mem_malloc+0x1cc>)
 800fb96:	f009 fe73 	bl	8019880 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800fb9a:	693b      	ldr	r3, [r7, #16]
 800fb9c:	f003 0303 	and.w	r3, r3, #3
 800fba0:	2b00      	cmp	r3, #0
 800fba2:	d006      	beq.n	800fbb2 <mem_malloc+0x17a>
 800fba4:	4b15      	ldr	r3, [pc, #84]	; (800fbfc <mem_malloc+0x1c4>)
 800fba6:	f240 32bb 	movw	r2, #955	; 0x3bb
 800fbaa:	491a      	ldr	r1, [pc, #104]	; (800fc14 <mem_malloc+0x1dc>)
 800fbac:	4815      	ldr	r0, [pc, #84]	; (800fc04 <mem_malloc+0x1cc>)
 800fbae:	f009 fe67 	bl	8019880 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800fbb2:	693b      	ldr	r3, [r7, #16]
 800fbb4:	f003 0303 	and.w	r3, r3, #3
 800fbb8:	2b00      	cmp	r3, #0
 800fbba:	d006      	beq.n	800fbca <mem_malloc+0x192>
 800fbbc:	4b0f      	ldr	r3, [pc, #60]	; (800fbfc <mem_malloc+0x1c4>)
 800fbbe:	f240 32bd 	movw	r2, #957	; 0x3bd
 800fbc2:	4915      	ldr	r1, [pc, #84]	; (800fc18 <mem_malloc+0x1e0>)
 800fbc4:	480f      	ldr	r0, [pc, #60]	; (800fc04 <mem_malloc+0x1cc>)
 800fbc6:	f009 fe5b 	bl	8019880 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800fbca:	693b      	ldr	r3, [r7, #16]
 800fbcc:	330c      	adds	r3, #12
 800fbce:	e00d      	b.n	800fbec <mem_malloc+0x1b4>
         ptr = ptr_to_mem(ptr)->next) {
 800fbd0:	69f8      	ldr	r0, [r7, #28]
 800fbd2:	f7ff fc9b 	bl	800f50c <ptr_to_mem>
 800fbd6:	4603      	mov	r3, r0
 800fbd8:	681b      	ldr	r3, [r3, #0]
 800fbda:	61fb      	str	r3, [r7, #28]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800fbdc:	69ba      	ldr	r2, [r7, #24]
 800fbde:	4b05      	ldr	r3, [pc, #20]	; (800fbf4 <mem_malloc+0x1bc>)
 800fbe0:	1a9b      	subs	r3, r3, r2
 800fbe2:	69fa      	ldr	r2, [r7, #28]
 800fbe4:	429a      	cmp	r2, r3
 800fbe6:	f4ff af4b 	bcc.w	800fa80 <mem_malloc+0x48>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800fbea:	2300      	movs	r3, #0
}
 800fbec:	4618      	mov	r0, r3
 800fbee:	3720      	adds	r7, #32
 800fbf0:	46bd      	mov	sp, r7
 800fbf2:	bd80      	pop	{r7, pc}
 800fbf4:	0001ffe8 	.word	0x0001ffe8
 800fbf8:	200007d0 	.word	0x200007d0
 800fbfc:	0801c184 	.word	0x0801c184
 800fc00:	0801c32c 	.word	0x0801c32c
 800fc04:	0801c1cc 	.word	0x0801c1cc
 800fc08:	200007cc 	.word	0x200007cc
 800fc0c:	0801c340 	.word	0x0801c340
 800fc10:	0801c35c 	.word	0x0801c35c
 800fc14:	0801c38c 	.word	0x0801c38c
 800fc18:	0801c3bc 	.word	0x0801c3bc

0800fc1c <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800fc1c:	b480      	push	{r7}
 800fc1e:	b085      	sub	sp, #20
 800fc20:	af00      	add	r7, sp, #0
 800fc22:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800fc24:	687b      	ldr	r3, [r7, #4]
 800fc26:	689b      	ldr	r3, [r3, #8]
 800fc28:	2200      	movs	r2, #0
 800fc2a:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800fc2c:	687b      	ldr	r3, [r7, #4]
 800fc2e:	685b      	ldr	r3, [r3, #4]
 800fc30:	3303      	adds	r3, #3
 800fc32:	f023 0303 	bic.w	r3, r3, #3
 800fc36:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800fc38:	2300      	movs	r3, #0
 800fc3a:	60fb      	str	r3, [r7, #12]
 800fc3c:	e011      	b.n	800fc62 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800fc3e:	687b      	ldr	r3, [r7, #4]
 800fc40:	689b      	ldr	r3, [r3, #8]
 800fc42:	681a      	ldr	r2, [r3, #0]
 800fc44:	68bb      	ldr	r3, [r7, #8]
 800fc46:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800fc48:	687b      	ldr	r3, [r7, #4]
 800fc4a:	689b      	ldr	r3, [r3, #8]
 800fc4c:	68ba      	ldr	r2, [r7, #8]
 800fc4e:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800fc50:	687b      	ldr	r3, [r7, #4]
 800fc52:	881b      	ldrh	r3, [r3, #0]
 800fc54:	461a      	mov	r2, r3
 800fc56:	68bb      	ldr	r3, [r7, #8]
 800fc58:	4413      	add	r3, r2
 800fc5a:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800fc5c:	68fb      	ldr	r3, [r7, #12]
 800fc5e:	3301      	adds	r3, #1
 800fc60:	60fb      	str	r3, [r7, #12]
 800fc62:	687b      	ldr	r3, [r7, #4]
 800fc64:	885b      	ldrh	r3, [r3, #2]
 800fc66:	461a      	mov	r2, r3
 800fc68:	68fb      	ldr	r3, [r7, #12]
 800fc6a:	4293      	cmp	r3, r2
 800fc6c:	dbe7      	blt.n	800fc3e <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800fc6e:	bf00      	nop
 800fc70:	bf00      	nop
 800fc72:	3714      	adds	r7, #20
 800fc74:	46bd      	mov	sp, r7
 800fc76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc7a:	4770      	bx	lr

0800fc7c <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800fc7c:	b580      	push	{r7, lr}
 800fc7e:	b082      	sub	sp, #8
 800fc80:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800fc82:	2300      	movs	r3, #0
 800fc84:	80fb      	strh	r3, [r7, #6]
 800fc86:	e009      	b.n	800fc9c <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800fc88:	88fb      	ldrh	r3, [r7, #6]
 800fc8a:	4a08      	ldr	r2, [pc, #32]	; (800fcac <memp_init+0x30>)
 800fc8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fc90:	4618      	mov	r0, r3
 800fc92:	f7ff ffc3 	bl	800fc1c <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800fc96:	88fb      	ldrh	r3, [r7, #6]
 800fc98:	3301      	adds	r3, #1
 800fc9a:	80fb      	strh	r3, [r7, #6]
 800fc9c:	88fb      	ldrh	r3, [r7, #6]
 800fc9e:	2b08      	cmp	r3, #8
 800fca0:	d9f2      	bls.n	800fc88 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800fca2:	bf00      	nop
 800fca4:	bf00      	nop
 800fca6:	3708      	adds	r7, #8
 800fca8:	46bd      	mov	sp, r7
 800fcaa:	bd80      	pop	{r7, pc}
 800fcac:	0801ebe0 	.word	0x0801ebe0

0800fcb0 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800fcb0:	b580      	push	{r7, lr}
 800fcb2:	b084      	sub	sp, #16
 800fcb4:	af00      	add	r7, sp, #0
 800fcb6:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 800fcb8:	687b      	ldr	r3, [r7, #4]
 800fcba:	689b      	ldr	r3, [r3, #8]
 800fcbc:	681b      	ldr	r3, [r3, #0]
 800fcbe:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800fcc0:	68fb      	ldr	r3, [r7, #12]
 800fcc2:	2b00      	cmp	r3, #0
 800fcc4:	d012      	beq.n	800fcec <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800fcc6:	687b      	ldr	r3, [r7, #4]
 800fcc8:	689b      	ldr	r3, [r3, #8]
 800fcca:	68fa      	ldr	r2, [r7, #12]
 800fccc:	6812      	ldr	r2, [r2, #0]
 800fcce:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800fcd0:	68fb      	ldr	r3, [r7, #12]
 800fcd2:	f003 0303 	and.w	r3, r3, #3
 800fcd6:	2b00      	cmp	r3, #0
 800fcd8:	d006      	beq.n	800fce8 <do_memp_malloc_pool+0x38>
 800fcda:	4b07      	ldr	r3, [pc, #28]	; (800fcf8 <do_memp_malloc_pool+0x48>)
 800fcdc:	f44f 728c 	mov.w	r2, #280	; 0x118
 800fce0:	4906      	ldr	r1, [pc, #24]	; (800fcfc <do_memp_malloc_pool+0x4c>)
 800fce2:	4807      	ldr	r0, [pc, #28]	; (800fd00 <do_memp_malloc_pool+0x50>)
 800fce4:	f009 fdcc 	bl	8019880 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800fce8:	68fb      	ldr	r3, [r7, #12]
 800fcea:	e000      	b.n	800fcee <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800fcec:	2300      	movs	r3, #0
}
 800fcee:	4618      	mov	r0, r3
 800fcf0:	3710      	adds	r7, #16
 800fcf2:	46bd      	mov	sp, r7
 800fcf4:	bd80      	pop	{r7, pc}
 800fcf6:	bf00      	nop
 800fcf8:	0801c3e0 	.word	0x0801c3e0
 800fcfc:	0801c410 	.word	0x0801c410
 800fd00:	0801c434 	.word	0x0801c434

0800fd04 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800fd04:	b580      	push	{r7, lr}
 800fd06:	b082      	sub	sp, #8
 800fd08:	af00      	add	r7, sp, #0
 800fd0a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800fd0c:	687b      	ldr	r3, [r7, #4]
 800fd0e:	2b00      	cmp	r3, #0
 800fd10:	d106      	bne.n	800fd20 <memp_malloc_pool+0x1c>
 800fd12:	4b0a      	ldr	r3, [pc, #40]	; (800fd3c <memp_malloc_pool+0x38>)
 800fd14:	f44f 729e 	mov.w	r2, #316	; 0x13c
 800fd18:	4909      	ldr	r1, [pc, #36]	; (800fd40 <memp_malloc_pool+0x3c>)
 800fd1a:	480a      	ldr	r0, [pc, #40]	; (800fd44 <memp_malloc_pool+0x40>)
 800fd1c:	f009 fdb0 	bl	8019880 <iprintf>
  if (desc == NULL) {
 800fd20:	687b      	ldr	r3, [r7, #4]
 800fd22:	2b00      	cmp	r3, #0
 800fd24:	d101      	bne.n	800fd2a <memp_malloc_pool+0x26>
    return NULL;
 800fd26:	2300      	movs	r3, #0
 800fd28:	e003      	b.n	800fd32 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800fd2a:	6878      	ldr	r0, [r7, #4]
 800fd2c:	f7ff ffc0 	bl	800fcb0 <do_memp_malloc_pool>
 800fd30:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800fd32:	4618      	mov	r0, r3
 800fd34:	3708      	adds	r7, #8
 800fd36:	46bd      	mov	sp, r7
 800fd38:	bd80      	pop	{r7, pc}
 800fd3a:	bf00      	nop
 800fd3c:	0801c3e0 	.word	0x0801c3e0
 800fd40:	0801c45c 	.word	0x0801c45c
 800fd44:	0801c434 	.word	0x0801c434

0800fd48 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800fd48:	b580      	push	{r7, lr}
 800fd4a:	b084      	sub	sp, #16
 800fd4c:	af00      	add	r7, sp, #0
 800fd4e:	4603      	mov	r3, r0
 800fd50:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800fd52:	79fb      	ldrb	r3, [r7, #7]
 800fd54:	2b08      	cmp	r3, #8
 800fd56:	d908      	bls.n	800fd6a <memp_malloc+0x22>
 800fd58:	4b0a      	ldr	r3, [pc, #40]	; (800fd84 <memp_malloc+0x3c>)
 800fd5a:	f240 1257 	movw	r2, #343	; 0x157
 800fd5e:	490a      	ldr	r1, [pc, #40]	; (800fd88 <memp_malloc+0x40>)
 800fd60:	480a      	ldr	r0, [pc, #40]	; (800fd8c <memp_malloc+0x44>)
 800fd62:	f009 fd8d 	bl	8019880 <iprintf>
 800fd66:	2300      	movs	r3, #0
 800fd68:	e008      	b.n	800fd7c <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800fd6a:	79fb      	ldrb	r3, [r7, #7]
 800fd6c:	4a08      	ldr	r2, [pc, #32]	; (800fd90 <memp_malloc+0x48>)
 800fd6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fd72:	4618      	mov	r0, r3
 800fd74:	f7ff ff9c 	bl	800fcb0 <do_memp_malloc_pool>
 800fd78:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800fd7a:	68fb      	ldr	r3, [r7, #12]
}
 800fd7c:	4618      	mov	r0, r3
 800fd7e:	3710      	adds	r7, #16
 800fd80:	46bd      	mov	sp, r7
 800fd82:	bd80      	pop	{r7, pc}
 800fd84:	0801c3e0 	.word	0x0801c3e0
 800fd88:	0801c470 	.word	0x0801c470
 800fd8c:	0801c434 	.word	0x0801c434
 800fd90:	0801ebe0 	.word	0x0801ebe0

0800fd94 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800fd94:	b580      	push	{r7, lr}
 800fd96:	b084      	sub	sp, #16
 800fd98:	af00      	add	r7, sp, #0
 800fd9a:	6078      	str	r0, [r7, #4]
 800fd9c:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800fd9e:	683b      	ldr	r3, [r7, #0]
 800fda0:	f003 0303 	and.w	r3, r3, #3
 800fda4:	2b00      	cmp	r3, #0
 800fda6:	d006      	beq.n	800fdb6 <do_memp_free_pool+0x22>
 800fda8:	4b0a      	ldr	r3, [pc, #40]	; (800fdd4 <do_memp_free_pool+0x40>)
 800fdaa:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800fdae:	490a      	ldr	r1, [pc, #40]	; (800fdd8 <do_memp_free_pool+0x44>)
 800fdb0:	480a      	ldr	r0, [pc, #40]	; (800fddc <do_memp_free_pool+0x48>)
 800fdb2:	f009 fd65 	bl	8019880 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800fdb6:	683b      	ldr	r3, [r7, #0]
 800fdb8:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800fdba:	687b      	ldr	r3, [r7, #4]
 800fdbc:	689b      	ldr	r3, [r3, #8]
 800fdbe:	681a      	ldr	r2, [r3, #0]
 800fdc0:	68fb      	ldr	r3, [r7, #12]
 800fdc2:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800fdc4:	687b      	ldr	r3, [r7, #4]
 800fdc6:	689b      	ldr	r3, [r3, #8]
 800fdc8:	68fa      	ldr	r2, [r7, #12]
 800fdca:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 800fdcc:	bf00      	nop
 800fdce:	3710      	adds	r7, #16
 800fdd0:	46bd      	mov	sp, r7
 800fdd2:	bd80      	pop	{r7, pc}
 800fdd4:	0801c3e0 	.word	0x0801c3e0
 800fdd8:	0801c490 	.word	0x0801c490
 800fddc:	0801c434 	.word	0x0801c434

0800fde0 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800fde0:	b580      	push	{r7, lr}
 800fde2:	b082      	sub	sp, #8
 800fde4:	af00      	add	r7, sp, #0
 800fde6:	6078      	str	r0, [r7, #4]
 800fde8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800fdea:	687b      	ldr	r3, [r7, #4]
 800fdec:	2b00      	cmp	r3, #0
 800fdee:	d106      	bne.n	800fdfe <memp_free_pool+0x1e>
 800fdf0:	4b0a      	ldr	r3, [pc, #40]	; (800fe1c <memp_free_pool+0x3c>)
 800fdf2:	f240 1295 	movw	r2, #405	; 0x195
 800fdf6:	490a      	ldr	r1, [pc, #40]	; (800fe20 <memp_free_pool+0x40>)
 800fdf8:	480a      	ldr	r0, [pc, #40]	; (800fe24 <memp_free_pool+0x44>)
 800fdfa:	f009 fd41 	bl	8019880 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800fdfe:	687b      	ldr	r3, [r7, #4]
 800fe00:	2b00      	cmp	r3, #0
 800fe02:	d007      	beq.n	800fe14 <memp_free_pool+0x34>
 800fe04:	683b      	ldr	r3, [r7, #0]
 800fe06:	2b00      	cmp	r3, #0
 800fe08:	d004      	beq.n	800fe14 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800fe0a:	6839      	ldr	r1, [r7, #0]
 800fe0c:	6878      	ldr	r0, [r7, #4]
 800fe0e:	f7ff ffc1 	bl	800fd94 <do_memp_free_pool>
 800fe12:	e000      	b.n	800fe16 <memp_free_pool+0x36>
    return;
 800fe14:	bf00      	nop
}
 800fe16:	3708      	adds	r7, #8
 800fe18:	46bd      	mov	sp, r7
 800fe1a:	bd80      	pop	{r7, pc}
 800fe1c:	0801c3e0 	.word	0x0801c3e0
 800fe20:	0801c45c 	.word	0x0801c45c
 800fe24:	0801c434 	.word	0x0801c434

0800fe28 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800fe28:	b580      	push	{r7, lr}
 800fe2a:	b082      	sub	sp, #8
 800fe2c:	af00      	add	r7, sp, #0
 800fe2e:	4603      	mov	r3, r0
 800fe30:	6039      	str	r1, [r7, #0]
 800fe32:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800fe34:	79fb      	ldrb	r3, [r7, #7]
 800fe36:	2b08      	cmp	r3, #8
 800fe38:	d907      	bls.n	800fe4a <memp_free+0x22>
 800fe3a:	4b0c      	ldr	r3, [pc, #48]	; (800fe6c <memp_free+0x44>)
 800fe3c:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800fe40:	490b      	ldr	r1, [pc, #44]	; (800fe70 <memp_free+0x48>)
 800fe42:	480c      	ldr	r0, [pc, #48]	; (800fe74 <memp_free+0x4c>)
 800fe44:	f009 fd1c 	bl	8019880 <iprintf>
 800fe48:	e00c      	b.n	800fe64 <memp_free+0x3c>

  if (mem == NULL) {
 800fe4a:	683b      	ldr	r3, [r7, #0]
 800fe4c:	2b00      	cmp	r3, #0
 800fe4e:	d008      	beq.n	800fe62 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800fe50:	79fb      	ldrb	r3, [r7, #7]
 800fe52:	4a09      	ldr	r2, [pc, #36]	; (800fe78 <memp_free+0x50>)
 800fe54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fe58:	6839      	ldr	r1, [r7, #0]
 800fe5a:	4618      	mov	r0, r3
 800fe5c:	f7ff ff9a 	bl	800fd94 <do_memp_free_pool>
 800fe60:	e000      	b.n	800fe64 <memp_free+0x3c>
    return;
 800fe62:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800fe64:	3708      	adds	r7, #8
 800fe66:	46bd      	mov	sp, r7
 800fe68:	bd80      	pop	{r7, pc}
 800fe6a:	bf00      	nop
 800fe6c:	0801c3e0 	.word	0x0801c3e0
 800fe70:	0801c4b0 	.word	0x0801c4b0
 800fe74:	0801c434 	.word	0x0801c434
 800fe78:	0801ebe0 	.word	0x0801ebe0

0800fe7c <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800fe7c:	b480      	push	{r7}
 800fe7e:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800fe80:	bf00      	nop
 800fe82:	46bd      	mov	sp, r7
 800fe84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe88:	4770      	bx	lr
	...

0800fe8c <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800fe8c:	b580      	push	{r7, lr}
 800fe8e:	b086      	sub	sp, #24
 800fe90:	af00      	add	r7, sp, #0
 800fe92:	60f8      	str	r0, [r7, #12]
 800fe94:	60b9      	str	r1, [r7, #8]
 800fe96:	607a      	str	r2, [r7, #4]
 800fe98:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800fe9a:	68fb      	ldr	r3, [r7, #12]
 800fe9c:	2b00      	cmp	r3, #0
 800fe9e:	d108      	bne.n	800feb2 <netif_add+0x26>
 800fea0:	4b57      	ldr	r3, [pc, #348]	; (8010000 <netif_add+0x174>)
 800fea2:	f240 1227 	movw	r2, #295	; 0x127
 800fea6:	4957      	ldr	r1, [pc, #348]	; (8010004 <netif_add+0x178>)
 800fea8:	4857      	ldr	r0, [pc, #348]	; (8010008 <netif_add+0x17c>)
 800feaa:	f009 fce9 	bl	8019880 <iprintf>
 800feae:	2300      	movs	r3, #0
 800feb0:	e0a2      	b.n	800fff8 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800feb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800feb4:	2b00      	cmp	r3, #0
 800feb6:	d108      	bne.n	800feca <netif_add+0x3e>
 800feb8:	4b51      	ldr	r3, [pc, #324]	; (8010000 <netif_add+0x174>)
 800feba:	f44f 7294 	mov.w	r2, #296	; 0x128
 800febe:	4953      	ldr	r1, [pc, #332]	; (801000c <netif_add+0x180>)
 800fec0:	4851      	ldr	r0, [pc, #324]	; (8010008 <netif_add+0x17c>)
 800fec2:	f009 fcdd 	bl	8019880 <iprintf>
 800fec6:	2300      	movs	r3, #0
 800fec8:	e096      	b.n	800fff8 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800feca:	68bb      	ldr	r3, [r7, #8]
 800fecc:	2b00      	cmp	r3, #0
 800fece:	d101      	bne.n	800fed4 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800fed0:	4b4f      	ldr	r3, [pc, #316]	; (8010010 <netif_add+0x184>)
 800fed2:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800fed4:	687b      	ldr	r3, [r7, #4]
 800fed6:	2b00      	cmp	r3, #0
 800fed8:	d101      	bne.n	800fede <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800feda:	4b4d      	ldr	r3, [pc, #308]	; (8010010 <netif_add+0x184>)
 800fedc:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800fede:	683b      	ldr	r3, [r7, #0]
 800fee0:	2b00      	cmp	r3, #0
 800fee2:	d101      	bne.n	800fee8 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800fee4:	4b4a      	ldr	r3, [pc, #296]	; (8010010 <netif_add+0x184>)
 800fee6:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800fee8:	68fb      	ldr	r3, [r7, #12]
 800feea:	2200      	movs	r2, #0
 800feec:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800feee:	68fb      	ldr	r3, [r7, #12]
 800fef0:	2200      	movs	r2, #0
 800fef2:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800fef4:	68fb      	ldr	r3, [r7, #12]
 800fef6:	2200      	movs	r2, #0
 800fef8:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800fefa:	68fb      	ldr	r3, [r7, #12]
 800fefc:	4a45      	ldr	r2, [pc, #276]	; (8010014 <netif_add+0x188>)
 800fefe:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800ff00:	68fb      	ldr	r3, [r7, #12]
 800ff02:	2200      	movs	r2, #0
 800ff04:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 800ff06:	68fb      	ldr	r3, [r7, #12]
 800ff08:	2200      	movs	r2, #0
 800ff0a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800ff0e:	68fb      	ldr	r3, [r7, #12]
 800ff10:	2200      	movs	r2, #0
 800ff12:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800ff14:	68fb      	ldr	r3, [r7, #12]
 800ff16:	6a3a      	ldr	r2, [r7, #32]
 800ff18:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800ff1a:	4b3f      	ldr	r3, [pc, #252]	; (8010018 <netif_add+0x18c>)
 800ff1c:	781a      	ldrb	r2, [r3, #0]
 800ff1e:	68fb      	ldr	r3, [r7, #12]
 800ff20:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 800ff24:	68fb      	ldr	r3, [r7, #12]
 800ff26:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ff28:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800ff2a:	683b      	ldr	r3, [r7, #0]
 800ff2c:	687a      	ldr	r2, [r7, #4]
 800ff2e:	68b9      	ldr	r1, [r7, #8]
 800ff30:	68f8      	ldr	r0, [r7, #12]
 800ff32:	f000 f913 	bl	801015c <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800ff36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff38:	68f8      	ldr	r0, [r7, #12]
 800ff3a:	4798      	blx	r3
 800ff3c:	4603      	mov	r3, r0
 800ff3e:	2b00      	cmp	r3, #0
 800ff40:	d001      	beq.n	800ff46 <netif_add+0xba>
    return NULL;
 800ff42:	2300      	movs	r3, #0
 800ff44:	e058      	b.n	800fff8 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800ff46:	68fb      	ldr	r3, [r7, #12]
 800ff48:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ff4c:	2bff      	cmp	r3, #255	; 0xff
 800ff4e:	d103      	bne.n	800ff58 <netif_add+0xcc>
        netif->num = 0;
 800ff50:	68fb      	ldr	r3, [r7, #12]
 800ff52:	2200      	movs	r2, #0
 800ff54:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 800ff58:	2300      	movs	r3, #0
 800ff5a:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800ff5c:	4b2f      	ldr	r3, [pc, #188]	; (801001c <netif_add+0x190>)
 800ff5e:	681b      	ldr	r3, [r3, #0]
 800ff60:	617b      	str	r3, [r7, #20]
 800ff62:	e02b      	b.n	800ffbc <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800ff64:	697a      	ldr	r2, [r7, #20]
 800ff66:	68fb      	ldr	r3, [r7, #12]
 800ff68:	429a      	cmp	r2, r3
 800ff6a:	d106      	bne.n	800ff7a <netif_add+0xee>
 800ff6c:	4b24      	ldr	r3, [pc, #144]	; (8010000 <netif_add+0x174>)
 800ff6e:	f240 128b 	movw	r2, #395	; 0x18b
 800ff72:	492b      	ldr	r1, [pc, #172]	; (8010020 <netif_add+0x194>)
 800ff74:	4824      	ldr	r0, [pc, #144]	; (8010008 <netif_add+0x17c>)
 800ff76:	f009 fc83 	bl	8019880 <iprintf>
        num_netifs++;
 800ff7a:	693b      	ldr	r3, [r7, #16]
 800ff7c:	3301      	adds	r3, #1
 800ff7e:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800ff80:	693b      	ldr	r3, [r7, #16]
 800ff82:	2bff      	cmp	r3, #255	; 0xff
 800ff84:	dd06      	ble.n	800ff94 <netif_add+0x108>
 800ff86:	4b1e      	ldr	r3, [pc, #120]	; (8010000 <netif_add+0x174>)
 800ff88:	f240 128d 	movw	r2, #397	; 0x18d
 800ff8c:	4925      	ldr	r1, [pc, #148]	; (8010024 <netif_add+0x198>)
 800ff8e:	481e      	ldr	r0, [pc, #120]	; (8010008 <netif_add+0x17c>)
 800ff90:	f009 fc76 	bl	8019880 <iprintf>
        if (netif2->num == netif->num) {
 800ff94:	697b      	ldr	r3, [r7, #20]
 800ff96:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800ff9a:	68fb      	ldr	r3, [r7, #12]
 800ff9c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ffa0:	429a      	cmp	r2, r3
 800ffa2:	d108      	bne.n	800ffb6 <netif_add+0x12a>
          netif->num++;
 800ffa4:	68fb      	ldr	r3, [r7, #12]
 800ffa6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ffaa:	3301      	adds	r3, #1
 800ffac:	b2da      	uxtb	r2, r3
 800ffae:	68fb      	ldr	r3, [r7, #12]
 800ffb0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 800ffb4:	e005      	b.n	800ffc2 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800ffb6:	697b      	ldr	r3, [r7, #20]
 800ffb8:	681b      	ldr	r3, [r3, #0]
 800ffba:	617b      	str	r3, [r7, #20]
 800ffbc:	697b      	ldr	r3, [r7, #20]
 800ffbe:	2b00      	cmp	r3, #0
 800ffc0:	d1d0      	bne.n	800ff64 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800ffc2:	697b      	ldr	r3, [r7, #20]
 800ffc4:	2b00      	cmp	r3, #0
 800ffc6:	d1be      	bne.n	800ff46 <netif_add+0xba>
  }
  if (netif->num == 254) {
 800ffc8:	68fb      	ldr	r3, [r7, #12]
 800ffca:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ffce:	2bfe      	cmp	r3, #254	; 0xfe
 800ffd0:	d103      	bne.n	800ffda <netif_add+0x14e>
    netif_num = 0;
 800ffd2:	4b11      	ldr	r3, [pc, #68]	; (8010018 <netif_add+0x18c>)
 800ffd4:	2200      	movs	r2, #0
 800ffd6:	701a      	strb	r2, [r3, #0]
 800ffd8:	e006      	b.n	800ffe8 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800ffda:	68fb      	ldr	r3, [r7, #12]
 800ffdc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ffe0:	3301      	adds	r3, #1
 800ffe2:	b2da      	uxtb	r2, r3
 800ffe4:	4b0c      	ldr	r3, [pc, #48]	; (8010018 <netif_add+0x18c>)
 800ffe6:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800ffe8:	4b0c      	ldr	r3, [pc, #48]	; (801001c <netif_add+0x190>)
 800ffea:	681a      	ldr	r2, [r3, #0]
 800ffec:	68fb      	ldr	r3, [r7, #12]
 800ffee:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800fff0:	4a0a      	ldr	r2, [pc, #40]	; (801001c <netif_add+0x190>)
 800fff2:	68fb      	ldr	r3, [r7, #12]
 800fff4:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800fff6:	68fb      	ldr	r3, [r7, #12]
}
 800fff8:	4618      	mov	r0, r3
 800fffa:	3718      	adds	r7, #24
 800fffc:	46bd      	mov	sp, r7
 800fffe:	bd80      	pop	{r7, pc}
 8010000:	0801c4cc 	.word	0x0801c4cc
 8010004:	0801c560 	.word	0x0801c560
 8010008:	0801c51c 	.word	0x0801c51c
 801000c:	0801c57c 	.word	0x0801c57c
 8010010:	0801ec44 	.word	0x0801ec44
 8010014:	08010437 	.word	0x08010437
 8010018:	20007088 	.word	0x20007088
 801001c:	20007080 	.word	0x20007080
 8010020:	0801c5a0 	.word	0x0801c5a0
 8010024:	0801c5b4 	.word	0x0801c5b4

08010028 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8010028:	b580      	push	{r7, lr}
 801002a:	b082      	sub	sp, #8
 801002c:	af00      	add	r7, sp, #0
 801002e:	6078      	str	r0, [r7, #4]
 8010030:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8010032:	6839      	ldr	r1, [r7, #0]
 8010034:	6878      	ldr	r0, [r7, #4]
 8010036:	f002 fb27 	bl	8012688 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 801003a:	6839      	ldr	r1, [r7, #0]
 801003c:	6878      	ldr	r0, [r7, #4]
 801003e:	f006 fbc9 	bl	80167d4 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8010042:	bf00      	nop
 8010044:	3708      	adds	r7, #8
 8010046:	46bd      	mov	sp, r7
 8010048:	bd80      	pop	{r7, pc}
	...

0801004c <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 801004c:	b580      	push	{r7, lr}
 801004e:	b086      	sub	sp, #24
 8010050:	af00      	add	r7, sp, #0
 8010052:	60f8      	str	r0, [r7, #12]
 8010054:	60b9      	str	r1, [r7, #8]
 8010056:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8010058:	68bb      	ldr	r3, [r7, #8]
 801005a:	2b00      	cmp	r3, #0
 801005c:	d106      	bne.n	801006c <netif_do_set_ipaddr+0x20>
 801005e:	4b1d      	ldr	r3, [pc, #116]	; (80100d4 <netif_do_set_ipaddr+0x88>)
 8010060:	f240 12cb 	movw	r2, #459	; 0x1cb
 8010064:	491c      	ldr	r1, [pc, #112]	; (80100d8 <netif_do_set_ipaddr+0x8c>)
 8010066:	481d      	ldr	r0, [pc, #116]	; (80100dc <netif_do_set_ipaddr+0x90>)
 8010068:	f009 fc0a 	bl	8019880 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 801006c:	687b      	ldr	r3, [r7, #4]
 801006e:	2b00      	cmp	r3, #0
 8010070:	d106      	bne.n	8010080 <netif_do_set_ipaddr+0x34>
 8010072:	4b18      	ldr	r3, [pc, #96]	; (80100d4 <netif_do_set_ipaddr+0x88>)
 8010074:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8010078:	4917      	ldr	r1, [pc, #92]	; (80100d8 <netif_do_set_ipaddr+0x8c>)
 801007a:	4818      	ldr	r0, [pc, #96]	; (80100dc <netif_do_set_ipaddr+0x90>)
 801007c:	f009 fc00 	bl	8019880 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8010080:	68bb      	ldr	r3, [r7, #8]
 8010082:	681a      	ldr	r2, [r3, #0]
 8010084:	68fb      	ldr	r3, [r7, #12]
 8010086:	3304      	adds	r3, #4
 8010088:	681b      	ldr	r3, [r3, #0]
 801008a:	429a      	cmp	r2, r3
 801008c:	d01c      	beq.n	80100c8 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 801008e:	68bb      	ldr	r3, [r7, #8]
 8010090:	681b      	ldr	r3, [r3, #0]
 8010092:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8010094:	68fb      	ldr	r3, [r7, #12]
 8010096:	3304      	adds	r3, #4
 8010098:	681a      	ldr	r2, [r3, #0]
 801009a:	687b      	ldr	r3, [r7, #4]
 801009c:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 801009e:	f107 0314 	add.w	r3, r7, #20
 80100a2:	4619      	mov	r1, r3
 80100a4:	6878      	ldr	r0, [r7, #4]
 80100a6:	f7ff ffbf 	bl	8010028 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 80100aa:	68bb      	ldr	r3, [r7, #8]
 80100ac:	2b00      	cmp	r3, #0
 80100ae:	d002      	beq.n	80100b6 <netif_do_set_ipaddr+0x6a>
 80100b0:	68bb      	ldr	r3, [r7, #8]
 80100b2:	681b      	ldr	r3, [r3, #0]
 80100b4:	e000      	b.n	80100b8 <netif_do_set_ipaddr+0x6c>
 80100b6:	2300      	movs	r3, #0
 80100b8:	68fa      	ldr	r2, [r7, #12]
 80100ba:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 80100bc:	2101      	movs	r1, #1
 80100be:	68f8      	ldr	r0, [r7, #12]
 80100c0:	f000 f8d2 	bl	8010268 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 80100c4:	2301      	movs	r3, #1
 80100c6:	e000      	b.n	80100ca <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 80100c8:	2300      	movs	r3, #0
}
 80100ca:	4618      	mov	r0, r3
 80100cc:	3718      	adds	r7, #24
 80100ce:	46bd      	mov	sp, r7
 80100d0:	bd80      	pop	{r7, pc}
 80100d2:	bf00      	nop
 80100d4:	0801c4cc 	.word	0x0801c4cc
 80100d8:	0801c5e4 	.word	0x0801c5e4
 80100dc:	0801c51c 	.word	0x0801c51c

080100e0 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 80100e0:	b480      	push	{r7}
 80100e2:	b085      	sub	sp, #20
 80100e4:	af00      	add	r7, sp, #0
 80100e6:	60f8      	str	r0, [r7, #12]
 80100e8:	60b9      	str	r1, [r7, #8]
 80100ea:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 80100ec:	68bb      	ldr	r3, [r7, #8]
 80100ee:	681a      	ldr	r2, [r3, #0]
 80100f0:	68fb      	ldr	r3, [r7, #12]
 80100f2:	3308      	adds	r3, #8
 80100f4:	681b      	ldr	r3, [r3, #0]
 80100f6:	429a      	cmp	r2, r3
 80100f8:	d00a      	beq.n	8010110 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 80100fa:	68bb      	ldr	r3, [r7, #8]
 80100fc:	2b00      	cmp	r3, #0
 80100fe:	d002      	beq.n	8010106 <netif_do_set_netmask+0x26>
 8010100:	68bb      	ldr	r3, [r7, #8]
 8010102:	681b      	ldr	r3, [r3, #0]
 8010104:	e000      	b.n	8010108 <netif_do_set_netmask+0x28>
 8010106:	2300      	movs	r3, #0
 8010108:	68fa      	ldr	r2, [r7, #12]
 801010a:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 801010c:	2301      	movs	r3, #1
 801010e:	e000      	b.n	8010112 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8010110:	2300      	movs	r3, #0
}
 8010112:	4618      	mov	r0, r3
 8010114:	3714      	adds	r7, #20
 8010116:	46bd      	mov	sp, r7
 8010118:	f85d 7b04 	ldr.w	r7, [sp], #4
 801011c:	4770      	bx	lr

0801011e <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 801011e:	b480      	push	{r7}
 8010120:	b085      	sub	sp, #20
 8010122:	af00      	add	r7, sp, #0
 8010124:	60f8      	str	r0, [r7, #12]
 8010126:	60b9      	str	r1, [r7, #8]
 8010128:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 801012a:	68bb      	ldr	r3, [r7, #8]
 801012c:	681a      	ldr	r2, [r3, #0]
 801012e:	68fb      	ldr	r3, [r7, #12]
 8010130:	330c      	adds	r3, #12
 8010132:	681b      	ldr	r3, [r3, #0]
 8010134:	429a      	cmp	r2, r3
 8010136:	d00a      	beq.n	801014e <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8010138:	68bb      	ldr	r3, [r7, #8]
 801013a:	2b00      	cmp	r3, #0
 801013c:	d002      	beq.n	8010144 <netif_do_set_gw+0x26>
 801013e:	68bb      	ldr	r3, [r7, #8]
 8010140:	681b      	ldr	r3, [r3, #0]
 8010142:	e000      	b.n	8010146 <netif_do_set_gw+0x28>
 8010144:	2300      	movs	r3, #0
 8010146:	68fa      	ldr	r2, [r7, #12]
 8010148:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 801014a:	2301      	movs	r3, #1
 801014c:	e000      	b.n	8010150 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 801014e:	2300      	movs	r3, #0
}
 8010150:	4618      	mov	r0, r3
 8010152:	3714      	adds	r7, #20
 8010154:	46bd      	mov	sp, r7
 8010156:	f85d 7b04 	ldr.w	r7, [sp], #4
 801015a:	4770      	bx	lr

0801015c <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 801015c:	b580      	push	{r7, lr}
 801015e:	b088      	sub	sp, #32
 8010160:	af00      	add	r7, sp, #0
 8010162:	60f8      	str	r0, [r7, #12]
 8010164:	60b9      	str	r1, [r7, #8]
 8010166:	607a      	str	r2, [r7, #4]
 8010168:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 801016a:	2300      	movs	r3, #0
 801016c:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 801016e:	2300      	movs	r3, #0
 8010170:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8010172:	68bb      	ldr	r3, [r7, #8]
 8010174:	2b00      	cmp	r3, #0
 8010176:	d101      	bne.n	801017c <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8010178:	4b1c      	ldr	r3, [pc, #112]	; (80101ec <netif_set_addr+0x90>)
 801017a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 801017c:	687b      	ldr	r3, [r7, #4]
 801017e:	2b00      	cmp	r3, #0
 8010180:	d101      	bne.n	8010186 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8010182:	4b1a      	ldr	r3, [pc, #104]	; (80101ec <netif_set_addr+0x90>)
 8010184:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8010186:	683b      	ldr	r3, [r7, #0]
 8010188:	2b00      	cmp	r3, #0
 801018a:	d101      	bne.n	8010190 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 801018c:	4b17      	ldr	r3, [pc, #92]	; (80101ec <netif_set_addr+0x90>)
 801018e:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8010190:	68bb      	ldr	r3, [r7, #8]
 8010192:	2b00      	cmp	r3, #0
 8010194:	d003      	beq.n	801019e <netif_set_addr+0x42>
 8010196:	68bb      	ldr	r3, [r7, #8]
 8010198:	681b      	ldr	r3, [r3, #0]
 801019a:	2b00      	cmp	r3, #0
 801019c:	d101      	bne.n	80101a2 <netif_set_addr+0x46>
 801019e:	2301      	movs	r3, #1
 80101a0:	e000      	b.n	80101a4 <netif_set_addr+0x48>
 80101a2:	2300      	movs	r3, #0
 80101a4:	617b      	str	r3, [r7, #20]
  if (remove) {
 80101a6:	697b      	ldr	r3, [r7, #20]
 80101a8:	2b00      	cmp	r3, #0
 80101aa:	d006      	beq.n	80101ba <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80101ac:	f107 0310 	add.w	r3, r7, #16
 80101b0:	461a      	mov	r2, r3
 80101b2:	68b9      	ldr	r1, [r7, #8]
 80101b4:	68f8      	ldr	r0, [r7, #12]
 80101b6:	f7ff ff49 	bl	801004c <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 80101ba:	69fa      	ldr	r2, [r7, #28]
 80101bc:	6879      	ldr	r1, [r7, #4]
 80101be:	68f8      	ldr	r0, [r7, #12]
 80101c0:	f7ff ff8e 	bl	80100e0 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 80101c4:	69ba      	ldr	r2, [r7, #24]
 80101c6:	6839      	ldr	r1, [r7, #0]
 80101c8:	68f8      	ldr	r0, [r7, #12]
 80101ca:	f7ff ffa8 	bl	801011e <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 80101ce:	697b      	ldr	r3, [r7, #20]
 80101d0:	2b00      	cmp	r3, #0
 80101d2:	d106      	bne.n	80101e2 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80101d4:	f107 0310 	add.w	r3, r7, #16
 80101d8:	461a      	mov	r2, r3
 80101da:	68b9      	ldr	r1, [r7, #8]
 80101dc:	68f8      	ldr	r0, [r7, #12]
 80101de:	f7ff ff35 	bl	801004c <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 80101e2:	bf00      	nop
 80101e4:	3720      	adds	r7, #32
 80101e6:	46bd      	mov	sp, r7
 80101e8:	bd80      	pop	{r7, pc}
 80101ea:	bf00      	nop
 80101ec:	0801ec44 	.word	0x0801ec44

080101f0 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 80101f0:	b480      	push	{r7}
 80101f2:	b083      	sub	sp, #12
 80101f4:	af00      	add	r7, sp, #0
 80101f6:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 80101f8:	4a04      	ldr	r2, [pc, #16]	; (801020c <netif_set_default+0x1c>)
 80101fa:	687b      	ldr	r3, [r7, #4]
 80101fc:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 80101fe:	bf00      	nop
 8010200:	370c      	adds	r7, #12
 8010202:	46bd      	mov	sp, r7
 8010204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010208:	4770      	bx	lr
 801020a:	bf00      	nop
 801020c:	20007084 	.word	0x20007084

08010210 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8010210:	b580      	push	{r7, lr}
 8010212:	b082      	sub	sp, #8
 8010214:	af00      	add	r7, sp, #0
 8010216:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8010218:	687b      	ldr	r3, [r7, #4]
 801021a:	2b00      	cmp	r3, #0
 801021c:	d107      	bne.n	801022e <netif_set_up+0x1e>
 801021e:	4b0f      	ldr	r3, [pc, #60]	; (801025c <netif_set_up+0x4c>)
 8010220:	f44f 7254 	mov.w	r2, #848	; 0x350
 8010224:	490e      	ldr	r1, [pc, #56]	; (8010260 <netif_set_up+0x50>)
 8010226:	480f      	ldr	r0, [pc, #60]	; (8010264 <netif_set_up+0x54>)
 8010228:	f009 fb2a 	bl	8019880 <iprintf>
 801022c:	e013      	b.n	8010256 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 801022e:	687b      	ldr	r3, [r7, #4]
 8010230:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010234:	f003 0301 	and.w	r3, r3, #1
 8010238:	2b00      	cmp	r3, #0
 801023a:	d10c      	bne.n	8010256 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 801023c:	687b      	ldr	r3, [r7, #4]
 801023e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010242:	f043 0301 	orr.w	r3, r3, #1
 8010246:	b2da      	uxtb	r2, r3
 8010248:	687b      	ldr	r3, [r7, #4]
 801024a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 801024e:	2103      	movs	r1, #3
 8010250:	6878      	ldr	r0, [r7, #4]
 8010252:	f000 f809 	bl	8010268 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8010256:	3708      	adds	r7, #8
 8010258:	46bd      	mov	sp, r7
 801025a:	bd80      	pop	{r7, pc}
 801025c:	0801c4cc 	.word	0x0801c4cc
 8010260:	0801c654 	.word	0x0801c654
 8010264:	0801c51c 	.word	0x0801c51c

08010268 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8010268:	b580      	push	{r7, lr}
 801026a:	b082      	sub	sp, #8
 801026c:	af00      	add	r7, sp, #0
 801026e:	6078      	str	r0, [r7, #4]
 8010270:	460b      	mov	r3, r1
 8010272:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8010274:	687b      	ldr	r3, [r7, #4]
 8010276:	2b00      	cmp	r3, #0
 8010278:	d106      	bne.n	8010288 <netif_issue_reports+0x20>
 801027a:	4b18      	ldr	r3, [pc, #96]	; (80102dc <netif_issue_reports+0x74>)
 801027c:	f240 326d 	movw	r2, #877	; 0x36d
 8010280:	4917      	ldr	r1, [pc, #92]	; (80102e0 <netif_issue_reports+0x78>)
 8010282:	4818      	ldr	r0, [pc, #96]	; (80102e4 <netif_issue_reports+0x7c>)
 8010284:	f009 fafc 	bl	8019880 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8010288:	687b      	ldr	r3, [r7, #4]
 801028a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801028e:	f003 0304 	and.w	r3, r3, #4
 8010292:	2b00      	cmp	r3, #0
 8010294:	d01e      	beq.n	80102d4 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8010296:	687b      	ldr	r3, [r7, #4]
 8010298:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801029c:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80102a0:	2b00      	cmp	r3, #0
 80102a2:	d017      	beq.n	80102d4 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80102a4:	78fb      	ldrb	r3, [r7, #3]
 80102a6:	f003 0301 	and.w	r3, r3, #1
 80102aa:	2b00      	cmp	r3, #0
 80102ac:	d013      	beq.n	80102d6 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80102ae:	687b      	ldr	r3, [r7, #4]
 80102b0:	3304      	adds	r3, #4
 80102b2:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80102b4:	2b00      	cmp	r3, #0
 80102b6:	d00e      	beq.n	80102d6 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 80102b8:	687b      	ldr	r3, [r7, #4]
 80102ba:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80102be:	f003 0308 	and.w	r3, r3, #8
 80102c2:	2b00      	cmp	r3, #0
 80102c4:	d007      	beq.n	80102d6 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 80102c6:	687b      	ldr	r3, [r7, #4]
 80102c8:	3304      	adds	r3, #4
 80102ca:	4619      	mov	r1, r3
 80102cc:	6878      	ldr	r0, [r7, #4]
 80102ce:	f007 f9eb 	bl	80176a8 <etharp_request>
 80102d2:	e000      	b.n	80102d6 <netif_issue_reports+0x6e>
    return;
 80102d4:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 80102d6:	3708      	adds	r7, #8
 80102d8:	46bd      	mov	sp, r7
 80102da:	bd80      	pop	{r7, pc}
 80102dc:	0801c4cc 	.word	0x0801c4cc
 80102e0:	0801c670 	.word	0x0801c670
 80102e4:	0801c51c 	.word	0x0801c51c

080102e8 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 80102e8:	b580      	push	{r7, lr}
 80102ea:	b082      	sub	sp, #8
 80102ec:	af00      	add	r7, sp, #0
 80102ee:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 80102f0:	687b      	ldr	r3, [r7, #4]
 80102f2:	2b00      	cmp	r3, #0
 80102f4:	d107      	bne.n	8010306 <netif_set_down+0x1e>
 80102f6:	4b12      	ldr	r3, [pc, #72]	; (8010340 <netif_set_down+0x58>)
 80102f8:	f240 329b 	movw	r2, #923	; 0x39b
 80102fc:	4911      	ldr	r1, [pc, #68]	; (8010344 <netif_set_down+0x5c>)
 80102fe:	4812      	ldr	r0, [pc, #72]	; (8010348 <netif_set_down+0x60>)
 8010300:	f009 fabe 	bl	8019880 <iprintf>
 8010304:	e019      	b.n	801033a <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8010306:	687b      	ldr	r3, [r7, #4]
 8010308:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801030c:	f003 0301 	and.w	r3, r3, #1
 8010310:	2b00      	cmp	r3, #0
 8010312:	d012      	beq.n	801033a <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8010314:	687b      	ldr	r3, [r7, #4]
 8010316:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801031a:	f023 0301 	bic.w	r3, r3, #1
 801031e:	b2da      	uxtb	r2, r3
 8010320:	687b      	ldr	r3, [r7, #4]
 8010322:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8010326:	687b      	ldr	r3, [r7, #4]
 8010328:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801032c:	f003 0308 	and.w	r3, r3, #8
 8010330:	2b00      	cmp	r3, #0
 8010332:	d002      	beq.n	801033a <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8010334:	6878      	ldr	r0, [r7, #4]
 8010336:	f006 fd75 	bl	8016e24 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 801033a:	3708      	adds	r7, #8
 801033c:	46bd      	mov	sp, r7
 801033e:	bd80      	pop	{r7, pc}
 8010340:	0801c4cc 	.word	0x0801c4cc
 8010344:	0801c694 	.word	0x0801c694
 8010348:	0801c51c 	.word	0x0801c51c

0801034c <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 801034c:	b580      	push	{r7, lr}
 801034e:	b082      	sub	sp, #8
 8010350:	af00      	add	r7, sp, #0
 8010352:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8010354:	687b      	ldr	r3, [r7, #4]
 8010356:	2b00      	cmp	r3, #0
 8010358:	d107      	bne.n	801036a <netif_set_link_up+0x1e>
 801035a:	4b13      	ldr	r3, [pc, #76]	; (80103a8 <netif_set_link_up+0x5c>)
 801035c:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 8010360:	4912      	ldr	r1, [pc, #72]	; (80103ac <netif_set_link_up+0x60>)
 8010362:	4813      	ldr	r0, [pc, #76]	; (80103b0 <netif_set_link_up+0x64>)
 8010364:	f009 fa8c 	bl	8019880 <iprintf>
 8010368:	e01b      	b.n	80103a2 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 801036a:	687b      	ldr	r3, [r7, #4]
 801036c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010370:	f003 0304 	and.w	r3, r3, #4
 8010374:	2b00      	cmp	r3, #0
 8010376:	d114      	bne.n	80103a2 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8010378:	687b      	ldr	r3, [r7, #4]
 801037a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801037e:	f043 0304 	orr.w	r3, r3, #4
 8010382:	b2da      	uxtb	r2, r3
 8010384:	687b      	ldr	r3, [r7, #4]
 8010386:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 801038a:	2103      	movs	r1, #3
 801038c:	6878      	ldr	r0, [r7, #4]
 801038e:	f7ff ff6b 	bl	8010268 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 8010392:	687b      	ldr	r3, [r7, #4]
 8010394:	69db      	ldr	r3, [r3, #28]
 8010396:	2b00      	cmp	r3, #0
 8010398:	d003      	beq.n	80103a2 <netif_set_link_up+0x56>
 801039a:	687b      	ldr	r3, [r7, #4]
 801039c:	69db      	ldr	r3, [r3, #28]
 801039e:	6878      	ldr	r0, [r7, #4]
 80103a0:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 80103a2:	3708      	adds	r7, #8
 80103a4:	46bd      	mov	sp, r7
 80103a6:	bd80      	pop	{r7, pc}
 80103a8:	0801c4cc 	.word	0x0801c4cc
 80103ac:	0801c6b4 	.word	0x0801c6b4
 80103b0:	0801c51c 	.word	0x0801c51c

080103b4 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 80103b4:	b580      	push	{r7, lr}
 80103b6:	b082      	sub	sp, #8
 80103b8:	af00      	add	r7, sp, #0
 80103ba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 80103bc:	687b      	ldr	r3, [r7, #4]
 80103be:	2b00      	cmp	r3, #0
 80103c0:	d107      	bne.n	80103d2 <netif_set_link_down+0x1e>
 80103c2:	4b11      	ldr	r3, [pc, #68]	; (8010408 <netif_set_link_down+0x54>)
 80103c4:	f240 4206 	movw	r2, #1030	; 0x406
 80103c8:	4910      	ldr	r1, [pc, #64]	; (801040c <netif_set_link_down+0x58>)
 80103ca:	4811      	ldr	r0, [pc, #68]	; (8010410 <netif_set_link_down+0x5c>)
 80103cc:	f009 fa58 	bl	8019880 <iprintf>
 80103d0:	e017      	b.n	8010402 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 80103d2:	687b      	ldr	r3, [r7, #4]
 80103d4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80103d8:	f003 0304 	and.w	r3, r3, #4
 80103dc:	2b00      	cmp	r3, #0
 80103de:	d010      	beq.n	8010402 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 80103e0:	687b      	ldr	r3, [r7, #4]
 80103e2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80103e6:	f023 0304 	bic.w	r3, r3, #4
 80103ea:	b2da      	uxtb	r2, r3
 80103ec:	687b      	ldr	r3, [r7, #4]
 80103ee:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 80103f2:	687b      	ldr	r3, [r7, #4]
 80103f4:	69db      	ldr	r3, [r3, #28]
 80103f6:	2b00      	cmp	r3, #0
 80103f8:	d003      	beq.n	8010402 <netif_set_link_down+0x4e>
 80103fa:	687b      	ldr	r3, [r7, #4]
 80103fc:	69db      	ldr	r3, [r3, #28]
 80103fe:	6878      	ldr	r0, [r7, #4]
 8010400:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8010402:	3708      	adds	r7, #8
 8010404:	46bd      	mov	sp, r7
 8010406:	bd80      	pop	{r7, pc}
 8010408:	0801c4cc 	.word	0x0801c4cc
 801040c:	0801c6d8 	.word	0x0801c6d8
 8010410:	0801c51c 	.word	0x0801c51c

08010414 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8010414:	b480      	push	{r7}
 8010416:	b083      	sub	sp, #12
 8010418:	af00      	add	r7, sp, #0
 801041a:	6078      	str	r0, [r7, #4]
 801041c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 801041e:	687b      	ldr	r3, [r7, #4]
 8010420:	2b00      	cmp	r3, #0
 8010422:	d002      	beq.n	801042a <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8010424:	687b      	ldr	r3, [r7, #4]
 8010426:	683a      	ldr	r2, [r7, #0]
 8010428:	61da      	str	r2, [r3, #28]
  }
}
 801042a:	bf00      	nop
 801042c:	370c      	adds	r7, #12
 801042e:	46bd      	mov	sp, r7
 8010430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010434:	4770      	bx	lr

08010436 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8010436:	b480      	push	{r7}
 8010438:	b085      	sub	sp, #20
 801043a:	af00      	add	r7, sp, #0
 801043c:	60f8      	str	r0, [r7, #12]
 801043e:	60b9      	str	r1, [r7, #8]
 8010440:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8010442:	f06f 030b 	mvn.w	r3, #11
}
 8010446:	4618      	mov	r0, r3
 8010448:	3714      	adds	r7, #20
 801044a:	46bd      	mov	sp, r7
 801044c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010450:	4770      	bx	lr
	...

08010454 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8010454:	b480      	push	{r7}
 8010456:	b085      	sub	sp, #20
 8010458:	af00      	add	r7, sp, #0
 801045a:	4603      	mov	r3, r0
 801045c:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 801045e:	79fb      	ldrb	r3, [r7, #7]
 8010460:	2b00      	cmp	r3, #0
 8010462:	d013      	beq.n	801048c <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8010464:	4b0d      	ldr	r3, [pc, #52]	; (801049c <netif_get_by_index+0x48>)
 8010466:	681b      	ldr	r3, [r3, #0]
 8010468:	60fb      	str	r3, [r7, #12]
 801046a:	e00c      	b.n	8010486 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 801046c:	68fb      	ldr	r3, [r7, #12]
 801046e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010472:	3301      	adds	r3, #1
 8010474:	b2db      	uxtb	r3, r3
 8010476:	79fa      	ldrb	r2, [r7, #7]
 8010478:	429a      	cmp	r2, r3
 801047a:	d101      	bne.n	8010480 <netif_get_by_index+0x2c>
        return netif; /* found! */
 801047c:	68fb      	ldr	r3, [r7, #12]
 801047e:	e006      	b.n	801048e <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8010480:	68fb      	ldr	r3, [r7, #12]
 8010482:	681b      	ldr	r3, [r3, #0]
 8010484:	60fb      	str	r3, [r7, #12]
 8010486:	68fb      	ldr	r3, [r7, #12]
 8010488:	2b00      	cmp	r3, #0
 801048a:	d1ef      	bne.n	801046c <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 801048c:	2300      	movs	r3, #0
}
 801048e:	4618      	mov	r0, r3
 8010490:	3714      	adds	r7, #20
 8010492:	46bd      	mov	sp, r7
 8010494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010498:	4770      	bx	lr
 801049a:	bf00      	nop
 801049c:	20007080 	.word	0x20007080

080104a0 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 80104a0:	b480      	push	{r7}
 80104a2:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 80104a4:	4b03      	ldr	r3, [pc, #12]	; (80104b4 <pbuf_pool_is_empty+0x14>)
 80104a6:	2201      	movs	r2, #1
 80104a8:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 80104aa:	bf00      	nop
 80104ac:	46bd      	mov	sp, r7
 80104ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104b2:	4770      	bx	lr
 80104b4:	20007089 	.word	0x20007089

080104b8 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 80104b8:	b480      	push	{r7}
 80104ba:	b085      	sub	sp, #20
 80104bc:	af00      	add	r7, sp, #0
 80104be:	60f8      	str	r0, [r7, #12]
 80104c0:	60b9      	str	r1, [r7, #8]
 80104c2:	4611      	mov	r1, r2
 80104c4:	461a      	mov	r2, r3
 80104c6:	460b      	mov	r3, r1
 80104c8:	80fb      	strh	r3, [r7, #6]
 80104ca:	4613      	mov	r3, r2
 80104cc:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 80104ce:	68fb      	ldr	r3, [r7, #12]
 80104d0:	2200      	movs	r2, #0
 80104d2:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 80104d4:	68fb      	ldr	r3, [r7, #12]
 80104d6:	68ba      	ldr	r2, [r7, #8]
 80104d8:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 80104da:	68fb      	ldr	r3, [r7, #12]
 80104dc:	88fa      	ldrh	r2, [r7, #6]
 80104de:	811a      	strh	r2, [r3, #8]
  p->len = len;
 80104e0:	68fb      	ldr	r3, [r7, #12]
 80104e2:	88ba      	ldrh	r2, [r7, #4]
 80104e4:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 80104e6:	8b3b      	ldrh	r3, [r7, #24]
 80104e8:	b2da      	uxtb	r2, r3
 80104ea:	68fb      	ldr	r3, [r7, #12]
 80104ec:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 80104ee:	68fb      	ldr	r3, [r7, #12]
 80104f0:	7f3a      	ldrb	r2, [r7, #28]
 80104f2:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 80104f4:	68fb      	ldr	r3, [r7, #12]
 80104f6:	2201      	movs	r2, #1
 80104f8:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 80104fa:	68fb      	ldr	r3, [r7, #12]
 80104fc:	2200      	movs	r2, #0
 80104fe:	73da      	strb	r2, [r3, #15]
}
 8010500:	bf00      	nop
 8010502:	3714      	adds	r7, #20
 8010504:	46bd      	mov	sp, r7
 8010506:	f85d 7b04 	ldr.w	r7, [sp], #4
 801050a:	4770      	bx	lr

0801050c <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 801050c:	b580      	push	{r7, lr}
 801050e:	b08c      	sub	sp, #48	; 0x30
 8010510:	af02      	add	r7, sp, #8
 8010512:	4603      	mov	r3, r0
 8010514:	71fb      	strb	r3, [r7, #7]
 8010516:	460b      	mov	r3, r1
 8010518:	80bb      	strh	r3, [r7, #4]
 801051a:	4613      	mov	r3, r2
 801051c:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 801051e:	79fb      	ldrb	r3, [r7, #7]
 8010520:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8010522:	887b      	ldrh	r3, [r7, #2]
 8010524:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8010528:	f000 8082 	beq.w	8010630 <pbuf_alloc+0x124>
 801052c:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8010530:	f300 80c9 	bgt.w	80106c6 <pbuf_alloc+0x1ba>
 8010534:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8010538:	d010      	beq.n	801055c <pbuf_alloc+0x50>
 801053a:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 801053e:	f300 80c2 	bgt.w	80106c6 <pbuf_alloc+0x1ba>
 8010542:	2b01      	cmp	r3, #1
 8010544:	d002      	beq.n	801054c <pbuf_alloc+0x40>
 8010546:	2b41      	cmp	r3, #65	; 0x41
 8010548:	f040 80bd 	bne.w	80106c6 <pbuf_alloc+0x1ba>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 801054c:	887a      	ldrh	r2, [r7, #2]
 801054e:	88bb      	ldrh	r3, [r7, #4]
 8010550:	4619      	mov	r1, r3
 8010552:	2000      	movs	r0, #0
 8010554:	f000 f8d2 	bl	80106fc <pbuf_alloc_reference>
 8010558:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 801055a:	e0be      	b.n	80106da <pbuf_alloc+0x1ce>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 801055c:	2300      	movs	r3, #0
 801055e:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8010560:	2300      	movs	r3, #0
 8010562:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8010564:	88bb      	ldrh	r3, [r7, #4]
 8010566:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8010568:	2008      	movs	r0, #8
 801056a:	f7ff fbed 	bl	800fd48 <memp_malloc>
 801056e:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8010570:	693b      	ldr	r3, [r7, #16]
 8010572:	2b00      	cmp	r3, #0
 8010574:	d109      	bne.n	801058a <pbuf_alloc+0x7e>
          PBUF_POOL_IS_EMPTY();
 8010576:	f7ff ff93 	bl	80104a0 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 801057a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801057c:	2b00      	cmp	r3, #0
 801057e:	d002      	beq.n	8010586 <pbuf_alloc+0x7a>
            pbuf_free(p);
 8010580:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010582:	f000 faa7 	bl	8010ad4 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8010586:	2300      	movs	r3, #0
 8010588:	e0a8      	b.n	80106dc <pbuf_alloc+0x1d0>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 801058a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801058c:	3303      	adds	r3, #3
 801058e:	b29b      	uxth	r3, r3
 8010590:	f023 0303 	bic.w	r3, r3, #3
 8010594:	b29a      	uxth	r2, r3
 8010596:	f240 53ec 	movw	r3, #1516	; 0x5ec
 801059a:	1a9b      	subs	r3, r3, r2
 801059c:	b29b      	uxth	r3, r3
 801059e:	8b7a      	ldrh	r2, [r7, #26]
 80105a0:	4293      	cmp	r3, r2
 80105a2:	bf28      	it	cs
 80105a4:	4613      	movcs	r3, r2
 80105a6:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 80105a8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80105aa:	3310      	adds	r3, #16
 80105ac:	693a      	ldr	r2, [r7, #16]
 80105ae:	4413      	add	r3, r2
 80105b0:	3303      	adds	r3, #3
 80105b2:	f023 0303 	bic.w	r3, r3, #3
 80105b6:	4618      	mov	r0, r3
 80105b8:	89f9      	ldrh	r1, [r7, #14]
 80105ba:	8b7a      	ldrh	r2, [r7, #26]
 80105bc:	2300      	movs	r3, #0
 80105be:	9301      	str	r3, [sp, #4]
 80105c0:	887b      	ldrh	r3, [r7, #2]
 80105c2:	9300      	str	r3, [sp, #0]
 80105c4:	460b      	mov	r3, r1
 80105c6:	4601      	mov	r1, r0
 80105c8:	6938      	ldr	r0, [r7, #16]
 80105ca:	f7ff ff75 	bl	80104b8 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 80105ce:	693b      	ldr	r3, [r7, #16]
 80105d0:	685b      	ldr	r3, [r3, #4]
 80105d2:	f003 0303 	and.w	r3, r3, #3
 80105d6:	2b00      	cmp	r3, #0
 80105d8:	d006      	beq.n	80105e8 <pbuf_alloc+0xdc>
 80105da:	4b42      	ldr	r3, [pc, #264]	; (80106e4 <pbuf_alloc+0x1d8>)
 80105dc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80105e0:	4941      	ldr	r1, [pc, #260]	; (80106e8 <pbuf_alloc+0x1dc>)
 80105e2:	4842      	ldr	r0, [pc, #264]	; (80106ec <pbuf_alloc+0x1e0>)
 80105e4:	f009 f94c 	bl	8019880 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 80105e8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80105ea:	3303      	adds	r3, #3
 80105ec:	f023 0303 	bic.w	r3, r3, #3
 80105f0:	f240 52ec 	movw	r2, #1516	; 0x5ec
 80105f4:	4293      	cmp	r3, r2
 80105f6:	d106      	bne.n	8010606 <pbuf_alloc+0xfa>
 80105f8:	4b3a      	ldr	r3, [pc, #232]	; (80106e4 <pbuf_alloc+0x1d8>)
 80105fa:	f44f 7281 	mov.w	r2, #258	; 0x102
 80105fe:	493c      	ldr	r1, [pc, #240]	; (80106f0 <pbuf_alloc+0x1e4>)
 8010600:	483a      	ldr	r0, [pc, #232]	; (80106ec <pbuf_alloc+0x1e0>)
 8010602:	f009 f93d 	bl	8019880 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8010606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010608:	2b00      	cmp	r3, #0
 801060a:	d102      	bne.n	8010612 <pbuf_alloc+0x106>
          /* allocated head of pbuf chain (into p) */
          p = q;
 801060c:	693b      	ldr	r3, [r7, #16]
 801060e:	627b      	str	r3, [r7, #36]	; 0x24
 8010610:	e002      	b.n	8010618 <pbuf_alloc+0x10c>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8010612:	69fb      	ldr	r3, [r7, #28]
 8010614:	693a      	ldr	r2, [r7, #16]
 8010616:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8010618:	693b      	ldr	r3, [r7, #16]
 801061a:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 801061c:	8b7a      	ldrh	r2, [r7, #26]
 801061e:	89fb      	ldrh	r3, [r7, #14]
 8010620:	1ad3      	subs	r3, r2, r3
 8010622:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8010624:	2300      	movs	r3, #0
 8010626:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8010628:	8b7b      	ldrh	r3, [r7, #26]
 801062a:	2b00      	cmp	r3, #0
 801062c:	d19c      	bne.n	8010568 <pbuf_alloc+0x5c>
      break;
 801062e:	e054      	b.n	80106da <pbuf_alloc+0x1ce>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8010630:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010632:	3303      	adds	r3, #3
 8010634:	b29b      	uxth	r3, r3
 8010636:	f023 0303 	bic.w	r3, r3, #3
 801063a:	b29a      	uxth	r2, r3
 801063c:	88bb      	ldrh	r3, [r7, #4]
 801063e:	3303      	adds	r3, #3
 8010640:	b29b      	uxth	r3, r3
 8010642:	f023 0303 	bic.w	r3, r3, #3
 8010646:	b29b      	uxth	r3, r3
 8010648:	4413      	add	r3, r2
 801064a:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 801064c:	8b3b      	ldrh	r3, [r7, #24]
 801064e:	3310      	adds	r3, #16
 8010650:	617b      	str	r3, [r7, #20]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8010652:	8b3a      	ldrh	r2, [r7, #24]
 8010654:	88bb      	ldrh	r3, [r7, #4]
 8010656:	3303      	adds	r3, #3
 8010658:	f023 0303 	bic.w	r3, r3, #3
 801065c:	429a      	cmp	r2, r3
 801065e:	d306      	bcc.n	801066e <pbuf_alloc+0x162>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8010660:	88bb      	ldrh	r3, [r7, #4]
 8010662:	3303      	adds	r3, #3
 8010664:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8010668:	697a      	ldr	r2, [r7, #20]
 801066a:	429a      	cmp	r2, r3
 801066c:	d201      	bcs.n	8010672 <pbuf_alloc+0x166>
        return NULL;
 801066e:	2300      	movs	r3, #0
 8010670:	e034      	b.n	80106dc <pbuf_alloc+0x1d0>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8010672:	6978      	ldr	r0, [r7, #20]
 8010674:	f7ff f9e0 	bl	800fa38 <mem_malloc>
 8010678:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 801067a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801067c:	2b00      	cmp	r3, #0
 801067e:	d101      	bne.n	8010684 <pbuf_alloc+0x178>
        return NULL;
 8010680:	2300      	movs	r3, #0
 8010682:	e02b      	b.n	80106dc <pbuf_alloc+0x1d0>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8010684:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010686:	3310      	adds	r3, #16
 8010688:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801068a:	4413      	add	r3, r2
 801068c:	3303      	adds	r3, #3
 801068e:	f023 0303 	bic.w	r3, r3, #3
 8010692:	4618      	mov	r0, r3
 8010694:	88b9      	ldrh	r1, [r7, #4]
 8010696:	88ba      	ldrh	r2, [r7, #4]
 8010698:	2300      	movs	r3, #0
 801069a:	9301      	str	r3, [sp, #4]
 801069c:	887b      	ldrh	r3, [r7, #2]
 801069e:	9300      	str	r3, [sp, #0]
 80106a0:	460b      	mov	r3, r1
 80106a2:	4601      	mov	r1, r0
 80106a4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80106a6:	f7ff ff07 	bl	80104b8 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 80106aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106ac:	685b      	ldr	r3, [r3, #4]
 80106ae:	f003 0303 	and.w	r3, r3, #3
 80106b2:	2b00      	cmp	r3, #0
 80106b4:	d010      	beq.n	80106d8 <pbuf_alloc+0x1cc>
 80106b6:	4b0b      	ldr	r3, [pc, #44]	; (80106e4 <pbuf_alloc+0x1d8>)
 80106b8:	f44f 7291 	mov.w	r2, #290	; 0x122
 80106bc:	490d      	ldr	r1, [pc, #52]	; (80106f4 <pbuf_alloc+0x1e8>)
 80106be:	480b      	ldr	r0, [pc, #44]	; (80106ec <pbuf_alloc+0x1e0>)
 80106c0:	f009 f8de 	bl	8019880 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 80106c4:	e008      	b.n	80106d8 <pbuf_alloc+0x1cc>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 80106c6:	4b07      	ldr	r3, [pc, #28]	; (80106e4 <pbuf_alloc+0x1d8>)
 80106c8:	f240 1227 	movw	r2, #295	; 0x127
 80106cc:	490a      	ldr	r1, [pc, #40]	; (80106f8 <pbuf_alloc+0x1ec>)
 80106ce:	4807      	ldr	r0, [pc, #28]	; (80106ec <pbuf_alloc+0x1e0>)
 80106d0:	f009 f8d6 	bl	8019880 <iprintf>
      return NULL;
 80106d4:	2300      	movs	r3, #0
 80106d6:	e001      	b.n	80106dc <pbuf_alloc+0x1d0>
      break;
 80106d8:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 80106da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80106dc:	4618      	mov	r0, r3
 80106de:	3728      	adds	r7, #40	; 0x28
 80106e0:	46bd      	mov	sp, r7
 80106e2:	bd80      	pop	{r7, pc}
 80106e4:	0801c6fc 	.word	0x0801c6fc
 80106e8:	0801c72c 	.word	0x0801c72c
 80106ec:	0801c75c 	.word	0x0801c75c
 80106f0:	0801c784 	.word	0x0801c784
 80106f4:	0801c7b8 	.word	0x0801c7b8
 80106f8:	0801c7e4 	.word	0x0801c7e4

080106fc <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 80106fc:	b580      	push	{r7, lr}
 80106fe:	b086      	sub	sp, #24
 8010700:	af02      	add	r7, sp, #8
 8010702:	6078      	str	r0, [r7, #4]
 8010704:	460b      	mov	r3, r1
 8010706:	807b      	strh	r3, [r7, #2]
 8010708:	4613      	mov	r3, r2
 801070a:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 801070c:	883b      	ldrh	r3, [r7, #0]
 801070e:	2b41      	cmp	r3, #65	; 0x41
 8010710:	d009      	beq.n	8010726 <pbuf_alloc_reference+0x2a>
 8010712:	883b      	ldrh	r3, [r7, #0]
 8010714:	2b01      	cmp	r3, #1
 8010716:	d006      	beq.n	8010726 <pbuf_alloc_reference+0x2a>
 8010718:	4b0f      	ldr	r3, [pc, #60]	; (8010758 <pbuf_alloc_reference+0x5c>)
 801071a:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 801071e:	490f      	ldr	r1, [pc, #60]	; (801075c <pbuf_alloc_reference+0x60>)
 8010720:	480f      	ldr	r0, [pc, #60]	; (8010760 <pbuf_alloc_reference+0x64>)
 8010722:	f009 f8ad 	bl	8019880 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8010726:	2007      	movs	r0, #7
 8010728:	f7ff fb0e 	bl	800fd48 <memp_malloc>
 801072c:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 801072e:	68fb      	ldr	r3, [r7, #12]
 8010730:	2b00      	cmp	r3, #0
 8010732:	d101      	bne.n	8010738 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8010734:	2300      	movs	r3, #0
 8010736:	e00b      	b.n	8010750 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8010738:	8879      	ldrh	r1, [r7, #2]
 801073a:	887a      	ldrh	r2, [r7, #2]
 801073c:	2300      	movs	r3, #0
 801073e:	9301      	str	r3, [sp, #4]
 8010740:	883b      	ldrh	r3, [r7, #0]
 8010742:	9300      	str	r3, [sp, #0]
 8010744:	460b      	mov	r3, r1
 8010746:	6879      	ldr	r1, [r7, #4]
 8010748:	68f8      	ldr	r0, [r7, #12]
 801074a:	f7ff feb5 	bl	80104b8 <pbuf_init_alloced_pbuf>
  return p;
 801074e:	68fb      	ldr	r3, [r7, #12]
}
 8010750:	4618      	mov	r0, r3
 8010752:	3710      	adds	r7, #16
 8010754:	46bd      	mov	sp, r7
 8010756:	bd80      	pop	{r7, pc}
 8010758:	0801c6fc 	.word	0x0801c6fc
 801075c:	0801c800 	.word	0x0801c800
 8010760:	0801c75c 	.word	0x0801c75c

08010764 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8010764:	b580      	push	{r7, lr}
 8010766:	b088      	sub	sp, #32
 8010768:	af02      	add	r7, sp, #8
 801076a:	607b      	str	r3, [r7, #4]
 801076c:	4603      	mov	r3, r0
 801076e:	73fb      	strb	r3, [r7, #15]
 8010770:	460b      	mov	r3, r1
 8010772:	81bb      	strh	r3, [r7, #12]
 8010774:	4613      	mov	r3, r2
 8010776:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8010778:	7bfb      	ldrb	r3, [r7, #15]
 801077a:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 801077c:	8a7b      	ldrh	r3, [r7, #18]
 801077e:	3303      	adds	r3, #3
 8010780:	f023 0203 	bic.w	r2, r3, #3
 8010784:	89bb      	ldrh	r3, [r7, #12]
 8010786:	441a      	add	r2, r3
 8010788:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801078a:	429a      	cmp	r2, r3
 801078c:	d901      	bls.n	8010792 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 801078e:	2300      	movs	r3, #0
 8010790:	e018      	b.n	80107c4 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8010792:	6a3b      	ldr	r3, [r7, #32]
 8010794:	2b00      	cmp	r3, #0
 8010796:	d007      	beq.n	80107a8 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8010798:	8a7b      	ldrh	r3, [r7, #18]
 801079a:	3303      	adds	r3, #3
 801079c:	f023 0303 	bic.w	r3, r3, #3
 80107a0:	6a3a      	ldr	r2, [r7, #32]
 80107a2:	4413      	add	r3, r2
 80107a4:	617b      	str	r3, [r7, #20]
 80107a6:	e001      	b.n	80107ac <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 80107a8:	2300      	movs	r3, #0
 80107aa:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 80107ac:	6878      	ldr	r0, [r7, #4]
 80107ae:	89b9      	ldrh	r1, [r7, #12]
 80107b0:	89ba      	ldrh	r2, [r7, #12]
 80107b2:	2302      	movs	r3, #2
 80107b4:	9301      	str	r3, [sp, #4]
 80107b6:	897b      	ldrh	r3, [r7, #10]
 80107b8:	9300      	str	r3, [sp, #0]
 80107ba:	460b      	mov	r3, r1
 80107bc:	6979      	ldr	r1, [r7, #20]
 80107be:	f7ff fe7b 	bl	80104b8 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 80107c2:	687b      	ldr	r3, [r7, #4]
}
 80107c4:	4618      	mov	r0, r3
 80107c6:	3718      	adds	r7, #24
 80107c8:	46bd      	mov	sp, r7
 80107ca:	bd80      	pop	{r7, pc}

080107cc <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 80107cc:	b580      	push	{r7, lr}
 80107ce:	b084      	sub	sp, #16
 80107d0:	af00      	add	r7, sp, #0
 80107d2:	6078      	str	r0, [r7, #4]
 80107d4:	460b      	mov	r3, r1
 80107d6:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 80107d8:	687b      	ldr	r3, [r7, #4]
 80107da:	2b00      	cmp	r3, #0
 80107dc:	d106      	bne.n	80107ec <pbuf_realloc+0x20>
 80107de:	4b39      	ldr	r3, [pc, #228]	; (80108c4 <pbuf_realloc+0xf8>)
 80107e0:	f44f 72cc 	mov.w	r2, #408	; 0x198
 80107e4:	4938      	ldr	r1, [pc, #224]	; (80108c8 <pbuf_realloc+0xfc>)
 80107e6:	4839      	ldr	r0, [pc, #228]	; (80108cc <pbuf_realloc+0x100>)
 80107e8:	f009 f84a 	bl	8019880 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 80107ec:	687b      	ldr	r3, [r7, #4]
 80107ee:	891b      	ldrh	r3, [r3, #8]
 80107f0:	887a      	ldrh	r2, [r7, #2]
 80107f2:	429a      	cmp	r2, r3
 80107f4:	d261      	bcs.n	80108ba <pbuf_realloc+0xee>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 80107f6:	687b      	ldr	r3, [r7, #4]
 80107f8:	891a      	ldrh	r2, [r3, #8]
 80107fa:	887b      	ldrh	r3, [r7, #2]
 80107fc:	1ad3      	subs	r3, r2, r3
 80107fe:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8010800:	887b      	ldrh	r3, [r7, #2]
 8010802:	817b      	strh	r3, [r7, #10]
  q = p;
 8010804:	687b      	ldr	r3, [r7, #4]
 8010806:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8010808:	e018      	b.n	801083c <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 801080a:	68fb      	ldr	r3, [r7, #12]
 801080c:	895b      	ldrh	r3, [r3, #10]
 801080e:	897a      	ldrh	r2, [r7, #10]
 8010810:	1ad3      	subs	r3, r2, r3
 8010812:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8010814:	68fb      	ldr	r3, [r7, #12]
 8010816:	891a      	ldrh	r2, [r3, #8]
 8010818:	893b      	ldrh	r3, [r7, #8]
 801081a:	1ad3      	subs	r3, r2, r3
 801081c:	b29a      	uxth	r2, r3
 801081e:	68fb      	ldr	r3, [r7, #12]
 8010820:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8010822:	68fb      	ldr	r3, [r7, #12]
 8010824:	681b      	ldr	r3, [r3, #0]
 8010826:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8010828:	68fb      	ldr	r3, [r7, #12]
 801082a:	2b00      	cmp	r3, #0
 801082c:	d106      	bne.n	801083c <pbuf_realloc+0x70>
 801082e:	4b25      	ldr	r3, [pc, #148]	; (80108c4 <pbuf_realloc+0xf8>)
 8010830:	f240 12af 	movw	r2, #431	; 0x1af
 8010834:	4926      	ldr	r1, [pc, #152]	; (80108d0 <pbuf_realloc+0x104>)
 8010836:	4825      	ldr	r0, [pc, #148]	; (80108cc <pbuf_realloc+0x100>)
 8010838:	f009 f822 	bl	8019880 <iprintf>
  while (rem_len > q->len) {
 801083c:	68fb      	ldr	r3, [r7, #12]
 801083e:	895b      	ldrh	r3, [r3, #10]
 8010840:	897a      	ldrh	r2, [r7, #10]
 8010842:	429a      	cmp	r2, r3
 8010844:	d8e1      	bhi.n	801080a <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8010846:	68fb      	ldr	r3, [r7, #12]
 8010848:	7b1b      	ldrb	r3, [r3, #12]
 801084a:	f003 030f 	and.w	r3, r3, #15
 801084e:	2b00      	cmp	r3, #0
 8010850:	d11f      	bne.n	8010892 <pbuf_realloc+0xc6>
 8010852:	68fb      	ldr	r3, [r7, #12]
 8010854:	895b      	ldrh	r3, [r3, #10]
 8010856:	897a      	ldrh	r2, [r7, #10]
 8010858:	429a      	cmp	r2, r3
 801085a:	d01a      	beq.n	8010892 <pbuf_realloc+0xc6>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 801085c:	68fb      	ldr	r3, [r7, #12]
 801085e:	7b5b      	ldrb	r3, [r3, #13]
 8010860:	f003 0302 	and.w	r3, r3, #2
 8010864:	2b00      	cmp	r3, #0
 8010866:	d114      	bne.n	8010892 <pbuf_realloc+0xc6>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8010868:	68fb      	ldr	r3, [r7, #12]
 801086a:	685a      	ldr	r2, [r3, #4]
 801086c:	68fb      	ldr	r3, [r7, #12]
 801086e:	1ad2      	subs	r2, r2, r3
 8010870:	897b      	ldrh	r3, [r7, #10]
 8010872:	4413      	add	r3, r2
 8010874:	4619      	mov	r1, r3
 8010876:	68f8      	ldr	r0, [r7, #12]
 8010878:	f7fe ffea 	bl	800f850 <mem_trim>
 801087c:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 801087e:	68fb      	ldr	r3, [r7, #12]
 8010880:	2b00      	cmp	r3, #0
 8010882:	d106      	bne.n	8010892 <pbuf_realloc+0xc6>
 8010884:	4b0f      	ldr	r3, [pc, #60]	; (80108c4 <pbuf_realloc+0xf8>)
 8010886:	f240 12bd 	movw	r2, #445	; 0x1bd
 801088a:	4912      	ldr	r1, [pc, #72]	; (80108d4 <pbuf_realloc+0x108>)
 801088c:	480f      	ldr	r0, [pc, #60]	; (80108cc <pbuf_realloc+0x100>)
 801088e:	f008 fff7 	bl	8019880 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8010892:	68fb      	ldr	r3, [r7, #12]
 8010894:	897a      	ldrh	r2, [r7, #10]
 8010896:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8010898:	68fb      	ldr	r3, [r7, #12]
 801089a:	895a      	ldrh	r2, [r3, #10]
 801089c:	68fb      	ldr	r3, [r7, #12]
 801089e:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 80108a0:	68fb      	ldr	r3, [r7, #12]
 80108a2:	681b      	ldr	r3, [r3, #0]
 80108a4:	2b00      	cmp	r3, #0
 80108a6:	d004      	beq.n	80108b2 <pbuf_realloc+0xe6>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 80108a8:	68fb      	ldr	r3, [r7, #12]
 80108aa:	681b      	ldr	r3, [r3, #0]
 80108ac:	4618      	mov	r0, r3
 80108ae:	f000 f911 	bl	8010ad4 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 80108b2:	68fb      	ldr	r3, [r7, #12]
 80108b4:	2200      	movs	r2, #0
 80108b6:	601a      	str	r2, [r3, #0]
 80108b8:	e000      	b.n	80108bc <pbuf_realloc+0xf0>
    return;
 80108ba:	bf00      	nop

}
 80108bc:	3710      	adds	r7, #16
 80108be:	46bd      	mov	sp, r7
 80108c0:	bd80      	pop	{r7, pc}
 80108c2:	bf00      	nop
 80108c4:	0801c6fc 	.word	0x0801c6fc
 80108c8:	0801c814 	.word	0x0801c814
 80108cc:	0801c75c 	.word	0x0801c75c
 80108d0:	0801c82c 	.word	0x0801c82c
 80108d4:	0801c844 	.word	0x0801c844

080108d8 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 80108d8:	b580      	push	{r7, lr}
 80108da:	b086      	sub	sp, #24
 80108dc:	af00      	add	r7, sp, #0
 80108de:	60f8      	str	r0, [r7, #12]
 80108e0:	60b9      	str	r1, [r7, #8]
 80108e2:	4613      	mov	r3, r2
 80108e4:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80108e6:	68fb      	ldr	r3, [r7, #12]
 80108e8:	2b00      	cmp	r3, #0
 80108ea:	d106      	bne.n	80108fa <pbuf_add_header_impl+0x22>
 80108ec:	4b2b      	ldr	r3, [pc, #172]	; (801099c <pbuf_add_header_impl+0xc4>)
 80108ee:	f240 12df 	movw	r2, #479	; 0x1df
 80108f2:	492b      	ldr	r1, [pc, #172]	; (80109a0 <pbuf_add_header_impl+0xc8>)
 80108f4:	482b      	ldr	r0, [pc, #172]	; (80109a4 <pbuf_add_header_impl+0xcc>)
 80108f6:	f008 ffc3 	bl	8019880 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 80108fa:	68fb      	ldr	r3, [r7, #12]
 80108fc:	2b00      	cmp	r3, #0
 80108fe:	d003      	beq.n	8010908 <pbuf_add_header_impl+0x30>
 8010900:	68bb      	ldr	r3, [r7, #8]
 8010902:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010906:	d301      	bcc.n	801090c <pbuf_add_header_impl+0x34>
    return 1;
 8010908:	2301      	movs	r3, #1
 801090a:	e043      	b.n	8010994 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 801090c:	68bb      	ldr	r3, [r7, #8]
 801090e:	2b00      	cmp	r3, #0
 8010910:	d101      	bne.n	8010916 <pbuf_add_header_impl+0x3e>
    return 0;
 8010912:	2300      	movs	r3, #0
 8010914:	e03e      	b.n	8010994 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8010916:	68bb      	ldr	r3, [r7, #8]
 8010918:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 801091a:	68fb      	ldr	r3, [r7, #12]
 801091c:	891a      	ldrh	r2, [r3, #8]
 801091e:	8a7b      	ldrh	r3, [r7, #18]
 8010920:	4413      	add	r3, r2
 8010922:	b29b      	uxth	r3, r3
 8010924:	8a7a      	ldrh	r2, [r7, #18]
 8010926:	429a      	cmp	r2, r3
 8010928:	d901      	bls.n	801092e <pbuf_add_header_impl+0x56>
    return 1;
 801092a:	2301      	movs	r3, #1
 801092c:	e032      	b.n	8010994 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 801092e:	68fb      	ldr	r3, [r7, #12]
 8010930:	7b1b      	ldrb	r3, [r3, #12]
 8010932:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8010934:	8a3b      	ldrh	r3, [r7, #16]
 8010936:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801093a:	2b00      	cmp	r3, #0
 801093c:	d00c      	beq.n	8010958 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 801093e:	68fb      	ldr	r3, [r7, #12]
 8010940:	685a      	ldr	r2, [r3, #4]
 8010942:	68bb      	ldr	r3, [r7, #8]
 8010944:	425b      	negs	r3, r3
 8010946:	4413      	add	r3, r2
 8010948:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 801094a:	68fb      	ldr	r3, [r7, #12]
 801094c:	3310      	adds	r3, #16
 801094e:	697a      	ldr	r2, [r7, #20]
 8010950:	429a      	cmp	r2, r3
 8010952:	d20d      	bcs.n	8010970 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8010954:	2301      	movs	r3, #1
 8010956:	e01d      	b.n	8010994 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8010958:	79fb      	ldrb	r3, [r7, #7]
 801095a:	2b00      	cmp	r3, #0
 801095c:	d006      	beq.n	801096c <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 801095e:	68fb      	ldr	r3, [r7, #12]
 8010960:	685a      	ldr	r2, [r3, #4]
 8010962:	68bb      	ldr	r3, [r7, #8]
 8010964:	425b      	negs	r3, r3
 8010966:	4413      	add	r3, r2
 8010968:	617b      	str	r3, [r7, #20]
 801096a:	e001      	b.n	8010970 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 801096c:	2301      	movs	r3, #1
 801096e:	e011      	b.n	8010994 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8010970:	68fb      	ldr	r3, [r7, #12]
 8010972:	697a      	ldr	r2, [r7, #20]
 8010974:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8010976:	68fb      	ldr	r3, [r7, #12]
 8010978:	895a      	ldrh	r2, [r3, #10]
 801097a:	8a7b      	ldrh	r3, [r7, #18]
 801097c:	4413      	add	r3, r2
 801097e:	b29a      	uxth	r2, r3
 8010980:	68fb      	ldr	r3, [r7, #12]
 8010982:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8010984:	68fb      	ldr	r3, [r7, #12]
 8010986:	891a      	ldrh	r2, [r3, #8]
 8010988:	8a7b      	ldrh	r3, [r7, #18]
 801098a:	4413      	add	r3, r2
 801098c:	b29a      	uxth	r2, r3
 801098e:	68fb      	ldr	r3, [r7, #12]
 8010990:	811a      	strh	r2, [r3, #8]


  return 0;
 8010992:	2300      	movs	r3, #0
}
 8010994:	4618      	mov	r0, r3
 8010996:	3718      	adds	r7, #24
 8010998:	46bd      	mov	sp, r7
 801099a:	bd80      	pop	{r7, pc}
 801099c:	0801c6fc 	.word	0x0801c6fc
 80109a0:	0801c860 	.word	0x0801c860
 80109a4:	0801c75c 	.word	0x0801c75c

080109a8 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 80109a8:	b580      	push	{r7, lr}
 80109aa:	b082      	sub	sp, #8
 80109ac:	af00      	add	r7, sp, #0
 80109ae:	6078      	str	r0, [r7, #4]
 80109b0:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 80109b2:	2200      	movs	r2, #0
 80109b4:	6839      	ldr	r1, [r7, #0]
 80109b6:	6878      	ldr	r0, [r7, #4]
 80109b8:	f7ff ff8e 	bl	80108d8 <pbuf_add_header_impl>
 80109bc:	4603      	mov	r3, r0
}
 80109be:	4618      	mov	r0, r3
 80109c0:	3708      	adds	r7, #8
 80109c2:	46bd      	mov	sp, r7
 80109c4:	bd80      	pop	{r7, pc}
	...

080109c8 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 80109c8:	b580      	push	{r7, lr}
 80109ca:	b084      	sub	sp, #16
 80109cc:	af00      	add	r7, sp, #0
 80109ce:	6078      	str	r0, [r7, #4]
 80109d0:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80109d2:	687b      	ldr	r3, [r7, #4]
 80109d4:	2b00      	cmp	r3, #0
 80109d6:	d106      	bne.n	80109e6 <pbuf_remove_header+0x1e>
 80109d8:	4b20      	ldr	r3, [pc, #128]	; (8010a5c <pbuf_remove_header+0x94>)
 80109da:	f240 224b 	movw	r2, #587	; 0x24b
 80109de:	4920      	ldr	r1, [pc, #128]	; (8010a60 <pbuf_remove_header+0x98>)
 80109e0:	4820      	ldr	r0, [pc, #128]	; (8010a64 <pbuf_remove_header+0x9c>)
 80109e2:	f008 ff4d 	bl	8019880 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 80109e6:	687b      	ldr	r3, [r7, #4]
 80109e8:	2b00      	cmp	r3, #0
 80109ea:	d003      	beq.n	80109f4 <pbuf_remove_header+0x2c>
 80109ec:	683b      	ldr	r3, [r7, #0]
 80109ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80109f2:	d301      	bcc.n	80109f8 <pbuf_remove_header+0x30>
    return 1;
 80109f4:	2301      	movs	r3, #1
 80109f6:	e02c      	b.n	8010a52 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 80109f8:	683b      	ldr	r3, [r7, #0]
 80109fa:	2b00      	cmp	r3, #0
 80109fc:	d101      	bne.n	8010a02 <pbuf_remove_header+0x3a>
    return 0;
 80109fe:	2300      	movs	r3, #0
 8010a00:	e027      	b.n	8010a52 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8010a02:	683b      	ldr	r3, [r7, #0]
 8010a04:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8010a06:	687b      	ldr	r3, [r7, #4]
 8010a08:	895b      	ldrh	r3, [r3, #10]
 8010a0a:	89fa      	ldrh	r2, [r7, #14]
 8010a0c:	429a      	cmp	r2, r3
 8010a0e:	d908      	bls.n	8010a22 <pbuf_remove_header+0x5a>
 8010a10:	4b12      	ldr	r3, [pc, #72]	; (8010a5c <pbuf_remove_header+0x94>)
 8010a12:	f240 2255 	movw	r2, #597	; 0x255
 8010a16:	4914      	ldr	r1, [pc, #80]	; (8010a68 <pbuf_remove_header+0xa0>)
 8010a18:	4812      	ldr	r0, [pc, #72]	; (8010a64 <pbuf_remove_header+0x9c>)
 8010a1a:	f008 ff31 	bl	8019880 <iprintf>
 8010a1e:	2301      	movs	r3, #1
 8010a20:	e017      	b.n	8010a52 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8010a22:	687b      	ldr	r3, [r7, #4]
 8010a24:	685b      	ldr	r3, [r3, #4]
 8010a26:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8010a28:	687b      	ldr	r3, [r7, #4]
 8010a2a:	685a      	ldr	r2, [r3, #4]
 8010a2c:	683b      	ldr	r3, [r7, #0]
 8010a2e:	441a      	add	r2, r3
 8010a30:	687b      	ldr	r3, [r7, #4]
 8010a32:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8010a34:	687b      	ldr	r3, [r7, #4]
 8010a36:	895a      	ldrh	r2, [r3, #10]
 8010a38:	89fb      	ldrh	r3, [r7, #14]
 8010a3a:	1ad3      	subs	r3, r2, r3
 8010a3c:	b29a      	uxth	r2, r3
 8010a3e:	687b      	ldr	r3, [r7, #4]
 8010a40:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8010a42:	687b      	ldr	r3, [r7, #4]
 8010a44:	891a      	ldrh	r2, [r3, #8]
 8010a46:	89fb      	ldrh	r3, [r7, #14]
 8010a48:	1ad3      	subs	r3, r2, r3
 8010a4a:	b29a      	uxth	r2, r3
 8010a4c:	687b      	ldr	r3, [r7, #4]
 8010a4e:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8010a50:	2300      	movs	r3, #0
}
 8010a52:	4618      	mov	r0, r3
 8010a54:	3710      	adds	r7, #16
 8010a56:	46bd      	mov	sp, r7
 8010a58:	bd80      	pop	{r7, pc}
 8010a5a:	bf00      	nop
 8010a5c:	0801c6fc 	.word	0x0801c6fc
 8010a60:	0801c860 	.word	0x0801c860
 8010a64:	0801c75c 	.word	0x0801c75c
 8010a68:	0801c86c 	.word	0x0801c86c

08010a6c <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8010a6c:	b580      	push	{r7, lr}
 8010a6e:	b082      	sub	sp, #8
 8010a70:	af00      	add	r7, sp, #0
 8010a72:	6078      	str	r0, [r7, #4]
 8010a74:	460b      	mov	r3, r1
 8010a76:	807b      	strh	r3, [r7, #2]
 8010a78:	4613      	mov	r3, r2
 8010a7a:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8010a7c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010a80:	2b00      	cmp	r3, #0
 8010a82:	da08      	bge.n	8010a96 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8010a84:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010a88:	425b      	negs	r3, r3
 8010a8a:	4619      	mov	r1, r3
 8010a8c:	6878      	ldr	r0, [r7, #4]
 8010a8e:	f7ff ff9b 	bl	80109c8 <pbuf_remove_header>
 8010a92:	4603      	mov	r3, r0
 8010a94:	e007      	b.n	8010aa6 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8010a96:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010a9a:	787a      	ldrb	r2, [r7, #1]
 8010a9c:	4619      	mov	r1, r3
 8010a9e:	6878      	ldr	r0, [r7, #4]
 8010aa0:	f7ff ff1a 	bl	80108d8 <pbuf_add_header_impl>
 8010aa4:	4603      	mov	r3, r0
  }
}
 8010aa6:	4618      	mov	r0, r3
 8010aa8:	3708      	adds	r7, #8
 8010aaa:	46bd      	mov	sp, r7
 8010aac:	bd80      	pop	{r7, pc}

08010aae <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8010aae:	b580      	push	{r7, lr}
 8010ab0:	b082      	sub	sp, #8
 8010ab2:	af00      	add	r7, sp, #0
 8010ab4:	6078      	str	r0, [r7, #4]
 8010ab6:	460b      	mov	r3, r1
 8010ab8:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8010aba:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010abe:	2201      	movs	r2, #1
 8010ac0:	4619      	mov	r1, r3
 8010ac2:	6878      	ldr	r0, [r7, #4]
 8010ac4:	f7ff ffd2 	bl	8010a6c <pbuf_header_impl>
 8010ac8:	4603      	mov	r3, r0
}
 8010aca:	4618      	mov	r0, r3
 8010acc:	3708      	adds	r7, #8
 8010ace:	46bd      	mov	sp, r7
 8010ad0:	bd80      	pop	{r7, pc}
	...

08010ad4 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8010ad4:	b580      	push	{r7, lr}
 8010ad6:	b086      	sub	sp, #24
 8010ad8:	af00      	add	r7, sp, #0
 8010ada:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8010adc:	687b      	ldr	r3, [r7, #4]
 8010ade:	2b00      	cmp	r3, #0
 8010ae0:	d10b      	bne.n	8010afa <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8010ae2:	687b      	ldr	r3, [r7, #4]
 8010ae4:	2b00      	cmp	r3, #0
 8010ae6:	d106      	bne.n	8010af6 <pbuf_free+0x22>
 8010ae8:	4b38      	ldr	r3, [pc, #224]	; (8010bcc <pbuf_free+0xf8>)
 8010aea:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8010aee:	4938      	ldr	r1, [pc, #224]	; (8010bd0 <pbuf_free+0xfc>)
 8010af0:	4838      	ldr	r0, [pc, #224]	; (8010bd4 <pbuf_free+0x100>)
 8010af2:	f008 fec5 	bl	8019880 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8010af6:	2300      	movs	r3, #0
 8010af8:	e063      	b.n	8010bc2 <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8010afa:	2300      	movs	r3, #0
 8010afc:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8010afe:	e05c      	b.n	8010bba <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8010b00:	687b      	ldr	r3, [r7, #4]
 8010b02:	7b9b      	ldrb	r3, [r3, #14]
 8010b04:	2b00      	cmp	r3, #0
 8010b06:	d106      	bne.n	8010b16 <pbuf_free+0x42>
 8010b08:	4b30      	ldr	r3, [pc, #192]	; (8010bcc <pbuf_free+0xf8>)
 8010b0a:	f240 22f1 	movw	r2, #753	; 0x2f1
 8010b0e:	4932      	ldr	r1, [pc, #200]	; (8010bd8 <pbuf_free+0x104>)
 8010b10:	4830      	ldr	r0, [pc, #192]	; (8010bd4 <pbuf_free+0x100>)
 8010b12:	f008 feb5 	bl	8019880 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8010b16:	687b      	ldr	r3, [r7, #4]
 8010b18:	7b9b      	ldrb	r3, [r3, #14]
 8010b1a:	3b01      	subs	r3, #1
 8010b1c:	b2da      	uxtb	r2, r3
 8010b1e:	687b      	ldr	r3, [r7, #4]
 8010b20:	739a      	strb	r2, [r3, #14]
 8010b22:	687b      	ldr	r3, [r7, #4]
 8010b24:	7b9b      	ldrb	r3, [r3, #14]
 8010b26:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8010b28:	7dbb      	ldrb	r3, [r7, #22]
 8010b2a:	2b00      	cmp	r3, #0
 8010b2c:	d143      	bne.n	8010bb6 <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8010b2e:	687b      	ldr	r3, [r7, #4]
 8010b30:	681b      	ldr	r3, [r3, #0]
 8010b32:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8010b34:	687b      	ldr	r3, [r7, #4]
 8010b36:	7b1b      	ldrb	r3, [r3, #12]
 8010b38:	f003 030f 	and.w	r3, r3, #15
 8010b3c:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8010b3e:	687b      	ldr	r3, [r7, #4]
 8010b40:	7b5b      	ldrb	r3, [r3, #13]
 8010b42:	f003 0302 	and.w	r3, r3, #2
 8010b46:	2b00      	cmp	r3, #0
 8010b48:	d011      	beq.n	8010b6e <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8010b4a:	687b      	ldr	r3, [r7, #4]
 8010b4c:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8010b4e:	68bb      	ldr	r3, [r7, #8]
 8010b50:	691b      	ldr	r3, [r3, #16]
 8010b52:	2b00      	cmp	r3, #0
 8010b54:	d106      	bne.n	8010b64 <pbuf_free+0x90>
 8010b56:	4b1d      	ldr	r3, [pc, #116]	; (8010bcc <pbuf_free+0xf8>)
 8010b58:	f240 22ff 	movw	r2, #767	; 0x2ff
 8010b5c:	491f      	ldr	r1, [pc, #124]	; (8010bdc <pbuf_free+0x108>)
 8010b5e:	481d      	ldr	r0, [pc, #116]	; (8010bd4 <pbuf_free+0x100>)
 8010b60:	f008 fe8e 	bl	8019880 <iprintf>
        pc->custom_free_function(p);
 8010b64:	68bb      	ldr	r3, [r7, #8]
 8010b66:	691b      	ldr	r3, [r3, #16]
 8010b68:	6878      	ldr	r0, [r7, #4]
 8010b6a:	4798      	blx	r3
 8010b6c:	e01d      	b.n	8010baa <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8010b6e:	7bfb      	ldrb	r3, [r7, #15]
 8010b70:	2b02      	cmp	r3, #2
 8010b72:	d104      	bne.n	8010b7e <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 8010b74:	6879      	ldr	r1, [r7, #4]
 8010b76:	2008      	movs	r0, #8
 8010b78:	f7ff f956 	bl	800fe28 <memp_free>
 8010b7c:	e015      	b.n	8010baa <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8010b7e:	7bfb      	ldrb	r3, [r7, #15]
 8010b80:	2b01      	cmp	r3, #1
 8010b82:	d104      	bne.n	8010b8e <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 8010b84:	6879      	ldr	r1, [r7, #4]
 8010b86:	2007      	movs	r0, #7
 8010b88:	f7ff f94e 	bl	800fe28 <memp_free>
 8010b8c:	e00d      	b.n	8010baa <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8010b8e:	7bfb      	ldrb	r3, [r7, #15]
 8010b90:	2b00      	cmp	r3, #0
 8010b92:	d103      	bne.n	8010b9c <pbuf_free+0xc8>
          mem_free(p);
 8010b94:	6878      	ldr	r0, [r7, #4]
 8010b96:	f7fe fdf1 	bl	800f77c <mem_free>
 8010b9a:	e006      	b.n	8010baa <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8010b9c:	4b0b      	ldr	r3, [pc, #44]	; (8010bcc <pbuf_free+0xf8>)
 8010b9e:	f240 320f 	movw	r2, #783	; 0x30f
 8010ba2:	490f      	ldr	r1, [pc, #60]	; (8010be0 <pbuf_free+0x10c>)
 8010ba4:	480b      	ldr	r0, [pc, #44]	; (8010bd4 <pbuf_free+0x100>)
 8010ba6:	f008 fe6b 	bl	8019880 <iprintf>
        }
      }
      count++;
 8010baa:	7dfb      	ldrb	r3, [r7, #23]
 8010bac:	3301      	adds	r3, #1
 8010bae:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 8010bb0:	693b      	ldr	r3, [r7, #16]
 8010bb2:	607b      	str	r3, [r7, #4]
 8010bb4:	e001      	b.n	8010bba <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8010bb6:	2300      	movs	r3, #0
 8010bb8:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8010bba:	687b      	ldr	r3, [r7, #4]
 8010bbc:	2b00      	cmp	r3, #0
 8010bbe:	d19f      	bne.n	8010b00 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8010bc0:	7dfb      	ldrb	r3, [r7, #23]
}
 8010bc2:	4618      	mov	r0, r3
 8010bc4:	3718      	adds	r7, #24
 8010bc6:	46bd      	mov	sp, r7
 8010bc8:	bd80      	pop	{r7, pc}
 8010bca:	bf00      	nop
 8010bcc:	0801c6fc 	.word	0x0801c6fc
 8010bd0:	0801c860 	.word	0x0801c860
 8010bd4:	0801c75c 	.word	0x0801c75c
 8010bd8:	0801c88c 	.word	0x0801c88c
 8010bdc:	0801c8a4 	.word	0x0801c8a4
 8010be0:	0801c8c8 	.word	0x0801c8c8

08010be4 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8010be4:	b480      	push	{r7}
 8010be6:	b085      	sub	sp, #20
 8010be8:	af00      	add	r7, sp, #0
 8010bea:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8010bec:	2300      	movs	r3, #0
 8010bee:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8010bf0:	e005      	b.n	8010bfe <pbuf_clen+0x1a>
    ++len;
 8010bf2:	89fb      	ldrh	r3, [r7, #14]
 8010bf4:	3301      	adds	r3, #1
 8010bf6:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8010bf8:	687b      	ldr	r3, [r7, #4]
 8010bfa:	681b      	ldr	r3, [r3, #0]
 8010bfc:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8010bfe:	687b      	ldr	r3, [r7, #4]
 8010c00:	2b00      	cmp	r3, #0
 8010c02:	d1f6      	bne.n	8010bf2 <pbuf_clen+0xe>
  }
  return len;
 8010c04:	89fb      	ldrh	r3, [r7, #14]
}
 8010c06:	4618      	mov	r0, r3
 8010c08:	3714      	adds	r7, #20
 8010c0a:	46bd      	mov	sp, r7
 8010c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c10:	4770      	bx	lr
	...

08010c14 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8010c14:	b580      	push	{r7, lr}
 8010c16:	b082      	sub	sp, #8
 8010c18:	af00      	add	r7, sp, #0
 8010c1a:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8010c1c:	687b      	ldr	r3, [r7, #4]
 8010c1e:	2b00      	cmp	r3, #0
 8010c20:	d010      	beq.n	8010c44 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8010c22:	687b      	ldr	r3, [r7, #4]
 8010c24:	7b9b      	ldrb	r3, [r3, #14]
 8010c26:	3301      	adds	r3, #1
 8010c28:	b2da      	uxtb	r2, r3
 8010c2a:	687b      	ldr	r3, [r7, #4]
 8010c2c:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8010c2e:	687b      	ldr	r3, [r7, #4]
 8010c30:	7b9b      	ldrb	r3, [r3, #14]
 8010c32:	2b00      	cmp	r3, #0
 8010c34:	d106      	bne.n	8010c44 <pbuf_ref+0x30>
 8010c36:	4b05      	ldr	r3, [pc, #20]	; (8010c4c <pbuf_ref+0x38>)
 8010c38:	f240 3242 	movw	r2, #834	; 0x342
 8010c3c:	4904      	ldr	r1, [pc, #16]	; (8010c50 <pbuf_ref+0x3c>)
 8010c3e:	4805      	ldr	r0, [pc, #20]	; (8010c54 <pbuf_ref+0x40>)
 8010c40:	f008 fe1e 	bl	8019880 <iprintf>
  }
}
 8010c44:	bf00      	nop
 8010c46:	3708      	adds	r7, #8
 8010c48:	46bd      	mov	sp, r7
 8010c4a:	bd80      	pop	{r7, pc}
 8010c4c:	0801c6fc 	.word	0x0801c6fc
 8010c50:	0801c8dc 	.word	0x0801c8dc
 8010c54:	0801c75c 	.word	0x0801c75c

08010c58 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8010c58:	b580      	push	{r7, lr}
 8010c5a:	b084      	sub	sp, #16
 8010c5c:	af00      	add	r7, sp, #0
 8010c5e:	6078      	str	r0, [r7, #4]
 8010c60:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8010c62:	687b      	ldr	r3, [r7, #4]
 8010c64:	2b00      	cmp	r3, #0
 8010c66:	d002      	beq.n	8010c6e <pbuf_cat+0x16>
 8010c68:	683b      	ldr	r3, [r7, #0]
 8010c6a:	2b00      	cmp	r3, #0
 8010c6c:	d107      	bne.n	8010c7e <pbuf_cat+0x26>
 8010c6e:	4b20      	ldr	r3, [pc, #128]	; (8010cf0 <pbuf_cat+0x98>)
 8010c70:	f240 3259 	movw	r2, #857	; 0x359
 8010c74:	491f      	ldr	r1, [pc, #124]	; (8010cf4 <pbuf_cat+0x9c>)
 8010c76:	4820      	ldr	r0, [pc, #128]	; (8010cf8 <pbuf_cat+0xa0>)
 8010c78:	f008 fe02 	bl	8019880 <iprintf>
 8010c7c:	e034      	b.n	8010ce8 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8010c7e:	687b      	ldr	r3, [r7, #4]
 8010c80:	60fb      	str	r3, [r7, #12]
 8010c82:	e00a      	b.n	8010c9a <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8010c84:	68fb      	ldr	r3, [r7, #12]
 8010c86:	891a      	ldrh	r2, [r3, #8]
 8010c88:	683b      	ldr	r3, [r7, #0]
 8010c8a:	891b      	ldrh	r3, [r3, #8]
 8010c8c:	4413      	add	r3, r2
 8010c8e:	b29a      	uxth	r2, r3
 8010c90:	68fb      	ldr	r3, [r7, #12]
 8010c92:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8010c94:	68fb      	ldr	r3, [r7, #12]
 8010c96:	681b      	ldr	r3, [r3, #0]
 8010c98:	60fb      	str	r3, [r7, #12]
 8010c9a:	68fb      	ldr	r3, [r7, #12]
 8010c9c:	681b      	ldr	r3, [r3, #0]
 8010c9e:	2b00      	cmp	r3, #0
 8010ca0:	d1f0      	bne.n	8010c84 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8010ca2:	68fb      	ldr	r3, [r7, #12]
 8010ca4:	891a      	ldrh	r2, [r3, #8]
 8010ca6:	68fb      	ldr	r3, [r7, #12]
 8010ca8:	895b      	ldrh	r3, [r3, #10]
 8010caa:	429a      	cmp	r2, r3
 8010cac:	d006      	beq.n	8010cbc <pbuf_cat+0x64>
 8010cae:	4b10      	ldr	r3, [pc, #64]	; (8010cf0 <pbuf_cat+0x98>)
 8010cb0:	f240 3262 	movw	r2, #866	; 0x362
 8010cb4:	4911      	ldr	r1, [pc, #68]	; (8010cfc <pbuf_cat+0xa4>)
 8010cb6:	4810      	ldr	r0, [pc, #64]	; (8010cf8 <pbuf_cat+0xa0>)
 8010cb8:	f008 fde2 	bl	8019880 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8010cbc:	68fb      	ldr	r3, [r7, #12]
 8010cbe:	681b      	ldr	r3, [r3, #0]
 8010cc0:	2b00      	cmp	r3, #0
 8010cc2:	d006      	beq.n	8010cd2 <pbuf_cat+0x7a>
 8010cc4:	4b0a      	ldr	r3, [pc, #40]	; (8010cf0 <pbuf_cat+0x98>)
 8010cc6:	f240 3263 	movw	r2, #867	; 0x363
 8010cca:	490d      	ldr	r1, [pc, #52]	; (8010d00 <pbuf_cat+0xa8>)
 8010ccc:	480a      	ldr	r0, [pc, #40]	; (8010cf8 <pbuf_cat+0xa0>)
 8010cce:	f008 fdd7 	bl	8019880 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8010cd2:	68fb      	ldr	r3, [r7, #12]
 8010cd4:	891a      	ldrh	r2, [r3, #8]
 8010cd6:	683b      	ldr	r3, [r7, #0]
 8010cd8:	891b      	ldrh	r3, [r3, #8]
 8010cda:	4413      	add	r3, r2
 8010cdc:	b29a      	uxth	r2, r3
 8010cde:	68fb      	ldr	r3, [r7, #12]
 8010ce0:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8010ce2:	68fb      	ldr	r3, [r7, #12]
 8010ce4:	683a      	ldr	r2, [r7, #0]
 8010ce6:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8010ce8:	3710      	adds	r7, #16
 8010cea:	46bd      	mov	sp, r7
 8010cec:	bd80      	pop	{r7, pc}
 8010cee:	bf00      	nop
 8010cf0:	0801c6fc 	.word	0x0801c6fc
 8010cf4:	0801c8f0 	.word	0x0801c8f0
 8010cf8:	0801c75c 	.word	0x0801c75c
 8010cfc:	0801c928 	.word	0x0801c928
 8010d00:	0801c958 	.word	0x0801c958

08010d04 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8010d04:	b580      	push	{r7, lr}
 8010d06:	b086      	sub	sp, #24
 8010d08:	af00      	add	r7, sp, #0
 8010d0a:	6078      	str	r0, [r7, #4]
 8010d0c:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8010d0e:	2300      	movs	r3, #0
 8010d10:	617b      	str	r3, [r7, #20]
 8010d12:	2300      	movs	r3, #0
 8010d14:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8010d16:	687b      	ldr	r3, [r7, #4]
 8010d18:	2b00      	cmp	r3, #0
 8010d1a:	d008      	beq.n	8010d2e <pbuf_copy+0x2a>
 8010d1c:	683b      	ldr	r3, [r7, #0]
 8010d1e:	2b00      	cmp	r3, #0
 8010d20:	d005      	beq.n	8010d2e <pbuf_copy+0x2a>
 8010d22:	687b      	ldr	r3, [r7, #4]
 8010d24:	891a      	ldrh	r2, [r3, #8]
 8010d26:	683b      	ldr	r3, [r7, #0]
 8010d28:	891b      	ldrh	r3, [r3, #8]
 8010d2a:	429a      	cmp	r2, r3
 8010d2c:	d209      	bcs.n	8010d42 <pbuf_copy+0x3e>
 8010d2e:	4b57      	ldr	r3, [pc, #348]	; (8010e8c <pbuf_copy+0x188>)
 8010d30:	f240 32c9 	movw	r2, #969	; 0x3c9
 8010d34:	4956      	ldr	r1, [pc, #344]	; (8010e90 <pbuf_copy+0x18c>)
 8010d36:	4857      	ldr	r0, [pc, #348]	; (8010e94 <pbuf_copy+0x190>)
 8010d38:	f008 fda2 	bl	8019880 <iprintf>
 8010d3c:	f06f 030f 	mvn.w	r3, #15
 8010d40:	e09f      	b.n	8010e82 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8010d42:	687b      	ldr	r3, [r7, #4]
 8010d44:	895b      	ldrh	r3, [r3, #10]
 8010d46:	461a      	mov	r2, r3
 8010d48:	697b      	ldr	r3, [r7, #20]
 8010d4a:	1ad2      	subs	r2, r2, r3
 8010d4c:	683b      	ldr	r3, [r7, #0]
 8010d4e:	895b      	ldrh	r3, [r3, #10]
 8010d50:	4619      	mov	r1, r3
 8010d52:	693b      	ldr	r3, [r7, #16]
 8010d54:	1acb      	subs	r3, r1, r3
 8010d56:	429a      	cmp	r2, r3
 8010d58:	d306      	bcc.n	8010d68 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8010d5a:	683b      	ldr	r3, [r7, #0]
 8010d5c:	895b      	ldrh	r3, [r3, #10]
 8010d5e:	461a      	mov	r2, r3
 8010d60:	693b      	ldr	r3, [r7, #16]
 8010d62:	1ad3      	subs	r3, r2, r3
 8010d64:	60fb      	str	r3, [r7, #12]
 8010d66:	e005      	b.n	8010d74 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8010d68:	687b      	ldr	r3, [r7, #4]
 8010d6a:	895b      	ldrh	r3, [r3, #10]
 8010d6c:	461a      	mov	r2, r3
 8010d6e:	697b      	ldr	r3, [r7, #20]
 8010d70:	1ad3      	subs	r3, r2, r3
 8010d72:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8010d74:	687b      	ldr	r3, [r7, #4]
 8010d76:	685a      	ldr	r2, [r3, #4]
 8010d78:	697b      	ldr	r3, [r7, #20]
 8010d7a:	18d0      	adds	r0, r2, r3
 8010d7c:	683b      	ldr	r3, [r7, #0]
 8010d7e:	685a      	ldr	r2, [r3, #4]
 8010d80:	693b      	ldr	r3, [r7, #16]
 8010d82:	4413      	add	r3, r2
 8010d84:	68fa      	ldr	r2, [r7, #12]
 8010d86:	4619      	mov	r1, r3
 8010d88:	f008 ff49 	bl	8019c1e <memcpy>
    offset_to += len;
 8010d8c:	697a      	ldr	r2, [r7, #20]
 8010d8e:	68fb      	ldr	r3, [r7, #12]
 8010d90:	4413      	add	r3, r2
 8010d92:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8010d94:	693a      	ldr	r2, [r7, #16]
 8010d96:	68fb      	ldr	r3, [r7, #12]
 8010d98:	4413      	add	r3, r2
 8010d9a:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8010d9c:	687b      	ldr	r3, [r7, #4]
 8010d9e:	895b      	ldrh	r3, [r3, #10]
 8010da0:	461a      	mov	r2, r3
 8010da2:	697b      	ldr	r3, [r7, #20]
 8010da4:	4293      	cmp	r3, r2
 8010da6:	d906      	bls.n	8010db6 <pbuf_copy+0xb2>
 8010da8:	4b38      	ldr	r3, [pc, #224]	; (8010e8c <pbuf_copy+0x188>)
 8010daa:	f240 32d9 	movw	r2, #985	; 0x3d9
 8010dae:	493a      	ldr	r1, [pc, #232]	; (8010e98 <pbuf_copy+0x194>)
 8010db0:	4838      	ldr	r0, [pc, #224]	; (8010e94 <pbuf_copy+0x190>)
 8010db2:	f008 fd65 	bl	8019880 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8010db6:	683b      	ldr	r3, [r7, #0]
 8010db8:	895b      	ldrh	r3, [r3, #10]
 8010dba:	461a      	mov	r2, r3
 8010dbc:	693b      	ldr	r3, [r7, #16]
 8010dbe:	4293      	cmp	r3, r2
 8010dc0:	d906      	bls.n	8010dd0 <pbuf_copy+0xcc>
 8010dc2:	4b32      	ldr	r3, [pc, #200]	; (8010e8c <pbuf_copy+0x188>)
 8010dc4:	f240 32da 	movw	r2, #986	; 0x3da
 8010dc8:	4934      	ldr	r1, [pc, #208]	; (8010e9c <pbuf_copy+0x198>)
 8010dca:	4832      	ldr	r0, [pc, #200]	; (8010e94 <pbuf_copy+0x190>)
 8010dcc:	f008 fd58 	bl	8019880 <iprintf>
    if (offset_from >= p_from->len) {
 8010dd0:	683b      	ldr	r3, [r7, #0]
 8010dd2:	895b      	ldrh	r3, [r3, #10]
 8010dd4:	461a      	mov	r2, r3
 8010dd6:	693b      	ldr	r3, [r7, #16]
 8010dd8:	4293      	cmp	r3, r2
 8010dda:	d304      	bcc.n	8010de6 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8010ddc:	2300      	movs	r3, #0
 8010dde:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8010de0:	683b      	ldr	r3, [r7, #0]
 8010de2:	681b      	ldr	r3, [r3, #0]
 8010de4:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8010de6:	687b      	ldr	r3, [r7, #4]
 8010de8:	895b      	ldrh	r3, [r3, #10]
 8010dea:	461a      	mov	r2, r3
 8010dec:	697b      	ldr	r3, [r7, #20]
 8010dee:	4293      	cmp	r3, r2
 8010df0:	d114      	bne.n	8010e1c <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8010df2:	2300      	movs	r3, #0
 8010df4:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8010df6:	687b      	ldr	r3, [r7, #4]
 8010df8:	681b      	ldr	r3, [r3, #0]
 8010dfa:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8010dfc:	687b      	ldr	r3, [r7, #4]
 8010dfe:	2b00      	cmp	r3, #0
 8010e00:	d10c      	bne.n	8010e1c <pbuf_copy+0x118>
 8010e02:	683b      	ldr	r3, [r7, #0]
 8010e04:	2b00      	cmp	r3, #0
 8010e06:	d009      	beq.n	8010e1c <pbuf_copy+0x118>
 8010e08:	4b20      	ldr	r3, [pc, #128]	; (8010e8c <pbuf_copy+0x188>)
 8010e0a:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8010e0e:	4924      	ldr	r1, [pc, #144]	; (8010ea0 <pbuf_copy+0x19c>)
 8010e10:	4820      	ldr	r0, [pc, #128]	; (8010e94 <pbuf_copy+0x190>)
 8010e12:	f008 fd35 	bl	8019880 <iprintf>
 8010e16:	f06f 030f 	mvn.w	r3, #15
 8010e1a:	e032      	b.n	8010e82 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8010e1c:	683b      	ldr	r3, [r7, #0]
 8010e1e:	2b00      	cmp	r3, #0
 8010e20:	d013      	beq.n	8010e4a <pbuf_copy+0x146>
 8010e22:	683b      	ldr	r3, [r7, #0]
 8010e24:	895a      	ldrh	r2, [r3, #10]
 8010e26:	683b      	ldr	r3, [r7, #0]
 8010e28:	891b      	ldrh	r3, [r3, #8]
 8010e2a:	429a      	cmp	r2, r3
 8010e2c:	d10d      	bne.n	8010e4a <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8010e2e:	683b      	ldr	r3, [r7, #0]
 8010e30:	681b      	ldr	r3, [r3, #0]
 8010e32:	2b00      	cmp	r3, #0
 8010e34:	d009      	beq.n	8010e4a <pbuf_copy+0x146>
 8010e36:	4b15      	ldr	r3, [pc, #84]	; (8010e8c <pbuf_copy+0x188>)
 8010e38:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8010e3c:	4919      	ldr	r1, [pc, #100]	; (8010ea4 <pbuf_copy+0x1a0>)
 8010e3e:	4815      	ldr	r0, [pc, #84]	; (8010e94 <pbuf_copy+0x190>)
 8010e40:	f008 fd1e 	bl	8019880 <iprintf>
 8010e44:	f06f 0305 	mvn.w	r3, #5
 8010e48:	e01b      	b.n	8010e82 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8010e4a:	687b      	ldr	r3, [r7, #4]
 8010e4c:	2b00      	cmp	r3, #0
 8010e4e:	d013      	beq.n	8010e78 <pbuf_copy+0x174>
 8010e50:	687b      	ldr	r3, [r7, #4]
 8010e52:	895a      	ldrh	r2, [r3, #10]
 8010e54:	687b      	ldr	r3, [r7, #4]
 8010e56:	891b      	ldrh	r3, [r3, #8]
 8010e58:	429a      	cmp	r2, r3
 8010e5a:	d10d      	bne.n	8010e78 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8010e5c:	687b      	ldr	r3, [r7, #4]
 8010e5e:	681b      	ldr	r3, [r3, #0]
 8010e60:	2b00      	cmp	r3, #0
 8010e62:	d009      	beq.n	8010e78 <pbuf_copy+0x174>
 8010e64:	4b09      	ldr	r3, [pc, #36]	; (8010e8c <pbuf_copy+0x188>)
 8010e66:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8010e6a:	490e      	ldr	r1, [pc, #56]	; (8010ea4 <pbuf_copy+0x1a0>)
 8010e6c:	4809      	ldr	r0, [pc, #36]	; (8010e94 <pbuf_copy+0x190>)
 8010e6e:	f008 fd07 	bl	8019880 <iprintf>
 8010e72:	f06f 0305 	mvn.w	r3, #5
 8010e76:	e004      	b.n	8010e82 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8010e78:	683b      	ldr	r3, [r7, #0]
 8010e7a:	2b00      	cmp	r3, #0
 8010e7c:	f47f af61 	bne.w	8010d42 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8010e80:	2300      	movs	r3, #0
}
 8010e82:	4618      	mov	r0, r3
 8010e84:	3718      	adds	r7, #24
 8010e86:	46bd      	mov	sp, r7
 8010e88:	bd80      	pop	{r7, pc}
 8010e8a:	bf00      	nop
 8010e8c:	0801c6fc 	.word	0x0801c6fc
 8010e90:	0801c9a4 	.word	0x0801c9a4
 8010e94:	0801c75c 	.word	0x0801c75c
 8010e98:	0801c9d4 	.word	0x0801c9d4
 8010e9c:	0801c9ec 	.word	0x0801c9ec
 8010ea0:	0801ca08 	.word	0x0801ca08
 8010ea4:	0801ca18 	.word	0x0801ca18

08010ea8 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8010ea8:	b580      	push	{r7, lr}
 8010eaa:	b088      	sub	sp, #32
 8010eac:	af00      	add	r7, sp, #0
 8010eae:	60f8      	str	r0, [r7, #12]
 8010eb0:	60b9      	str	r1, [r7, #8]
 8010eb2:	4611      	mov	r1, r2
 8010eb4:	461a      	mov	r2, r3
 8010eb6:	460b      	mov	r3, r1
 8010eb8:	80fb      	strh	r3, [r7, #6]
 8010eba:	4613      	mov	r3, r2
 8010ebc:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8010ebe:	2300      	movs	r3, #0
 8010ec0:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8010ec2:	2300      	movs	r3, #0
 8010ec4:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8010ec6:	68fb      	ldr	r3, [r7, #12]
 8010ec8:	2b00      	cmp	r3, #0
 8010eca:	d108      	bne.n	8010ede <pbuf_copy_partial+0x36>
 8010ecc:	4b2b      	ldr	r3, [pc, #172]	; (8010f7c <pbuf_copy_partial+0xd4>)
 8010ece:	f240 420a 	movw	r2, #1034	; 0x40a
 8010ed2:	492b      	ldr	r1, [pc, #172]	; (8010f80 <pbuf_copy_partial+0xd8>)
 8010ed4:	482b      	ldr	r0, [pc, #172]	; (8010f84 <pbuf_copy_partial+0xdc>)
 8010ed6:	f008 fcd3 	bl	8019880 <iprintf>
 8010eda:	2300      	movs	r3, #0
 8010edc:	e04a      	b.n	8010f74 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8010ede:	68bb      	ldr	r3, [r7, #8]
 8010ee0:	2b00      	cmp	r3, #0
 8010ee2:	d108      	bne.n	8010ef6 <pbuf_copy_partial+0x4e>
 8010ee4:	4b25      	ldr	r3, [pc, #148]	; (8010f7c <pbuf_copy_partial+0xd4>)
 8010ee6:	f240 420b 	movw	r2, #1035	; 0x40b
 8010eea:	4927      	ldr	r1, [pc, #156]	; (8010f88 <pbuf_copy_partial+0xe0>)
 8010eec:	4825      	ldr	r0, [pc, #148]	; (8010f84 <pbuf_copy_partial+0xdc>)
 8010eee:	f008 fcc7 	bl	8019880 <iprintf>
 8010ef2:	2300      	movs	r3, #0
 8010ef4:	e03e      	b.n	8010f74 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8010ef6:	68fb      	ldr	r3, [r7, #12]
 8010ef8:	61fb      	str	r3, [r7, #28]
 8010efa:	e034      	b.n	8010f66 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8010efc:	88bb      	ldrh	r3, [r7, #4]
 8010efe:	2b00      	cmp	r3, #0
 8010f00:	d00a      	beq.n	8010f18 <pbuf_copy_partial+0x70>
 8010f02:	69fb      	ldr	r3, [r7, #28]
 8010f04:	895b      	ldrh	r3, [r3, #10]
 8010f06:	88ba      	ldrh	r2, [r7, #4]
 8010f08:	429a      	cmp	r2, r3
 8010f0a:	d305      	bcc.n	8010f18 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8010f0c:	69fb      	ldr	r3, [r7, #28]
 8010f0e:	895b      	ldrh	r3, [r3, #10]
 8010f10:	88ba      	ldrh	r2, [r7, #4]
 8010f12:	1ad3      	subs	r3, r2, r3
 8010f14:	80bb      	strh	r3, [r7, #4]
 8010f16:	e023      	b.n	8010f60 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8010f18:	69fb      	ldr	r3, [r7, #28]
 8010f1a:	895a      	ldrh	r2, [r3, #10]
 8010f1c:	88bb      	ldrh	r3, [r7, #4]
 8010f1e:	1ad3      	subs	r3, r2, r3
 8010f20:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8010f22:	8b3a      	ldrh	r2, [r7, #24]
 8010f24:	88fb      	ldrh	r3, [r7, #6]
 8010f26:	429a      	cmp	r2, r3
 8010f28:	d901      	bls.n	8010f2e <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8010f2a:	88fb      	ldrh	r3, [r7, #6]
 8010f2c:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8010f2e:	8b7b      	ldrh	r3, [r7, #26]
 8010f30:	68ba      	ldr	r2, [r7, #8]
 8010f32:	18d0      	adds	r0, r2, r3
 8010f34:	69fb      	ldr	r3, [r7, #28]
 8010f36:	685a      	ldr	r2, [r3, #4]
 8010f38:	88bb      	ldrh	r3, [r7, #4]
 8010f3a:	4413      	add	r3, r2
 8010f3c:	8b3a      	ldrh	r2, [r7, #24]
 8010f3e:	4619      	mov	r1, r3
 8010f40:	f008 fe6d 	bl	8019c1e <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8010f44:	8afa      	ldrh	r2, [r7, #22]
 8010f46:	8b3b      	ldrh	r3, [r7, #24]
 8010f48:	4413      	add	r3, r2
 8010f4a:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8010f4c:	8b7a      	ldrh	r2, [r7, #26]
 8010f4e:	8b3b      	ldrh	r3, [r7, #24]
 8010f50:	4413      	add	r3, r2
 8010f52:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8010f54:	88fa      	ldrh	r2, [r7, #6]
 8010f56:	8b3b      	ldrh	r3, [r7, #24]
 8010f58:	1ad3      	subs	r3, r2, r3
 8010f5a:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8010f5c:	2300      	movs	r3, #0
 8010f5e:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8010f60:	69fb      	ldr	r3, [r7, #28]
 8010f62:	681b      	ldr	r3, [r3, #0]
 8010f64:	61fb      	str	r3, [r7, #28]
 8010f66:	88fb      	ldrh	r3, [r7, #6]
 8010f68:	2b00      	cmp	r3, #0
 8010f6a:	d002      	beq.n	8010f72 <pbuf_copy_partial+0xca>
 8010f6c:	69fb      	ldr	r3, [r7, #28]
 8010f6e:	2b00      	cmp	r3, #0
 8010f70:	d1c4      	bne.n	8010efc <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8010f72:	8afb      	ldrh	r3, [r7, #22]
}
 8010f74:	4618      	mov	r0, r3
 8010f76:	3720      	adds	r7, #32
 8010f78:	46bd      	mov	sp, r7
 8010f7a:	bd80      	pop	{r7, pc}
 8010f7c:	0801c6fc 	.word	0x0801c6fc
 8010f80:	0801ca44 	.word	0x0801ca44
 8010f84:	0801c75c 	.word	0x0801c75c
 8010f88:	0801ca64 	.word	0x0801ca64

08010f8c <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8010f8c:	b580      	push	{r7, lr}
 8010f8e:	b084      	sub	sp, #16
 8010f90:	af00      	add	r7, sp, #0
 8010f92:	4603      	mov	r3, r0
 8010f94:	603a      	str	r2, [r7, #0]
 8010f96:	71fb      	strb	r3, [r7, #7]
 8010f98:	460b      	mov	r3, r1
 8010f9a:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8010f9c:	683b      	ldr	r3, [r7, #0]
 8010f9e:	8919      	ldrh	r1, [r3, #8]
 8010fa0:	88ba      	ldrh	r2, [r7, #4]
 8010fa2:	79fb      	ldrb	r3, [r7, #7]
 8010fa4:	4618      	mov	r0, r3
 8010fa6:	f7ff fab1 	bl	801050c <pbuf_alloc>
 8010faa:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8010fac:	68fb      	ldr	r3, [r7, #12]
 8010fae:	2b00      	cmp	r3, #0
 8010fb0:	d101      	bne.n	8010fb6 <pbuf_clone+0x2a>
    return NULL;
 8010fb2:	2300      	movs	r3, #0
 8010fb4:	e011      	b.n	8010fda <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8010fb6:	6839      	ldr	r1, [r7, #0]
 8010fb8:	68f8      	ldr	r0, [r7, #12]
 8010fba:	f7ff fea3 	bl	8010d04 <pbuf_copy>
 8010fbe:	4603      	mov	r3, r0
 8010fc0:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8010fc2:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8010fc6:	2b00      	cmp	r3, #0
 8010fc8:	d006      	beq.n	8010fd8 <pbuf_clone+0x4c>
 8010fca:	4b06      	ldr	r3, [pc, #24]	; (8010fe4 <pbuf_clone+0x58>)
 8010fcc:	f240 5224 	movw	r2, #1316	; 0x524
 8010fd0:	4905      	ldr	r1, [pc, #20]	; (8010fe8 <pbuf_clone+0x5c>)
 8010fd2:	4806      	ldr	r0, [pc, #24]	; (8010fec <pbuf_clone+0x60>)
 8010fd4:	f008 fc54 	bl	8019880 <iprintf>
  return q;
 8010fd8:	68fb      	ldr	r3, [r7, #12]
}
 8010fda:	4618      	mov	r0, r3
 8010fdc:	3710      	adds	r7, #16
 8010fde:	46bd      	mov	sp, r7
 8010fe0:	bd80      	pop	{r7, pc}
 8010fe2:	bf00      	nop
 8010fe4:	0801c6fc 	.word	0x0801c6fc
 8010fe8:	0801cb70 	.word	0x0801cb70
 8010fec:	0801c75c 	.word	0x0801c75c

08010ff0 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8010ff0:	b580      	push	{r7, lr}
 8010ff2:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8010ff4:	f007 ff0a 	bl	8018e0c <rand>
 8010ff8:	4603      	mov	r3, r0
 8010ffa:	b29b      	uxth	r3, r3
 8010ffc:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8011000:	b29b      	uxth	r3, r3
 8011002:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8011006:	b29a      	uxth	r2, r3
 8011008:	4b01      	ldr	r3, [pc, #4]	; (8011010 <tcp_init+0x20>)
 801100a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 801100c:	bf00      	nop
 801100e:	bd80      	pop	{r7, pc}
 8011010:	20000058 	.word	0x20000058

08011014 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8011014:	b580      	push	{r7, lr}
 8011016:	b082      	sub	sp, #8
 8011018:	af00      	add	r7, sp, #0
 801101a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801101c:	687b      	ldr	r3, [r7, #4]
 801101e:	7d1b      	ldrb	r3, [r3, #20]
 8011020:	2b01      	cmp	r3, #1
 8011022:	d105      	bne.n	8011030 <tcp_free+0x1c>
 8011024:	4b06      	ldr	r3, [pc, #24]	; (8011040 <tcp_free+0x2c>)
 8011026:	22d4      	movs	r2, #212	; 0xd4
 8011028:	4906      	ldr	r1, [pc, #24]	; (8011044 <tcp_free+0x30>)
 801102a:	4807      	ldr	r0, [pc, #28]	; (8011048 <tcp_free+0x34>)
 801102c:	f008 fc28 	bl	8019880 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8011030:	6879      	ldr	r1, [r7, #4]
 8011032:	2001      	movs	r0, #1
 8011034:	f7fe fef8 	bl	800fe28 <memp_free>
}
 8011038:	bf00      	nop
 801103a:	3708      	adds	r7, #8
 801103c:	46bd      	mov	sp, r7
 801103e:	bd80      	pop	{r7, pc}
 8011040:	0801cbfc 	.word	0x0801cbfc
 8011044:	0801cc2c 	.word	0x0801cc2c
 8011048:	0801cc40 	.word	0x0801cc40

0801104c <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 801104c:	b580      	push	{r7, lr}
 801104e:	b082      	sub	sp, #8
 8011050:	af00      	add	r7, sp, #0
 8011052:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8011054:	687b      	ldr	r3, [r7, #4]
 8011056:	7d1b      	ldrb	r3, [r3, #20]
 8011058:	2b01      	cmp	r3, #1
 801105a:	d105      	bne.n	8011068 <tcp_free_listen+0x1c>
 801105c:	4b06      	ldr	r3, [pc, #24]	; (8011078 <tcp_free_listen+0x2c>)
 801105e:	22df      	movs	r2, #223	; 0xdf
 8011060:	4906      	ldr	r1, [pc, #24]	; (801107c <tcp_free_listen+0x30>)
 8011062:	4807      	ldr	r0, [pc, #28]	; (8011080 <tcp_free_listen+0x34>)
 8011064:	f008 fc0c 	bl	8019880 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8011068:	6879      	ldr	r1, [r7, #4]
 801106a:	2002      	movs	r0, #2
 801106c:	f7fe fedc 	bl	800fe28 <memp_free>
}
 8011070:	bf00      	nop
 8011072:	3708      	adds	r7, #8
 8011074:	46bd      	mov	sp, r7
 8011076:	bd80      	pop	{r7, pc}
 8011078:	0801cbfc 	.word	0x0801cbfc
 801107c:	0801cc68 	.word	0x0801cc68
 8011080:	0801cc40 	.word	0x0801cc40

08011084 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8011084:	b580      	push	{r7, lr}
 8011086:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8011088:	f000 fea4 	bl	8011dd4 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 801108c:	4b07      	ldr	r3, [pc, #28]	; (80110ac <tcp_tmr+0x28>)
 801108e:	781b      	ldrb	r3, [r3, #0]
 8011090:	3301      	adds	r3, #1
 8011092:	b2da      	uxtb	r2, r3
 8011094:	4b05      	ldr	r3, [pc, #20]	; (80110ac <tcp_tmr+0x28>)
 8011096:	701a      	strb	r2, [r3, #0]
 8011098:	4b04      	ldr	r3, [pc, #16]	; (80110ac <tcp_tmr+0x28>)
 801109a:	781b      	ldrb	r3, [r3, #0]
 801109c:	f003 0301 	and.w	r3, r3, #1
 80110a0:	2b00      	cmp	r3, #0
 80110a2:	d001      	beq.n	80110a8 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 80110a4:	f000 fb56 	bl	8011754 <tcp_slowtmr>
  }
}
 80110a8:	bf00      	nop
 80110aa:	bd80      	pop	{r7, pc}
 80110ac:	200070a1 	.word	0x200070a1

080110b0 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 80110b0:	b580      	push	{r7, lr}
 80110b2:	b084      	sub	sp, #16
 80110b4:	af00      	add	r7, sp, #0
 80110b6:	6078      	str	r0, [r7, #4]
 80110b8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 80110ba:	683b      	ldr	r3, [r7, #0]
 80110bc:	2b00      	cmp	r3, #0
 80110be:	d105      	bne.n	80110cc <tcp_remove_listener+0x1c>
 80110c0:	4b0d      	ldr	r3, [pc, #52]	; (80110f8 <tcp_remove_listener+0x48>)
 80110c2:	22ff      	movs	r2, #255	; 0xff
 80110c4:	490d      	ldr	r1, [pc, #52]	; (80110fc <tcp_remove_listener+0x4c>)
 80110c6:	480e      	ldr	r0, [pc, #56]	; (8011100 <tcp_remove_listener+0x50>)
 80110c8:	f008 fbda 	bl	8019880 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80110cc:	687b      	ldr	r3, [r7, #4]
 80110ce:	60fb      	str	r3, [r7, #12]
 80110d0:	e00a      	b.n	80110e8 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 80110d2:	68fb      	ldr	r3, [r7, #12]
 80110d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80110d6:	683a      	ldr	r2, [r7, #0]
 80110d8:	429a      	cmp	r2, r3
 80110da:	d102      	bne.n	80110e2 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 80110dc:	68fb      	ldr	r3, [r7, #12]
 80110de:	2200      	movs	r2, #0
 80110e0:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80110e2:	68fb      	ldr	r3, [r7, #12]
 80110e4:	68db      	ldr	r3, [r3, #12]
 80110e6:	60fb      	str	r3, [r7, #12]
 80110e8:	68fb      	ldr	r3, [r7, #12]
 80110ea:	2b00      	cmp	r3, #0
 80110ec:	d1f1      	bne.n	80110d2 <tcp_remove_listener+0x22>
    }
  }
}
 80110ee:	bf00      	nop
 80110f0:	bf00      	nop
 80110f2:	3710      	adds	r7, #16
 80110f4:	46bd      	mov	sp, r7
 80110f6:	bd80      	pop	{r7, pc}
 80110f8:	0801cbfc 	.word	0x0801cbfc
 80110fc:	0801cc84 	.word	0x0801cc84
 8011100:	0801cc40 	.word	0x0801cc40

08011104 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8011104:	b580      	push	{r7, lr}
 8011106:	b084      	sub	sp, #16
 8011108:	af00      	add	r7, sp, #0
 801110a:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 801110c:	687b      	ldr	r3, [r7, #4]
 801110e:	2b00      	cmp	r3, #0
 8011110:	d106      	bne.n	8011120 <tcp_listen_closed+0x1c>
 8011112:	4b14      	ldr	r3, [pc, #80]	; (8011164 <tcp_listen_closed+0x60>)
 8011114:	f240 1211 	movw	r2, #273	; 0x111
 8011118:	4913      	ldr	r1, [pc, #76]	; (8011168 <tcp_listen_closed+0x64>)
 801111a:	4814      	ldr	r0, [pc, #80]	; (801116c <tcp_listen_closed+0x68>)
 801111c:	f008 fbb0 	bl	8019880 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8011120:	687b      	ldr	r3, [r7, #4]
 8011122:	7d1b      	ldrb	r3, [r3, #20]
 8011124:	2b01      	cmp	r3, #1
 8011126:	d006      	beq.n	8011136 <tcp_listen_closed+0x32>
 8011128:	4b0e      	ldr	r3, [pc, #56]	; (8011164 <tcp_listen_closed+0x60>)
 801112a:	f44f 7289 	mov.w	r2, #274	; 0x112
 801112e:	4910      	ldr	r1, [pc, #64]	; (8011170 <tcp_listen_closed+0x6c>)
 8011130:	480e      	ldr	r0, [pc, #56]	; (801116c <tcp_listen_closed+0x68>)
 8011132:	f008 fba5 	bl	8019880 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8011136:	2301      	movs	r3, #1
 8011138:	60fb      	str	r3, [r7, #12]
 801113a:	e00b      	b.n	8011154 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 801113c:	4a0d      	ldr	r2, [pc, #52]	; (8011174 <tcp_listen_closed+0x70>)
 801113e:	68fb      	ldr	r3, [r7, #12]
 8011140:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011144:	681b      	ldr	r3, [r3, #0]
 8011146:	6879      	ldr	r1, [r7, #4]
 8011148:	4618      	mov	r0, r3
 801114a:	f7ff ffb1 	bl	80110b0 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 801114e:	68fb      	ldr	r3, [r7, #12]
 8011150:	3301      	adds	r3, #1
 8011152:	60fb      	str	r3, [r7, #12]
 8011154:	68fb      	ldr	r3, [r7, #12]
 8011156:	2b03      	cmp	r3, #3
 8011158:	d9f0      	bls.n	801113c <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 801115a:	bf00      	nop
 801115c:	bf00      	nop
 801115e:	3710      	adds	r7, #16
 8011160:	46bd      	mov	sp, r7
 8011162:	bd80      	pop	{r7, pc}
 8011164:	0801cbfc 	.word	0x0801cbfc
 8011168:	0801ccac 	.word	0x0801ccac
 801116c:	0801cc40 	.word	0x0801cc40
 8011170:	0801ccb8 	.word	0x0801ccb8
 8011174:	0801ec1c 	.word	0x0801ec1c

08011178 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8011178:	b5b0      	push	{r4, r5, r7, lr}
 801117a:	b088      	sub	sp, #32
 801117c:	af04      	add	r7, sp, #16
 801117e:	6078      	str	r0, [r7, #4]
 8011180:	460b      	mov	r3, r1
 8011182:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8011184:	687b      	ldr	r3, [r7, #4]
 8011186:	2b00      	cmp	r3, #0
 8011188:	d106      	bne.n	8011198 <tcp_close_shutdown+0x20>
 801118a:	4b63      	ldr	r3, [pc, #396]	; (8011318 <tcp_close_shutdown+0x1a0>)
 801118c:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8011190:	4962      	ldr	r1, [pc, #392]	; (801131c <tcp_close_shutdown+0x1a4>)
 8011192:	4863      	ldr	r0, [pc, #396]	; (8011320 <tcp_close_shutdown+0x1a8>)
 8011194:	f008 fb74 	bl	8019880 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8011198:	78fb      	ldrb	r3, [r7, #3]
 801119a:	2b00      	cmp	r3, #0
 801119c:	d067      	beq.n	801126e <tcp_close_shutdown+0xf6>
 801119e:	687b      	ldr	r3, [r7, #4]
 80111a0:	7d1b      	ldrb	r3, [r3, #20]
 80111a2:	2b04      	cmp	r3, #4
 80111a4:	d003      	beq.n	80111ae <tcp_close_shutdown+0x36>
 80111a6:	687b      	ldr	r3, [r7, #4]
 80111a8:	7d1b      	ldrb	r3, [r3, #20]
 80111aa:	2b07      	cmp	r3, #7
 80111ac:	d15f      	bne.n	801126e <tcp_close_shutdown+0xf6>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 80111ae:	687b      	ldr	r3, [r7, #4]
 80111b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80111b2:	2b00      	cmp	r3, #0
 80111b4:	d105      	bne.n	80111c2 <tcp_close_shutdown+0x4a>
 80111b6:	687b      	ldr	r3, [r7, #4]
 80111b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80111ba:	f241 62d0 	movw	r2, #5840	; 0x16d0
 80111be:	4293      	cmp	r3, r2
 80111c0:	d055      	beq.n	801126e <tcp_close_shutdown+0xf6>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 80111c2:	687b      	ldr	r3, [r7, #4]
 80111c4:	8b5b      	ldrh	r3, [r3, #26]
 80111c6:	f003 0310 	and.w	r3, r3, #16
 80111ca:	2b00      	cmp	r3, #0
 80111cc:	d106      	bne.n	80111dc <tcp_close_shutdown+0x64>
 80111ce:	4b52      	ldr	r3, [pc, #328]	; (8011318 <tcp_close_shutdown+0x1a0>)
 80111d0:	f44f 72b2 	mov.w	r2, #356	; 0x164
 80111d4:	4953      	ldr	r1, [pc, #332]	; (8011324 <tcp_close_shutdown+0x1ac>)
 80111d6:	4852      	ldr	r0, [pc, #328]	; (8011320 <tcp_close_shutdown+0x1a8>)
 80111d8:	f008 fb52 	bl	8019880 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80111dc:	687b      	ldr	r3, [r7, #4]
 80111de:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80111e0:	687b      	ldr	r3, [r7, #4]
 80111e2:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80111e4:	687d      	ldr	r5, [r7, #4]
 80111e6:	687b      	ldr	r3, [r7, #4]
 80111e8:	3304      	adds	r3, #4
 80111ea:	687a      	ldr	r2, [r7, #4]
 80111ec:	8ad2      	ldrh	r2, [r2, #22]
 80111ee:	6879      	ldr	r1, [r7, #4]
 80111f0:	8b09      	ldrh	r1, [r1, #24]
 80111f2:	9102      	str	r1, [sp, #8]
 80111f4:	9201      	str	r2, [sp, #4]
 80111f6:	9300      	str	r3, [sp, #0]
 80111f8:	462b      	mov	r3, r5
 80111fa:	4622      	mov	r2, r4
 80111fc:	4601      	mov	r1, r0
 80111fe:	6878      	ldr	r0, [r7, #4]
 8011200:	f004 fe94 	bl	8015f2c <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8011204:	6878      	ldr	r0, [r7, #4]
 8011206:	f001 f8c9 	bl	801239c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 801120a:	4b47      	ldr	r3, [pc, #284]	; (8011328 <tcp_close_shutdown+0x1b0>)
 801120c:	681b      	ldr	r3, [r3, #0]
 801120e:	687a      	ldr	r2, [r7, #4]
 8011210:	429a      	cmp	r2, r3
 8011212:	d105      	bne.n	8011220 <tcp_close_shutdown+0xa8>
 8011214:	4b44      	ldr	r3, [pc, #272]	; (8011328 <tcp_close_shutdown+0x1b0>)
 8011216:	681b      	ldr	r3, [r3, #0]
 8011218:	68db      	ldr	r3, [r3, #12]
 801121a:	4a43      	ldr	r2, [pc, #268]	; (8011328 <tcp_close_shutdown+0x1b0>)
 801121c:	6013      	str	r3, [r2, #0]
 801121e:	e013      	b.n	8011248 <tcp_close_shutdown+0xd0>
 8011220:	4b41      	ldr	r3, [pc, #260]	; (8011328 <tcp_close_shutdown+0x1b0>)
 8011222:	681b      	ldr	r3, [r3, #0]
 8011224:	60fb      	str	r3, [r7, #12]
 8011226:	e00c      	b.n	8011242 <tcp_close_shutdown+0xca>
 8011228:	68fb      	ldr	r3, [r7, #12]
 801122a:	68db      	ldr	r3, [r3, #12]
 801122c:	687a      	ldr	r2, [r7, #4]
 801122e:	429a      	cmp	r2, r3
 8011230:	d104      	bne.n	801123c <tcp_close_shutdown+0xc4>
 8011232:	687b      	ldr	r3, [r7, #4]
 8011234:	68da      	ldr	r2, [r3, #12]
 8011236:	68fb      	ldr	r3, [r7, #12]
 8011238:	60da      	str	r2, [r3, #12]
 801123a:	e005      	b.n	8011248 <tcp_close_shutdown+0xd0>
 801123c:	68fb      	ldr	r3, [r7, #12]
 801123e:	68db      	ldr	r3, [r3, #12]
 8011240:	60fb      	str	r3, [r7, #12]
 8011242:	68fb      	ldr	r3, [r7, #12]
 8011244:	2b00      	cmp	r3, #0
 8011246:	d1ef      	bne.n	8011228 <tcp_close_shutdown+0xb0>
 8011248:	687b      	ldr	r3, [r7, #4]
 801124a:	2200      	movs	r2, #0
 801124c:	60da      	str	r2, [r3, #12]
 801124e:	4b37      	ldr	r3, [pc, #220]	; (801132c <tcp_close_shutdown+0x1b4>)
 8011250:	2201      	movs	r2, #1
 8011252:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8011254:	4b36      	ldr	r3, [pc, #216]	; (8011330 <tcp_close_shutdown+0x1b8>)
 8011256:	681b      	ldr	r3, [r3, #0]
 8011258:	687a      	ldr	r2, [r7, #4]
 801125a:	429a      	cmp	r2, r3
 801125c:	d102      	bne.n	8011264 <tcp_close_shutdown+0xec>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 801125e:	f003 fd61 	bl	8014d24 <tcp_trigger_input_pcb_close>
 8011262:	e002      	b.n	801126a <tcp_close_shutdown+0xf2>
      } else {
        tcp_free(pcb);
 8011264:	6878      	ldr	r0, [r7, #4]
 8011266:	f7ff fed5 	bl	8011014 <tcp_free>
      }
      return ERR_OK;
 801126a:	2300      	movs	r3, #0
 801126c:	e050      	b.n	8011310 <tcp_close_shutdown+0x198>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 801126e:	687b      	ldr	r3, [r7, #4]
 8011270:	7d1b      	ldrb	r3, [r3, #20]
 8011272:	2b02      	cmp	r3, #2
 8011274:	d03b      	beq.n	80112ee <tcp_close_shutdown+0x176>
 8011276:	2b02      	cmp	r3, #2
 8011278:	dc44      	bgt.n	8011304 <tcp_close_shutdown+0x18c>
 801127a:	2b00      	cmp	r3, #0
 801127c:	d002      	beq.n	8011284 <tcp_close_shutdown+0x10c>
 801127e:	2b01      	cmp	r3, #1
 8011280:	d02a      	beq.n	80112d8 <tcp_close_shutdown+0x160>
 8011282:	e03f      	b.n	8011304 <tcp_close_shutdown+0x18c>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8011284:	687b      	ldr	r3, [r7, #4]
 8011286:	8adb      	ldrh	r3, [r3, #22]
 8011288:	2b00      	cmp	r3, #0
 801128a:	d021      	beq.n	80112d0 <tcp_close_shutdown+0x158>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 801128c:	4b29      	ldr	r3, [pc, #164]	; (8011334 <tcp_close_shutdown+0x1bc>)
 801128e:	681b      	ldr	r3, [r3, #0]
 8011290:	687a      	ldr	r2, [r7, #4]
 8011292:	429a      	cmp	r2, r3
 8011294:	d105      	bne.n	80112a2 <tcp_close_shutdown+0x12a>
 8011296:	4b27      	ldr	r3, [pc, #156]	; (8011334 <tcp_close_shutdown+0x1bc>)
 8011298:	681b      	ldr	r3, [r3, #0]
 801129a:	68db      	ldr	r3, [r3, #12]
 801129c:	4a25      	ldr	r2, [pc, #148]	; (8011334 <tcp_close_shutdown+0x1bc>)
 801129e:	6013      	str	r3, [r2, #0]
 80112a0:	e013      	b.n	80112ca <tcp_close_shutdown+0x152>
 80112a2:	4b24      	ldr	r3, [pc, #144]	; (8011334 <tcp_close_shutdown+0x1bc>)
 80112a4:	681b      	ldr	r3, [r3, #0]
 80112a6:	60bb      	str	r3, [r7, #8]
 80112a8:	e00c      	b.n	80112c4 <tcp_close_shutdown+0x14c>
 80112aa:	68bb      	ldr	r3, [r7, #8]
 80112ac:	68db      	ldr	r3, [r3, #12]
 80112ae:	687a      	ldr	r2, [r7, #4]
 80112b0:	429a      	cmp	r2, r3
 80112b2:	d104      	bne.n	80112be <tcp_close_shutdown+0x146>
 80112b4:	687b      	ldr	r3, [r7, #4]
 80112b6:	68da      	ldr	r2, [r3, #12]
 80112b8:	68bb      	ldr	r3, [r7, #8]
 80112ba:	60da      	str	r2, [r3, #12]
 80112bc:	e005      	b.n	80112ca <tcp_close_shutdown+0x152>
 80112be:	68bb      	ldr	r3, [r7, #8]
 80112c0:	68db      	ldr	r3, [r3, #12]
 80112c2:	60bb      	str	r3, [r7, #8]
 80112c4:	68bb      	ldr	r3, [r7, #8]
 80112c6:	2b00      	cmp	r3, #0
 80112c8:	d1ef      	bne.n	80112aa <tcp_close_shutdown+0x132>
 80112ca:	687b      	ldr	r3, [r7, #4]
 80112cc:	2200      	movs	r2, #0
 80112ce:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 80112d0:	6878      	ldr	r0, [r7, #4]
 80112d2:	f7ff fe9f 	bl	8011014 <tcp_free>
      break;
 80112d6:	e01a      	b.n	801130e <tcp_close_shutdown+0x196>
    case LISTEN:
      tcp_listen_closed(pcb);
 80112d8:	6878      	ldr	r0, [r7, #4]
 80112da:	f7ff ff13 	bl	8011104 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 80112de:	6879      	ldr	r1, [r7, #4]
 80112e0:	4815      	ldr	r0, [pc, #84]	; (8011338 <tcp_close_shutdown+0x1c0>)
 80112e2:	f001 f8ab 	bl	801243c <tcp_pcb_remove>
      tcp_free_listen(pcb);
 80112e6:	6878      	ldr	r0, [r7, #4]
 80112e8:	f7ff feb0 	bl	801104c <tcp_free_listen>
      break;
 80112ec:	e00f      	b.n	801130e <tcp_close_shutdown+0x196>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80112ee:	6879      	ldr	r1, [r7, #4]
 80112f0:	480d      	ldr	r0, [pc, #52]	; (8011328 <tcp_close_shutdown+0x1b0>)
 80112f2:	f001 f8a3 	bl	801243c <tcp_pcb_remove>
 80112f6:	4b0d      	ldr	r3, [pc, #52]	; (801132c <tcp_close_shutdown+0x1b4>)
 80112f8:	2201      	movs	r2, #1
 80112fa:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 80112fc:	6878      	ldr	r0, [r7, #4]
 80112fe:	f7ff fe89 	bl	8011014 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8011302:	e004      	b.n	801130e <tcp_close_shutdown+0x196>
    default:
      return tcp_close_shutdown_fin(pcb);
 8011304:	6878      	ldr	r0, [r7, #4]
 8011306:	f000 f819 	bl	801133c <tcp_close_shutdown_fin>
 801130a:	4603      	mov	r3, r0
 801130c:	e000      	b.n	8011310 <tcp_close_shutdown+0x198>
  }
  return ERR_OK;
 801130e:	2300      	movs	r3, #0
}
 8011310:	4618      	mov	r0, r3
 8011312:	3710      	adds	r7, #16
 8011314:	46bd      	mov	sp, r7
 8011316:	bdb0      	pop	{r4, r5, r7, pc}
 8011318:	0801cbfc 	.word	0x0801cbfc
 801131c:	0801ccd0 	.word	0x0801ccd0
 8011320:	0801cc40 	.word	0x0801cc40
 8011324:	0801ccf0 	.word	0x0801ccf0
 8011328:	20007098 	.word	0x20007098
 801132c:	200070a0 	.word	0x200070a0
 8011330:	200070d8 	.word	0x200070d8
 8011334:	20007090 	.word	0x20007090
 8011338:	20007094 	.word	0x20007094

0801133c <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 801133c:	b580      	push	{r7, lr}
 801133e:	b084      	sub	sp, #16
 8011340:	af00      	add	r7, sp, #0
 8011342:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8011344:	687b      	ldr	r3, [r7, #4]
 8011346:	2b00      	cmp	r3, #0
 8011348:	d106      	bne.n	8011358 <tcp_close_shutdown_fin+0x1c>
 801134a:	4b2e      	ldr	r3, [pc, #184]	; (8011404 <tcp_close_shutdown_fin+0xc8>)
 801134c:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8011350:	492d      	ldr	r1, [pc, #180]	; (8011408 <tcp_close_shutdown_fin+0xcc>)
 8011352:	482e      	ldr	r0, [pc, #184]	; (801140c <tcp_close_shutdown_fin+0xd0>)
 8011354:	f008 fa94 	bl	8019880 <iprintf>

  switch (pcb->state) {
 8011358:	687b      	ldr	r3, [r7, #4]
 801135a:	7d1b      	ldrb	r3, [r3, #20]
 801135c:	2b07      	cmp	r3, #7
 801135e:	d020      	beq.n	80113a2 <tcp_close_shutdown_fin+0x66>
 8011360:	2b07      	cmp	r3, #7
 8011362:	dc2b      	bgt.n	80113bc <tcp_close_shutdown_fin+0x80>
 8011364:	2b03      	cmp	r3, #3
 8011366:	d002      	beq.n	801136e <tcp_close_shutdown_fin+0x32>
 8011368:	2b04      	cmp	r3, #4
 801136a:	d00d      	beq.n	8011388 <tcp_close_shutdown_fin+0x4c>
 801136c:	e026      	b.n	80113bc <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 801136e:	6878      	ldr	r0, [r7, #4]
 8011370:	f003 feea 	bl	8015148 <tcp_send_fin>
 8011374:	4603      	mov	r3, r0
 8011376:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8011378:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801137c:	2b00      	cmp	r3, #0
 801137e:	d11f      	bne.n	80113c0 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8011380:	687b      	ldr	r3, [r7, #4]
 8011382:	2205      	movs	r2, #5
 8011384:	751a      	strb	r2, [r3, #20]
      }
      break;
 8011386:	e01b      	b.n	80113c0 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8011388:	6878      	ldr	r0, [r7, #4]
 801138a:	f003 fedd 	bl	8015148 <tcp_send_fin>
 801138e:	4603      	mov	r3, r0
 8011390:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8011392:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011396:	2b00      	cmp	r3, #0
 8011398:	d114      	bne.n	80113c4 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 801139a:	687b      	ldr	r3, [r7, #4]
 801139c:	2205      	movs	r2, #5
 801139e:	751a      	strb	r2, [r3, #20]
      }
      break;
 80113a0:	e010      	b.n	80113c4 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 80113a2:	6878      	ldr	r0, [r7, #4]
 80113a4:	f003 fed0 	bl	8015148 <tcp_send_fin>
 80113a8:	4603      	mov	r3, r0
 80113aa:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80113ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80113b0:	2b00      	cmp	r3, #0
 80113b2:	d109      	bne.n	80113c8 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 80113b4:	687b      	ldr	r3, [r7, #4]
 80113b6:	2209      	movs	r2, #9
 80113b8:	751a      	strb	r2, [r3, #20]
      }
      break;
 80113ba:	e005      	b.n	80113c8 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 80113bc:	2300      	movs	r3, #0
 80113be:	e01c      	b.n	80113fa <tcp_close_shutdown_fin+0xbe>
      break;
 80113c0:	bf00      	nop
 80113c2:	e002      	b.n	80113ca <tcp_close_shutdown_fin+0x8e>
      break;
 80113c4:	bf00      	nop
 80113c6:	e000      	b.n	80113ca <tcp_close_shutdown_fin+0x8e>
      break;
 80113c8:	bf00      	nop
  }

  if (err == ERR_OK) {
 80113ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80113ce:	2b00      	cmp	r3, #0
 80113d0:	d103      	bne.n	80113da <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 80113d2:	6878      	ldr	r0, [r7, #4]
 80113d4:	f003 fff6 	bl	80153c4 <tcp_output>
 80113d8:	e00d      	b.n	80113f6 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 80113da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80113de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80113e2:	d108      	bne.n	80113f6 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 80113e4:	687b      	ldr	r3, [r7, #4]
 80113e6:	8b5b      	ldrh	r3, [r3, #26]
 80113e8:	f043 0308 	orr.w	r3, r3, #8
 80113ec:	b29a      	uxth	r2, r3
 80113ee:	687b      	ldr	r3, [r7, #4]
 80113f0:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 80113f2:	2300      	movs	r3, #0
 80113f4:	e001      	b.n	80113fa <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 80113f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80113fa:	4618      	mov	r0, r3
 80113fc:	3710      	adds	r7, #16
 80113fe:	46bd      	mov	sp, r7
 8011400:	bd80      	pop	{r7, pc}
 8011402:	bf00      	nop
 8011404:	0801cbfc 	.word	0x0801cbfc
 8011408:	0801ccac 	.word	0x0801ccac
 801140c:	0801cc40 	.word	0x0801cc40

08011410 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8011410:	b580      	push	{r7, lr}
 8011412:	b082      	sub	sp, #8
 8011414:	af00      	add	r7, sp, #0
 8011416:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8011418:	687b      	ldr	r3, [r7, #4]
 801141a:	2b00      	cmp	r3, #0
 801141c:	d109      	bne.n	8011432 <tcp_close+0x22>
 801141e:	4b0f      	ldr	r3, [pc, #60]	; (801145c <tcp_close+0x4c>)
 8011420:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8011424:	490e      	ldr	r1, [pc, #56]	; (8011460 <tcp_close+0x50>)
 8011426:	480f      	ldr	r0, [pc, #60]	; (8011464 <tcp_close+0x54>)
 8011428:	f008 fa2a 	bl	8019880 <iprintf>
 801142c:	f06f 030f 	mvn.w	r3, #15
 8011430:	e00f      	b.n	8011452 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8011432:	687b      	ldr	r3, [r7, #4]
 8011434:	7d1b      	ldrb	r3, [r3, #20]
 8011436:	2b01      	cmp	r3, #1
 8011438:	d006      	beq.n	8011448 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 801143a:	687b      	ldr	r3, [r7, #4]
 801143c:	8b5b      	ldrh	r3, [r3, #26]
 801143e:	f043 0310 	orr.w	r3, r3, #16
 8011442:	b29a      	uxth	r2, r3
 8011444:	687b      	ldr	r3, [r7, #4]
 8011446:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8011448:	2101      	movs	r1, #1
 801144a:	6878      	ldr	r0, [r7, #4]
 801144c:	f7ff fe94 	bl	8011178 <tcp_close_shutdown>
 8011450:	4603      	mov	r3, r0
}
 8011452:	4618      	mov	r0, r3
 8011454:	3708      	adds	r7, #8
 8011456:	46bd      	mov	sp, r7
 8011458:	bd80      	pop	{r7, pc}
 801145a:	bf00      	nop
 801145c:	0801cbfc 	.word	0x0801cbfc
 8011460:	0801cd0c 	.word	0x0801cd0c
 8011464:	0801cc40 	.word	0x0801cc40

08011468 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8011468:	b580      	push	{r7, lr}
 801146a:	b08e      	sub	sp, #56	; 0x38
 801146c:	af04      	add	r7, sp, #16
 801146e:	6078      	str	r0, [r7, #4]
 8011470:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8011472:	687b      	ldr	r3, [r7, #4]
 8011474:	2b00      	cmp	r3, #0
 8011476:	d107      	bne.n	8011488 <tcp_abandon+0x20>
 8011478:	4b52      	ldr	r3, [pc, #328]	; (80115c4 <tcp_abandon+0x15c>)
 801147a:	f240 223d 	movw	r2, #573	; 0x23d
 801147e:	4952      	ldr	r1, [pc, #328]	; (80115c8 <tcp_abandon+0x160>)
 8011480:	4852      	ldr	r0, [pc, #328]	; (80115cc <tcp_abandon+0x164>)
 8011482:	f008 f9fd 	bl	8019880 <iprintf>
 8011486:	e099      	b.n	80115bc <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8011488:	687b      	ldr	r3, [r7, #4]
 801148a:	7d1b      	ldrb	r3, [r3, #20]
 801148c:	2b01      	cmp	r3, #1
 801148e:	d106      	bne.n	801149e <tcp_abandon+0x36>
 8011490:	4b4c      	ldr	r3, [pc, #304]	; (80115c4 <tcp_abandon+0x15c>)
 8011492:	f44f 7210 	mov.w	r2, #576	; 0x240
 8011496:	494e      	ldr	r1, [pc, #312]	; (80115d0 <tcp_abandon+0x168>)
 8011498:	484c      	ldr	r0, [pc, #304]	; (80115cc <tcp_abandon+0x164>)
 801149a:	f008 f9f1 	bl	8019880 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 801149e:	687b      	ldr	r3, [r7, #4]
 80114a0:	7d1b      	ldrb	r3, [r3, #20]
 80114a2:	2b0a      	cmp	r3, #10
 80114a4:	d107      	bne.n	80114b6 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 80114a6:	6879      	ldr	r1, [r7, #4]
 80114a8:	484a      	ldr	r0, [pc, #296]	; (80115d4 <tcp_abandon+0x16c>)
 80114aa:	f000 ffc7 	bl	801243c <tcp_pcb_remove>
    tcp_free(pcb);
 80114ae:	6878      	ldr	r0, [r7, #4]
 80114b0:	f7ff fdb0 	bl	8011014 <tcp_free>
 80114b4:	e082      	b.n	80115bc <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 80114b6:	2300      	movs	r3, #0
 80114b8:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 80114ba:	2300      	movs	r3, #0
 80114bc:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 80114be:	687b      	ldr	r3, [r7, #4]
 80114c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80114c2:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 80114c4:	687b      	ldr	r3, [r7, #4]
 80114c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80114c8:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 80114ca:	687b      	ldr	r3, [r7, #4]
 80114cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80114d0:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 80114d2:	687b      	ldr	r3, [r7, #4]
 80114d4:	691b      	ldr	r3, [r3, #16]
 80114d6:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 80114d8:	687b      	ldr	r3, [r7, #4]
 80114da:	7d1b      	ldrb	r3, [r3, #20]
 80114dc:	2b00      	cmp	r3, #0
 80114de:	d126      	bne.n	801152e <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 80114e0:	687b      	ldr	r3, [r7, #4]
 80114e2:	8adb      	ldrh	r3, [r3, #22]
 80114e4:	2b00      	cmp	r3, #0
 80114e6:	d02e      	beq.n	8011546 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80114e8:	4b3b      	ldr	r3, [pc, #236]	; (80115d8 <tcp_abandon+0x170>)
 80114ea:	681b      	ldr	r3, [r3, #0]
 80114ec:	687a      	ldr	r2, [r7, #4]
 80114ee:	429a      	cmp	r2, r3
 80114f0:	d105      	bne.n	80114fe <tcp_abandon+0x96>
 80114f2:	4b39      	ldr	r3, [pc, #228]	; (80115d8 <tcp_abandon+0x170>)
 80114f4:	681b      	ldr	r3, [r3, #0]
 80114f6:	68db      	ldr	r3, [r3, #12]
 80114f8:	4a37      	ldr	r2, [pc, #220]	; (80115d8 <tcp_abandon+0x170>)
 80114fa:	6013      	str	r3, [r2, #0]
 80114fc:	e013      	b.n	8011526 <tcp_abandon+0xbe>
 80114fe:	4b36      	ldr	r3, [pc, #216]	; (80115d8 <tcp_abandon+0x170>)
 8011500:	681b      	ldr	r3, [r3, #0]
 8011502:	61fb      	str	r3, [r7, #28]
 8011504:	e00c      	b.n	8011520 <tcp_abandon+0xb8>
 8011506:	69fb      	ldr	r3, [r7, #28]
 8011508:	68db      	ldr	r3, [r3, #12]
 801150a:	687a      	ldr	r2, [r7, #4]
 801150c:	429a      	cmp	r2, r3
 801150e:	d104      	bne.n	801151a <tcp_abandon+0xb2>
 8011510:	687b      	ldr	r3, [r7, #4]
 8011512:	68da      	ldr	r2, [r3, #12]
 8011514:	69fb      	ldr	r3, [r7, #28]
 8011516:	60da      	str	r2, [r3, #12]
 8011518:	e005      	b.n	8011526 <tcp_abandon+0xbe>
 801151a:	69fb      	ldr	r3, [r7, #28]
 801151c:	68db      	ldr	r3, [r3, #12]
 801151e:	61fb      	str	r3, [r7, #28]
 8011520:	69fb      	ldr	r3, [r7, #28]
 8011522:	2b00      	cmp	r3, #0
 8011524:	d1ef      	bne.n	8011506 <tcp_abandon+0x9e>
 8011526:	687b      	ldr	r3, [r7, #4]
 8011528:	2200      	movs	r2, #0
 801152a:	60da      	str	r2, [r3, #12]
 801152c:	e00b      	b.n	8011546 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 801152e:	683b      	ldr	r3, [r7, #0]
 8011530:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8011532:	687b      	ldr	r3, [r7, #4]
 8011534:	8adb      	ldrh	r3, [r3, #22]
 8011536:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8011538:	6879      	ldr	r1, [r7, #4]
 801153a:	4828      	ldr	r0, [pc, #160]	; (80115dc <tcp_abandon+0x174>)
 801153c:	f000 ff7e 	bl	801243c <tcp_pcb_remove>
 8011540:	4b27      	ldr	r3, [pc, #156]	; (80115e0 <tcp_abandon+0x178>)
 8011542:	2201      	movs	r2, #1
 8011544:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8011546:	687b      	ldr	r3, [r7, #4]
 8011548:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801154a:	2b00      	cmp	r3, #0
 801154c:	d004      	beq.n	8011558 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 801154e:	687b      	ldr	r3, [r7, #4]
 8011550:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011552:	4618      	mov	r0, r3
 8011554:	f000 fd20 	bl	8011f98 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8011558:	687b      	ldr	r3, [r7, #4]
 801155a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801155c:	2b00      	cmp	r3, #0
 801155e:	d004      	beq.n	801156a <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8011560:	687b      	ldr	r3, [r7, #4]
 8011562:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011564:	4618      	mov	r0, r3
 8011566:	f000 fd17 	bl	8011f98 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 801156a:	687b      	ldr	r3, [r7, #4]
 801156c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801156e:	2b00      	cmp	r3, #0
 8011570:	d004      	beq.n	801157c <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8011572:	687b      	ldr	r3, [r7, #4]
 8011574:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011576:	4618      	mov	r0, r3
 8011578:	f000 fd0e 	bl	8011f98 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 801157c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801157e:	2b00      	cmp	r3, #0
 8011580:	d00e      	beq.n	80115a0 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8011582:	6879      	ldr	r1, [r7, #4]
 8011584:	687b      	ldr	r3, [r7, #4]
 8011586:	3304      	adds	r3, #4
 8011588:	687a      	ldr	r2, [r7, #4]
 801158a:	8b12      	ldrh	r2, [r2, #24]
 801158c:	9202      	str	r2, [sp, #8]
 801158e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8011590:	9201      	str	r2, [sp, #4]
 8011592:	9300      	str	r3, [sp, #0]
 8011594:	460b      	mov	r3, r1
 8011596:	697a      	ldr	r2, [r7, #20]
 8011598:	69b9      	ldr	r1, [r7, #24]
 801159a:	6878      	ldr	r0, [r7, #4]
 801159c:	f004 fcc6 	bl	8015f2c <tcp_rst>
    }
    last_state = pcb->state;
 80115a0:	687b      	ldr	r3, [r7, #4]
 80115a2:	7d1b      	ldrb	r3, [r3, #20]
 80115a4:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 80115a6:	6878      	ldr	r0, [r7, #4]
 80115a8:	f7ff fd34 	bl	8011014 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 80115ac:	693b      	ldr	r3, [r7, #16]
 80115ae:	2b00      	cmp	r3, #0
 80115b0:	d004      	beq.n	80115bc <tcp_abandon+0x154>
 80115b2:	693b      	ldr	r3, [r7, #16]
 80115b4:	f06f 010c 	mvn.w	r1, #12
 80115b8:	68f8      	ldr	r0, [r7, #12]
 80115ba:	4798      	blx	r3
  }
}
 80115bc:	3728      	adds	r7, #40	; 0x28
 80115be:	46bd      	mov	sp, r7
 80115c0:	bd80      	pop	{r7, pc}
 80115c2:	bf00      	nop
 80115c4:	0801cbfc 	.word	0x0801cbfc
 80115c8:	0801cd40 	.word	0x0801cd40
 80115cc:	0801cc40 	.word	0x0801cc40
 80115d0:	0801cd5c 	.word	0x0801cd5c
 80115d4:	2000709c 	.word	0x2000709c
 80115d8:	20007090 	.word	0x20007090
 80115dc:	20007098 	.word	0x20007098
 80115e0:	200070a0 	.word	0x200070a0

080115e4 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 80115e4:	b580      	push	{r7, lr}
 80115e6:	b082      	sub	sp, #8
 80115e8:	af00      	add	r7, sp, #0
 80115ea:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 80115ec:	2101      	movs	r1, #1
 80115ee:	6878      	ldr	r0, [r7, #4]
 80115f0:	f7ff ff3a 	bl	8011468 <tcp_abandon>
}
 80115f4:	bf00      	nop
 80115f6:	3708      	adds	r7, #8
 80115f8:	46bd      	mov	sp, r7
 80115fa:	bd80      	pop	{r7, pc}

080115fc <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 80115fc:	b580      	push	{r7, lr}
 80115fe:	b084      	sub	sp, #16
 8011600:	af00      	add	r7, sp, #0
 8011602:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8011604:	687b      	ldr	r3, [r7, #4]
 8011606:	2b00      	cmp	r3, #0
 8011608:	d106      	bne.n	8011618 <tcp_update_rcv_ann_wnd+0x1c>
 801160a:	4b25      	ldr	r3, [pc, #148]	; (80116a0 <tcp_update_rcv_ann_wnd+0xa4>)
 801160c:	f240 32a6 	movw	r2, #934	; 0x3a6
 8011610:	4924      	ldr	r1, [pc, #144]	; (80116a4 <tcp_update_rcv_ann_wnd+0xa8>)
 8011612:	4825      	ldr	r0, [pc, #148]	; (80116a8 <tcp_update_rcv_ann_wnd+0xac>)
 8011614:	f008 f934 	bl	8019880 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8011618:	687b      	ldr	r3, [r7, #4]
 801161a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801161c:	687a      	ldr	r2, [r7, #4]
 801161e:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8011620:	4413      	add	r3, r2
 8011622:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8011624:	687b      	ldr	r3, [r7, #4]
 8011626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011628:	687a      	ldr	r2, [r7, #4]
 801162a:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 801162c:	f640 3168 	movw	r1, #2920	; 0xb68
 8011630:	428a      	cmp	r2, r1
 8011632:	bf28      	it	cs
 8011634:	460a      	movcs	r2, r1
 8011636:	b292      	uxth	r2, r2
 8011638:	4413      	add	r3, r2
 801163a:	68fa      	ldr	r2, [r7, #12]
 801163c:	1ad3      	subs	r3, r2, r3
 801163e:	2b00      	cmp	r3, #0
 8011640:	db08      	blt.n	8011654 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8011642:	687b      	ldr	r3, [r7, #4]
 8011644:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011646:	687b      	ldr	r3, [r7, #4]
 8011648:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 801164a:	687b      	ldr	r3, [r7, #4]
 801164c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801164e:	68fa      	ldr	r2, [r7, #12]
 8011650:	1ad3      	subs	r3, r2, r3
 8011652:	e020      	b.n	8011696 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8011654:	687b      	ldr	r3, [r7, #4]
 8011656:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011658:	687b      	ldr	r3, [r7, #4]
 801165a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801165c:	1ad3      	subs	r3, r2, r3
 801165e:	2b00      	cmp	r3, #0
 8011660:	dd03      	ble.n	801166a <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8011662:	687b      	ldr	r3, [r7, #4]
 8011664:	2200      	movs	r2, #0
 8011666:	855a      	strh	r2, [r3, #42]	; 0x2a
 8011668:	e014      	b.n	8011694 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 801166a:	687b      	ldr	r3, [r7, #4]
 801166c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801166e:	687b      	ldr	r3, [r7, #4]
 8011670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011672:	1ad3      	subs	r3, r2, r3
 8011674:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8011676:	68bb      	ldr	r3, [r7, #8]
 8011678:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801167c:	d306      	bcc.n	801168c <tcp_update_rcv_ann_wnd+0x90>
 801167e:	4b08      	ldr	r3, [pc, #32]	; (80116a0 <tcp_update_rcv_ann_wnd+0xa4>)
 8011680:	f240 32b6 	movw	r2, #950	; 0x3b6
 8011684:	4909      	ldr	r1, [pc, #36]	; (80116ac <tcp_update_rcv_ann_wnd+0xb0>)
 8011686:	4808      	ldr	r0, [pc, #32]	; (80116a8 <tcp_update_rcv_ann_wnd+0xac>)
 8011688:	f008 f8fa 	bl	8019880 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 801168c:	68bb      	ldr	r3, [r7, #8]
 801168e:	b29a      	uxth	r2, r3
 8011690:	687b      	ldr	r3, [r7, #4]
 8011692:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8011694:	2300      	movs	r3, #0
  }
}
 8011696:	4618      	mov	r0, r3
 8011698:	3710      	adds	r7, #16
 801169a:	46bd      	mov	sp, r7
 801169c:	bd80      	pop	{r7, pc}
 801169e:	bf00      	nop
 80116a0:	0801cbfc 	.word	0x0801cbfc
 80116a4:	0801ce58 	.word	0x0801ce58
 80116a8:	0801cc40 	.word	0x0801cc40
 80116ac:	0801ce7c 	.word	0x0801ce7c

080116b0 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 80116b0:	b580      	push	{r7, lr}
 80116b2:	b084      	sub	sp, #16
 80116b4:	af00      	add	r7, sp, #0
 80116b6:	6078      	str	r0, [r7, #4]
 80116b8:	460b      	mov	r3, r1
 80116ba:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 80116bc:	687b      	ldr	r3, [r7, #4]
 80116be:	2b00      	cmp	r3, #0
 80116c0:	d107      	bne.n	80116d2 <tcp_recved+0x22>
 80116c2:	4b20      	ldr	r3, [pc, #128]	; (8011744 <tcp_recved+0x94>)
 80116c4:	f240 32cf 	movw	r2, #975	; 0x3cf
 80116c8:	491f      	ldr	r1, [pc, #124]	; (8011748 <tcp_recved+0x98>)
 80116ca:	4820      	ldr	r0, [pc, #128]	; (801174c <tcp_recved+0x9c>)
 80116cc:	f008 f8d8 	bl	8019880 <iprintf>
 80116d0:	e034      	b.n	801173c <tcp_recved+0x8c>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 80116d2:	687b      	ldr	r3, [r7, #4]
 80116d4:	7d1b      	ldrb	r3, [r3, #20]
 80116d6:	2b01      	cmp	r3, #1
 80116d8:	d106      	bne.n	80116e8 <tcp_recved+0x38>
 80116da:	4b1a      	ldr	r3, [pc, #104]	; (8011744 <tcp_recved+0x94>)
 80116dc:	f240 32d2 	movw	r2, #978	; 0x3d2
 80116e0:	491b      	ldr	r1, [pc, #108]	; (8011750 <tcp_recved+0xa0>)
 80116e2:	481a      	ldr	r0, [pc, #104]	; (801174c <tcp_recved+0x9c>)
 80116e4:	f008 f8cc 	bl	8019880 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 80116e8:	687b      	ldr	r3, [r7, #4]
 80116ea:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80116ec:	887b      	ldrh	r3, [r7, #2]
 80116ee:	4413      	add	r3, r2
 80116f0:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 80116f2:	89fb      	ldrh	r3, [r7, #14]
 80116f4:	f241 62d0 	movw	r2, #5840	; 0x16d0
 80116f8:	4293      	cmp	r3, r2
 80116fa:	d804      	bhi.n	8011706 <tcp_recved+0x56>
 80116fc:	687b      	ldr	r3, [r7, #4]
 80116fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011700:	89fa      	ldrh	r2, [r7, #14]
 8011702:	429a      	cmp	r2, r3
 8011704:	d204      	bcs.n	8011710 <tcp_recved+0x60>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8011706:	687b      	ldr	r3, [r7, #4]
 8011708:	f241 62d0 	movw	r2, #5840	; 0x16d0
 801170c:	851a      	strh	r2, [r3, #40]	; 0x28
 801170e:	e002      	b.n	8011716 <tcp_recved+0x66>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8011710:	687b      	ldr	r3, [r7, #4]
 8011712:	89fa      	ldrh	r2, [r7, #14]
 8011714:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8011716:	6878      	ldr	r0, [r7, #4]
 8011718:	f7ff ff70 	bl	80115fc <tcp_update_rcv_ann_wnd>
 801171c:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 801171e:	68bb      	ldr	r3, [r7, #8]
 8011720:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8011724:	4293      	cmp	r3, r2
 8011726:	d909      	bls.n	801173c <tcp_recved+0x8c>
    tcp_ack_now(pcb);
 8011728:	687b      	ldr	r3, [r7, #4]
 801172a:	8b5b      	ldrh	r3, [r3, #26]
 801172c:	f043 0302 	orr.w	r3, r3, #2
 8011730:	b29a      	uxth	r2, r3
 8011732:	687b      	ldr	r3, [r7, #4]
 8011734:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8011736:	6878      	ldr	r0, [r7, #4]
 8011738:	f003 fe44 	bl	80153c4 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 801173c:	3710      	adds	r7, #16
 801173e:	46bd      	mov	sp, r7
 8011740:	bd80      	pop	{r7, pc}
 8011742:	bf00      	nop
 8011744:	0801cbfc 	.word	0x0801cbfc
 8011748:	0801ce98 	.word	0x0801ce98
 801174c:	0801cc40 	.word	0x0801cc40
 8011750:	0801ceb0 	.word	0x0801ceb0

08011754 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8011754:	b5b0      	push	{r4, r5, r7, lr}
 8011756:	b090      	sub	sp, #64	; 0x40
 8011758:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 801175a:	2300      	movs	r3, #0
 801175c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8011760:	4b94      	ldr	r3, [pc, #592]	; (80119b4 <tcp_slowtmr+0x260>)
 8011762:	681b      	ldr	r3, [r3, #0]
 8011764:	3301      	adds	r3, #1
 8011766:	4a93      	ldr	r2, [pc, #588]	; (80119b4 <tcp_slowtmr+0x260>)
 8011768:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 801176a:	4b93      	ldr	r3, [pc, #588]	; (80119b8 <tcp_slowtmr+0x264>)
 801176c:	781b      	ldrb	r3, [r3, #0]
 801176e:	3301      	adds	r3, #1
 8011770:	b2da      	uxtb	r2, r3
 8011772:	4b91      	ldr	r3, [pc, #580]	; (80119b8 <tcp_slowtmr+0x264>)
 8011774:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8011776:	2300      	movs	r3, #0
 8011778:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 801177a:	4b90      	ldr	r3, [pc, #576]	; (80119bc <tcp_slowtmr+0x268>)
 801177c:	681b      	ldr	r3, [r3, #0]
 801177e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8011780:	e29d      	b.n	8011cbe <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8011782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011784:	7d1b      	ldrb	r3, [r3, #20]
 8011786:	2b00      	cmp	r3, #0
 8011788:	d106      	bne.n	8011798 <tcp_slowtmr+0x44>
 801178a:	4b8d      	ldr	r3, [pc, #564]	; (80119c0 <tcp_slowtmr+0x26c>)
 801178c:	f240 42be 	movw	r2, #1214	; 0x4be
 8011790:	498c      	ldr	r1, [pc, #560]	; (80119c4 <tcp_slowtmr+0x270>)
 8011792:	488d      	ldr	r0, [pc, #564]	; (80119c8 <tcp_slowtmr+0x274>)
 8011794:	f008 f874 	bl	8019880 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8011798:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801179a:	7d1b      	ldrb	r3, [r3, #20]
 801179c:	2b01      	cmp	r3, #1
 801179e:	d106      	bne.n	80117ae <tcp_slowtmr+0x5a>
 80117a0:	4b87      	ldr	r3, [pc, #540]	; (80119c0 <tcp_slowtmr+0x26c>)
 80117a2:	f240 42bf 	movw	r2, #1215	; 0x4bf
 80117a6:	4989      	ldr	r1, [pc, #548]	; (80119cc <tcp_slowtmr+0x278>)
 80117a8:	4887      	ldr	r0, [pc, #540]	; (80119c8 <tcp_slowtmr+0x274>)
 80117aa:	f008 f869 	bl	8019880 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 80117ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80117b0:	7d1b      	ldrb	r3, [r3, #20]
 80117b2:	2b0a      	cmp	r3, #10
 80117b4:	d106      	bne.n	80117c4 <tcp_slowtmr+0x70>
 80117b6:	4b82      	ldr	r3, [pc, #520]	; (80119c0 <tcp_slowtmr+0x26c>)
 80117b8:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 80117bc:	4984      	ldr	r1, [pc, #528]	; (80119d0 <tcp_slowtmr+0x27c>)
 80117be:	4882      	ldr	r0, [pc, #520]	; (80119c8 <tcp_slowtmr+0x274>)
 80117c0:	f008 f85e 	bl	8019880 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 80117c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80117c6:	7f9a      	ldrb	r2, [r3, #30]
 80117c8:	4b7b      	ldr	r3, [pc, #492]	; (80119b8 <tcp_slowtmr+0x264>)
 80117ca:	781b      	ldrb	r3, [r3, #0]
 80117cc:	429a      	cmp	r2, r3
 80117ce:	d105      	bne.n	80117dc <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 80117d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80117d2:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80117d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80117d6:	68db      	ldr	r3, [r3, #12]
 80117d8:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 80117da:	e270      	b.n	8011cbe <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 80117dc:	4b76      	ldr	r3, [pc, #472]	; (80119b8 <tcp_slowtmr+0x264>)
 80117de:	781a      	ldrb	r2, [r3, #0]
 80117e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80117e2:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 80117e4:	2300      	movs	r3, #0
 80117e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 80117ea:	2300      	movs	r3, #0
 80117ec:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 80117f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80117f2:	7d1b      	ldrb	r3, [r3, #20]
 80117f4:	2b02      	cmp	r3, #2
 80117f6:	d10a      	bne.n	801180e <tcp_slowtmr+0xba>
 80117f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80117fa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80117fe:	2b05      	cmp	r3, #5
 8011800:	d905      	bls.n	801180e <tcp_slowtmr+0xba>
      ++pcb_remove;
 8011802:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011806:	3301      	adds	r3, #1
 8011808:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801180c:	e11e      	b.n	8011a4c <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 801180e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011810:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011814:	2b0b      	cmp	r3, #11
 8011816:	d905      	bls.n	8011824 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8011818:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801181c:	3301      	adds	r3, #1
 801181e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8011822:	e113      	b.n	8011a4c <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8011824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011826:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801182a:	2b00      	cmp	r3, #0
 801182c:	d075      	beq.n	801191a <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 801182e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011830:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011832:	2b00      	cmp	r3, #0
 8011834:	d006      	beq.n	8011844 <tcp_slowtmr+0xf0>
 8011836:	4b62      	ldr	r3, [pc, #392]	; (80119c0 <tcp_slowtmr+0x26c>)
 8011838:	f240 42d4 	movw	r2, #1236	; 0x4d4
 801183c:	4965      	ldr	r1, [pc, #404]	; (80119d4 <tcp_slowtmr+0x280>)
 801183e:	4862      	ldr	r0, [pc, #392]	; (80119c8 <tcp_slowtmr+0x274>)
 8011840:	f008 f81e 	bl	8019880 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8011844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011846:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011848:	2b00      	cmp	r3, #0
 801184a:	d106      	bne.n	801185a <tcp_slowtmr+0x106>
 801184c:	4b5c      	ldr	r3, [pc, #368]	; (80119c0 <tcp_slowtmr+0x26c>)
 801184e:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8011852:	4961      	ldr	r1, [pc, #388]	; (80119d8 <tcp_slowtmr+0x284>)
 8011854:	485c      	ldr	r0, [pc, #368]	; (80119c8 <tcp_slowtmr+0x274>)
 8011856:	f008 f813 	bl	8019880 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 801185a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801185c:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8011860:	2b0b      	cmp	r3, #11
 8011862:	d905      	bls.n	8011870 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8011864:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011868:	3301      	adds	r3, #1
 801186a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801186e:	e0ed      	b.n	8011a4c <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8011870:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011872:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8011876:	3b01      	subs	r3, #1
 8011878:	4a58      	ldr	r2, [pc, #352]	; (80119dc <tcp_slowtmr+0x288>)
 801187a:	5cd3      	ldrb	r3, [r2, r3]
 801187c:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 801187e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011880:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8011884:	7c7a      	ldrb	r2, [r7, #17]
 8011886:	429a      	cmp	r2, r3
 8011888:	d907      	bls.n	801189a <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 801188a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801188c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8011890:	3301      	adds	r3, #1
 8011892:	b2da      	uxtb	r2, r3
 8011894:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011896:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 801189a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801189c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80118a0:	7c7a      	ldrb	r2, [r7, #17]
 80118a2:	429a      	cmp	r2, r3
 80118a4:	f200 80d2 	bhi.w	8011a4c <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 80118a8:	2301      	movs	r3, #1
 80118aa:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 80118ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80118ae:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80118b2:	2b00      	cmp	r3, #0
 80118b4:	d108      	bne.n	80118c8 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 80118b6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80118b8:	f004 fc2c 	bl	8016114 <tcp_zero_window_probe>
 80118bc:	4603      	mov	r3, r0
 80118be:	2b00      	cmp	r3, #0
 80118c0:	d014      	beq.n	80118ec <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 80118c2:	2300      	movs	r3, #0
 80118c4:	623b      	str	r3, [r7, #32]
 80118c6:	e011      	b.n	80118ec <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 80118c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80118ca:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80118ce:	4619      	mov	r1, r3
 80118d0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80118d2:	f003 faf1 	bl	8014eb8 <tcp_split_unsent_seg>
 80118d6:	4603      	mov	r3, r0
 80118d8:	2b00      	cmp	r3, #0
 80118da:	d107      	bne.n	80118ec <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 80118dc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80118de:	f003 fd71 	bl	80153c4 <tcp_output>
 80118e2:	4603      	mov	r3, r0
 80118e4:	2b00      	cmp	r3, #0
 80118e6:	d101      	bne.n	80118ec <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 80118e8:	2300      	movs	r3, #0
 80118ea:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 80118ec:	6a3b      	ldr	r3, [r7, #32]
 80118ee:	2b00      	cmp	r3, #0
 80118f0:	f000 80ac 	beq.w	8011a4c <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 80118f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80118f6:	2200      	movs	r2, #0
 80118f8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 80118fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80118fe:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8011902:	2b06      	cmp	r3, #6
 8011904:	f200 80a2 	bhi.w	8011a4c <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8011908:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801190a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801190e:	3301      	adds	r3, #1
 8011910:	b2da      	uxtb	r2, r3
 8011912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011914:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8011918:	e098      	b.n	8011a4c <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 801191a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801191c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8011920:	2b00      	cmp	r3, #0
 8011922:	db0f      	blt.n	8011944 <tcp_slowtmr+0x1f0>
 8011924:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011926:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801192a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801192e:	4293      	cmp	r3, r2
 8011930:	d008      	beq.n	8011944 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 8011932:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011934:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8011938:	b29b      	uxth	r3, r3
 801193a:	3301      	adds	r3, #1
 801193c:	b29b      	uxth	r3, r3
 801193e:	b21a      	sxth	r2, r3
 8011940:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011942:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8011944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011946:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 801194a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801194c:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8011950:	429a      	cmp	r2, r3
 8011952:	db7b      	blt.n	8011a4c <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8011954:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011956:	f004 f829 	bl	80159ac <tcp_rexmit_rto_prepare>
 801195a:	4603      	mov	r3, r0
 801195c:	2b00      	cmp	r3, #0
 801195e:	d007      	beq.n	8011970 <tcp_slowtmr+0x21c>
 8011960:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011962:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011964:	2b00      	cmp	r3, #0
 8011966:	d171      	bne.n	8011a4c <tcp_slowtmr+0x2f8>
 8011968:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801196a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801196c:	2b00      	cmp	r3, #0
 801196e:	d06d      	beq.n	8011a4c <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 8011970:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011972:	7d1b      	ldrb	r3, [r3, #20]
 8011974:	2b02      	cmp	r3, #2
 8011976:	d03a      	beq.n	80119ee <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8011978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801197a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801197e:	2b0c      	cmp	r3, #12
 8011980:	bf28      	it	cs
 8011982:	230c      	movcs	r3, #12
 8011984:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8011986:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011988:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801198c:	10db      	asrs	r3, r3, #3
 801198e:	b21b      	sxth	r3, r3
 8011990:	461a      	mov	r2, r3
 8011992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011994:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8011998:	4413      	add	r3, r2
 801199a:	7efa      	ldrb	r2, [r7, #27]
 801199c:	4910      	ldr	r1, [pc, #64]	; (80119e0 <tcp_slowtmr+0x28c>)
 801199e:	5c8a      	ldrb	r2, [r1, r2]
 80119a0:	4093      	lsls	r3, r2
 80119a2:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 80119a4:	697b      	ldr	r3, [r7, #20]
 80119a6:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 80119aa:	4293      	cmp	r3, r2
 80119ac:	dc1a      	bgt.n	80119e4 <tcp_slowtmr+0x290>
 80119ae:	697b      	ldr	r3, [r7, #20]
 80119b0:	b21a      	sxth	r2, r3
 80119b2:	e019      	b.n	80119e8 <tcp_slowtmr+0x294>
 80119b4:	2000708c 	.word	0x2000708c
 80119b8:	200070a2 	.word	0x200070a2
 80119bc:	20007098 	.word	0x20007098
 80119c0:	0801cbfc 	.word	0x0801cbfc
 80119c4:	0801cf40 	.word	0x0801cf40
 80119c8:	0801cc40 	.word	0x0801cc40
 80119cc:	0801cf6c 	.word	0x0801cf6c
 80119d0:	0801cf98 	.word	0x0801cf98
 80119d4:	0801cfc8 	.word	0x0801cfc8
 80119d8:	0801cffc 	.word	0x0801cffc
 80119dc:	0801ec14 	.word	0x0801ec14
 80119e0:	0801ec04 	.word	0x0801ec04
 80119e4:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80119e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119ea:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 80119ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119f0:	2200      	movs	r2, #0
 80119f2:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 80119f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119f6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80119fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119fc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011a00:	4293      	cmp	r3, r2
 8011a02:	bf28      	it	cs
 8011a04:	4613      	movcs	r3, r2
 8011a06:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8011a08:	8a7b      	ldrh	r3, [r7, #18]
 8011a0a:	085b      	lsrs	r3, r3, #1
 8011a0c:	b29a      	uxth	r2, r3
 8011a0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a10:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8011a14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a16:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8011a1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a1c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011a1e:	005b      	lsls	r3, r3, #1
 8011a20:	b29b      	uxth	r3, r3
 8011a22:	429a      	cmp	r2, r3
 8011a24:	d206      	bcs.n	8011a34 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8011a26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a28:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011a2a:	005b      	lsls	r3, r3, #1
 8011a2c:	b29a      	uxth	r2, r3
 8011a2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a30:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8011a34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a36:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8011a38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a3a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 8011a3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a40:	2200      	movs	r2, #0
 8011a42:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 8011a46:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011a48:	f004 f820 	bl	8015a8c <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8011a4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a4e:	7d1b      	ldrb	r3, [r3, #20]
 8011a50:	2b06      	cmp	r3, #6
 8011a52:	d111      	bne.n	8011a78 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8011a54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a56:	8b5b      	ldrh	r3, [r3, #26]
 8011a58:	f003 0310 	and.w	r3, r3, #16
 8011a5c:	2b00      	cmp	r3, #0
 8011a5e:	d00b      	beq.n	8011a78 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011a60:	4b9c      	ldr	r3, [pc, #624]	; (8011cd4 <tcp_slowtmr+0x580>)
 8011a62:	681a      	ldr	r2, [r3, #0]
 8011a64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a66:	6a1b      	ldr	r3, [r3, #32]
 8011a68:	1ad3      	subs	r3, r2, r3
 8011a6a:	2b28      	cmp	r3, #40	; 0x28
 8011a6c:	d904      	bls.n	8011a78 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 8011a6e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011a72:	3301      	adds	r3, #1
 8011a74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8011a78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a7a:	7a5b      	ldrb	r3, [r3, #9]
 8011a7c:	f003 0308 	and.w	r3, r3, #8
 8011a80:	2b00      	cmp	r3, #0
 8011a82:	d04a      	beq.n	8011b1a <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 8011a84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a86:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8011a88:	2b04      	cmp	r3, #4
 8011a8a:	d003      	beq.n	8011a94 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8011a8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a8e:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8011a90:	2b07      	cmp	r3, #7
 8011a92:	d142      	bne.n	8011b1a <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011a94:	4b8f      	ldr	r3, [pc, #572]	; (8011cd4 <tcp_slowtmr+0x580>)
 8011a96:	681a      	ldr	r2, [r3, #0]
 8011a98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a9a:	6a1b      	ldr	r3, [r3, #32]
 8011a9c:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8011a9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011aa0:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8011aa4:	4b8c      	ldr	r3, [pc, #560]	; (8011cd8 <tcp_slowtmr+0x584>)
 8011aa6:	440b      	add	r3, r1
 8011aa8:	498c      	ldr	r1, [pc, #560]	; (8011cdc <tcp_slowtmr+0x588>)
 8011aaa:	fba1 1303 	umull	r1, r3, r1, r3
 8011aae:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011ab0:	429a      	cmp	r2, r3
 8011ab2:	d90a      	bls.n	8011aca <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8011ab4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011ab8:	3301      	adds	r3, #1
 8011aba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 8011abe:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8011ac2:	3301      	adds	r3, #1
 8011ac4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8011ac8:	e027      	b.n	8011b1a <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011aca:	4b82      	ldr	r3, [pc, #520]	; (8011cd4 <tcp_slowtmr+0x580>)
 8011acc:	681a      	ldr	r2, [r3, #0]
 8011ace:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ad0:	6a1b      	ldr	r3, [r3, #32]
 8011ad2:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8011ad4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ad6:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8011ada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011adc:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8011ae0:	4618      	mov	r0, r3
 8011ae2:	4b7f      	ldr	r3, [pc, #508]	; (8011ce0 <tcp_slowtmr+0x58c>)
 8011ae4:	fb00 f303 	mul.w	r3, r0, r3
 8011ae8:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8011aea:	497c      	ldr	r1, [pc, #496]	; (8011cdc <tcp_slowtmr+0x588>)
 8011aec:	fba1 1303 	umull	r1, r3, r1, r3
 8011af0:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011af2:	429a      	cmp	r2, r3
 8011af4:	d911      	bls.n	8011b1a <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 8011af6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011af8:	f004 facc 	bl	8016094 <tcp_keepalive>
 8011afc:	4603      	mov	r3, r0
 8011afe:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 8011b02:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8011b06:	2b00      	cmp	r3, #0
 8011b08:	d107      	bne.n	8011b1a <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 8011b0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b0c:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8011b10:	3301      	adds	r3, #1
 8011b12:	b2da      	uxtb	r2, r3
 8011b14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b16:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8011b1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011b1e:	2b00      	cmp	r3, #0
 8011b20:	d011      	beq.n	8011b46 <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8011b22:	4b6c      	ldr	r3, [pc, #432]	; (8011cd4 <tcp_slowtmr+0x580>)
 8011b24:	681a      	ldr	r2, [r3, #0]
 8011b26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b28:	6a1b      	ldr	r3, [r3, #32]
 8011b2a:	1ad2      	subs	r2, r2, r3
 8011b2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b2e:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8011b32:	4619      	mov	r1, r3
 8011b34:	460b      	mov	r3, r1
 8011b36:	005b      	lsls	r3, r3, #1
 8011b38:	440b      	add	r3, r1
 8011b3a:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8011b3c:	429a      	cmp	r2, r3
 8011b3e:	d302      	bcc.n	8011b46 <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 8011b40:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011b42:	f000 fddf 	bl	8012704 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8011b46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b48:	7d1b      	ldrb	r3, [r3, #20]
 8011b4a:	2b03      	cmp	r3, #3
 8011b4c:	d10b      	bne.n	8011b66 <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011b4e:	4b61      	ldr	r3, [pc, #388]	; (8011cd4 <tcp_slowtmr+0x580>)
 8011b50:	681a      	ldr	r2, [r3, #0]
 8011b52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b54:	6a1b      	ldr	r3, [r3, #32]
 8011b56:	1ad3      	subs	r3, r2, r3
 8011b58:	2b28      	cmp	r3, #40	; 0x28
 8011b5a:	d904      	bls.n	8011b66 <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8011b5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011b60:	3301      	adds	r3, #1
 8011b62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8011b66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b68:	7d1b      	ldrb	r3, [r3, #20]
 8011b6a:	2b09      	cmp	r3, #9
 8011b6c:	d10b      	bne.n	8011b86 <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8011b6e:	4b59      	ldr	r3, [pc, #356]	; (8011cd4 <tcp_slowtmr+0x580>)
 8011b70:	681a      	ldr	r2, [r3, #0]
 8011b72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b74:	6a1b      	ldr	r3, [r3, #32]
 8011b76:	1ad3      	subs	r3, r2, r3
 8011b78:	2bf0      	cmp	r3, #240	; 0xf0
 8011b7a:	d904      	bls.n	8011b86 <tcp_slowtmr+0x432>
        ++pcb_remove;
 8011b7c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011b80:	3301      	adds	r3, #1
 8011b82:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8011b86:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011b8a:	2b00      	cmp	r3, #0
 8011b8c:	d060      	beq.n	8011c50 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 8011b8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011b94:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8011b96:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011b98:	f000 fc00 	bl	801239c <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8011b9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b9e:	2b00      	cmp	r3, #0
 8011ba0:	d010      	beq.n	8011bc4 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8011ba2:	4b50      	ldr	r3, [pc, #320]	; (8011ce4 <tcp_slowtmr+0x590>)
 8011ba4:	681b      	ldr	r3, [r3, #0]
 8011ba6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011ba8:	429a      	cmp	r2, r3
 8011baa:	d106      	bne.n	8011bba <tcp_slowtmr+0x466>
 8011bac:	4b4e      	ldr	r3, [pc, #312]	; (8011ce8 <tcp_slowtmr+0x594>)
 8011bae:	f240 526d 	movw	r2, #1389	; 0x56d
 8011bb2:	494e      	ldr	r1, [pc, #312]	; (8011cec <tcp_slowtmr+0x598>)
 8011bb4:	484e      	ldr	r0, [pc, #312]	; (8011cf0 <tcp_slowtmr+0x59c>)
 8011bb6:	f007 fe63 	bl	8019880 <iprintf>
        prev->next = pcb->next;
 8011bba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011bbc:	68da      	ldr	r2, [r3, #12]
 8011bbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011bc0:	60da      	str	r2, [r3, #12]
 8011bc2:	e00f      	b.n	8011be4 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8011bc4:	4b47      	ldr	r3, [pc, #284]	; (8011ce4 <tcp_slowtmr+0x590>)
 8011bc6:	681b      	ldr	r3, [r3, #0]
 8011bc8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011bca:	429a      	cmp	r2, r3
 8011bcc:	d006      	beq.n	8011bdc <tcp_slowtmr+0x488>
 8011bce:	4b46      	ldr	r3, [pc, #280]	; (8011ce8 <tcp_slowtmr+0x594>)
 8011bd0:	f240 5271 	movw	r2, #1393	; 0x571
 8011bd4:	4947      	ldr	r1, [pc, #284]	; (8011cf4 <tcp_slowtmr+0x5a0>)
 8011bd6:	4846      	ldr	r0, [pc, #280]	; (8011cf0 <tcp_slowtmr+0x59c>)
 8011bd8:	f007 fe52 	bl	8019880 <iprintf>
        tcp_active_pcbs = pcb->next;
 8011bdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011bde:	68db      	ldr	r3, [r3, #12]
 8011be0:	4a40      	ldr	r2, [pc, #256]	; (8011ce4 <tcp_slowtmr+0x590>)
 8011be2:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8011be4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8011be8:	2b00      	cmp	r3, #0
 8011bea:	d013      	beq.n	8011c14 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8011bec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011bee:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8011bf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011bf2:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8011bf4:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 8011bf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011bf8:	3304      	adds	r3, #4
 8011bfa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011bfc:	8ad2      	ldrh	r2, [r2, #22]
 8011bfe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011c00:	8b09      	ldrh	r1, [r1, #24]
 8011c02:	9102      	str	r1, [sp, #8]
 8011c04:	9201      	str	r2, [sp, #4]
 8011c06:	9300      	str	r3, [sp, #0]
 8011c08:	462b      	mov	r3, r5
 8011c0a:	4622      	mov	r2, r4
 8011c0c:	4601      	mov	r1, r0
 8011c0e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011c10:	f004 f98c 	bl	8015f2c <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8011c14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c16:	691b      	ldr	r3, [r3, #16]
 8011c18:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8011c1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c1c:	7d1b      	ldrb	r3, [r3, #20]
 8011c1e:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8011c20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c22:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8011c24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c26:	68db      	ldr	r3, [r3, #12]
 8011c28:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8011c2a:	6838      	ldr	r0, [r7, #0]
 8011c2c:	f7ff f9f2 	bl	8011014 <tcp_free>

      tcp_active_pcbs_changed = 0;
 8011c30:	4b31      	ldr	r3, [pc, #196]	; (8011cf8 <tcp_slowtmr+0x5a4>)
 8011c32:	2200      	movs	r2, #0
 8011c34:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8011c36:	68fb      	ldr	r3, [r7, #12]
 8011c38:	2b00      	cmp	r3, #0
 8011c3a:	d004      	beq.n	8011c46 <tcp_slowtmr+0x4f2>
 8011c3c:	68fb      	ldr	r3, [r7, #12]
 8011c3e:	f06f 010c 	mvn.w	r1, #12
 8011c42:	68b8      	ldr	r0, [r7, #8]
 8011c44:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8011c46:	4b2c      	ldr	r3, [pc, #176]	; (8011cf8 <tcp_slowtmr+0x5a4>)
 8011c48:	781b      	ldrb	r3, [r3, #0]
 8011c4a:	2b00      	cmp	r3, #0
 8011c4c:	d037      	beq.n	8011cbe <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 8011c4e:	e592      	b.n	8011776 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8011c50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c52:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8011c54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c56:	68db      	ldr	r3, [r3, #12]
 8011c58:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8011c5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011c5c:	7f1b      	ldrb	r3, [r3, #28]
 8011c5e:	3301      	adds	r3, #1
 8011c60:	b2da      	uxtb	r2, r3
 8011c62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011c64:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8011c66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011c68:	7f1a      	ldrb	r2, [r3, #28]
 8011c6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011c6c:	7f5b      	ldrb	r3, [r3, #29]
 8011c6e:	429a      	cmp	r2, r3
 8011c70:	d325      	bcc.n	8011cbe <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 8011c72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011c74:	2200      	movs	r2, #0
 8011c76:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8011c78:	4b1f      	ldr	r3, [pc, #124]	; (8011cf8 <tcp_slowtmr+0x5a4>)
 8011c7a:	2200      	movs	r2, #0
 8011c7c:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8011c7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011c80:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011c84:	2b00      	cmp	r3, #0
 8011c86:	d00b      	beq.n	8011ca0 <tcp_slowtmr+0x54c>
 8011c88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011c8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011c8e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011c90:	6912      	ldr	r2, [r2, #16]
 8011c92:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011c94:	4610      	mov	r0, r2
 8011c96:	4798      	blx	r3
 8011c98:	4603      	mov	r3, r0
 8011c9a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8011c9e:	e002      	b.n	8011ca6 <tcp_slowtmr+0x552>
 8011ca0:	2300      	movs	r3, #0
 8011ca2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 8011ca6:	4b14      	ldr	r3, [pc, #80]	; (8011cf8 <tcp_slowtmr+0x5a4>)
 8011ca8:	781b      	ldrb	r3, [r3, #0]
 8011caa:	2b00      	cmp	r3, #0
 8011cac:	d000      	beq.n	8011cb0 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 8011cae:	e562      	b.n	8011776 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8011cb0:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8011cb4:	2b00      	cmp	r3, #0
 8011cb6:	d102      	bne.n	8011cbe <tcp_slowtmr+0x56a>
          tcp_output(prev);
 8011cb8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011cba:	f003 fb83 	bl	80153c4 <tcp_output>
  while (pcb != NULL) {
 8011cbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011cc0:	2b00      	cmp	r3, #0
 8011cc2:	f47f ad5e 	bne.w	8011782 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8011cc6:	2300      	movs	r3, #0
 8011cc8:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 8011cca:	4b0c      	ldr	r3, [pc, #48]	; (8011cfc <tcp_slowtmr+0x5a8>)
 8011ccc:	681b      	ldr	r3, [r3, #0]
 8011cce:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8011cd0:	e069      	b.n	8011da6 <tcp_slowtmr+0x652>
 8011cd2:	bf00      	nop
 8011cd4:	2000708c 	.word	0x2000708c
 8011cd8:	000a4cb8 	.word	0x000a4cb8
 8011cdc:	10624dd3 	.word	0x10624dd3
 8011ce0:	000124f8 	.word	0x000124f8
 8011ce4:	20007098 	.word	0x20007098
 8011ce8:	0801cbfc 	.word	0x0801cbfc
 8011cec:	0801d034 	.word	0x0801d034
 8011cf0:	0801cc40 	.word	0x0801cc40
 8011cf4:	0801d060 	.word	0x0801d060
 8011cf8:	200070a0 	.word	0x200070a0
 8011cfc:	2000709c 	.word	0x2000709c
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8011d00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d02:	7d1b      	ldrb	r3, [r3, #20]
 8011d04:	2b0a      	cmp	r3, #10
 8011d06:	d006      	beq.n	8011d16 <tcp_slowtmr+0x5c2>
 8011d08:	4b2b      	ldr	r3, [pc, #172]	; (8011db8 <tcp_slowtmr+0x664>)
 8011d0a:	f240 52a1 	movw	r2, #1441	; 0x5a1
 8011d0e:	492b      	ldr	r1, [pc, #172]	; (8011dbc <tcp_slowtmr+0x668>)
 8011d10:	482b      	ldr	r0, [pc, #172]	; (8011dc0 <tcp_slowtmr+0x66c>)
 8011d12:	f007 fdb5 	bl	8019880 <iprintf>
    pcb_remove = 0;
 8011d16:	2300      	movs	r3, #0
 8011d18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8011d1c:	4b29      	ldr	r3, [pc, #164]	; (8011dc4 <tcp_slowtmr+0x670>)
 8011d1e:	681a      	ldr	r2, [r3, #0]
 8011d20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d22:	6a1b      	ldr	r3, [r3, #32]
 8011d24:	1ad3      	subs	r3, r2, r3
 8011d26:	2bf0      	cmp	r3, #240	; 0xf0
 8011d28:	d904      	bls.n	8011d34 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 8011d2a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011d2e:	3301      	adds	r3, #1
 8011d30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8011d34:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011d38:	2b00      	cmp	r3, #0
 8011d3a:	d02f      	beq.n	8011d9c <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8011d3c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011d3e:	f000 fb2d 	bl	801239c <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8011d42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d44:	2b00      	cmp	r3, #0
 8011d46:	d010      	beq.n	8011d6a <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8011d48:	4b1f      	ldr	r3, [pc, #124]	; (8011dc8 <tcp_slowtmr+0x674>)
 8011d4a:	681b      	ldr	r3, [r3, #0]
 8011d4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011d4e:	429a      	cmp	r2, r3
 8011d50:	d106      	bne.n	8011d60 <tcp_slowtmr+0x60c>
 8011d52:	4b19      	ldr	r3, [pc, #100]	; (8011db8 <tcp_slowtmr+0x664>)
 8011d54:	f240 52af 	movw	r2, #1455	; 0x5af
 8011d58:	491c      	ldr	r1, [pc, #112]	; (8011dcc <tcp_slowtmr+0x678>)
 8011d5a:	4819      	ldr	r0, [pc, #100]	; (8011dc0 <tcp_slowtmr+0x66c>)
 8011d5c:	f007 fd90 	bl	8019880 <iprintf>
        prev->next = pcb->next;
 8011d60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d62:	68da      	ldr	r2, [r3, #12]
 8011d64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d66:	60da      	str	r2, [r3, #12]
 8011d68:	e00f      	b.n	8011d8a <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8011d6a:	4b17      	ldr	r3, [pc, #92]	; (8011dc8 <tcp_slowtmr+0x674>)
 8011d6c:	681b      	ldr	r3, [r3, #0]
 8011d6e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011d70:	429a      	cmp	r2, r3
 8011d72:	d006      	beq.n	8011d82 <tcp_slowtmr+0x62e>
 8011d74:	4b10      	ldr	r3, [pc, #64]	; (8011db8 <tcp_slowtmr+0x664>)
 8011d76:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8011d7a:	4915      	ldr	r1, [pc, #84]	; (8011dd0 <tcp_slowtmr+0x67c>)
 8011d7c:	4810      	ldr	r0, [pc, #64]	; (8011dc0 <tcp_slowtmr+0x66c>)
 8011d7e:	f007 fd7f 	bl	8019880 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8011d82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d84:	68db      	ldr	r3, [r3, #12]
 8011d86:	4a10      	ldr	r2, [pc, #64]	; (8011dc8 <tcp_slowtmr+0x674>)
 8011d88:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8011d8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d8c:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8011d8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d90:	68db      	ldr	r3, [r3, #12]
 8011d92:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8011d94:	69f8      	ldr	r0, [r7, #28]
 8011d96:	f7ff f93d 	bl	8011014 <tcp_free>
 8011d9a:	e004      	b.n	8011da6 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 8011d9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d9e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8011da0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011da2:	68db      	ldr	r3, [r3, #12]
 8011da4:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8011da6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011da8:	2b00      	cmp	r3, #0
 8011daa:	d1a9      	bne.n	8011d00 <tcp_slowtmr+0x5ac>
    }
  }
}
 8011dac:	bf00      	nop
 8011dae:	bf00      	nop
 8011db0:	3730      	adds	r7, #48	; 0x30
 8011db2:	46bd      	mov	sp, r7
 8011db4:	bdb0      	pop	{r4, r5, r7, pc}
 8011db6:	bf00      	nop
 8011db8:	0801cbfc 	.word	0x0801cbfc
 8011dbc:	0801d08c 	.word	0x0801d08c
 8011dc0:	0801cc40 	.word	0x0801cc40
 8011dc4:	2000708c 	.word	0x2000708c
 8011dc8:	2000709c 	.word	0x2000709c
 8011dcc:	0801d0bc 	.word	0x0801d0bc
 8011dd0:	0801d0e4 	.word	0x0801d0e4

08011dd4 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8011dd4:	b580      	push	{r7, lr}
 8011dd6:	b082      	sub	sp, #8
 8011dd8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8011dda:	4b2d      	ldr	r3, [pc, #180]	; (8011e90 <tcp_fasttmr+0xbc>)
 8011ddc:	781b      	ldrb	r3, [r3, #0]
 8011dde:	3301      	adds	r3, #1
 8011de0:	b2da      	uxtb	r2, r3
 8011de2:	4b2b      	ldr	r3, [pc, #172]	; (8011e90 <tcp_fasttmr+0xbc>)
 8011de4:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8011de6:	4b2b      	ldr	r3, [pc, #172]	; (8011e94 <tcp_fasttmr+0xc0>)
 8011de8:	681b      	ldr	r3, [r3, #0]
 8011dea:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8011dec:	e048      	b.n	8011e80 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8011dee:	687b      	ldr	r3, [r7, #4]
 8011df0:	7f9a      	ldrb	r2, [r3, #30]
 8011df2:	4b27      	ldr	r3, [pc, #156]	; (8011e90 <tcp_fasttmr+0xbc>)
 8011df4:	781b      	ldrb	r3, [r3, #0]
 8011df6:	429a      	cmp	r2, r3
 8011df8:	d03f      	beq.n	8011e7a <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8011dfa:	4b25      	ldr	r3, [pc, #148]	; (8011e90 <tcp_fasttmr+0xbc>)
 8011dfc:	781a      	ldrb	r2, [r3, #0]
 8011dfe:	687b      	ldr	r3, [r7, #4]
 8011e00:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8011e02:	687b      	ldr	r3, [r7, #4]
 8011e04:	8b5b      	ldrh	r3, [r3, #26]
 8011e06:	f003 0301 	and.w	r3, r3, #1
 8011e0a:	2b00      	cmp	r3, #0
 8011e0c:	d010      	beq.n	8011e30 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8011e0e:	687b      	ldr	r3, [r7, #4]
 8011e10:	8b5b      	ldrh	r3, [r3, #26]
 8011e12:	f043 0302 	orr.w	r3, r3, #2
 8011e16:	b29a      	uxth	r2, r3
 8011e18:	687b      	ldr	r3, [r7, #4]
 8011e1a:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8011e1c:	6878      	ldr	r0, [r7, #4]
 8011e1e:	f003 fad1 	bl	80153c4 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8011e22:	687b      	ldr	r3, [r7, #4]
 8011e24:	8b5b      	ldrh	r3, [r3, #26]
 8011e26:	f023 0303 	bic.w	r3, r3, #3
 8011e2a:	b29a      	uxth	r2, r3
 8011e2c:	687b      	ldr	r3, [r7, #4]
 8011e2e:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8011e30:	687b      	ldr	r3, [r7, #4]
 8011e32:	8b5b      	ldrh	r3, [r3, #26]
 8011e34:	f003 0308 	and.w	r3, r3, #8
 8011e38:	2b00      	cmp	r3, #0
 8011e3a:	d009      	beq.n	8011e50 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8011e3c:	687b      	ldr	r3, [r7, #4]
 8011e3e:	8b5b      	ldrh	r3, [r3, #26]
 8011e40:	f023 0308 	bic.w	r3, r3, #8
 8011e44:	b29a      	uxth	r2, r3
 8011e46:	687b      	ldr	r3, [r7, #4]
 8011e48:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8011e4a:	6878      	ldr	r0, [r7, #4]
 8011e4c:	f7ff fa76 	bl	801133c <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8011e50:	687b      	ldr	r3, [r7, #4]
 8011e52:	68db      	ldr	r3, [r3, #12]
 8011e54:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8011e56:	687b      	ldr	r3, [r7, #4]
 8011e58:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011e5a:	2b00      	cmp	r3, #0
 8011e5c:	d00a      	beq.n	8011e74 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8011e5e:	4b0e      	ldr	r3, [pc, #56]	; (8011e98 <tcp_fasttmr+0xc4>)
 8011e60:	2200      	movs	r2, #0
 8011e62:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8011e64:	6878      	ldr	r0, [r7, #4]
 8011e66:	f000 f819 	bl	8011e9c <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8011e6a:	4b0b      	ldr	r3, [pc, #44]	; (8011e98 <tcp_fasttmr+0xc4>)
 8011e6c:	781b      	ldrb	r3, [r3, #0]
 8011e6e:	2b00      	cmp	r3, #0
 8011e70:	d000      	beq.n	8011e74 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8011e72:	e7b8      	b.n	8011de6 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8011e74:	683b      	ldr	r3, [r7, #0]
 8011e76:	607b      	str	r3, [r7, #4]
 8011e78:	e002      	b.n	8011e80 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8011e7a:	687b      	ldr	r3, [r7, #4]
 8011e7c:	68db      	ldr	r3, [r3, #12]
 8011e7e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8011e80:	687b      	ldr	r3, [r7, #4]
 8011e82:	2b00      	cmp	r3, #0
 8011e84:	d1b3      	bne.n	8011dee <tcp_fasttmr+0x1a>
    }
  }
}
 8011e86:	bf00      	nop
 8011e88:	bf00      	nop
 8011e8a:	3708      	adds	r7, #8
 8011e8c:	46bd      	mov	sp, r7
 8011e8e:	bd80      	pop	{r7, pc}
 8011e90:	200070a2 	.word	0x200070a2
 8011e94:	20007098 	.word	0x20007098
 8011e98:	200070a0 	.word	0x200070a0

08011e9c <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8011e9c:	b590      	push	{r4, r7, lr}
 8011e9e:	b085      	sub	sp, #20
 8011ea0:	af00      	add	r7, sp, #0
 8011ea2:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8011ea4:	687b      	ldr	r3, [r7, #4]
 8011ea6:	2b00      	cmp	r3, #0
 8011ea8:	d109      	bne.n	8011ebe <tcp_process_refused_data+0x22>
 8011eaa:	4b38      	ldr	r3, [pc, #224]	; (8011f8c <tcp_process_refused_data+0xf0>)
 8011eac:	f240 6209 	movw	r2, #1545	; 0x609
 8011eb0:	4937      	ldr	r1, [pc, #220]	; (8011f90 <tcp_process_refused_data+0xf4>)
 8011eb2:	4838      	ldr	r0, [pc, #224]	; (8011f94 <tcp_process_refused_data+0xf8>)
 8011eb4:	f007 fce4 	bl	8019880 <iprintf>
 8011eb8:	f06f 030f 	mvn.w	r3, #15
 8011ebc:	e061      	b.n	8011f82 <tcp_process_refused_data+0xe6>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8011ebe:	687b      	ldr	r3, [r7, #4]
 8011ec0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011ec2:	7b5b      	ldrb	r3, [r3, #13]
 8011ec4:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8011ec6:	687b      	ldr	r3, [r7, #4]
 8011ec8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011eca:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8011ecc:	687b      	ldr	r3, [r7, #4]
 8011ece:	2200      	movs	r2, #0
 8011ed0:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8011ed2:	687b      	ldr	r3, [r7, #4]
 8011ed4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011ed8:	2b00      	cmp	r3, #0
 8011eda:	d00b      	beq.n	8011ef4 <tcp_process_refused_data+0x58>
 8011edc:	687b      	ldr	r3, [r7, #4]
 8011ede:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8011ee2:	687b      	ldr	r3, [r7, #4]
 8011ee4:	6918      	ldr	r0, [r3, #16]
 8011ee6:	2300      	movs	r3, #0
 8011ee8:	68ba      	ldr	r2, [r7, #8]
 8011eea:	6879      	ldr	r1, [r7, #4]
 8011eec:	47a0      	blx	r4
 8011eee:	4603      	mov	r3, r0
 8011ef0:	73fb      	strb	r3, [r7, #15]
 8011ef2:	e007      	b.n	8011f04 <tcp_process_refused_data+0x68>
 8011ef4:	2300      	movs	r3, #0
 8011ef6:	68ba      	ldr	r2, [r7, #8]
 8011ef8:	6879      	ldr	r1, [r7, #4]
 8011efa:	2000      	movs	r0, #0
 8011efc:	f000 f8a6 	bl	801204c <tcp_recv_null>
 8011f00:	4603      	mov	r3, r0
 8011f02:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8011f04:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011f08:	2b00      	cmp	r3, #0
 8011f0a:	d12b      	bne.n	8011f64 <tcp_process_refused_data+0xc8>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8011f0c:	7bbb      	ldrb	r3, [r7, #14]
 8011f0e:	f003 0320 	and.w	r3, r3, #32
 8011f12:	2b00      	cmp	r3, #0
 8011f14:	d034      	beq.n	8011f80 <tcp_process_refused_data+0xe4>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8011f16:	687b      	ldr	r3, [r7, #4]
 8011f18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011f1a:	f241 62d0 	movw	r2, #5840	; 0x16d0
 8011f1e:	4293      	cmp	r3, r2
 8011f20:	d005      	beq.n	8011f2e <tcp_process_refused_data+0x92>
          pcb->rcv_wnd++;
 8011f22:	687b      	ldr	r3, [r7, #4]
 8011f24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011f26:	3301      	adds	r3, #1
 8011f28:	b29a      	uxth	r2, r3
 8011f2a:	687b      	ldr	r3, [r7, #4]
 8011f2c:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8011f2e:	687b      	ldr	r3, [r7, #4]
 8011f30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011f34:	2b00      	cmp	r3, #0
 8011f36:	d00b      	beq.n	8011f50 <tcp_process_refused_data+0xb4>
 8011f38:	687b      	ldr	r3, [r7, #4]
 8011f3a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8011f3e:	687b      	ldr	r3, [r7, #4]
 8011f40:	6918      	ldr	r0, [r3, #16]
 8011f42:	2300      	movs	r3, #0
 8011f44:	2200      	movs	r2, #0
 8011f46:	6879      	ldr	r1, [r7, #4]
 8011f48:	47a0      	blx	r4
 8011f4a:	4603      	mov	r3, r0
 8011f4c:	73fb      	strb	r3, [r7, #15]
 8011f4e:	e001      	b.n	8011f54 <tcp_process_refused_data+0xb8>
 8011f50:	2300      	movs	r3, #0
 8011f52:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8011f54:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011f58:	f113 0f0d 	cmn.w	r3, #13
 8011f5c:	d110      	bne.n	8011f80 <tcp_process_refused_data+0xe4>
          return ERR_ABRT;
 8011f5e:	f06f 030c 	mvn.w	r3, #12
 8011f62:	e00e      	b.n	8011f82 <tcp_process_refused_data+0xe6>
        }
      }
    } else if (err == ERR_ABRT) {
 8011f64:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011f68:	f113 0f0d 	cmn.w	r3, #13
 8011f6c:	d102      	bne.n	8011f74 <tcp_process_refused_data+0xd8>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8011f6e:	f06f 030c 	mvn.w	r3, #12
 8011f72:	e006      	b.n	8011f82 <tcp_process_refused_data+0xe6>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8011f74:	687b      	ldr	r3, [r7, #4]
 8011f76:	68ba      	ldr	r2, [r7, #8]
 8011f78:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 8011f7a:	f06f 0304 	mvn.w	r3, #4
 8011f7e:	e000      	b.n	8011f82 <tcp_process_refused_data+0xe6>
    }
  }
  return ERR_OK;
 8011f80:	2300      	movs	r3, #0
}
 8011f82:	4618      	mov	r0, r3
 8011f84:	3714      	adds	r7, #20
 8011f86:	46bd      	mov	sp, r7
 8011f88:	bd90      	pop	{r4, r7, pc}
 8011f8a:	bf00      	nop
 8011f8c:	0801cbfc 	.word	0x0801cbfc
 8011f90:	0801d10c 	.word	0x0801d10c
 8011f94:	0801cc40 	.word	0x0801cc40

08011f98 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8011f98:	b580      	push	{r7, lr}
 8011f9a:	b084      	sub	sp, #16
 8011f9c:	af00      	add	r7, sp, #0
 8011f9e:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8011fa0:	e007      	b.n	8011fb2 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8011fa2:	687b      	ldr	r3, [r7, #4]
 8011fa4:	681b      	ldr	r3, [r3, #0]
 8011fa6:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8011fa8:	6878      	ldr	r0, [r7, #4]
 8011faa:	f000 f80a 	bl	8011fc2 <tcp_seg_free>
    seg = next;
 8011fae:	68fb      	ldr	r3, [r7, #12]
 8011fb0:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8011fb2:	687b      	ldr	r3, [r7, #4]
 8011fb4:	2b00      	cmp	r3, #0
 8011fb6:	d1f4      	bne.n	8011fa2 <tcp_segs_free+0xa>
  }
}
 8011fb8:	bf00      	nop
 8011fba:	bf00      	nop
 8011fbc:	3710      	adds	r7, #16
 8011fbe:	46bd      	mov	sp, r7
 8011fc0:	bd80      	pop	{r7, pc}

08011fc2 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8011fc2:	b580      	push	{r7, lr}
 8011fc4:	b082      	sub	sp, #8
 8011fc6:	af00      	add	r7, sp, #0
 8011fc8:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8011fca:	687b      	ldr	r3, [r7, #4]
 8011fcc:	2b00      	cmp	r3, #0
 8011fce:	d00c      	beq.n	8011fea <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8011fd0:	687b      	ldr	r3, [r7, #4]
 8011fd2:	685b      	ldr	r3, [r3, #4]
 8011fd4:	2b00      	cmp	r3, #0
 8011fd6:	d004      	beq.n	8011fe2 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8011fd8:	687b      	ldr	r3, [r7, #4]
 8011fda:	685b      	ldr	r3, [r3, #4]
 8011fdc:	4618      	mov	r0, r3
 8011fde:	f7fe fd79 	bl	8010ad4 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8011fe2:	6879      	ldr	r1, [r7, #4]
 8011fe4:	2003      	movs	r0, #3
 8011fe6:	f7fd ff1f 	bl	800fe28 <memp_free>
  }
}
 8011fea:	bf00      	nop
 8011fec:	3708      	adds	r7, #8
 8011fee:	46bd      	mov	sp, r7
 8011ff0:	bd80      	pop	{r7, pc}
	...

08011ff4 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8011ff4:	b580      	push	{r7, lr}
 8011ff6:	b084      	sub	sp, #16
 8011ff8:	af00      	add	r7, sp, #0
 8011ffa:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8011ffc:	687b      	ldr	r3, [r7, #4]
 8011ffe:	2b00      	cmp	r3, #0
 8012000:	d106      	bne.n	8012010 <tcp_seg_copy+0x1c>
 8012002:	4b0f      	ldr	r3, [pc, #60]	; (8012040 <tcp_seg_copy+0x4c>)
 8012004:	f240 6282 	movw	r2, #1666	; 0x682
 8012008:	490e      	ldr	r1, [pc, #56]	; (8012044 <tcp_seg_copy+0x50>)
 801200a:	480f      	ldr	r0, [pc, #60]	; (8012048 <tcp_seg_copy+0x54>)
 801200c:	f007 fc38 	bl	8019880 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8012010:	2003      	movs	r0, #3
 8012012:	f7fd fe99 	bl	800fd48 <memp_malloc>
 8012016:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8012018:	68fb      	ldr	r3, [r7, #12]
 801201a:	2b00      	cmp	r3, #0
 801201c:	d101      	bne.n	8012022 <tcp_seg_copy+0x2e>
    return NULL;
 801201e:	2300      	movs	r3, #0
 8012020:	e00a      	b.n	8012038 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8012022:	2210      	movs	r2, #16
 8012024:	6879      	ldr	r1, [r7, #4]
 8012026:	68f8      	ldr	r0, [r7, #12]
 8012028:	f007 fdf9 	bl	8019c1e <memcpy>
  pbuf_ref(cseg->p);
 801202c:	68fb      	ldr	r3, [r7, #12]
 801202e:	685b      	ldr	r3, [r3, #4]
 8012030:	4618      	mov	r0, r3
 8012032:	f7fe fdef 	bl	8010c14 <pbuf_ref>
  return cseg;
 8012036:	68fb      	ldr	r3, [r7, #12]
}
 8012038:	4618      	mov	r0, r3
 801203a:	3710      	adds	r7, #16
 801203c:	46bd      	mov	sp, r7
 801203e:	bd80      	pop	{r7, pc}
 8012040:	0801cbfc 	.word	0x0801cbfc
 8012044:	0801d150 	.word	0x0801d150
 8012048:	0801cc40 	.word	0x0801cc40

0801204c <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 801204c:	b580      	push	{r7, lr}
 801204e:	b084      	sub	sp, #16
 8012050:	af00      	add	r7, sp, #0
 8012052:	60f8      	str	r0, [r7, #12]
 8012054:	60b9      	str	r1, [r7, #8]
 8012056:	607a      	str	r2, [r7, #4]
 8012058:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 801205a:	68bb      	ldr	r3, [r7, #8]
 801205c:	2b00      	cmp	r3, #0
 801205e:	d109      	bne.n	8012074 <tcp_recv_null+0x28>
 8012060:	4b12      	ldr	r3, [pc, #72]	; (80120ac <tcp_recv_null+0x60>)
 8012062:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8012066:	4912      	ldr	r1, [pc, #72]	; (80120b0 <tcp_recv_null+0x64>)
 8012068:	4812      	ldr	r0, [pc, #72]	; (80120b4 <tcp_recv_null+0x68>)
 801206a:	f007 fc09 	bl	8019880 <iprintf>
 801206e:	f06f 030f 	mvn.w	r3, #15
 8012072:	e016      	b.n	80120a2 <tcp_recv_null+0x56>

  if (p != NULL) {
 8012074:	687b      	ldr	r3, [r7, #4]
 8012076:	2b00      	cmp	r3, #0
 8012078:	d009      	beq.n	801208e <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 801207a:	687b      	ldr	r3, [r7, #4]
 801207c:	891b      	ldrh	r3, [r3, #8]
 801207e:	4619      	mov	r1, r3
 8012080:	68b8      	ldr	r0, [r7, #8]
 8012082:	f7ff fb15 	bl	80116b0 <tcp_recved>
    pbuf_free(p);
 8012086:	6878      	ldr	r0, [r7, #4]
 8012088:	f7fe fd24 	bl	8010ad4 <pbuf_free>
 801208c:	e008      	b.n	80120a0 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 801208e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8012092:	2b00      	cmp	r3, #0
 8012094:	d104      	bne.n	80120a0 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8012096:	68b8      	ldr	r0, [r7, #8]
 8012098:	f7ff f9ba 	bl	8011410 <tcp_close>
 801209c:	4603      	mov	r3, r0
 801209e:	e000      	b.n	80120a2 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 80120a0:	2300      	movs	r3, #0
}
 80120a2:	4618      	mov	r0, r3
 80120a4:	3710      	adds	r7, #16
 80120a6:	46bd      	mov	sp, r7
 80120a8:	bd80      	pop	{r7, pc}
 80120aa:	bf00      	nop
 80120ac:	0801cbfc 	.word	0x0801cbfc
 80120b0:	0801d16c 	.word	0x0801d16c
 80120b4:	0801cc40 	.word	0x0801cc40

080120b8 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 80120b8:	b580      	push	{r7, lr}
 80120ba:	b086      	sub	sp, #24
 80120bc:	af00      	add	r7, sp, #0
 80120be:	4603      	mov	r3, r0
 80120c0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 80120c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80120c6:	2b00      	cmp	r3, #0
 80120c8:	db01      	blt.n	80120ce <tcp_kill_prio+0x16>
 80120ca:	79fb      	ldrb	r3, [r7, #7]
 80120cc:	e000      	b.n	80120d0 <tcp_kill_prio+0x18>
 80120ce:	237f      	movs	r3, #127	; 0x7f
 80120d0:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 80120d2:	7afb      	ldrb	r3, [r7, #11]
 80120d4:	2b00      	cmp	r3, #0
 80120d6:	d034      	beq.n	8012142 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 80120d8:	7afb      	ldrb	r3, [r7, #11]
 80120da:	3b01      	subs	r3, #1
 80120dc:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 80120de:	2300      	movs	r3, #0
 80120e0:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80120e2:	2300      	movs	r3, #0
 80120e4:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80120e6:	4b19      	ldr	r3, [pc, #100]	; (801214c <tcp_kill_prio+0x94>)
 80120e8:	681b      	ldr	r3, [r3, #0]
 80120ea:	617b      	str	r3, [r7, #20]
 80120ec:	e01f      	b.n	801212e <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 80120ee:	697b      	ldr	r3, [r7, #20]
 80120f0:	7d5b      	ldrb	r3, [r3, #21]
 80120f2:	7afa      	ldrb	r2, [r7, #11]
 80120f4:	429a      	cmp	r2, r3
 80120f6:	d80c      	bhi.n	8012112 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 80120f8:	697b      	ldr	r3, [r7, #20]
 80120fa:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 80120fc:	7afa      	ldrb	r2, [r7, #11]
 80120fe:	429a      	cmp	r2, r3
 8012100:	d112      	bne.n	8012128 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8012102:	4b13      	ldr	r3, [pc, #76]	; (8012150 <tcp_kill_prio+0x98>)
 8012104:	681a      	ldr	r2, [r3, #0]
 8012106:	697b      	ldr	r3, [r7, #20]
 8012108:	6a1b      	ldr	r3, [r3, #32]
 801210a:	1ad3      	subs	r3, r2, r3
 801210c:	68fa      	ldr	r2, [r7, #12]
 801210e:	429a      	cmp	r2, r3
 8012110:	d80a      	bhi.n	8012128 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8012112:	4b0f      	ldr	r3, [pc, #60]	; (8012150 <tcp_kill_prio+0x98>)
 8012114:	681a      	ldr	r2, [r3, #0]
 8012116:	697b      	ldr	r3, [r7, #20]
 8012118:	6a1b      	ldr	r3, [r3, #32]
 801211a:	1ad3      	subs	r3, r2, r3
 801211c:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 801211e:	697b      	ldr	r3, [r7, #20]
 8012120:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8012122:	697b      	ldr	r3, [r7, #20]
 8012124:	7d5b      	ldrb	r3, [r3, #21]
 8012126:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8012128:	697b      	ldr	r3, [r7, #20]
 801212a:	68db      	ldr	r3, [r3, #12]
 801212c:	617b      	str	r3, [r7, #20]
 801212e:	697b      	ldr	r3, [r7, #20]
 8012130:	2b00      	cmp	r3, #0
 8012132:	d1dc      	bne.n	80120ee <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8012134:	693b      	ldr	r3, [r7, #16]
 8012136:	2b00      	cmp	r3, #0
 8012138:	d004      	beq.n	8012144 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 801213a:	6938      	ldr	r0, [r7, #16]
 801213c:	f7ff fa52 	bl	80115e4 <tcp_abort>
 8012140:	e000      	b.n	8012144 <tcp_kill_prio+0x8c>
    return;
 8012142:	bf00      	nop
  }
}
 8012144:	3718      	adds	r7, #24
 8012146:	46bd      	mov	sp, r7
 8012148:	bd80      	pop	{r7, pc}
 801214a:	bf00      	nop
 801214c:	20007098 	.word	0x20007098
 8012150:	2000708c 	.word	0x2000708c

08012154 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8012154:	b580      	push	{r7, lr}
 8012156:	b086      	sub	sp, #24
 8012158:	af00      	add	r7, sp, #0
 801215a:	4603      	mov	r3, r0
 801215c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 801215e:	79fb      	ldrb	r3, [r7, #7]
 8012160:	2b08      	cmp	r3, #8
 8012162:	d009      	beq.n	8012178 <tcp_kill_state+0x24>
 8012164:	79fb      	ldrb	r3, [r7, #7]
 8012166:	2b09      	cmp	r3, #9
 8012168:	d006      	beq.n	8012178 <tcp_kill_state+0x24>
 801216a:	4b1a      	ldr	r3, [pc, #104]	; (80121d4 <tcp_kill_state+0x80>)
 801216c:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8012170:	4919      	ldr	r1, [pc, #100]	; (80121d8 <tcp_kill_state+0x84>)
 8012172:	481a      	ldr	r0, [pc, #104]	; (80121dc <tcp_kill_state+0x88>)
 8012174:	f007 fb84 	bl	8019880 <iprintf>

  inactivity = 0;
 8012178:	2300      	movs	r3, #0
 801217a:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 801217c:	2300      	movs	r3, #0
 801217e:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8012180:	4b17      	ldr	r3, [pc, #92]	; (80121e0 <tcp_kill_state+0x8c>)
 8012182:	681b      	ldr	r3, [r3, #0]
 8012184:	617b      	str	r3, [r7, #20]
 8012186:	e017      	b.n	80121b8 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8012188:	697b      	ldr	r3, [r7, #20]
 801218a:	7d1b      	ldrb	r3, [r3, #20]
 801218c:	79fa      	ldrb	r2, [r7, #7]
 801218e:	429a      	cmp	r2, r3
 8012190:	d10f      	bne.n	80121b2 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8012192:	4b14      	ldr	r3, [pc, #80]	; (80121e4 <tcp_kill_state+0x90>)
 8012194:	681a      	ldr	r2, [r3, #0]
 8012196:	697b      	ldr	r3, [r7, #20]
 8012198:	6a1b      	ldr	r3, [r3, #32]
 801219a:	1ad3      	subs	r3, r2, r3
 801219c:	68fa      	ldr	r2, [r7, #12]
 801219e:	429a      	cmp	r2, r3
 80121a0:	d807      	bhi.n	80121b2 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 80121a2:	4b10      	ldr	r3, [pc, #64]	; (80121e4 <tcp_kill_state+0x90>)
 80121a4:	681a      	ldr	r2, [r3, #0]
 80121a6:	697b      	ldr	r3, [r7, #20]
 80121a8:	6a1b      	ldr	r3, [r3, #32]
 80121aa:	1ad3      	subs	r3, r2, r3
 80121ac:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 80121ae:	697b      	ldr	r3, [r7, #20]
 80121b0:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80121b2:	697b      	ldr	r3, [r7, #20]
 80121b4:	68db      	ldr	r3, [r3, #12]
 80121b6:	617b      	str	r3, [r7, #20]
 80121b8:	697b      	ldr	r3, [r7, #20]
 80121ba:	2b00      	cmp	r3, #0
 80121bc:	d1e4      	bne.n	8012188 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 80121be:	693b      	ldr	r3, [r7, #16]
 80121c0:	2b00      	cmp	r3, #0
 80121c2:	d003      	beq.n	80121cc <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 80121c4:	2100      	movs	r1, #0
 80121c6:	6938      	ldr	r0, [r7, #16]
 80121c8:	f7ff f94e 	bl	8011468 <tcp_abandon>
  }
}
 80121cc:	bf00      	nop
 80121ce:	3718      	adds	r7, #24
 80121d0:	46bd      	mov	sp, r7
 80121d2:	bd80      	pop	{r7, pc}
 80121d4:	0801cbfc 	.word	0x0801cbfc
 80121d8:	0801d188 	.word	0x0801d188
 80121dc:	0801cc40 	.word	0x0801cc40
 80121e0:	20007098 	.word	0x20007098
 80121e4:	2000708c 	.word	0x2000708c

080121e8 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 80121e8:	b580      	push	{r7, lr}
 80121ea:	b084      	sub	sp, #16
 80121ec:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 80121ee:	2300      	movs	r3, #0
 80121f0:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 80121f2:	2300      	movs	r3, #0
 80121f4:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80121f6:	4b12      	ldr	r3, [pc, #72]	; (8012240 <tcp_kill_timewait+0x58>)
 80121f8:	681b      	ldr	r3, [r3, #0]
 80121fa:	60fb      	str	r3, [r7, #12]
 80121fc:	e012      	b.n	8012224 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80121fe:	4b11      	ldr	r3, [pc, #68]	; (8012244 <tcp_kill_timewait+0x5c>)
 8012200:	681a      	ldr	r2, [r3, #0]
 8012202:	68fb      	ldr	r3, [r7, #12]
 8012204:	6a1b      	ldr	r3, [r3, #32]
 8012206:	1ad3      	subs	r3, r2, r3
 8012208:	687a      	ldr	r2, [r7, #4]
 801220a:	429a      	cmp	r2, r3
 801220c:	d807      	bhi.n	801221e <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 801220e:	4b0d      	ldr	r3, [pc, #52]	; (8012244 <tcp_kill_timewait+0x5c>)
 8012210:	681a      	ldr	r2, [r3, #0]
 8012212:	68fb      	ldr	r3, [r7, #12]
 8012214:	6a1b      	ldr	r3, [r3, #32]
 8012216:	1ad3      	subs	r3, r2, r3
 8012218:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 801221a:	68fb      	ldr	r3, [r7, #12]
 801221c:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801221e:	68fb      	ldr	r3, [r7, #12]
 8012220:	68db      	ldr	r3, [r3, #12]
 8012222:	60fb      	str	r3, [r7, #12]
 8012224:	68fb      	ldr	r3, [r7, #12]
 8012226:	2b00      	cmp	r3, #0
 8012228:	d1e9      	bne.n	80121fe <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 801222a:	68bb      	ldr	r3, [r7, #8]
 801222c:	2b00      	cmp	r3, #0
 801222e:	d002      	beq.n	8012236 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8012230:	68b8      	ldr	r0, [r7, #8]
 8012232:	f7ff f9d7 	bl	80115e4 <tcp_abort>
  }
}
 8012236:	bf00      	nop
 8012238:	3710      	adds	r7, #16
 801223a:	46bd      	mov	sp, r7
 801223c:	bd80      	pop	{r7, pc}
 801223e:	bf00      	nop
 8012240:	2000709c 	.word	0x2000709c
 8012244:	2000708c 	.word	0x2000708c

08012248 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8012248:	b580      	push	{r7, lr}
 801224a:	b082      	sub	sp, #8
 801224c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 801224e:	4b10      	ldr	r3, [pc, #64]	; (8012290 <tcp_handle_closepend+0x48>)
 8012250:	681b      	ldr	r3, [r3, #0]
 8012252:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8012254:	e014      	b.n	8012280 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8012256:	687b      	ldr	r3, [r7, #4]
 8012258:	68db      	ldr	r3, [r3, #12]
 801225a:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 801225c:	687b      	ldr	r3, [r7, #4]
 801225e:	8b5b      	ldrh	r3, [r3, #26]
 8012260:	f003 0308 	and.w	r3, r3, #8
 8012264:	2b00      	cmp	r3, #0
 8012266:	d009      	beq.n	801227c <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8012268:	687b      	ldr	r3, [r7, #4]
 801226a:	8b5b      	ldrh	r3, [r3, #26]
 801226c:	f023 0308 	bic.w	r3, r3, #8
 8012270:	b29a      	uxth	r2, r3
 8012272:	687b      	ldr	r3, [r7, #4]
 8012274:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8012276:	6878      	ldr	r0, [r7, #4]
 8012278:	f7ff f860 	bl	801133c <tcp_close_shutdown_fin>
    }
    pcb = next;
 801227c:	683b      	ldr	r3, [r7, #0]
 801227e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8012280:	687b      	ldr	r3, [r7, #4]
 8012282:	2b00      	cmp	r3, #0
 8012284:	d1e7      	bne.n	8012256 <tcp_handle_closepend+0xe>
  }
}
 8012286:	bf00      	nop
 8012288:	bf00      	nop
 801228a:	3708      	adds	r7, #8
 801228c:	46bd      	mov	sp, r7
 801228e:	bd80      	pop	{r7, pc}
 8012290:	20007098 	.word	0x20007098

08012294 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8012294:	b580      	push	{r7, lr}
 8012296:	b084      	sub	sp, #16
 8012298:	af00      	add	r7, sp, #0
 801229a:	4603      	mov	r3, r0
 801229c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801229e:	2001      	movs	r0, #1
 80122a0:	f7fd fd52 	bl	800fd48 <memp_malloc>
 80122a4:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 80122a6:	68fb      	ldr	r3, [r7, #12]
 80122a8:	2b00      	cmp	r3, #0
 80122aa:	d126      	bne.n	80122fa <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 80122ac:	f7ff ffcc 	bl	8012248 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 80122b0:	f7ff ff9a 	bl	80121e8 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80122b4:	2001      	movs	r0, #1
 80122b6:	f7fd fd47 	bl	800fd48 <memp_malloc>
 80122ba:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 80122bc:	68fb      	ldr	r3, [r7, #12]
 80122be:	2b00      	cmp	r3, #0
 80122c0:	d11b      	bne.n	80122fa <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 80122c2:	2009      	movs	r0, #9
 80122c4:	f7ff ff46 	bl	8012154 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80122c8:	2001      	movs	r0, #1
 80122ca:	f7fd fd3d 	bl	800fd48 <memp_malloc>
 80122ce:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 80122d0:	68fb      	ldr	r3, [r7, #12]
 80122d2:	2b00      	cmp	r3, #0
 80122d4:	d111      	bne.n	80122fa <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 80122d6:	2008      	movs	r0, #8
 80122d8:	f7ff ff3c 	bl	8012154 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80122dc:	2001      	movs	r0, #1
 80122de:	f7fd fd33 	bl	800fd48 <memp_malloc>
 80122e2:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 80122e4:	68fb      	ldr	r3, [r7, #12]
 80122e6:	2b00      	cmp	r3, #0
 80122e8:	d107      	bne.n	80122fa <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 80122ea:	79fb      	ldrb	r3, [r7, #7]
 80122ec:	4618      	mov	r0, r3
 80122ee:	f7ff fee3 	bl	80120b8 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80122f2:	2001      	movs	r0, #1
 80122f4:	f7fd fd28 	bl	800fd48 <memp_malloc>
 80122f8:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 80122fa:	68fb      	ldr	r3, [r7, #12]
 80122fc:	2b00      	cmp	r3, #0
 80122fe:	d03f      	beq.n	8012380 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8012300:	229c      	movs	r2, #156	; 0x9c
 8012302:	2100      	movs	r1, #0
 8012304:	68f8      	ldr	r0, [r7, #12]
 8012306:	f007 fc11 	bl	8019b2c <memset>
    pcb->prio = prio;
 801230a:	68fb      	ldr	r3, [r7, #12]
 801230c:	79fa      	ldrb	r2, [r7, #7]
 801230e:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8012310:	68fb      	ldr	r3, [r7, #12]
 8012312:	f241 62d0 	movw	r2, #5840	; 0x16d0
 8012316:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 801231a:	68fb      	ldr	r3, [r7, #12]
 801231c:	f241 62d0 	movw	r2, #5840	; 0x16d0
 8012320:	855a      	strh	r2, [r3, #42]	; 0x2a
 8012322:	68fb      	ldr	r3, [r7, #12]
 8012324:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8012326:	68fb      	ldr	r3, [r7, #12]
 8012328:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 801232a:	68fb      	ldr	r3, [r7, #12]
 801232c:	22ff      	movs	r2, #255	; 0xff
 801232e:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8012330:	68fb      	ldr	r3, [r7, #12]
 8012332:	f44f 7206 	mov.w	r2, #536	; 0x218
 8012336:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8012338:	68fb      	ldr	r3, [r7, #12]
 801233a:	2206      	movs	r2, #6
 801233c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8012340:	68fb      	ldr	r3, [r7, #12]
 8012342:	2206      	movs	r2, #6
 8012344:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8012346:	68fb      	ldr	r3, [r7, #12]
 8012348:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801234c:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 801234e:	68fb      	ldr	r3, [r7, #12]
 8012350:	2201      	movs	r2, #1
 8012352:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8012356:	4b0d      	ldr	r3, [pc, #52]	; (801238c <tcp_alloc+0xf8>)
 8012358:	681a      	ldr	r2, [r3, #0]
 801235a:	68fb      	ldr	r3, [r7, #12]
 801235c:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 801235e:	4b0c      	ldr	r3, [pc, #48]	; (8012390 <tcp_alloc+0xfc>)
 8012360:	781a      	ldrb	r2, [r3, #0]
 8012362:	68fb      	ldr	r3, [r7, #12]
 8012364:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8012366:	68fb      	ldr	r3, [r7, #12]
 8012368:	f241 62d0 	movw	r2, #5840	; 0x16d0
 801236c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8012370:	68fb      	ldr	r3, [r7, #12]
 8012372:	4a08      	ldr	r2, [pc, #32]	; (8012394 <tcp_alloc+0x100>)
 8012374:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8012378:	68fb      	ldr	r3, [r7, #12]
 801237a:	4a07      	ldr	r2, [pc, #28]	; (8012398 <tcp_alloc+0x104>)
 801237c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8012380:	68fb      	ldr	r3, [r7, #12]
}
 8012382:	4618      	mov	r0, r3
 8012384:	3710      	adds	r7, #16
 8012386:	46bd      	mov	sp, r7
 8012388:	bd80      	pop	{r7, pc}
 801238a:	bf00      	nop
 801238c:	2000708c 	.word	0x2000708c
 8012390:	200070a2 	.word	0x200070a2
 8012394:	0801204d 	.word	0x0801204d
 8012398:	006ddd00 	.word	0x006ddd00

0801239c <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 801239c:	b580      	push	{r7, lr}
 801239e:	b082      	sub	sp, #8
 80123a0:	af00      	add	r7, sp, #0
 80123a2:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 80123a4:	687b      	ldr	r3, [r7, #4]
 80123a6:	2b00      	cmp	r3, #0
 80123a8:	d107      	bne.n	80123ba <tcp_pcb_purge+0x1e>
 80123aa:	4b21      	ldr	r3, [pc, #132]	; (8012430 <tcp_pcb_purge+0x94>)
 80123ac:	f640 0251 	movw	r2, #2129	; 0x851
 80123b0:	4920      	ldr	r1, [pc, #128]	; (8012434 <tcp_pcb_purge+0x98>)
 80123b2:	4821      	ldr	r0, [pc, #132]	; (8012438 <tcp_pcb_purge+0x9c>)
 80123b4:	f007 fa64 	bl	8019880 <iprintf>
 80123b8:	e037      	b.n	801242a <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 80123ba:	687b      	ldr	r3, [r7, #4]
 80123bc:	7d1b      	ldrb	r3, [r3, #20]
 80123be:	2b00      	cmp	r3, #0
 80123c0:	d033      	beq.n	801242a <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 80123c2:	687b      	ldr	r3, [r7, #4]
 80123c4:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 80123c6:	2b0a      	cmp	r3, #10
 80123c8:	d02f      	beq.n	801242a <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 80123ca:	687b      	ldr	r3, [r7, #4]
 80123cc:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 80123ce:	2b01      	cmp	r3, #1
 80123d0:	d02b      	beq.n	801242a <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 80123d2:	687b      	ldr	r3, [r7, #4]
 80123d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80123d6:	2b00      	cmp	r3, #0
 80123d8:	d007      	beq.n	80123ea <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 80123da:	687b      	ldr	r3, [r7, #4]
 80123dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80123de:	4618      	mov	r0, r3
 80123e0:	f7fe fb78 	bl	8010ad4 <pbuf_free>
      pcb->refused_data = NULL;
 80123e4:	687b      	ldr	r3, [r7, #4]
 80123e6:	2200      	movs	r2, #0
 80123e8:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80123ea:	687b      	ldr	r3, [r7, #4]
 80123ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80123ee:	2b00      	cmp	r3, #0
 80123f0:	d002      	beq.n	80123f8 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 80123f2:	6878      	ldr	r0, [r7, #4]
 80123f4:	f000 f986 	bl	8012704 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 80123f8:	687b      	ldr	r3, [r7, #4]
 80123fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80123fe:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8012400:	687b      	ldr	r3, [r7, #4]
 8012402:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012404:	4618      	mov	r0, r3
 8012406:	f7ff fdc7 	bl	8011f98 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 801240a:	687b      	ldr	r3, [r7, #4]
 801240c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801240e:	4618      	mov	r0, r3
 8012410:	f7ff fdc2 	bl	8011f98 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8012414:	687b      	ldr	r3, [r7, #4]
 8012416:	2200      	movs	r2, #0
 8012418:	66da      	str	r2, [r3, #108]	; 0x6c
 801241a:	687b      	ldr	r3, [r7, #4]
 801241c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 801241e:	687b      	ldr	r3, [r7, #4]
 8012420:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8012422:	687b      	ldr	r3, [r7, #4]
 8012424:	2200      	movs	r2, #0
 8012426:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 801242a:	3708      	adds	r7, #8
 801242c:	46bd      	mov	sp, r7
 801242e:	bd80      	pop	{r7, pc}
 8012430:	0801cbfc 	.word	0x0801cbfc
 8012434:	0801d248 	.word	0x0801d248
 8012438:	0801cc40 	.word	0x0801cc40

0801243c <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 801243c:	b580      	push	{r7, lr}
 801243e:	b084      	sub	sp, #16
 8012440:	af00      	add	r7, sp, #0
 8012442:	6078      	str	r0, [r7, #4]
 8012444:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8012446:	683b      	ldr	r3, [r7, #0]
 8012448:	2b00      	cmp	r3, #0
 801244a:	d106      	bne.n	801245a <tcp_pcb_remove+0x1e>
 801244c:	4b3e      	ldr	r3, [pc, #248]	; (8012548 <tcp_pcb_remove+0x10c>)
 801244e:	f640 0283 	movw	r2, #2179	; 0x883
 8012452:	493e      	ldr	r1, [pc, #248]	; (801254c <tcp_pcb_remove+0x110>)
 8012454:	483e      	ldr	r0, [pc, #248]	; (8012550 <tcp_pcb_remove+0x114>)
 8012456:	f007 fa13 	bl	8019880 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 801245a:	687b      	ldr	r3, [r7, #4]
 801245c:	2b00      	cmp	r3, #0
 801245e:	d106      	bne.n	801246e <tcp_pcb_remove+0x32>
 8012460:	4b39      	ldr	r3, [pc, #228]	; (8012548 <tcp_pcb_remove+0x10c>)
 8012462:	f640 0284 	movw	r2, #2180	; 0x884
 8012466:	493b      	ldr	r1, [pc, #236]	; (8012554 <tcp_pcb_remove+0x118>)
 8012468:	4839      	ldr	r0, [pc, #228]	; (8012550 <tcp_pcb_remove+0x114>)
 801246a:	f007 fa09 	bl	8019880 <iprintf>

  TCP_RMV(pcblist, pcb);
 801246e:	687b      	ldr	r3, [r7, #4]
 8012470:	681b      	ldr	r3, [r3, #0]
 8012472:	683a      	ldr	r2, [r7, #0]
 8012474:	429a      	cmp	r2, r3
 8012476:	d105      	bne.n	8012484 <tcp_pcb_remove+0x48>
 8012478:	687b      	ldr	r3, [r7, #4]
 801247a:	681b      	ldr	r3, [r3, #0]
 801247c:	68da      	ldr	r2, [r3, #12]
 801247e:	687b      	ldr	r3, [r7, #4]
 8012480:	601a      	str	r2, [r3, #0]
 8012482:	e013      	b.n	80124ac <tcp_pcb_remove+0x70>
 8012484:	687b      	ldr	r3, [r7, #4]
 8012486:	681b      	ldr	r3, [r3, #0]
 8012488:	60fb      	str	r3, [r7, #12]
 801248a:	e00c      	b.n	80124a6 <tcp_pcb_remove+0x6a>
 801248c:	68fb      	ldr	r3, [r7, #12]
 801248e:	68db      	ldr	r3, [r3, #12]
 8012490:	683a      	ldr	r2, [r7, #0]
 8012492:	429a      	cmp	r2, r3
 8012494:	d104      	bne.n	80124a0 <tcp_pcb_remove+0x64>
 8012496:	683b      	ldr	r3, [r7, #0]
 8012498:	68da      	ldr	r2, [r3, #12]
 801249a:	68fb      	ldr	r3, [r7, #12]
 801249c:	60da      	str	r2, [r3, #12]
 801249e:	e005      	b.n	80124ac <tcp_pcb_remove+0x70>
 80124a0:	68fb      	ldr	r3, [r7, #12]
 80124a2:	68db      	ldr	r3, [r3, #12]
 80124a4:	60fb      	str	r3, [r7, #12]
 80124a6:	68fb      	ldr	r3, [r7, #12]
 80124a8:	2b00      	cmp	r3, #0
 80124aa:	d1ef      	bne.n	801248c <tcp_pcb_remove+0x50>
 80124ac:	683b      	ldr	r3, [r7, #0]
 80124ae:	2200      	movs	r2, #0
 80124b0:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 80124b2:	6838      	ldr	r0, [r7, #0]
 80124b4:	f7ff ff72 	bl	801239c <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 80124b8:	683b      	ldr	r3, [r7, #0]
 80124ba:	7d1b      	ldrb	r3, [r3, #20]
 80124bc:	2b0a      	cmp	r3, #10
 80124be:	d013      	beq.n	80124e8 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 80124c0:	683b      	ldr	r3, [r7, #0]
 80124c2:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 80124c4:	2b01      	cmp	r3, #1
 80124c6:	d00f      	beq.n	80124e8 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 80124c8:	683b      	ldr	r3, [r7, #0]
 80124ca:	8b5b      	ldrh	r3, [r3, #26]
 80124cc:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 80124d0:	2b00      	cmp	r3, #0
 80124d2:	d009      	beq.n	80124e8 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 80124d4:	683b      	ldr	r3, [r7, #0]
 80124d6:	8b5b      	ldrh	r3, [r3, #26]
 80124d8:	f043 0302 	orr.w	r3, r3, #2
 80124dc:	b29a      	uxth	r2, r3
 80124de:	683b      	ldr	r3, [r7, #0]
 80124e0:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80124e2:	6838      	ldr	r0, [r7, #0]
 80124e4:	f002 ff6e 	bl	80153c4 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 80124e8:	683b      	ldr	r3, [r7, #0]
 80124ea:	7d1b      	ldrb	r3, [r3, #20]
 80124ec:	2b01      	cmp	r3, #1
 80124ee:	d020      	beq.n	8012532 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 80124f0:	683b      	ldr	r3, [r7, #0]
 80124f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80124f4:	2b00      	cmp	r3, #0
 80124f6:	d006      	beq.n	8012506 <tcp_pcb_remove+0xca>
 80124f8:	4b13      	ldr	r3, [pc, #76]	; (8012548 <tcp_pcb_remove+0x10c>)
 80124fa:	f640 0293 	movw	r2, #2195	; 0x893
 80124fe:	4916      	ldr	r1, [pc, #88]	; (8012558 <tcp_pcb_remove+0x11c>)
 8012500:	4813      	ldr	r0, [pc, #76]	; (8012550 <tcp_pcb_remove+0x114>)
 8012502:	f007 f9bd 	bl	8019880 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8012506:	683b      	ldr	r3, [r7, #0]
 8012508:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801250a:	2b00      	cmp	r3, #0
 801250c:	d006      	beq.n	801251c <tcp_pcb_remove+0xe0>
 801250e:	4b0e      	ldr	r3, [pc, #56]	; (8012548 <tcp_pcb_remove+0x10c>)
 8012510:	f640 0294 	movw	r2, #2196	; 0x894
 8012514:	4911      	ldr	r1, [pc, #68]	; (801255c <tcp_pcb_remove+0x120>)
 8012516:	480e      	ldr	r0, [pc, #56]	; (8012550 <tcp_pcb_remove+0x114>)
 8012518:	f007 f9b2 	bl	8019880 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 801251c:	683b      	ldr	r3, [r7, #0]
 801251e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012520:	2b00      	cmp	r3, #0
 8012522:	d006      	beq.n	8012532 <tcp_pcb_remove+0xf6>
 8012524:	4b08      	ldr	r3, [pc, #32]	; (8012548 <tcp_pcb_remove+0x10c>)
 8012526:	f640 0296 	movw	r2, #2198	; 0x896
 801252a:	490d      	ldr	r1, [pc, #52]	; (8012560 <tcp_pcb_remove+0x124>)
 801252c:	4808      	ldr	r0, [pc, #32]	; (8012550 <tcp_pcb_remove+0x114>)
 801252e:	f007 f9a7 	bl	8019880 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8012532:	683b      	ldr	r3, [r7, #0]
 8012534:	2200      	movs	r2, #0
 8012536:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8012538:	683b      	ldr	r3, [r7, #0]
 801253a:	2200      	movs	r2, #0
 801253c:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 801253e:	bf00      	nop
 8012540:	3710      	adds	r7, #16
 8012542:	46bd      	mov	sp, r7
 8012544:	bd80      	pop	{r7, pc}
 8012546:	bf00      	nop
 8012548:	0801cbfc 	.word	0x0801cbfc
 801254c:	0801d264 	.word	0x0801d264
 8012550:	0801cc40 	.word	0x0801cc40
 8012554:	0801d280 	.word	0x0801d280
 8012558:	0801d2a0 	.word	0x0801d2a0
 801255c:	0801d2b8 	.word	0x0801d2b8
 8012560:	0801d2d4 	.word	0x0801d2d4

08012564 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8012564:	b580      	push	{r7, lr}
 8012566:	b082      	sub	sp, #8
 8012568:	af00      	add	r7, sp, #0
 801256a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 801256c:	687b      	ldr	r3, [r7, #4]
 801256e:	2b00      	cmp	r3, #0
 8012570:	d106      	bne.n	8012580 <tcp_next_iss+0x1c>
 8012572:	4b0a      	ldr	r3, [pc, #40]	; (801259c <tcp_next_iss+0x38>)
 8012574:	f640 02af 	movw	r2, #2223	; 0x8af
 8012578:	4909      	ldr	r1, [pc, #36]	; (80125a0 <tcp_next_iss+0x3c>)
 801257a:	480a      	ldr	r0, [pc, #40]	; (80125a4 <tcp_next_iss+0x40>)
 801257c:	f007 f980 	bl	8019880 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8012580:	4b09      	ldr	r3, [pc, #36]	; (80125a8 <tcp_next_iss+0x44>)
 8012582:	681a      	ldr	r2, [r3, #0]
 8012584:	4b09      	ldr	r3, [pc, #36]	; (80125ac <tcp_next_iss+0x48>)
 8012586:	681b      	ldr	r3, [r3, #0]
 8012588:	4413      	add	r3, r2
 801258a:	4a07      	ldr	r2, [pc, #28]	; (80125a8 <tcp_next_iss+0x44>)
 801258c:	6013      	str	r3, [r2, #0]
  return iss;
 801258e:	4b06      	ldr	r3, [pc, #24]	; (80125a8 <tcp_next_iss+0x44>)
 8012590:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8012592:	4618      	mov	r0, r3
 8012594:	3708      	adds	r7, #8
 8012596:	46bd      	mov	sp, r7
 8012598:	bd80      	pop	{r7, pc}
 801259a:	bf00      	nop
 801259c:	0801cbfc 	.word	0x0801cbfc
 80125a0:	0801d2ec 	.word	0x0801d2ec
 80125a4:	0801cc40 	.word	0x0801cc40
 80125a8:	2000005c 	.word	0x2000005c
 80125ac:	2000708c 	.word	0x2000708c

080125b0 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 80125b0:	b580      	push	{r7, lr}
 80125b2:	b086      	sub	sp, #24
 80125b4:	af00      	add	r7, sp, #0
 80125b6:	4603      	mov	r3, r0
 80125b8:	60b9      	str	r1, [r7, #8]
 80125ba:	607a      	str	r2, [r7, #4]
 80125bc:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 80125be:	687b      	ldr	r3, [r7, #4]
 80125c0:	2b00      	cmp	r3, #0
 80125c2:	d106      	bne.n	80125d2 <tcp_eff_send_mss_netif+0x22>
 80125c4:	4b14      	ldr	r3, [pc, #80]	; (8012618 <tcp_eff_send_mss_netif+0x68>)
 80125c6:	f640 02c5 	movw	r2, #2245	; 0x8c5
 80125ca:	4914      	ldr	r1, [pc, #80]	; (801261c <tcp_eff_send_mss_netif+0x6c>)
 80125cc:	4814      	ldr	r0, [pc, #80]	; (8012620 <tcp_eff_send_mss_netif+0x70>)
 80125ce:	f007 f957 	bl	8019880 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 80125d2:	68bb      	ldr	r3, [r7, #8]
 80125d4:	2b00      	cmp	r3, #0
 80125d6:	d101      	bne.n	80125dc <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 80125d8:	89fb      	ldrh	r3, [r7, #14]
 80125da:	e019      	b.n	8012610 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 80125dc:	68bb      	ldr	r3, [r7, #8]
 80125de:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80125e0:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 80125e2:	8afb      	ldrh	r3, [r7, #22]
 80125e4:	2b00      	cmp	r3, #0
 80125e6:	d012      	beq.n	801260e <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 80125e8:	2328      	movs	r3, #40	; 0x28
 80125ea:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 80125ec:	8afa      	ldrh	r2, [r7, #22]
 80125ee:	8abb      	ldrh	r3, [r7, #20]
 80125f0:	429a      	cmp	r2, r3
 80125f2:	d904      	bls.n	80125fe <tcp_eff_send_mss_netif+0x4e>
 80125f4:	8afa      	ldrh	r2, [r7, #22]
 80125f6:	8abb      	ldrh	r3, [r7, #20]
 80125f8:	1ad3      	subs	r3, r2, r3
 80125fa:	b29b      	uxth	r3, r3
 80125fc:	e000      	b.n	8012600 <tcp_eff_send_mss_netif+0x50>
 80125fe:	2300      	movs	r3, #0
 8012600:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8012602:	8a7a      	ldrh	r2, [r7, #18]
 8012604:	89fb      	ldrh	r3, [r7, #14]
 8012606:	4293      	cmp	r3, r2
 8012608:	bf28      	it	cs
 801260a:	4613      	movcs	r3, r2
 801260c:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 801260e:	89fb      	ldrh	r3, [r7, #14]
}
 8012610:	4618      	mov	r0, r3
 8012612:	3718      	adds	r7, #24
 8012614:	46bd      	mov	sp, r7
 8012616:	bd80      	pop	{r7, pc}
 8012618:	0801cbfc 	.word	0x0801cbfc
 801261c:	0801d308 	.word	0x0801d308
 8012620:	0801cc40 	.word	0x0801cc40

08012624 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8012624:	b580      	push	{r7, lr}
 8012626:	b084      	sub	sp, #16
 8012628:	af00      	add	r7, sp, #0
 801262a:	6078      	str	r0, [r7, #4]
 801262c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 801262e:	683b      	ldr	r3, [r7, #0]
 8012630:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8012632:	687b      	ldr	r3, [r7, #4]
 8012634:	2b00      	cmp	r3, #0
 8012636:	d119      	bne.n	801266c <tcp_netif_ip_addr_changed_pcblist+0x48>
 8012638:	4b10      	ldr	r3, [pc, #64]	; (801267c <tcp_netif_ip_addr_changed_pcblist+0x58>)
 801263a:	f44f 6210 	mov.w	r2, #2304	; 0x900
 801263e:	4910      	ldr	r1, [pc, #64]	; (8012680 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8012640:	4810      	ldr	r0, [pc, #64]	; (8012684 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8012642:	f007 f91d 	bl	8019880 <iprintf>

  while (pcb != NULL) {
 8012646:	e011      	b.n	801266c <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8012648:	68fb      	ldr	r3, [r7, #12]
 801264a:	681a      	ldr	r2, [r3, #0]
 801264c:	687b      	ldr	r3, [r7, #4]
 801264e:	681b      	ldr	r3, [r3, #0]
 8012650:	429a      	cmp	r2, r3
 8012652:	d108      	bne.n	8012666 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8012654:	68fb      	ldr	r3, [r7, #12]
 8012656:	68db      	ldr	r3, [r3, #12]
 8012658:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 801265a:	68f8      	ldr	r0, [r7, #12]
 801265c:	f7fe ffc2 	bl	80115e4 <tcp_abort>
      pcb = next;
 8012660:	68bb      	ldr	r3, [r7, #8]
 8012662:	60fb      	str	r3, [r7, #12]
 8012664:	e002      	b.n	801266c <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8012666:	68fb      	ldr	r3, [r7, #12]
 8012668:	68db      	ldr	r3, [r3, #12]
 801266a:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 801266c:	68fb      	ldr	r3, [r7, #12]
 801266e:	2b00      	cmp	r3, #0
 8012670:	d1ea      	bne.n	8012648 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8012672:	bf00      	nop
 8012674:	bf00      	nop
 8012676:	3710      	adds	r7, #16
 8012678:	46bd      	mov	sp, r7
 801267a:	bd80      	pop	{r7, pc}
 801267c:	0801cbfc 	.word	0x0801cbfc
 8012680:	0801d330 	.word	0x0801d330
 8012684:	0801cc40 	.word	0x0801cc40

08012688 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8012688:	b580      	push	{r7, lr}
 801268a:	b084      	sub	sp, #16
 801268c:	af00      	add	r7, sp, #0
 801268e:	6078      	str	r0, [r7, #4]
 8012690:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8012692:	687b      	ldr	r3, [r7, #4]
 8012694:	2b00      	cmp	r3, #0
 8012696:	d02a      	beq.n	80126ee <tcp_netif_ip_addr_changed+0x66>
 8012698:	687b      	ldr	r3, [r7, #4]
 801269a:	681b      	ldr	r3, [r3, #0]
 801269c:	2b00      	cmp	r3, #0
 801269e:	d026      	beq.n	80126ee <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 80126a0:	4b15      	ldr	r3, [pc, #84]	; (80126f8 <tcp_netif_ip_addr_changed+0x70>)
 80126a2:	681b      	ldr	r3, [r3, #0]
 80126a4:	4619      	mov	r1, r3
 80126a6:	6878      	ldr	r0, [r7, #4]
 80126a8:	f7ff ffbc 	bl	8012624 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 80126ac:	4b13      	ldr	r3, [pc, #76]	; (80126fc <tcp_netif_ip_addr_changed+0x74>)
 80126ae:	681b      	ldr	r3, [r3, #0]
 80126b0:	4619      	mov	r1, r3
 80126b2:	6878      	ldr	r0, [r7, #4]
 80126b4:	f7ff ffb6 	bl	8012624 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 80126b8:	683b      	ldr	r3, [r7, #0]
 80126ba:	2b00      	cmp	r3, #0
 80126bc:	d017      	beq.n	80126ee <tcp_netif_ip_addr_changed+0x66>
 80126be:	683b      	ldr	r3, [r7, #0]
 80126c0:	681b      	ldr	r3, [r3, #0]
 80126c2:	2b00      	cmp	r3, #0
 80126c4:	d013      	beq.n	80126ee <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80126c6:	4b0e      	ldr	r3, [pc, #56]	; (8012700 <tcp_netif_ip_addr_changed+0x78>)
 80126c8:	681b      	ldr	r3, [r3, #0]
 80126ca:	60fb      	str	r3, [r7, #12]
 80126cc:	e00c      	b.n	80126e8 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 80126ce:	68fb      	ldr	r3, [r7, #12]
 80126d0:	681a      	ldr	r2, [r3, #0]
 80126d2:	687b      	ldr	r3, [r7, #4]
 80126d4:	681b      	ldr	r3, [r3, #0]
 80126d6:	429a      	cmp	r2, r3
 80126d8:	d103      	bne.n	80126e2 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 80126da:	683b      	ldr	r3, [r7, #0]
 80126dc:	681a      	ldr	r2, [r3, #0]
 80126de:	68fb      	ldr	r3, [r7, #12]
 80126e0:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80126e2:	68fb      	ldr	r3, [r7, #12]
 80126e4:	68db      	ldr	r3, [r3, #12]
 80126e6:	60fb      	str	r3, [r7, #12]
 80126e8:	68fb      	ldr	r3, [r7, #12]
 80126ea:	2b00      	cmp	r3, #0
 80126ec:	d1ef      	bne.n	80126ce <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 80126ee:	bf00      	nop
 80126f0:	3710      	adds	r7, #16
 80126f2:	46bd      	mov	sp, r7
 80126f4:	bd80      	pop	{r7, pc}
 80126f6:	bf00      	nop
 80126f8:	20007098 	.word	0x20007098
 80126fc:	20007090 	.word	0x20007090
 8012700:	20007094 	.word	0x20007094

08012704 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8012704:	b580      	push	{r7, lr}
 8012706:	b082      	sub	sp, #8
 8012708:	af00      	add	r7, sp, #0
 801270a:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 801270c:	687b      	ldr	r3, [r7, #4]
 801270e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012710:	2b00      	cmp	r3, #0
 8012712:	d007      	beq.n	8012724 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8012714:	687b      	ldr	r3, [r7, #4]
 8012716:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012718:	4618      	mov	r0, r3
 801271a:	f7ff fc3d 	bl	8011f98 <tcp_segs_free>
    pcb->ooseq = NULL;
 801271e:	687b      	ldr	r3, [r7, #4]
 8012720:	2200      	movs	r2, #0
 8012722:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8012724:	bf00      	nop
 8012726:	3708      	adds	r7, #8
 8012728:	46bd      	mov	sp, r7
 801272a:	bd80      	pop	{r7, pc}

0801272c <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 801272c:	b590      	push	{r4, r7, lr}
 801272e:	b08d      	sub	sp, #52	; 0x34
 8012730:	af04      	add	r7, sp, #16
 8012732:	6078      	str	r0, [r7, #4]
 8012734:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8012736:	687b      	ldr	r3, [r7, #4]
 8012738:	2b00      	cmp	r3, #0
 801273a:	d105      	bne.n	8012748 <tcp_input+0x1c>
 801273c:	4b9b      	ldr	r3, [pc, #620]	; (80129ac <tcp_input+0x280>)
 801273e:	2283      	movs	r2, #131	; 0x83
 8012740:	499b      	ldr	r1, [pc, #620]	; (80129b0 <tcp_input+0x284>)
 8012742:	489c      	ldr	r0, [pc, #624]	; (80129b4 <tcp_input+0x288>)
 8012744:	f007 f89c 	bl	8019880 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8012748:	687b      	ldr	r3, [r7, #4]
 801274a:	685b      	ldr	r3, [r3, #4]
 801274c:	4a9a      	ldr	r2, [pc, #616]	; (80129b8 <tcp_input+0x28c>)
 801274e:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8012750:	687b      	ldr	r3, [r7, #4]
 8012752:	895b      	ldrh	r3, [r3, #10]
 8012754:	2b13      	cmp	r3, #19
 8012756:	f240 83d1 	bls.w	8012efc <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801275a:	4b98      	ldr	r3, [pc, #608]	; (80129bc <tcp_input+0x290>)
 801275c:	695b      	ldr	r3, [r3, #20]
 801275e:	4a97      	ldr	r2, [pc, #604]	; (80129bc <tcp_input+0x290>)
 8012760:	6812      	ldr	r2, [r2, #0]
 8012762:	4611      	mov	r1, r2
 8012764:	4618      	mov	r0, r3
 8012766:	f005 fbfb 	bl	8017f60 <ip4_addr_isbroadcast_u32>
 801276a:	4603      	mov	r3, r0
 801276c:	2b00      	cmp	r3, #0
 801276e:	f040 83c7 	bne.w	8012f00 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8012772:	4b92      	ldr	r3, [pc, #584]	; (80129bc <tcp_input+0x290>)
 8012774:	695b      	ldr	r3, [r3, #20]
 8012776:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801277a:	2be0      	cmp	r3, #224	; 0xe0
 801277c:	f000 83c0 	beq.w	8012f00 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8012780:	4b8d      	ldr	r3, [pc, #564]	; (80129b8 <tcp_input+0x28c>)
 8012782:	681b      	ldr	r3, [r3, #0]
 8012784:	899b      	ldrh	r3, [r3, #12]
 8012786:	b29b      	uxth	r3, r3
 8012788:	4618      	mov	r0, r3
 801278a:	f7fc fdbf 	bl	800f30c <lwip_htons>
 801278e:	4603      	mov	r3, r0
 8012790:	0b1b      	lsrs	r3, r3, #12
 8012792:	b29b      	uxth	r3, r3
 8012794:	b2db      	uxtb	r3, r3
 8012796:	009b      	lsls	r3, r3, #2
 8012798:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 801279a:	7cbb      	ldrb	r3, [r7, #18]
 801279c:	2b13      	cmp	r3, #19
 801279e:	f240 83b1 	bls.w	8012f04 <tcp_input+0x7d8>
 80127a2:	7cbb      	ldrb	r3, [r7, #18]
 80127a4:	b29a      	uxth	r2, r3
 80127a6:	687b      	ldr	r3, [r7, #4]
 80127a8:	891b      	ldrh	r3, [r3, #8]
 80127aa:	429a      	cmp	r2, r3
 80127ac:	f200 83aa 	bhi.w	8012f04 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 80127b0:	7cbb      	ldrb	r3, [r7, #18]
 80127b2:	b29b      	uxth	r3, r3
 80127b4:	3b14      	subs	r3, #20
 80127b6:	b29a      	uxth	r2, r3
 80127b8:	4b81      	ldr	r3, [pc, #516]	; (80129c0 <tcp_input+0x294>)
 80127ba:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 80127bc:	4b81      	ldr	r3, [pc, #516]	; (80129c4 <tcp_input+0x298>)
 80127be:	2200      	movs	r2, #0
 80127c0:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 80127c2:	687b      	ldr	r3, [r7, #4]
 80127c4:	895a      	ldrh	r2, [r3, #10]
 80127c6:	7cbb      	ldrb	r3, [r7, #18]
 80127c8:	b29b      	uxth	r3, r3
 80127ca:	429a      	cmp	r2, r3
 80127cc:	d309      	bcc.n	80127e2 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 80127ce:	4b7c      	ldr	r3, [pc, #496]	; (80129c0 <tcp_input+0x294>)
 80127d0:	881a      	ldrh	r2, [r3, #0]
 80127d2:	4b7d      	ldr	r3, [pc, #500]	; (80129c8 <tcp_input+0x29c>)
 80127d4:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 80127d6:	7cbb      	ldrb	r3, [r7, #18]
 80127d8:	4619      	mov	r1, r3
 80127da:	6878      	ldr	r0, [r7, #4]
 80127dc:	f7fe f8f4 	bl	80109c8 <pbuf_remove_header>
 80127e0:	e04e      	b.n	8012880 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 80127e2:	687b      	ldr	r3, [r7, #4]
 80127e4:	681b      	ldr	r3, [r3, #0]
 80127e6:	2b00      	cmp	r3, #0
 80127e8:	d105      	bne.n	80127f6 <tcp_input+0xca>
 80127ea:	4b70      	ldr	r3, [pc, #448]	; (80129ac <tcp_input+0x280>)
 80127ec:	22c2      	movs	r2, #194	; 0xc2
 80127ee:	4977      	ldr	r1, [pc, #476]	; (80129cc <tcp_input+0x2a0>)
 80127f0:	4870      	ldr	r0, [pc, #448]	; (80129b4 <tcp_input+0x288>)
 80127f2:	f007 f845 	bl	8019880 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 80127f6:	2114      	movs	r1, #20
 80127f8:	6878      	ldr	r0, [r7, #4]
 80127fa:	f7fe f8e5 	bl	80109c8 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 80127fe:	687b      	ldr	r3, [r7, #4]
 8012800:	895a      	ldrh	r2, [r3, #10]
 8012802:	4b71      	ldr	r3, [pc, #452]	; (80129c8 <tcp_input+0x29c>)
 8012804:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8012806:	4b6e      	ldr	r3, [pc, #440]	; (80129c0 <tcp_input+0x294>)
 8012808:	881a      	ldrh	r2, [r3, #0]
 801280a:	4b6f      	ldr	r3, [pc, #444]	; (80129c8 <tcp_input+0x29c>)
 801280c:	881b      	ldrh	r3, [r3, #0]
 801280e:	1ad3      	subs	r3, r2, r3
 8012810:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8012812:	4b6d      	ldr	r3, [pc, #436]	; (80129c8 <tcp_input+0x29c>)
 8012814:	881b      	ldrh	r3, [r3, #0]
 8012816:	4619      	mov	r1, r3
 8012818:	6878      	ldr	r0, [r7, #4]
 801281a:	f7fe f8d5 	bl	80109c8 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 801281e:	687b      	ldr	r3, [r7, #4]
 8012820:	681b      	ldr	r3, [r3, #0]
 8012822:	895b      	ldrh	r3, [r3, #10]
 8012824:	8a3a      	ldrh	r2, [r7, #16]
 8012826:	429a      	cmp	r2, r3
 8012828:	f200 836e 	bhi.w	8012f08 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 801282c:	687b      	ldr	r3, [r7, #4]
 801282e:	681b      	ldr	r3, [r3, #0]
 8012830:	685b      	ldr	r3, [r3, #4]
 8012832:	4a64      	ldr	r2, [pc, #400]	; (80129c4 <tcp_input+0x298>)
 8012834:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8012836:	687b      	ldr	r3, [r7, #4]
 8012838:	681b      	ldr	r3, [r3, #0]
 801283a:	8a3a      	ldrh	r2, [r7, #16]
 801283c:	4611      	mov	r1, r2
 801283e:	4618      	mov	r0, r3
 8012840:	f7fe f8c2 	bl	80109c8 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8012844:	687b      	ldr	r3, [r7, #4]
 8012846:	891a      	ldrh	r2, [r3, #8]
 8012848:	8a3b      	ldrh	r3, [r7, #16]
 801284a:	1ad3      	subs	r3, r2, r3
 801284c:	b29a      	uxth	r2, r3
 801284e:	687b      	ldr	r3, [r7, #4]
 8012850:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8012852:	687b      	ldr	r3, [r7, #4]
 8012854:	895b      	ldrh	r3, [r3, #10]
 8012856:	2b00      	cmp	r3, #0
 8012858:	d005      	beq.n	8012866 <tcp_input+0x13a>
 801285a:	4b54      	ldr	r3, [pc, #336]	; (80129ac <tcp_input+0x280>)
 801285c:	22df      	movs	r2, #223	; 0xdf
 801285e:	495c      	ldr	r1, [pc, #368]	; (80129d0 <tcp_input+0x2a4>)
 8012860:	4854      	ldr	r0, [pc, #336]	; (80129b4 <tcp_input+0x288>)
 8012862:	f007 f80d 	bl	8019880 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8012866:	687b      	ldr	r3, [r7, #4]
 8012868:	891a      	ldrh	r2, [r3, #8]
 801286a:	687b      	ldr	r3, [r7, #4]
 801286c:	681b      	ldr	r3, [r3, #0]
 801286e:	891b      	ldrh	r3, [r3, #8]
 8012870:	429a      	cmp	r2, r3
 8012872:	d005      	beq.n	8012880 <tcp_input+0x154>
 8012874:	4b4d      	ldr	r3, [pc, #308]	; (80129ac <tcp_input+0x280>)
 8012876:	22e0      	movs	r2, #224	; 0xe0
 8012878:	4956      	ldr	r1, [pc, #344]	; (80129d4 <tcp_input+0x2a8>)
 801287a:	484e      	ldr	r0, [pc, #312]	; (80129b4 <tcp_input+0x288>)
 801287c:	f007 f800 	bl	8019880 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8012880:	4b4d      	ldr	r3, [pc, #308]	; (80129b8 <tcp_input+0x28c>)
 8012882:	681b      	ldr	r3, [r3, #0]
 8012884:	881b      	ldrh	r3, [r3, #0]
 8012886:	b29b      	uxth	r3, r3
 8012888:	4a4b      	ldr	r2, [pc, #300]	; (80129b8 <tcp_input+0x28c>)
 801288a:	6814      	ldr	r4, [r2, #0]
 801288c:	4618      	mov	r0, r3
 801288e:	f7fc fd3d 	bl	800f30c <lwip_htons>
 8012892:	4603      	mov	r3, r0
 8012894:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8012896:	4b48      	ldr	r3, [pc, #288]	; (80129b8 <tcp_input+0x28c>)
 8012898:	681b      	ldr	r3, [r3, #0]
 801289a:	885b      	ldrh	r3, [r3, #2]
 801289c:	b29b      	uxth	r3, r3
 801289e:	4a46      	ldr	r2, [pc, #280]	; (80129b8 <tcp_input+0x28c>)
 80128a0:	6814      	ldr	r4, [r2, #0]
 80128a2:	4618      	mov	r0, r3
 80128a4:	f7fc fd32 	bl	800f30c <lwip_htons>
 80128a8:	4603      	mov	r3, r0
 80128aa:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 80128ac:	4b42      	ldr	r3, [pc, #264]	; (80129b8 <tcp_input+0x28c>)
 80128ae:	681b      	ldr	r3, [r3, #0]
 80128b0:	685b      	ldr	r3, [r3, #4]
 80128b2:	4a41      	ldr	r2, [pc, #260]	; (80129b8 <tcp_input+0x28c>)
 80128b4:	6814      	ldr	r4, [r2, #0]
 80128b6:	4618      	mov	r0, r3
 80128b8:	f7fc fd3d 	bl	800f336 <lwip_htonl>
 80128bc:	4603      	mov	r3, r0
 80128be:	6063      	str	r3, [r4, #4]
 80128c0:	6863      	ldr	r3, [r4, #4]
 80128c2:	4a45      	ldr	r2, [pc, #276]	; (80129d8 <tcp_input+0x2ac>)
 80128c4:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 80128c6:	4b3c      	ldr	r3, [pc, #240]	; (80129b8 <tcp_input+0x28c>)
 80128c8:	681b      	ldr	r3, [r3, #0]
 80128ca:	689b      	ldr	r3, [r3, #8]
 80128cc:	4a3a      	ldr	r2, [pc, #232]	; (80129b8 <tcp_input+0x28c>)
 80128ce:	6814      	ldr	r4, [r2, #0]
 80128d0:	4618      	mov	r0, r3
 80128d2:	f7fc fd30 	bl	800f336 <lwip_htonl>
 80128d6:	4603      	mov	r3, r0
 80128d8:	60a3      	str	r3, [r4, #8]
 80128da:	68a3      	ldr	r3, [r4, #8]
 80128dc:	4a3f      	ldr	r2, [pc, #252]	; (80129dc <tcp_input+0x2b0>)
 80128de:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 80128e0:	4b35      	ldr	r3, [pc, #212]	; (80129b8 <tcp_input+0x28c>)
 80128e2:	681b      	ldr	r3, [r3, #0]
 80128e4:	89db      	ldrh	r3, [r3, #14]
 80128e6:	b29b      	uxth	r3, r3
 80128e8:	4a33      	ldr	r2, [pc, #204]	; (80129b8 <tcp_input+0x28c>)
 80128ea:	6814      	ldr	r4, [r2, #0]
 80128ec:	4618      	mov	r0, r3
 80128ee:	f7fc fd0d 	bl	800f30c <lwip_htons>
 80128f2:	4603      	mov	r3, r0
 80128f4:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 80128f6:	4b30      	ldr	r3, [pc, #192]	; (80129b8 <tcp_input+0x28c>)
 80128f8:	681b      	ldr	r3, [r3, #0]
 80128fa:	899b      	ldrh	r3, [r3, #12]
 80128fc:	b29b      	uxth	r3, r3
 80128fe:	4618      	mov	r0, r3
 8012900:	f7fc fd04 	bl	800f30c <lwip_htons>
 8012904:	4603      	mov	r3, r0
 8012906:	b2db      	uxtb	r3, r3
 8012908:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801290c:	b2da      	uxtb	r2, r3
 801290e:	4b34      	ldr	r3, [pc, #208]	; (80129e0 <tcp_input+0x2b4>)
 8012910:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8012912:	687b      	ldr	r3, [r7, #4]
 8012914:	891a      	ldrh	r2, [r3, #8]
 8012916:	4b33      	ldr	r3, [pc, #204]	; (80129e4 <tcp_input+0x2b8>)
 8012918:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 801291a:	4b31      	ldr	r3, [pc, #196]	; (80129e0 <tcp_input+0x2b4>)
 801291c:	781b      	ldrb	r3, [r3, #0]
 801291e:	f003 0303 	and.w	r3, r3, #3
 8012922:	2b00      	cmp	r3, #0
 8012924:	d00c      	beq.n	8012940 <tcp_input+0x214>
    tcplen++;
 8012926:	4b2f      	ldr	r3, [pc, #188]	; (80129e4 <tcp_input+0x2b8>)
 8012928:	881b      	ldrh	r3, [r3, #0]
 801292a:	3301      	adds	r3, #1
 801292c:	b29a      	uxth	r2, r3
 801292e:	4b2d      	ldr	r3, [pc, #180]	; (80129e4 <tcp_input+0x2b8>)
 8012930:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8012932:	687b      	ldr	r3, [r7, #4]
 8012934:	891a      	ldrh	r2, [r3, #8]
 8012936:	4b2b      	ldr	r3, [pc, #172]	; (80129e4 <tcp_input+0x2b8>)
 8012938:	881b      	ldrh	r3, [r3, #0]
 801293a:	429a      	cmp	r2, r3
 801293c:	f200 82e6 	bhi.w	8012f0c <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8012940:	2300      	movs	r3, #0
 8012942:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8012944:	4b28      	ldr	r3, [pc, #160]	; (80129e8 <tcp_input+0x2bc>)
 8012946:	681b      	ldr	r3, [r3, #0]
 8012948:	61fb      	str	r3, [r7, #28]
 801294a:	e09d      	b.n	8012a88 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 801294c:	69fb      	ldr	r3, [r7, #28]
 801294e:	7d1b      	ldrb	r3, [r3, #20]
 8012950:	2b00      	cmp	r3, #0
 8012952:	d105      	bne.n	8012960 <tcp_input+0x234>
 8012954:	4b15      	ldr	r3, [pc, #84]	; (80129ac <tcp_input+0x280>)
 8012956:	22fb      	movs	r2, #251	; 0xfb
 8012958:	4924      	ldr	r1, [pc, #144]	; (80129ec <tcp_input+0x2c0>)
 801295a:	4816      	ldr	r0, [pc, #88]	; (80129b4 <tcp_input+0x288>)
 801295c:	f006 ff90 	bl	8019880 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8012960:	69fb      	ldr	r3, [r7, #28]
 8012962:	7d1b      	ldrb	r3, [r3, #20]
 8012964:	2b0a      	cmp	r3, #10
 8012966:	d105      	bne.n	8012974 <tcp_input+0x248>
 8012968:	4b10      	ldr	r3, [pc, #64]	; (80129ac <tcp_input+0x280>)
 801296a:	22fc      	movs	r2, #252	; 0xfc
 801296c:	4920      	ldr	r1, [pc, #128]	; (80129f0 <tcp_input+0x2c4>)
 801296e:	4811      	ldr	r0, [pc, #68]	; (80129b4 <tcp_input+0x288>)
 8012970:	f006 ff86 	bl	8019880 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8012974:	69fb      	ldr	r3, [r7, #28]
 8012976:	7d1b      	ldrb	r3, [r3, #20]
 8012978:	2b01      	cmp	r3, #1
 801297a:	d105      	bne.n	8012988 <tcp_input+0x25c>
 801297c:	4b0b      	ldr	r3, [pc, #44]	; (80129ac <tcp_input+0x280>)
 801297e:	22fd      	movs	r2, #253	; 0xfd
 8012980:	491c      	ldr	r1, [pc, #112]	; (80129f4 <tcp_input+0x2c8>)
 8012982:	480c      	ldr	r0, [pc, #48]	; (80129b4 <tcp_input+0x288>)
 8012984:	f006 ff7c 	bl	8019880 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8012988:	69fb      	ldr	r3, [r7, #28]
 801298a:	7a1b      	ldrb	r3, [r3, #8]
 801298c:	2b00      	cmp	r3, #0
 801298e:	d033      	beq.n	80129f8 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8012990:	69fb      	ldr	r3, [r7, #28]
 8012992:	7a1a      	ldrb	r2, [r3, #8]
 8012994:	4b09      	ldr	r3, [pc, #36]	; (80129bc <tcp_input+0x290>)
 8012996:	685b      	ldr	r3, [r3, #4]
 8012998:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801299c:	3301      	adds	r3, #1
 801299e:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80129a0:	429a      	cmp	r2, r3
 80129a2:	d029      	beq.n	80129f8 <tcp_input+0x2cc>
      prev = pcb;
 80129a4:	69fb      	ldr	r3, [r7, #28]
 80129a6:	61bb      	str	r3, [r7, #24]
      continue;
 80129a8:	e06b      	b.n	8012a82 <tcp_input+0x356>
 80129aa:	bf00      	nop
 80129ac:	0801d364 	.word	0x0801d364
 80129b0:	0801d398 	.word	0x0801d398
 80129b4:	0801d3b0 	.word	0x0801d3b0
 80129b8:	200070b4 	.word	0x200070b4
 80129bc:	200007b0 	.word	0x200007b0
 80129c0:	200070b8 	.word	0x200070b8
 80129c4:	200070bc 	.word	0x200070bc
 80129c8:	200070ba 	.word	0x200070ba
 80129cc:	0801d3d8 	.word	0x0801d3d8
 80129d0:	0801d3e8 	.word	0x0801d3e8
 80129d4:	0801d3f4 	.word	0x0801d3f4
 80129d8:	200070c4 	.word	0x200070c4
 80129dc:	200070c8 	.word	0x200070c8
 80129e0:	200070d0 	.word	0x200070d0
 80129e4:	200070ce 	.word	0x200070ce
 80129e8:	20007098 	.word	0x20007098
 80129ec:	0801d414 	.word	0x0801d414
 80129f0:	0801d43c 	.word	0x0801d43c
 80129f4:	0801d468 	.word	0x0801d468
    }

    if (pcb->remote_port == tcphdr->src &&
 80129f8:	69fb      	ldr	r3, [r7, #28]
 80129fa:	8b1a      	ldrh	r2, [r3, #24]
 80129fc:	4b72      	ldr	r3, [pc, #456]	; (8012bc8 <tcp_input+0x49c>)
 80129fe:	681b      	ldr	r3, [r3, #0]
 8012a00:	881b      	ldrh	r3, [r3, #0]
 8012a02:	b29b      	uxth	r3, r3
 8012a04:	429a      	cmp	r2, r3
 8012a06:	d13a      	bne.n	8012a7e <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8012a08:	69fb      	ldr	r3, [r7, #28]
 8012a0a:	8ada      	ldrh	r2, [r3, #22]
 8012a0c:	4b6e      	ldr	r3, [pc, #440]	; (8012bc8 <tcp_input+0x49c>)
 8012a0e:	681b      	ldr	r3, [r3, #0]
 8012a10:	885b      	ldrh	r3, [r3, #2]
 8012a12:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8012a14:	429a      	cmp	r2, r3
 8012a16:	d132      	bne.n	8012a7e <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8012a18:	69fb      	ldr	r3, [r7, #28]
 8012a1a:	685a      	ldr	r2, [r3, #4]
 8012a1c:	4b6b      	ldr	r3, [pc, #428]	; (8012bcc <tcp_input+0x4a0>)
 8012a1e:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8012a20:	429a      	cmp	r2, r3
 8012a22:	d12c      	bne.n	8012a7e <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8012a24:	69fb      	ldr	r3, [r7, #28]
 8012a26:	681a      	ldr	r2, [r3, #0]
 8012a28:	4b68      	ldr	r3, [pc, #416]	; (8012bcc <tcp_input+0x4a0>)
 8012a2a:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8012a2c:	429a      	cmp	r2, r3
 8012a2e:	d126      	bne.n	8012a7e <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8012a30:	69fb      	ldr	r3, [r7, #28]
 8012a32:	68db      	ldr	r3, [r3, #12]
 8012a34:	69fa      	ldr	r2, [r7, #28]
 8012a36:	429a      	cmp	r2, r3
 8012a38:	d106      	bne.n	8012a48 <tcp_input+0x31c>
 8012a3a:	4b65      	ldr	r3, [pc, #404]	; (8012bd0 <tcp_input+0x4a4>)
 8012a3c:	f240 120d 	movw	r2, #269	; 0x10d
 8012a40:	4964      	ldr	r1, [pc, #400]	; (8012bd4 <tcp_input+0x4a8>)
 8012a42:	4865      	ldr	r0, [pc, #404]	; (8012bd8 <tcp_input+0x4ac>)
 8012a44:	f006 ff1c 	bl	8019880 <iprintf>
      if (prev != NULL) {
 8012a48:	69bb      	ldr	r3, [r7, #24]
 8012a4a:	2b00      	cmp	r3, #0
 8012a4c:	d00a      	beq.n	8012a64 <tcp_input+0x338>
        prev->next = pcb->next;
 8012a4e:	69fb      	ldr	r3, [r7, #28]
 8012a50:	68da      	ldr	r2, [r3, #12]
 8012a52:	69bb      	ldr	r3, [r7, #24]
 8012a54:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8012a56:	4b61      	ldr	r3, [pc, #388]	; (8012bdc <tcp_input+0x4b0>)
 8012a58:	681a      	ldr	r2, [r3, #0]
 8012a5a:	69fb      	ldr	r3, [r7, #28]
 8012a5c:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8012a5e:	4a5f      	ldr	r2, [pc, #380]	; (8012bdc <tcp_input+0x4b0>)
 8012a60:	69fb      	ldr	r3, [r7, #28]
 8012a62:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8012a64:	69fb      	ldr	r3, [r7, #28]
 8012a66:	68db      	ldr	r3, [r3, #12]
 8012a68:	69fa      	ldr	r2, [r7, #28]
 8012a6a:	429a      	cmp	r2, r3
 8012a6c:	d111      	bne.n	8012a92 <tcp_input+0x366>
 8012a6e:	4b58      	ldr	r3, [pc, #352]	; (8012bd0 <tcp_input+0x4a4>)
 8012a70:	f240 1215 	movw	r2, #277	; 0x115
 8012a74:	495a      	ldr	r1, [pc, #360]	; (8012be0 <tcp_input+0x4b4>)
 8012a76:	4858      	ldr	r0, [pc, #352]	; (8012bd8 <tcp_input+0x4ac>)
 8012a78:	f006 ff02 	bl	8019880 <iprintf>
      break;
 8012a7c:	e009      	b.n	8012a92 <tcp_input+0x366>
    }
    prev = pcb;
 8012a7e:	69fb      	ldr	r3, [r7, #28]
 8012a80:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8012a82:	69fb      	ldr	r3, [r7, #28]
 8012a84:	68db      	ldr	r3, [r3, #12]
 8012a86:	61fb      	str	r3, [r7, #28]
 8012a88:	69fb      	ldr	r3, [r7, #28]
 8012a8a:	2b00      	cmp	r3, #0
 8012a8c:	f47f af5e 	bne.w	801294c <tcp_input+0x220>
 8012a90:	e000      	b.n	8012a94 <tcp_input+0x368>
      break;
 8012a92:	bf00      	nop
  }

  if (pcb == NULL) {
 8012a94:	69fb      	ldr	r3, [r7, #28]
 8012a96:	2b00      	cmp	r3, #0
 8012a98:	f040 80aa 	bne.w	8012bf0 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8012a9c:	4b51      	ldr	r3, [pc, #324]	; (8012be4 <tcp_input+0x4b8>)
 8012a9e:	681b      	ldr	r3, [r3, #0]
 8012aa0:	61fb      	str	r3, [r7, #28]
 8012aa2:	e03f      	b.n	8012b24 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8012aa4:	69fb      	ldr	r3, [r7, #28]
 8012aa6:	7d1b      	ldrb	r3, [r3, #20]
 8012aa8:	2b0a      	cmp	r3, #10
 8012aaa:	d006      	beq.n	8012aba <tcp_input+0x38e>
 8012aac:	4b48      	ldr	r3, [pc, #288]	; (8012bd0 <tcp_input+0x4a4>)
 8012aae:	f240 121f 	movw	r2, #287	; 0x11f
 8012ab2:	494d      	ldr	r1, [pc, #308]	; (8012be8 <tcp_input+0x4bc>)
 8012ab4:	4848      	ldr	r0, [pc, #288]	; (8012bd8 <tcp_input+0x4ac>)
 8012ab6:	f006 fee3 	bl	8019880 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8012aba:	69fb      	ldr	r3, [r7, #28]
 8012abc:	7a1b      	ldrb	r3, [r3, #8]
 8012abe:	2b00      	cmp	r3, #0
 8012ac0:	d009      	beq.n	8012ad6 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8012ac2:	69fb      	ldr	r3, [r7, #28]
 8012ac4:	7a1a      	ldrb	r2, [r3, #8]
 8012ac6:	4b41      	ldr	r3, [pc, #260]	; (8012bcc <tcp_input+0x4a0>)
 8012ac8:	685b      	ldr	r3, [r3, #4]
 8012aca:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8012ace:	3301      	adds	r3, #1
 8012ad0:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8012ad2:	429a      	cmp	r2, r3
 8012ad4:	d122      	bne.n	8012b1c <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8012ad6:	69fb      	ldr	r3, [r7, #28]
 8012ad8:	8b1a      	ldrh	r2, [r3, #24]
 8012ada:	4b3b      	ldr	r3, [pc, #236]	; (8012bc8 <tcp_input+0x49c>)
 8012adc:	681b      	ldr	r3, [r3, #0]
 8012ade:	881b      	ldrh	r3, [r3, #0]
 8012ae0:	b29b      	uxth	r3, r3
 8012ae2:	429a      	cmp	r2, r3
 8012ae4:	d11b      	bne.n	8012b1e <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8012ae6:	69fb      	ldr	r3, [r7, #28]
 8012ae8:	8ada      	ldrh	r2, [r3, #22]
 8012aea:	4b37      	ldr	r3, [pc, #220]	; (8012bc8 <tcp_input+0x49c>)
 8012aec:	681b      	ldr	r3, [r3, #0]
 8012aee:	885b      	ldrh	r3, [r3, #2]
 8012af0:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8012af2:	429a      	cmp	r2, r3
 8012af4:	d113      	bne.n	8012b1e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8012af6:	69fb      	ldr	r3, [r7, #28]
 8012af8:	685a      	ldr	r2, [r3, #4]
 8012afa:	4b34      	ldr	r3, [pc, #208]	; (8012bcc <tcp_input+0x4a0>)
 8012afc:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8012afe:	429a      	cmp	r2, r3
 8012b00:	d10d      	bne.n	8012b1e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8012b02:	69fb      	ldr	r3, [r7, #28]
 8012b04:	681a      	ldr	r2, [r3, #0]
 8012b06:	4b31      	ldr	r3, [pc, #196]	; (8012bcc <tcp_input+0x4a0>)
 8012b08:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8012b0a:	429a      	cmp	r2, r3
 8012b0c:	d107      	bne.n	8012b1e <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8012b0e:	69f8      	ldr	r0, [r7, #28]
 8012b10:	f000 fb56 	bl	80131c0 <tcp_timewait_input>
        }
        pbuf_free(p);
 8012b14:	6878      	ldr	r0, [r7, #4]
 8012b16:	f7fd ffdd 	bl	8010ad4 <pbuf_free>
        return;
 8012b1a:	e1fd      	b.n	8012f18 <tcp_input+0x7ec>
        continue;
 8012b1c:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8012b1e:	69fb      	ldr	r3, [r7, #28]
 8012b20:	68db      	ldr	r3, [r3, #12]
 8012b22:	61fb      	str	r3, [r7, #28]
 8012b24:	69fb      	ldr	r3, [r7, #28]
 8012b26:	2b00      	cmp	r3, #0
 8012b28:	d1bc      	bne.n	8012aa4 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8012b2a:	2300      	movs	r3, #0
 8012b2c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8012b2e:	4b2f      	ldr	r3, [pc, #188]	; (8012bec <tcp_input+0x4c0>)
 8012b30:	681b      	ldr	r3, [r3, #0]
 8012b32:	617b      	str	r3, [r7, #20]
 8012b34:	e02a      	b.n	8012b8c <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8012b36:	697b      	ldr	r3, [r7, #20]
 8012b38:	7a1b      	ldrb	r3, [r3, #8]
 8012b3a:	2b00      	cmp	r3, #0
 8012b3c:	d00c      	beq.n	8012b58 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8012b3e:	697b      	ldr	r3, [r7, #20]
 8012b40:	7a1a      	ldrb	r2, [r3, #8]
 8012b42:	4b22      	ldr	r3, [pc, #136]	; (8012bcc <tcp_input+0x4a0>)
 8012b44:	685b      	ldr	r3, [r3, #4]
 8012b46:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8012b4a:	3301      	adds	r3, #1
 8012b4c:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8012b4e:	429a      	cmp	r2, r3
 8012b50:	d002      	beq.n	8012b58 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8012b52:	697b      	ldr	r3, [r7, #20]
 8012b54:	61bb      	str	r3, [r7, #24]
        continue;
 8012b56:	e016      	b.n	8012b86 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8012b58:	697b      	ldr	r3, [r7, #20]
 8012b5a:	8ada      	ldrh	r2, [r3, #22]
 8012b5c:	4b1a      	ldr	r3, [pc, #104]	; (8012bc8 <tcp_input+0x49c>)
 8012b5e:	681b      	ldr	r3, [r3, #0]
 8012b60:	885b      	ldrh	r3, [r3, #2]
 8012b62:	b29b      	uxth	r3, r3
 8012b64:	429a      	cmp	r2, r3
 8012b66:	d10c      	bne.n	8012b82 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8012b68:	697b      	ldr	r3, [r7, #20]
 8012b6a:	681a      	ldr	r2, [r3, #0]
 8012b6c:	4b17      	ldr	r3, [pc, #92]	; (8012bcc <tcp_input+0x4a0>)
 8012b6e:	695b      	ldr	r3, [r3, #20]
 8012b70:	429a      	cmp	r2, r3
 8012b72:	d00f      	beq.n	8012b94 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8012b74:	697b      	ldr	r3, [r7, #20]
 8012b76:	2b00      	cmp	r3, #0
 8012b78:	d00d      	beq.n	8012b96 <tcp_input+0x46a>
 8012b7a:	697b      	ldr	r3, [r7, #20]
 8012b7c:	681b      	ldr	r3, [r3, #0]
 8012b7e:	2b00      	cmp	r3, #0
 8012b80:	d009      	beq.n	8012b96 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8012b82:	697b      	ldr	r3, [r7, #20]
 8012b84:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8012b86:	697b      	ldr	r3, [r7, #20]
 8012b88:	68db      	ldr	r3, [r3, #12]
 8012b8a:	617b      	str	r3, [r7, #20]
 8012b8c:	697b      	ldr	r3, [r7, #20]
 8012b8e:	2b00      	cmp	r3, #0
 8012b90:	d1d1      	bne.n	8012b36 <tcp_input+0x40a>
 8012b92:	e000      	b.n	8012b96 <tcp_input+0x46a>
            break;
 8012b94:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8012b96:	697b      	ldr	r3, [r7, #20]
 8012b98:	2b00      	cmp	r3, #0
 8012b9a:	d029      	beq.n	8012bf0 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8012b9c:	69bb      	ldr	r3, [r7, #24]
 8012b9e:	2b00      	cmp	r3, #0
 8012ba0:	d00a      	beq.n	8012bb8 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8012ba2:	697b      	ldr	r3, [r7, #20]
 8012ba4:	68da      	ldr	r2, [r3, #12]
 8012ba6:	69bb      	ldr	r3, [r7, #24]
 8012ba8:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8012baa:	4b10      	ldr	r3, [pc, #64]	; (8012bec <tcp_input+0x4c0>)
 8012bac:	681a      	ldr	r2, [r3, #0]
 8012bae:	697b      	ldr	r3, [r7, #20]
 8012bb0:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8012bb2:	4a0e      	ldr	r2, [pc, #56]	; (8012bec <tcp_input+0x4c0>)
 8012bb4:	697b      	ldr	r3, [r7, #20]
 8012bb6:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8012bb8:	6978      	ldr	r0, [r7, #20]
 8012bba:	f000 fa03 	bl	8012fc4 <tcp_listen_input>
      }
      pbuf_free(p);
 8012bbe:	6878      	ldr	r0, [r7, #4]
 8012bc0:	f7fd ff88 	bl	8010ad4 <pbuf_free>
      return;
 8012bc4:	e1a8      	b.n	8012f18 <tcp_input+0x7ec>
 8012bc6:	bf00      	nop
 8012bc8:	200070b4 	.word	0x200070b4
 8012bcc:	200007b0 	.word	0x200007b0
 8012bd0:	0801d364 	.word	0x0801d364
 8012bd4:	0801d490 	.word	0x0801d490
 8012bd8:	0801d3b0 	.word	0x0801d3b0
 8012bdc:	20007098 	.word	0x20007098
 8012be0:	0801d4bc 	.word	0x0801d4bc
 8012be4:	2000709c 	.word	0x2000709c
 8012be8:	0801d4e8 	.word	0x0801d4e8
 8012bec:	20007094 	.word	0x20007094
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8012bf0:	69fb      	ldr	r3, [r7, #28]
 8012bf2:	2b00      	cmp	r3, #0
 8012bf4:	f000 8158 	beq.w	8012ea8 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8012bf8:	4b95      	ldr	r3, [pc, #596]	; (8012e50 <tcp_input+0x724>)
 8012bfa:	2200      	movs	r2, #0
 8012bfc:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8012bfe:	687b      	ldr	r3, [r7, #4]
 8012c00:	891a      	ldrh	r2, [r3, #8]
 8012c02:	4b93      	ldr	r3, [pc, #588]	; (8012e50 <tcp_input+0x724>)
 8012c04:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8012c06:	4a92      	ldr	r2, [pc, #584]	; (8012e50 <tcp_input+0x724>)
 8012c08:	687b      	ldr	r3, [r7, #4]
 8012c0a:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8012c0c:	4b91      	ldr	r3, [pc, #580]	; (8012e54 <tcp_input+0x728>)
 8012c0e:	681b      	ldr	r3, [r3, #0]
 8012c10:	4a8f      	ldr	r2, [pc, #572]	; (8012e50 <tcp_input+0x724>)
 8012c12:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8012c14:	4b90      	ldr	r3, [pc, #576]	; (8012e58 <tcp_input+0x72c>)
 8012c16:	2200      	movs	r2, #0
 8012c18:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8012c1a:	4b90      	ldr	r3, [pc, #576]	; (8012e5c <tcp_input+0x730>)
 8012c1c:	2200      	movs	r2, #0
 8012c1e:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8012c20:	4b8f      	ldr	r3, [pc, #572]	; (8012e60 <tcp_input+0x734>)
 8012c22:	2200      	movs	r2, #0
 8012c24:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8012c26:	4b8f      	ldr	r3, [pc, #572]	; (8012e64 <tcp_input+0x738>)
 8012c28:	781b      	ldrb	r3, [r3, #0]
 8012c2a:	f003 0308 	and.w	r3, r3, #8
 8012c2e:	2b00      	cmp	r3, #0
 8012c30:	d006      	beq.n	8012c40 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 8012c32:	687b      	ldr	r3, [r7, #4]
 8012c34:	7b5b      	ldrb	r3, [r3, #13]
 8012c36:	f043 0301 	orr.w	r3, r3, #1
 8012c3a:	b2da      	uxtb	r2, r3
 8012c3c:	687b      	ldr	r3, [r7, #4]
 8012c3e:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8012c40:	69fb      	ldr	r3, [r7, #28]
 8012c42:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012c44:	2b00      	cmp	r3, #0
 8012c46:	d017      	beq.n	8012c78 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8012c48:	69f8      	ldr	r0, [r7, #28]
 8012c4a:	f7ff f927 	bl	8011e9c <tcp_process_refused_data>
 8012c4e:	4603      	mov	r3, r0
 8012c50:	f113 0f0d 	cmn.w	r3, #13
 8012c54:	d007      	beq.n	8012c66 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8012c56:	69fb      	ldr	r3, [r7, #28]
 8012c58:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8012c5a:	2b00      	cmp	r3, #0
 8012c5c:	d00c      	beq.n	8012c78 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8012c5e:	4b82      	ldr	r3, [pc, #520]	; (8012e68 <tcp_input+0x73c>)
 8012c60:	881b      	ldrh	r3, [r3, #0]
 8012c62:	2b00      	cmp	r3, #0
 8012c64:	d008      	beq.n	8012c78 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8012c66:	69fb      	ldr	r3, [r7, #28]
 8012c68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8012c6a:	2b00      	cmp	r3, #0
 8012c6c:	f040 80e4 	bne.w	8012e38 <tcp_input+0x70c>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8012c70:	69f8      	ldr	r0, [r7, #28]
 8012c72:	f003 f9ad 	bl	8015fd0 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8012c76:	e0df      	b.n	8012e38 <tcp_input+0x70c>
      }
    }
    tcp_input_pcb = pcb;
 8012c78:	4a7c      	ldr	r2, [pc, #496]	; (8012e6c <tcp_input+0x740>)
 8012c7a:	69fb      	ldr	r3, [r7, #28]
 8012c7c:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8012c7e:	69f8      	ldr	r0, [r7, #28]
 8012c80:	f000 fb18 	bl	80132b4 <tcp_process>
 8012c84:	4603      	mov	r3, r0
 8012c86:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8012c88:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012c8c:	f113 0f0d 	cmn.w	r3, #13
 8012c90:	f000 80d4 	beq.w	8012e3c <tcp_input+0x710>
      if (recv_flags & TF_RESET) {
 8012c94:	4b71      	ldr	r3, [pc, #452]	; (8012e5c <tcp_input+0x730>)
 8012c96:	781b      	ldrb	r3, [r3, #0]
 8012c98:	f003 0308 	and.w	r3, r3, #8
 8012c9c:	2b00      	cmp	r3, #0
 8012c9e:	d015      	beq.n	8012ccc <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8012ca0:	69fb      	ldr	r3, [r7, #28]
 8012ca2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012ca6:	2b00      	cmp	r3, #0
 8012ca8:	d008      	beq.n	8012cbc <tcp_input+0x590>
 8012caa:	69fb      	ldr	r3, [r7, #28]
 8012cac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012cb0:	69fa      	ldr	r2, [r7, #28]
 8012cb2:	6912      	ldr	r2, [r2, #16]
 8012cb4:	f06f 010d 	mvn.w	r1, #13
 8012cb8:	4610      	mov	r0, r2
 8012cba:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8012cbc:	69f9      	ldr	r1, [r7, #28]
 8012cbe:	486c      	ldr	r0, [pc, #432]	; (8012e70 <tcp_input+0x744>)
 8012cc0:	f7ff fbbc 	bl	801243c <tcp_pcb_remove>
        tcp_free(pcb);
 8012cc4:	69f8      	ldr	r0, [r7, #28]
 8012cc6:	f7fe f9a5 	bl	8011014 <tcp_free>
 8012cca:	e0da      	b.n	8012e82 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 8012ccc:	2300      	movs	r3, #0
 8012cce:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8012cd0:	4b63      	ldr	r3, [pc, #396]	; (8012e60 <tcp_input+0x734>)
 8012cd2:	881b      	ldrh	r3, [r3, #0]
 8012cd4:	2b00      	cmp	r3, #0
 8012cd6:	d01d      	beq.n	8012d14 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8012cd8:	4b61      	ldr	r3, [pc, #388]	; (8012e60 <tcp_input+0x734>)
 8012cda:	881b      	ldrh	r3, [r3, #0]
 8012cdc:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8012cde:	69fb      	ldr	r3, [r7, #28]
 8012ce0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012ce4:	2b00      	cmp	r3, #0
 8012ce6:	d00a      	beq.n	8012cfe <tcp_input+0x5d2>
 8012ce8:	69fb      	ldr	r3, [r7, #28]
 8012cea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012cee:	69fa      	ldr	r2, [r7, #28]
 8012cf0:	6910      	ldr	r0, [r2, #16]
 8012cf2:	89fa      	ldrh	r2, [r7, #14]
 8012cf4:	69f9      	ldr	r1, [r7, #28]
 8012cf6:	4798      	blx	r3
 8012cf8:	4603      	mov	r3, r0
 8012cfa:	74fb      	strb	r3, [r7, #19]
 8012cfc:	e001      	b.n	8012d02 <tcp_input+0x5d6>
 8012cfe:	2300      	movs	r3, #0
 8012d00:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8012d02:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012d06:	f113 0f0d 	cmn.w	r3, #13
 8012d0a:	f000 8099 	beq.w	8012e40 <tcp_input+0x714>
              goto aborted;
            }
          }
          recv_acked = 0;
 8012d0e:	4b54      	ldr	r3, [pc, #336]	; (8012e60 <tcp_input+0x734>)
 8012d10:	2200      	movs	r2, #0
 8012d12:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8012d14:	69f8      	ldr	r0, [r7, #28]
 8012d16:	f000 f915 	bl	8012f44 <tcp_input_delayed_close>
 8012d1a:	4603      	mov	r3, r0
 8012d1c:	2b00      	cmp	r3, #0
 8012d1e:	f040 8091 	bne.w	8012e44 <tcp_input+0x718>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8012d22:	4b4d      	ldr	r3, [pc, #308]	; (8012e58 <tcp_input+0x72c>)
 8012d24:	681b      	ldr	r3, [r3, #0]
 8012d26:	2b00      	cmp	r3, #0
 8012d28:	d041      	beq.n	8012dae <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8012d2a:	69fb      	ldr	r3, [r7, #28]
 8012d2c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012d2e:	2b00      	cmp	r3, #0
 8012d30:	d006      	beq.n	8012d40 <tcp_input+0x614>
 8012d32:	4b50      	ldr	r3, [pc, #320]	; (8012e74 <tcp_input+0x748>)
 8012d34:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8012d38:	494f      	ldr	r1, [pc, #316]	; (8012e78 <tcp_input+0x74c>)
 8012d3a:	4850      	ldr	r0, [pc, #320]	; (8012e7c <tcp_input+0x750>)
 8012d3c:	f006 fda0 	bl	8019880 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8012d40:	69fb      	ldr	r3, [r7, #28]
 8012d42:	8b5b      	ldrh	r3, [r3, #26]
 8012d44:	f003 0310 	and.w	r3, r3, #16
 8012d48:	2b00      	cmp	r3, #0
 8012d4a:	d008      	beq.n	8012d5e <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8012d4c:	4b42      	ldr	r3, [pc, #264]	; (8012e58 <tcp_input+0x72c>)
 8012d4e:	681b      	ldr	r3, [r3, #0]
 8012d50:	4618      	mov	r0, r3
 8012d52:	f7fd febf 	bl	8010ad4 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8012d56:	69f8      	ldr	r0, [r7, #28]
 8012d58:	f7fe fc44 	bl	80115e4 <tcp_abort>
            goto aborted;
 8012d5c:	e091      	b.n	8012e82 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8012d5e:	69fb      	ldr	r3, [r7, #28]
 8012d60:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012d64:	2b00      	cmp	r3, #0
 8012d66:	d00c      	beq.n	8012d82 <tcp_input+0x656>
 8012d68:	69fb      	ldr	r3, [r7, #28]
 8012d6a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8012d6e:	69fb      	ldr	r3, [r7, #28]
 8012d70:	6918      	ldr	r0, [r3, #16]
 8012d72:	4b39      	ldr	r3, [pc, #228]	; (8012e58 <tcp_input+0x72c>)
 8012d74:	681a      	ldr	r2, [r3, #0]
 8012d76:	2300      	movs	r3, #0
 8012d78:	69f9      	ldr	r1, [r7, #28]
 8012d7a:	47a0      	blx	r4
 8012d7c:	4603      	mov	r3, r0
 8012d7e:	74fb      	strb	r3, [r7, #19]
 8012d80:	e008      	b.n	8012d94 <tcp_input+0x668>
 8012d82:	4b35      	ldr	r3, [pc, #212]	; (8012e58 <tcp_input+0x72c>)
 8012d84:	681a      	ldr	r2, [r3, #0]
 8012d86:	2300      	movs	r3, #0
 8012d88:	69f9      	ldr	r1, [r7, #28]
 8012d8a:	2000      	movs	r0, #0
 8012d8c:	f7ff f95e 	bl	801204c <tcp_recv_null>
 8012d90:	4603      	mov	r3, r0
 8012d92:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8012d94:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012d98:	f113 0f0d 	cmn.w	r3, #13
 8012d9c:	d054      	beq.n	8012e48 <tcp_input+0x71c>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8012d9e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012da2:	2b00      	cmp	r3, #0
 8012da4:	d003      	beq.n	8012dae <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8012da6:	4b2c      	ldr	r3, [pc, #176]	; (8012e58 <tcp_input+0x72c>)
 8012da8:	681a      	ldr	r2, [r3, #0]
 8012daa:	69fb      	ldr	r3, [r7, #28]
 8012dac:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8012dae:	4b2b      	ldr	r3, [pc, #172]	; (8012e5c <tcp_input+0x730>)
 8012db0:	781b      	ldrb	r3, [r3, #0]
 8012db2:	f003 0320 	and.w	r3, r3, #32
 8012db6:	2b00      	cmp	r3, #0
 8012db8:	d031      	beq.n	8012e1e <tcp_input+0x6f2>
          if (pcb->refused_data != NULL) {
 8012dba:	69fb      	ldr	r3, [r7, #28]
 8012dbc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012dbe:	2b00      	cmp	r3, #0
 8012dc0:	d009      	beq.n	8012dd6 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8012dc2:	69fb      	ldr	r3, [r7, #28]
 8012dc4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012dc6:	7b5a      	ldrb	r2, [r3, #13]
 8012dc8:	69fb      	ldr	r3, [r7, #28]
 8012dca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012dcc:	f042 0220 	orr.w	r2, r2, #32
 8012dd0:	b2d2      	uxtb	r2, r2
 8012dd2:	735a      	strb	r2, [r3, #13]
 8012dd4:	e023      	b.n	8012e1e <tcp_input+0x6f2>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8012dd6:	69fb      	ldr	r3, [r7, #28]
 8012dd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012dda:	f241 62d0 	movw	r2, #5840	; 0x16d0
 8012dde:	4293      	cmp	r3, r2
 8012de0:	d005      	beq.n	8012dee <tcp_input+0x6c2>
              pcb->rcv_wnd++;
 8012de2:	69fb      	ldr	r3, [r7, #28]
 8012de4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012de6:	3301      	adds	r3, #1
 8012de8:	b29a      	uxth	r2, r3
 8012dea:	69fb      	ldr	r3, [r7, #28]
 8012dec:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8012dee:	69fb      	ldr	r3, [r7, #28]
 8012df0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012df4:	2b00      	cmp	r3, #0
 8012df6:	d00b      	beq.n	8012e10 <tcp_input+0x6e4>
 8012df8:	69fb      	ldr	r3, [r7, #28]
 8012dfa:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8012dfe:	69fb      	ldr	r3, [r7, #28]
 8012e00:	6918      	ldr	r0, [r3, #16]
 8012e02:	2300      	movs	r3, #0
 8012e04:	2200      	movs	r2, #0
 8012e06:	69f9      	ldr	r1, [r7, #28]
 8012e08:	47a0      	blx	r4
 8012e0a:	4603      	mov	r3, r0
 8012e0c:	74fb      	strb	r3, [r7, #19]
 8012e0e:	e001      	b.n	8012e14 <tcp_input+0x6e8>
 8012e10:	2300      	movs	r3, #0
 8012e12:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8012e14:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012e18:	f113 0f0d 	cmn.w	r3, #13
 8012e1c:	d016      	beq.n	8012e4c <tcp_input+0x720>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8012e1e:	4b13      	ldr	r3, [pc, #76]	; (8012e6c <tcp_input+0x740>)
 8012e20:	2200      	movs	r2, #0
 8012e22:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8012e24:	69f8      	ldr	r0, [r7, #28]
 8012e26:	f000 f88d 	bl	8012f44 <tcp_input_delayed_close>
 8012e2a:	4603      	mov	r3, r0
 8012e2c:	2b00      	cmp	r3, #0
 8012e2e:	d127      	bne.n	8012e80 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8012e30:	69f8      	ldr	r0, [r7, #28]
 8012e32:	f002 fac7 	bl	80153c4 <tcp_output>
 8012e36:	e024      	b.n	8012e82 <tcp_input+0x756>
        goto aborted;
 8012e38:	bf00      	nop
 8012e3a:	e022      	b.n	8012e82 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8012e3c:	bf00      	nop
 8012e3e:	e020      	b.n	8012e82 <tcp_input+0x756>
              goto aborted;
 8012e40:	bf00      	nop
 8012e42:	e01e      	b.n	8012e82 <tcp_input+0x756>
          goto aborted;
 8012e44:	bf00      	nop
 8012e46:	e01c      	b.n	8012e82 <tcp_input+0x756>
            goto aborted;
 8012e48:	bf00      	nop
 8012e4a:	e01a      	b.n	8012e82 <tcp_input+0x756>
              goto aborted;
 8012e4c:	bf00      	nop
 8012e4e:	e018      	b.n	8012e82 <tcp_input+0x756>
 8012e50:	200070a4 	.word	0x200070a4
 8012e54:	200070b4 	.word	0x200070b4
 8012e58:	200070d4 	.word	0x200070d4
 8012e5c:	200070d1 	.word	0x200070d1
 8012e60:	200070cc 	.word	0x200070cc
 8012e64:	200070d0 	.word	0x200070d0
 8012e68:	200070ce 	.word	0x200070ce
 8012e6c:	200070d8 	.word	0x200070d8
 8012e70:	20007098 	.word	0x20007098
 8012e74:	0801d364 	.word	0x0801d364
 8012e78:	0801d518 	.word	0x0801d518
 8012e7c:	0801d3b0 	.word	0x0801d3b0
          goto aborted;
 8012e80:	bf00      	nop
    tcp_input_pcb = NULL;
 8012e82:	4b27      	ldr	r3, [pc, #156]	; (8012f20 <tcp_input+0x7f4>)
 8012e84:	2200      	movs	r2, #0
 8012e86:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8012e88:	4b26      	ldr	r3, [pc, #152]	; (8012f24 <tcp_input+0x7f8>)
 8012e8a:	2200      	movs	r2, #0
 8012e8c:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8012e8e:	4b26      	ldr	r3, [pc, #152]	; (8012f28 <tcp_input+0x7fc>)
 8012e90:	685b      	ldr	r3, [r3, #4]
 8012e92:	2b00      	cmp	r3, #0
 8012e94:	d03f      	beq.n	8012f16 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 8012e96:	4b24      	ldr	r3, [pc, #144]	; (8012f28 <tcp_input+0x7fc>)
 8012e98:	685b      	ldr	r3, [r3, #4]
 8012e9a:	4618      	mov	r0, r3
 8012e9c:	f7fd fe1a 	bl	8010ad4 <pbuf_free>
      inseg.p = NULL;
 8012ea0:	4b21      	ldr	r3, [pc, #132]	; (8012f28 <tcp_input+0x7fc>)
 8012ea2:	2200      	movs	r2, #0
 8012ea4:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8012ea6:	e036      	b.n	8012f16 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8012ea8:	4b20      	ldr	r3, [pc, #128]	; (8012f2c <tcp_input+0x800>)
 8012eaa:	681b      	ldr	r3, [r3, #0]
 8012eac:	899b      	ldrh	r3, [r3, #12]
 8012eae:	b29b      	uxth	r3, r3
 8012eb0:	4618      	mov	r0, r3
 8012eb2:	f7fc fa2b 	bl	800f30c <lwip_htons>
 8012eb6:	4603      	mov	r3, r0
 8012eb8:	b2db      	uxtb	r3, r3
 8012eba:	f003 0304 	and.w	r3, r3, #4
 8012ebe:	2b00      	cmp	r3, #0
 8012ec0:	d118      	bne.n	8012ef4 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012ec2:	4b1b      	ldr	r3, [pc, #108]	; (8012f30 <tcp_input+0x804>)
 8012ec4:	6819      	ldr	r1, [r3, #0]
 8012ec6:	4b1b      	ldr	r3, [pc, #108]	; (8012f34 <tcp_input+0x808>)
 8012ec8:	881b      	ldrh	r3, [r3, #0]
 8012eca:	461a      	mov	r2, r3
 8012ecc:	4b1a      	ldr	r3, [pc, #104]	; (8012f38 <tcp_input+0x80c>)
 8012ece:	681b      	ldr	r3, [r3, #0]
 8012ed0:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012ed2:	4b16      	ldr	r3, [pc, #88]	; (8012f2c <tcp_input+0x800>)
 8012ed4:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012ed6:	885b      	ldrh	r3, [r3, #2]
 8012ed8:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012eda:	4a14      	ldr	r2, [pc, #80]	; (8012f2c <tcp_input+0x800>)
 8012edc:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012ede:	8812      	ldrh	r2, [r2, #0]
 8012ee0:	b292      	uxth	r2, r2
 8012ee2:	9202      	str	r2, [sp, #8]
 8012ee4:	9301      	str	r3, [sp, #4]
 8012ee6:	4b15      	ldr	r3, [pc, #84]	; (8012f3c <tcp_input+0x810>)
 8012ee8:	9300      	str	r3, [sp, #0]
 8012eea:	4b15      	ldr	r3, [pc, #84]	; (8012f40 <tcp_input+0x814>)
 8012eec:	4602      	mov	r2, r0
 8012eee:	2000      	movs	r0, #0
 8012ef0:	f003 f81c 	bl	8015f2c <tcp_rst>
    pbuf_free(p);
 8012ef4:	6878      	ldr	r0, [r7, #4]
 8012ef6:	f7fd fded 	bl	8010ad4 <pbuf_free>
  return;
 8012efa:	e00c      	b.n	8012f16 <tcp_input+0x7ea>
    goto dropped;
 8012efc:	bf00      	nop
 8012efe:	e006      	b.n	8012f0e <tcp_input+0x7e2>
    goto dropped;
 8012f00:	bf00      	nop
 8012f02:	e004      	b.n	8012f0e <tcp_input+0x7e2>
    goto dropped;
 8012f04:	bf00      	nop
 8012f06:	e002      	b.n	8012f0e <tcp_input+0x7e2>
      goto dropped;
 8012f08:	bf00      	nop
 8012f0a:	e000      	b.n	8012f0e <tcp_input+0x7e2>
      goto dropped;
 8012f0c:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8012f0e:	6878      	ldr	r0, [r7, #4]
 8012f10:	f7fd fde0 	bl	8010ad4 <pbuf_free>
 8012f14:	e000      	b.n	8012f18 <tcp_input+0x7ec>
  return;
 8012f16:	bf00      	nop
}
 8012f18:	3724      	adds	r7, #36	; 0x24
 8012f1a:	46bd      	mov	sp, r7
 8012f1c:	bd90      	pop	{r4, r7, pc}
 8012f1e:	bf00      	nop
 8012f20:	200070d8 	.word	0x200070d8
 8012f24:	200070d4 	.word	0x200070d4
 8012f28:	200070a4 	.word	0x200070a4
 8012f2c:	200070b4 	.word	0x200070b4
 8012f30:	200070c8 	.word	0x200070c8
 8012f34:	200070ce 	.word	0x200070ce
 8012f38:	200070c4 	.word	0x200070c4
 8012f3c:	200007c0 	.word	0x200007c0
 8012f40:	200007c4 	.word	0x200007c4

08012f44 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8012f44:	b580      	push	{r7, lr}
 8012f46:	b082      	sub	sp, #8
 8012f48:	af00      	add	r7, sp, #0
 8012f4a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8012f4c:	687b      	ldr	r3, [r7, #4]
 8012f4e:	2b00      	cmp	r3, #0
 8012f50:	d106      	bne.n	8012f60 <tcp_input_delayed_close+0x1c>
 8012f52:	4b17      	ldr	r3, [pc, #92]	; (8012fb0 <tcp_input_delayed_close+0x6c>)
 8012f54:	f240 225a 	movw	r2, #602	; 0x25a
 8012f58:	4916      	ldr	r1, [pc, #88]	; (8012fb4 <tcp_input_delayed_close+0x70>)
 8012f5a:	4817      	ldr	r0, [pc, #92]	; (8012fb8 <tcp_input_delayed_close+0x74>)
 8012f5c:	f006 fc90 	bl	8019880 <iprintf>

  if (recv_flags & TF_CLOSED) {
 8012f60:	4b16      	ldr	r3, [pc, #88]	; (8012fbc <tcp_input_delayed_close+0x78>)
 8012f62:	781b      	ldrb	r3, [r3, #0]
 8012f64:	f003 0310 	and.w	r3, r3, #16
 8012f68:	2b00      	cmp	r3, #0
 8012f6a:	d01c      	beq.n	8012fa6 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8012f6c:	687b      	ldr	r3, [r7, #4]
 8012f6e:	8b5b      	ldrh	r3, [r3, #26]
 8012f70:	f003 0310 	and.w	r3, r3, #16
 8012f74:	2b00      	cmp	r3, #0
 8012f76:	d10d      	bne.n	8012f94 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8012f78:	687b      	ldr	r3, [r7, #4]
 8012f7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012f7e:	2b00      	cmp	r3, #0
 8012f80:	d008      	beq.n	8012f94 <tcp_input_delayed_close+0x50>
 8012f82:	687b      	ldr	r3, [r7, #4]
 8012f84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012f88:	687a      	ldr	r2, [r7, #4]
 8012f8a:	6912      	ldr	r2, [r2, #16]
 8012f8c:	f06f 010e 	mvn.w	r1, #14
 8012f90:	4610      	mov	r0, r2
 8012f92:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8012f94:	6879      	ldr	r1, [r7, #4]
 8012f96:	480a      	ldr	r0, [pc, #40]	; (8012fc0 <tcp_input_delayed_close+0x7c>)
 8012f98:	f7ff fa50 	bl	801243c <tcp_pcb_remove>
    tcp_free(pcb);
 8012f9c:	6878      	ldr	r0, [r7, #4]
 8012f9e:	f7fe f839 	bl	8011014 <tcp_free>
    return 1;
 8012fa2:	2301      	movs	r3, #1
 8012fa4:	e000      	b.n	8012fa8 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8012fa6:	2300      	movs	r3, #0
}
 8012fa8:	4618      	mov	r0, r3
 8012faa:	3708      	adds	r7, #8
 8012fac:	46bd      	mov	sp, r7
 8012fae:	bd80      	pop	{r7, pc}
 8012fb0:	0801d364 	.word	0x0801d364
 8012fb4:	0801d534 	.word	0x0801d534
 8012fb8:	0801d3b0 	.word	0x0801d3b0
 8012fbc:	200070d1 	.word	0x200070d1
 8012fc0:	20007098 	.word	0x20007098

08012fc4 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8012fc4:	b590      	push	{r4, r7, lr}
 8012fc6:	b08b      	sub	sp, #44	; 0x2c
 8012fc8:	af04      	add	r7, sp, #16
 8012fca:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8012fcc:	4b6f      	ldr	r3, [pc, #444]	; (801318c <tcp_listen_input+0x1c8>)
 8012fce:	781b      	ldrb	r3, [r3, #0]
 8012fd0:	f003 0304 	and.w	r3, r3, #4
 8012fd4:	2b00      	cmp	r3, #0
 8012fd6:	f040 80d2 	bne.w	801317e <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8012fda:	687b      	ldr	r3, [r7, #4]
 8012fdc:	2b00      	cmp	r3, #0
 8012fde:	d106      	bne.n	8012fee <tcp_listen_input+0x2a>
 8012fe0:	4b6b      	ldr	r3, [pc, #428]	; (8013190 <tcp_listen_input+0x1cc>)
 8012fe2:	f240 2281 	movw	r2, #641	; 0x281
 8012fe6:	496b      	ldr	r1, [pc, #428]	; (8013194 <tcp_listen_input+0x1d0>)
 8012fe8:	486b      	ldr	r0, [pc, #428]	; (8013198 <tcp_listen_input+0x1d4>)
 8012fea:	f006 fc49 	bl	8019880 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8012fee:	4b67      	ldr	r3, [pc, #412]	; (801318c <tcp_listen_input+0x1c8>)
 8012ff0:	781b      	ldrb	r3, [r3, #0]
 8012ff2:	f003 0310 	and.w	r3, r3, #16
 8012ff6:	2b00      	cmp	r3, #0
 8012ff8:	d019      	beq.n	801302e <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012ffa:	4b68      	ldr	r3, [pc, #416]	; (801319c <tcp_listen_input+0x1d8>)
 8012ffc:	6819      	ldr	r1, [r3, #0]
 8012ffe:	4b68      	ldr	r3, [pc, #416]	; (80131a0 <tcp_listen_input+0x1dc>)
 8013000:	881b      	ldrh	r3, [r3, #0]
 8013002:	461a      	mov	r2, r3
 8013004:	4b67      	ldr	r3, [pc, #412]	; (80131a4 <tcp_listen_input+0x1e0>)
 8013006:	681b      	ldr	r3, [r3, #0]
 8013008:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801300a:	4b67      	ldr	r3, [pc, #412]	; (80131a8 <tcp_listen_input+0x1e4>)
 801300c:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801300e:	885b      	ldrh	r3, [r3, #2]
 8013010:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013012:	4a65      	ldr	r2, [pc, #404]	; (80131a8 <tcp_listen_input+0x1e4>)
 8013014:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013016:	8812      	ldrh	r2, [r2, #0]
 8013018:	b292      	uxth	r2, r2
 801301a:	9202      	str	r2, [sp, #8]
 801301c:	9301      	str	r3, [sp, #4]
 801301e:	4b63      	ldr	r3, [pc, #396]	; (80131ac <tcp_listen_input+0x1e8>)
 8013020:	9300      	str	r3, [sp, #0]
 8013022:	4b63      	ldr	r3, [pc, #396]	; (80131b0 <tcp_listen_input+0x1ec>)
 8013024:	4602      	mov	r2, r0
 8013026:	6878      	ldr	r0, [r7, #4]
 8013028:	f002 ff80 	bl	8015f2c <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 801302c:	e0a9      	b.n	8013182 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 801302e:	4b57      	ldr	r3, [pc, #348]	; (801318c <tcp_listen_input+0x1c8>)
 8013030:	781b      	ldrb	r3, [r3, #0]
 8013032:	f003 0302 	and.w	r3, r3, #2
 8013036:	2b00      	cmp	r3, #0
 8013038:	f000 80a3 	beq.w	8013182 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 801303c:	687b      	ldr	r3, [r7, #4]
 801303e:	7d5b      	ldrb	r3, [r3, #21]
 8013040:	4618      	mov	r0, r3
 8013042:	f7ff f927 	bl	8012294 <tcp_alloc>
 8013046:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8013048:	697b      	ldr	r3, [r7, #20]
 801304a:	2b00      	cmp	r3, #0
 801304c:	d111      	bne.n	8013072 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801304e:	687b      	ldr	r3, [r7, #4]
 8013050:	699b      	ldr	r3, [r3, #24]
 8013052:	2b00      	cmp	r3, #0
 8013054:	d00a      	beq.n	801306c <tcp_listen_input+0xa8>
 8013056:	687b      	ldr	r3, [r7, #4]
 8013058:	699b      	ldr	r3, [r3, #24]
 801305a:	687a      	ldr	r2, [r7, #4]
 801305c:	6910      	ldr	r0, [r2, #16]
 801305e:	f04f 32ff 	mov.w	r2, #4294967295
 8013062:	2100      	movs	r1, #0
 8013064:	4798      	blx	r3
 8013066:	4603      	mov	r3, r0
 8013068:	73bb      	strb	r3, [r7, #14]
      return;
 801306a:	e08b      	b.n	8013184 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801306c:	23f0      	movs	r3, #240	; 0xf0
 801306e:	73bb      	strb	r3, [r7, #14]
      return;
 8013070:	e088      	b.n	8013184 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8013072:	4b50      	ldr	r3, [pc, #320]	; (80131b4 <tcp_listen_input+0x1f0>)
 8013074:	695a      	ldr	r2, [r3, #20]
 8013076:	697b      	ldr	r3, [r7, #20]
 8013078:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 801307a:	4b4e      	ldr	r3, [pc, #312]	; (80131b4 <tcp_listen_input+0x1f0>)
 801307c:	691a      	ldr	r2, [r3, #16]
 801307e:	697b      	ldr	r3, [r7, #20]
 8013080:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8013082:	687b      	ldr	r3, [r7, #4]
 8013084:	8ada      	ldrh	r2, [r3, #22]
 8013086:	697b      	ldr	r3, [r7, #20]
 8013088:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 801308a:	4b47      	ldr	r3, [pc, #284]	; (80131a8 <tcp_listen_input+0x1e4>)
 801308c:	681b      	ldr	r3, [r3, #0]
 801308e:	881b      	ldrh	r3, [r3, #0]
 8013090:	b29a      	uxth	r2, r3
 8013092:	697b      	ldr	r3, [r7, #20]
 8013094:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8013096:	697b      	ldr	r3, [r7, #20]
 8013098:	2203      	movs	r2, #3
 801309a:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 801309c:	4b41      	ldr	r3, [pc, #260]	; (80131a4 <tcp_listen_input+0x1e0>)
 801309e:	681b      	ldr	r3, [r3, #0]
 80130a0:	1c5a      	adds	r2, r3, #1
 80130a2:	697b      	ldr	r3, [r7, #20]
 80130a4:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 80130a6:	697b      	ldr	r3, [r7, #20]
 80130a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80130aa:	697b      	ldr	r3, [r7, #20]
 80130ac:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 80130ae:	6978      	ldr	r0, [r7, #20]
 80130b0:	f7ff fa58 	bl	8012564 <tcp_next_iss>
 80130b4:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 80130b6:	697b      	ldr	r3, [r7, #20]
 80130b8:	693a      	ldr	r2, [r7, #16]
 80130ba:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 80130bc:	697b      	ldr	r3, [r7, #20]
 80130be:	693a      	ldr	r2, [r7, #16]
 80130c0:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 80130c2:	697b      	ldr	r3, [r7, #20]
 80130c4:	693a      	ldr	r2, [r7, #16]
 80130c6:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 80130c8:	697b      	ldr	r3, [r7, #20]
 80130ca:	693a      	ldr	r2, [r7, #16]
 80130cc:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 80130ce:	4b35      	ldr	r3, [pc, #212]	; (80131a4 <tcp_listen_input+0x1e0>)
 80130d0:	681b      	ldr	r3, [r3, #0]
 80130d2:	1e5a      	subs	r2, r3, #1
 80130d4:	697b      	ldr	r3, [r7, #20]
 80130d6:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 80130d8:	687b      	ldr	r3, [r7, #4]
 80130da:	691a      	ldr	r2, [r3, #16]
 80130dc:	697b      	ldr	r3, [r7, #20]
 80130de:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 80130e0:	697b      	ldr	r3, [r7, #20]
 80130e2:	687a      	ldr	r2, [r7, #4]
 80130e4:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 80130e6:	687b      	ldr	r3, [r7, #4]
 80130e8:	7a5b      	ldrb	r3, [r3, #9]
 80130ea:	f003 030c 	and.w	r3, r3, #12
 80130ee:	b2da      	uxtb	r2, r3
 80130f0:	697b      	ldr	r3, [r7, #20]
 80130f2:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 80130f4:	687b      	ldr	r3, [r7, #4]
 80130f6:	7a1a      	ldrb	r2, [r3, #8]
 80130f8:	697b      	ldr	r3, [r7, #20]
 80130fa:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 80130fc:	4b2e      	ldr	r3, [pc, #184]	; (80131b8 <tcp_listen_input+0x1f4>)
 80130fe:	681a      	ldr	r2, [r3, #0]
 8013100:	697b      	ldr	r3, [r7, #20]
 8013102:	60da      	str	r2, [r3, #12]
 8013104:	4a2c      	ldr	r2, [pc, #176]	; (80131b8 <tcp_listen_input+0x1f4>)
 8013106:	697b      	ldr	r3, [r7, #20]
 8013108:	6013      	str	r3, [r2, #0]
 801310a:	f003 f8d1 	bl	80162b0 <tcp_timer_needed>
 801310e:	4b2b      	ldr	r3, [pc, #172]	; (80131bc <tcp_listen_input+0x1f8>)
 8013110:	2201      	movs	r2, #1
 8013112:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8013114:	6978      	ldr	r0, [r7, #20]
 8013116:	f001 fd8f 	bl	8014c38 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 801311a:	4b23      	ldr	r3, [pc, #140]	; (80131a8 <tcp_listen_input+0x1e4>)
 801311c:	681b      	ldr	r3, [r3, #0]
 801311e:	89db      	ldrh	r3, [r3, #14]
 8013120:	b29a      	uxth	r2, r3
 8013122:	697b      	ldr	r3, [r7, #20]
 8013124:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8013128:	697b      	ldr	r3, [r7, #20]
 801312a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801312e:	697b      	ldr	r3, [r7, #20]
 8013130:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8013134:	697b      	ldr	r3, [r7, #20]
 8013136:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8013138:	697b      	ldr	r3, [r7, #20]
 801313a:	3304      	adds	r3, #4
 801313c:	4618      	mov	r0, r3
 801313e:	f004 fc79 	bl	8017a34 <ip4_route>
 8013142:	4601      	mov	r1, r0
 8013144:	697b      	ldr	r3, [r7, #20]
 8013146:	3304      	adds	r3, #4
 8013148:	461a      	mov	r2, r3
 801314a:	4620      	mov	r0, r4
 801314c:	f7ff fa30 	bl	80125b0 <tcp_eff_send_mss_netif>
 8013150:	4603      	mov	r3, r0
 8013152:	461a      	mov	r2, r3
 8013154:	697b      	ldr	r3, [r7, #20]
 8013156:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8013158:	2112      	movs	r1, #18
 801315a:	6978      	ldr	r0, [r7, #20]
 801315c:	f002 f844 	bl	80151e8 <tcp_enqueue_flags>
 8013160:	4603      	mov	r3, r0
 8013162:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8013164:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013168:	2b00      	cmp	r3, #0
 801316a:	d004      	beq.n	8013176 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 801316c:	2100      	movs	r1, #0
 801316e:	6978      	ldr	r0, [r7, #20]
 8013170:	f7fe f97a 	bl	8011468 <tcp_abandon>
      return;
 8013174:	e006      	b.n	8013184 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8013176:	6978      	ldr	r0, [r7, #20]
 8013178:	f002 f924 	bl	80153c4 <tcp_output>
  return;
 801317c:	e001      	b.n	8013182 <tcp_listen_input+0x1be>
    return;
 801317e:	bf00      	nop
 8013180:	e000      	b.n	8013184 <tcp_listen_input+0x1c0>
  return;
 8013182:	bf00      	nop
}
 8013184:	371c      	adds	r7, #28
 8013186:	46bd      	mov	sp, r7
 8013188:	bd90      	pop	{r4, r7, pc}
 801318a:	bf00      	nop
 801318c:	200070d0 	.word	0x200070d0
 8013190:	0801d364 	.word	0x0801d364
 8013194:	0801d55c 	.word	0x0801d55c
 8013198:	0801d3b0 	.word	0x0801d3b0
 801319c:	200070c8 	.word	0x200070c8
 80131a0:	200070ce 	.word	0x200070ce
 80131a4:	200070c4 	.word	0x200070c4
 80131a8:	200070b4 	.word	0x200070b4
 80131ac:	200007c0 	.word	0x200007c0
 80131b0:	200007c4 	.word	0x200007c4
 80131b4:	200007b0 	.word	0x200007b0
 80131b8:	20007098 	.word	0x20007098
 80131bc:	200070a0 	.word	0x200070a0

080131c0 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 80131c0:	b580      	push	{r7, lr}
 80131c2:	b086      	sub	sp, #24
 80131c4:	af04      	add	r7, sp, #16
 80131c6:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 80131c8:	4b2f      	ldr	r3, [pc, #188]	; (8013288 <tcp_timewait_input+0xc8>)
 80131ca:	781b      	ldrb	r3, [r3, #0]
 80131cc:	f003 0304 	and.w	r3, r3, #4
 80131d0:	2b00      	cmp	r3, #0
 80131d2:	d153      	bne.n	801327c <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 80131d4:	687b      	ldr	r3, [r7, #4]
 80131d6:	2b00      	cmp	r3, #0
 80131d8:	d106      	bne.n	80131e8 <tcp_timewait_input+0x28>
 80131da:	4b2c      	ldr	r3, [pc, #176]	; (801328c <tcp_timewait_input+0xcc>)
 80131dc:	f240 22ee 	movw	r2, #750	; 0x2ee
 80131e0:	492b      	ldr	r1, [pc, #172]	; (8013290 <tcp_timewait_input+0xd0>)
 80131e2:	482c      	ldr	r0, [pc, #176]	; (8013294 <tcp_timewait_input+0xd4>)
 80131e4:	f006 fb4c 	bl	8019880 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 80131e8:	4b27      	ldr	r3, [pc, #156]	; (8013288 <tcp_timewait_input+0xc8>)
 80131ea:	781b      	ldrb	r3, [r3, #0]
 80131ec:	f003 0302 	and.w	r3, r3, #2
 80131f0:	2b00      	cmp	r3, #0
 80131f2:	d02a      	beq.n	801324a <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 80131f4:	4b28      	ldr	r3, [pc, #160]	; (8013298 <tcp_timewait_input+0xd8>)
 80131f6:	681a      	ldr	r2, [r3, #0]
 80131f8:	687b      	ldr	r3, [r7, #4]
 80131fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80131fc:	1ad3      	subs	r3, r2, r3
 80131fe:	2b00      	cmp	r3, #0
 8013200:	db2d      	blt.n	801325e <tcp_timewait_input+0x9e>
 8013202:	4b25      	ldr	r3, [pc, #148]	; (8013298 <tcp_timewait_input+0xd8>)
 8013204:	681a      	ldr	r2, [r3, #0]
 8013206:	687b      	ldr	r3, [r7, #4]
 8013208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801320a:	6879      	ldr	r1, [r7, #4]
 801320c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801320e:	440b      	add	r3, r1
 8013210:	1ad3      	subs	r3, r2, r3
 8013212:	2b00      	cmp	r3, #0
 8013214:	dc23      	bgt.n	801325e <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013216:	4b21      	ldr	r3, [pc, #132]	; (801329c <tcp_timewait_input+0xdc>)
 8013218:	6819      	ldr	r1, [r3, #0]
 801321a:	4b21      	ldr	r3, [pc, #132]	; (80132a0 <tcp_timewait_input+0xe0>)
 801321c:	881b      	ldrh	r3, [r3, #0]
 801321e:	461a      	mov	r2, r3
 8013220:	4b1d      	ldr	r3, [pc, #116]	; (8013298 <tcp_timewait_input+0xd8>)
 8013222:	681b      	ldr	r3, [r3, #0]
 8013224:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013226:	4b1f      	ldr	r3, [pc, #124]	; (80132a4 <tcp_timewait_input+0xe4>)
 8013228:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801322a:	885b      	ldrh	r3, [r3, #2]
 801322c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801322e:	4a1d      	ldr	r2, [pc, #116]	; (80132a4 <tcp_timewait_input+0xe4>)
 8013230:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013232:	8812      	ldrh	r2, [r2, #0]
 8013234:	b292      	uxth	r2, r2
 8013236:	9202      	str	r2, [sp, #8]
 8013238:	9301      	str	r3, [sp, #4]
 801323a:	4b1b      	ldr	r3, [pc, #108]	; (80132a8 <tcp_timewait_input+0xe8>)
 801323c:	9300      	str	r3, [sp, #0]
 801323e:	4b1b      	ldr	r3, [pc, #108]	; (80132ac <tcp_timewait_input+0xec>)
 8013240:	4602      	mov	r2, r0
 8013242:	6878      	ldr	r0, [r7, #4]
 8013244:	f002 fe72 	bl	8015f2c <tcp_rst>
      return;
 8013248:	e01b      	b.n	8013282 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 801324a:	4b0f      	ldr	r3, [pc, #60]	; (8013288 <tcp_timewait_input+0xc8>)
 801324c:	781b      	ldrb	r3, [r3, #0]
 801324e:	f003 0301 	and.w	r3, r3, #1
 8013252:	2b00      	cmp	r3, #0
 8013254:	d003      	beq.n	801325e <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8013256:	4b16      	ldr	r3, [pc, #88]	; (80132b0 <tcp_timewait_input+0xf0>)
 8013258:	681a      	ldr	r2, [r3, #0]
 801325a:	687b      	ldr	r3, [r7, #4]
 801325c:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 801325e:	4b10      	ldr	r3, [pc, #64]	; (80132a0 <tcp_timewait_input+0xe0>)
 8013260:	881b      	ldrh	r3, [r3, #0]
 8013262:	2b00      	cmp	r3, #0
 8013264:	d00c      	beq.n	8013280 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8013266:	687b      	ldr	r3, [r7, #4]
 8013268:	8b5b      	ldrh	r3, [r3, #26]
 801326a:	f043 0302 	orr.w	r3, r3, #2
 801326e:	b29a      	uxth	r2, r3
 8013270:	687b      	ldr	r3, [r7, #4]
 8013272:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8013274:	6878      	ldr	r0, [r7, #4]
 8013276:	f002 f8a5 	bl	80153c4 <tcp_output>
  }
  return;
 801327a:	e001      	b.n	8013280 <tcp_timewait_input+0xc0>
    return;
 801327c:	bf00      	nop
 801327e:	e000      	b.n	8013282 <tcp_timewait_input+0xc2>
  return;
 8013280:	bf00      	nop
}
 8013282:	3708      	adds	r7, #8
 8013284:	46bd      	mov	sp, r7
 8013286:	bd80      	pop	{r7, pc}
 8013288:	200070d0 	.word	0x200070d0
 801328c:	0801d364 	.word	0x0801d364
 8013290:	0801d57c 	.word	0x0801d57c
 8013294:	0801d3b0 	.word	0x0801d3b0
 8013298:	200070c4 	.word	0x200070c4
 801329c:	200070c8 	.word	0x200070c8
 80132a0:	200070ce 	.word	0x200070ce
 80132a4:	200070b4 	.word	0x200070b4
 80132a8:	200007c0 	.word	0x200007c0
 80132ac:	200007c4 	.word	0x200007c4
 80132b0:	2000708c 	.word	0x2000708c

080132b4 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 80132b4:	b590      	push	{r4, r7, lr}
 80132b6:	b08d      	sub	sp, #52	; 0x34
 80132b8:	af04      	add	r7, sp, #16
 80132ba:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 80132bc:	2300      	movs	r3, #0
 80132be:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 80132c0:	2300      	movs	r3, #0
 80132c2:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 80132c4:	687b      	ldr	r3, [r7, #4]
 80132c6:	2b00      	cmp	r3, #0
 80132c8:	d106      	bne.n	80132d8 <tcp_process+0x24>
 80132ca:	4b9d      	ldr	r3, [pc, #628]	; (8013540 <tcp_process+0x28c>)
 80132cc:	f44f 7247 	mov.w	r2, #796	; 0x31c
 80132d0:	499c      	ldr	r1, [pc, #624]	; (8013544 <tcp_process+0x290>)
 80132d2:	489d      	ldr	r0, [pc, #628]	; (8013548 <tcp_process+0x294>)
 80132d4:	f006 fad4 	bl	8019880 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 80132d8:	4b9c      	ldr	r3, [pc, #624]	; (801354c <tcp_process+0x298>)
 80132da:	781b      	ldrb	r3, [r3, #0]
 80132dc:	f003 0304 	and.w	r3, r3, #4
 80132e0:	2b00      	cmp	r3, #0
 80132e2:	d04e      	beq.n	8013382 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 80132e4:	687b      	ldr	r3, [r7, #4]
 80132e6:	7d1b      	ldrb	r3, [r3, #20]
 80132e8:	2b02      	cmp	r3, #2
 80132ea:	d108      	bne.n	80132fe <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 80132ec:	687b      	ldr	r3, [r7, #4]
 80132ee:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80132f0:	4b97      	ldr	r3, [pc, #604]	; (8013550 <tcp_process+0x29c>)
 80132f2:	681b      	ldr	r3, [r3, #0]
 80132f4:	429a      	cmp	r2, r3
 80132f6:	d123      	bne.n	8013340 <tcp_process+0x8c>
        acceptable = 1;
 80132f8:	2301      	movs	r3, #1
 80132fa:	76fb      	strb	r3, [r7, #27]
 80132fc:	e020      	b.n	8013340 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 80132fe:	687b      	ldr	r3, [r7, #4]
 8013300:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013302:	4b94      	ldr	r3, [pc, #592]	; (8013554 <tcp_process+0x2a0>)
 8013304:	681b      	ldr	r3, [r3, #0]
 8013306:	429a      	cmp	r2, r3
 8013308:	d102      	bne.n	8013310 <tcp_process+0x5c>
        acceptable = 1;
 801330a:	2301      	movs	r3, #1
 801330c:	76fb      	strb	r3, [r7, #27]
 801330e:	e017      	b.n	8013340 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8013310:	4b90      	ldr	r3, [pc, #576]	; (8013554 <tcp_process+0x2a0>)
 8013312:	681a      	ldr	r2, [r3, #0]
 8013314:	687b      	ldr	r3, [r7, #4]
 8013316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013318:	1ad3      	subs	r3, r2, r3
 801331a:	2b00      	cmp	r3, #0
 801331c:	db10      	blt.n	8013340 <tcp_process+0x8c>
 801331e:	4b8d      	ldr	r3, [pc, #564]	; (8013554 <tcp_process+0x2a0>)
 8013320:	681a      	ldr	r2, [r3, #0]
 8013322:	687b      	ldr	r3, [r7, #4]
 8013324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013326:	6879      	ldr	r1, [r7, #4]
 8013328:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801332a:	440b      	add	r3, r1
 801332c:	1ad3      	subs	r3, r2, r3
 801332e:	2b00      	cmp	r3, #0
 8013330:	dc06      	bgt.n	8013340 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8013332:	687b      	ldr	r3, [r7, #4]
 8013334:	8b5b      	ldrh	r3, [r3, #26]
 8013336:	f043 0302 	orr.w	r3, r3, #2
 801333a:	b29a      	uxth	r2, r3
 801333c:	687b      	ldr	r3, [r7, #4]
 801333e:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8013340:	7efb      	ldrb	r3, [r7, #27]
 8013342:	2b00      	cmp	r3, #0
 8013344:	d01b      	beq.n	801337e <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8013346:	687b      	ldr	r3, [r7, #4]
 8013348:	7d1b      	ldrb	r3, [r3, #20]
 801334a:	2b00      	cmp	r3, #0
 801334c:	d106      	bne.n	801335c <tcp_process+0xa8>
 801334e:	4b7c      	ldr	r3, [pc, #496]	; (8013540 <tcp_process+0x28c>)
 8013350:	f44f 724e 	mov.w	r2, #824	; 0x338
 8013354:	4980      	ldr	r1, [pc, #512]	; (8013558 <tcp_process+0x2a4>)
 8013356:	487c      	ldr	r0, [pc, #496]	; (8013548 <tcp_process+0x294>)
 8013358:	f006 fa92 	bl	8019880 <iprintf>
      recv_flags |= TF_RESET;
 801335c:	4b7f      	ldr	r3, [pc, #508]	; (801355c <tcp_process+0x2a8>)
 801335e:	781b      	ldrb	r3, [r3, #0]
 8013360:	f043 0308 	orr.w	r3, r3, #8
 8013364:	b2da      	uxtb	r2, r3
 8013366:	4b7d      	ldr	r3, [pc, #500]	; (801355c <tcp_process+0x2a8>)
 8013368:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 801336a:	687b      	ldr	r3, [r7, #4]
 801336c:	8b5b      	ldrh	r3, [r3, #26]
 801336e:	f023 0301 	bic.w	r3, r3, #1
 8013372:	b29a      	uxth	r2, r3
 8013374:	687b      	ldr	r3, [r7, #4]
 8013376:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8013378:	f06f 030d 	mvn.w	r3, #13
 801337c:	e37a      	b.n	8013a74 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 801337e:	2300      	movs	r3, #0
 8013380:	e378      	b.n	8013a74 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8013382:	4b72      	ldr	r3, [pc, #456]	; (801354c <tcp_process+0x298>)
 8013384:	781b      	ldrb	r3, [r3, #0]
 8013386:	f003 0302 	and.w	r3, r3, #2
 801338a:	2b00      	cmp	r3, #0
 801338c:	d010      	beq.n	80133b0 <tcp_process+0xfc>
 801338e:	687b      	ldr	r3, [r7, #4]
 8013390:	7d1b      	ldrb	r3, [r3, #20]
 8013392:	2b02      	cmp	r3, #2
 8013394:	d00c      	beq.n	80133b0 <tcp_process+0xfc>
 8013396:	687b      	ldr	r3, [r7, #4]
 8013398:	7d1b      	ldrb	r3, [r3, #20]
 801339a:	2b03      	cmp	r3, #3
 801339c:	d008      	beq.n	80133b0 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 801339e:	687b      	ldr	r3, [r7, #4]
 80133a0:	8b5b      	ldrh	r3, [r3, #26]
 80133a2:	f043 0302 	orr.w	r3, r3, #2
 80133a6:	b29a      	uxth	r2, r3
 80133a8:	687b      	ldr	r3, [r7, #4]
 80133aa:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 80133ac:	2300      	movs	r3, #0
 80133ae:	e361      	b.n	8013a74 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 80133b0:	687b      	ldr	r3, [r7, #4]
 80133b2:	8b5b      	ldrh	r3, [r3, #26]
 80133b4:	f003 0310 	and.w	r3, r3, #16
 80133b8:	2b00      	cmp	r3, #0
 80133ba:	d103      	bne.n	80133c4 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 80133bc:	4b68      	ldr	r3, [pc, #416]	; (8013560 <tcp_process+0x2ac>)
 80133be:	681a      	ldr	r2, [r3, #0]
 80133c0:	687b      	ldr	r3, [r7, #4]
 80133c2:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 80133c4:	687b      	ldr	r3, [r7, #4]
 80133c6:	2200      	movs	r2, #0
 80133c8:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 80133cc:	687b      	ldr	r3, [r7, #4]
 80133ce:	2200      	movs	r2, #0
 80133d0:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 80133d4:	6878      	ldr	r0, [r7, #4]
 80133d6:	f001 fc2f 	bl	8014c38 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 80133da:	687b      	ldr	r3, [r7, #4]
 80133dc:	7d1b      	ldrb	r3, [r3, #20]
 80133de:	3b02      	subs	r3, #2
 80133e0:	2b07      	cmp	r3, #7
 80133e2:	f200 8337 	bhi.w	8013a54 <tcp_process+0x7a0>
 80133e6:	a201      	add	r2, pc, #4	; (adr r2, 80133ec <tcp_process+0x138>)
 80133e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80133ec:	0801340d 	.word	0x0801340d
 80133f0:	0801363d 	.word	0x0801363d
 80133f4:	080137b5 	.word	0x080137b5
 80133f8:	080137df 	.word	0x080137df
 80133fc:	08013903 	.word	0x08013903
 8013400:	080137b5 	.word	0x080137b5
 8013404:	0801398f 	.word	0x0801398f
 8013408:	08013a1f 	.word	0x08013a1f
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 801340c:	4b4f      	ldr	r3, [pc, #316]	; (801354c <tcp_process+0x298>)
 801340e:	781b      	ldrb	r3, [r3, #0]
 8013410:	f003 0310 	and.w	r3, r3, #16
 8013414:	2b00      	cmp	r3, #0
 8013416:	f000 80e4 	beq.w	80135e2 <tcp_process+0x32e>
 801341a:	4b4c      	ldr	r3, [pc, #304]	; (801354c <tcp_process+0x298>)
 801341c:	781b      	ldrb	r3, [r3, #0]
 801341e:	f003 0302 	and.w	r3, r3, #2
 8013422:	2b00      	cmp	r3, #0
 8013424:	f000 80dd 	beq.w	80135e2 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8013428:	687b      	ldr	r3, [r7, #4]
 801342a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801342c:	1c5a      	adds	r2, r3, #1
 801342e:	4b48      	ldr	r3, [pc, #288]	; (8013550 <tcp_process+0x29c>)
 8013430:	681b      	ldr	r3, [r3, #0]
 8013432:	429a      	cmp	r2, r3
 8013434:	f040 80d5 	bne.w	80135e2 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8013438:	4b46      	ldr	r3, [pc, #280]	; (8013554 <tcp_process+0x2a0>)
 801343a:	681b      	ldr	r3, [r3, #0]
 801343c:	1c5a      	adds	r2, r3, #1
 801343e:	687b      	ldr	r3, [r7, #4]
 8013440:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8013442:	687b      	ldr	r3, [r7, #4]
 8013444:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013446:	687b      	ldr	r3, [r7, #4]
 8013448:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 801344a:	4b41      	ldr	r3, [pc, #260]	; (8013550 <tcp_process+0x29c>)
 801344c:	681a      	ldr	r2, [r3, #0]
 801344e:	687b      	ldr	r3, [r7, #4]
 8013450:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8013452:	4b44      	ldr	r3, [pc, #272]	; (8013564 <tcp_process+0x2b0>)
 8013454:	681b      	ldr	r3, [r3, #0]
 8013456:	89db      	ldrh	r3, [r3, #14]
 8013458:	b29a      	uxth	r2, r3
 801345a:	687b      	ldr	r3, [r7, #4]
 801345c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8013460:	687b      	ldr	r3, [r7, #4]
 8013462:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8013466:	687b      	ldr	r3, [r7, #4]
 8013468:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 801346c:	4b39      	ldr	r3, [pc, #228]	; (8013554 <tcp_process+0x2a0>)
 801346e:	681b      	ldr	r3, [r3, #0]
 8013470:	1e5a      	subs	r2, r3, #1
 8013472:	687b      	ldr	r3, [r7, #4]
 8013474:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8013476:	687b      	ldr	r3, [r7, #4]
 8013478:	2204      	movs	r2, #4
 801347a:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 801347c:	687b      	ldr	r3, [r7, #4]
 801347e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8013480:	687b      	ldr	r3, [r7, #4]
 8013482:	3304      	adds	r3, #4
 8013484:	4618      	mov	r0, r3
 8013486:	f004 fad5 	bl	8017a34 <ip4_route>
 801348a:	4601      	mov	r1, r0
 801348c:	687b      	ldr	r3, [r7, #4]
 801348e:	3304      	adds	r3, #4
 8013490:	461a      	mov	r2, r3
 8013492:	4620      	mov	r0, r4
 8013494:	f7ff f88c 	bl	80125b0 <tcp_eff_send_mss_netif>
 8013498:	4603      	mov	r3, r0
 801349a:	461a      	mov	r2, r3
 801349c:	687b      	ldr	r3, [r7, #4]
 801349e:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80134a0:	687b      	ldr	r3, [r7, #4]
 80134a2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80134a4:	009a      	lsls	r2, r3, #2
 80134a6:	687b      	ldr	r3, [r7, #4]
 80134a8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80134aa:	005b      	lsls	r3, r3, #1
 80134ac:	f241 111c 	movw	r1, #4380	; 0x111c
 80134b0:	428b      	cmp	r3, r1
 80134b2:	bf38      	it	cc
 80134b4:	460b      	movcc	r3, r1
 80134b6:	429a      	cmp	r2, r3
 80134b8:	d204      	bcs.n	80134c4 <tcp_process+0x210>
 80134ba:	687b      	ldr	r3, [r7, #4]
 80134bc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80134be:	009b      	lsls	r3, r3, #2
 80134c0:	b29b      	uxth	r3, r3
 80134c2:	e00d      	b.n	80134e0 <tcp_process+0x22c>
 80134c4:	687b      	ldr	r3, [r7, #4]
 80134c6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80134c8:	005b      	lsls	r3, r3, #1
 80134ca:	f241 121c 	movw	r2, #4380	; 0x111c
 80134ce:	4293      	cmp	r3, r2
 80134d0:	d904      	bls.n	80134dc <tcp_process+0x228>
 80134d2:	687b      	ldr	r3, [r7, #4]
 80134d4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80134d6:	005b      	lsls	r3, r3, #1
 80134d8:	b29b      	uxth	r3, r3
 80134da:	e001      	b.n	80134e0 <tcp_process+0x22c>
 80134dc:	f241 131c 	movw	r3, #4380	; 0x111c
 80134e0:	687a      	ldr	r2, [r7, #4]
 80134e2:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 80134e6:	687b      	ldr	r3, [r7, #4]
 80134e8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80134ec:	2b00      	cmp	r3, #0
 80134ee:	d106      	bne.n	80134fe <tcp_process+0x24a>
 80134f0:	4b13      	ldr	r3, [pc, #76]	; (8013540 <tcp_process+0x28c>)
 80134f2:	f44f 725b 	mov.w	r2, #876	; 0x36c
 80134f6:	491c      	ldr	r1, [pc, #112]	; (8013568 <tcp_process+0x2b4>)
 80134f8:	4813      	ldr	r0, [pc, #76]	; (8013548 <tcp_process+0x294>)
 80134fa:	f006 f9c1 	bl	8019880 <iprintf>
        --pcb->snd_queuelen;
 80134fe:	687b      	ldr	r3, [r7, #4]
 8013500:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013504:	3b01      	subs	r3, #1
 8013506:	b29a      	uxth	r2, r3
 8013508:	687b      	ldr	r3, [r7, #4]
 801350a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 801350e:	687b      	ldr	r3, [r7, #4]
 8013510:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013512:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8013514:	69fb      	ldr	r3, [r7, #28]
 8013516:	2b00      	cmp	r3, #0
 8013518:	d12a      	bne.n	8013570 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 801351a:	687b      	ldr	r3, [r7, #4]
 801351c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801351e:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8013520:	69fb      	ldr	r3, [r7, #28]
 8013522:	2b00      	cmp	r3, #0
 8013524:	d106      	bne.n	8013534 <tcp_process+0x280>
 8013526:	4b06      	ldr	r3, [pc, #24]	; (8013540 <tcp_process+0x28c>)
 8013528:	f44f 725d 	mov.w	r2, #884	; 0x374
 801352c:	490f      	ldr	r1, [pc, #60]	; (801356c <tcp_process+0x2b8>)
 801352e:	4806      	ldr	r0, [pc, #24]	; (8013548 <tcp_process+0x294>)
 8013530:	f006 f9a6 	bl	8019880 <iprintf>
          pcb->unsent = rseg->next;
 8013534:	69fb      	ldr	r3, [r7, #28]
 8013536:	681a      	ldr	r2, [r3, #0]
 8013538:	687b      	ldr	r3, [r7, #4]
 801353a:	66da      	str	r2, [r3, #108]	; 0x6c
 801353c:	e01c      	b.n	8013578 <tcp_process+0x2c4>
 801353e:	bf00      	nop
 8013540:	0801d364 	.word	0x0801d364
 8013544:	0801d59c 	.word	0x0801d59c
 8013548:	0801d3b0 	.word	0x0801d3b0
 801354c:	200070d0 	.word	0x200070d0
 8013550:	200070c8 	.word	0x200070c8
 8013554:	200070c4 	.word	0x200070c4
 8013558:	0801d5b8 	.word	0x0801d5b8
 801355c:	200070d1 	.word	0x200070d1
 8013560:	2000708c 	.word	0x2000708c
 8013564:	200070b4 	.word	0x200070b4
 8013568:	0801d5d8 	.word	0x0801d5d8
 801356c:	0801d5f0 	.word	0x0801d5f0
        } else {
          pcb->unacked = rseg->next;
 8013570:	69fb      	ldr	r3, [r7, #28]
 8013572:	681a      	ldr	r2, [r3, #0]
 8013574:	687b      	ldr	r3, [r7, #4]
 8013576:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8013578:	69f8      	ldr	r0, [r7, #28]
 801357a:	f7fe fd22 	bl	8011fc2 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 801357e:	687b      	ldr	r3, [r7, #4]
 8013580:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013582:	2b00      	cmp	r3, #0
 8013584:	d104      	bne.n	8013590 <tcp_process+0x2dc>
          pcb->rtime = -1;
 8013586:	687b      	ldr	r3, [r7, #4]
 8013588:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801358c:	861a      	strh	r2, [r3, #48]	; 0x30
 801358e:	e006      	b.n	801359e <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 8013590:	687b      	ldr	r3, [r7, #4]
 8013592:	2200      	movs	r2, #0
 8013594:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8013596:	687b      	ldr	r3, [r7, #4]
 8013598:	2200      	movs	r2, #0
 801359a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 801359e:	687b      	ldr	r3, [r7, #4]
 80135a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80135a4:	2b00      	cmp	r3, #0
 80135a6:	d00a      	beq.n	80135be <tcp_process+0x30a>
 80135a8:	687b      	ldr	r3, [r7, #4]
 80135aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80135ae:	687a      	ldr	r2, [r7, #4]
 80135b0:	6910      	ldr	r0, [r2, #16]
 80135b2:	2200      	movs	r2, #0
 80135b4:	6879      	ldr	r1, [r7, #4]
 80135b6:	4798      	blx	r3
 80135b8:	4603      	mov	r3, r0
 80135ba:	76bb      	strb	r3, [r7, #26]
 80135bc:	e001      	b.n	80135c2 <tcp_process+0x30e>
 80135be:	2300      	movs	r3, #0
 80135c0:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 80135c2:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80135c6:	f113 0f0d 	cmn.w	r3, #13
 80135ca:	d102      	bne.n	80135d2 <tcp_process+0x31e>
          return ERR_ABRT;
 80135cc:	f06f 030c 	mvn.w	r3, #12
 80135d0:	e250      	b.n	8013a74 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 80135d2:	687b      	ldr	r3, [r7, #4]
 80135d4:	8b5b      	ldrh	r3, [r3, #26]
 80135d6:	f043 0302 	orr.w	r3, r3, #2
 80135da:	b29a      	uxth	r2, r3
 80135dc:	687b      	ldr	r3, [r7, #4]
 80135de:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 80135e0:	e23a      	b.n	8013a58 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 80135e2:	4b98      	ldr	r3, [pc, #608]	; (8013844 <tcp_process+0x590>)
 80135e4:	781b      	ldrb	r3, [r3, #0]
 80135e6:	f003 0310 	and.w	r3, r3, #16
 80135ea:	2b00      	cmp	r3, #0
 80135ec:	f000 8234 	beq.w	8013a58 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80135f0:	4b95      	ldr	r3, [pc, #596]	; (8013848 <tcp_process+0x594>)
 80135f2:	6819      	ldr	r1, [r3, #0]
 80135f4:	4b95      	ldr	r3, [pc, #596]	; (801384c <tcp_process+0x598>)
 80135f6:	881b      	ldrh	r3, [r3, #0]
 80135f8:	461a      	mov	r2, r3
 80135fa:	4b95      	ldr	r3, [pc, #596]	; (8013850 <tcp_process+0x59c>)
 80135fc:	681b      	ldr	r3, [r3, #0]
 80135fe:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013600:	4b94      	ldr	r3, [pc, #592]	; (8013854 <tcp_process+0x5a0>)
 8013602:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013604:	885b      	ldrh	r3, [r3, #2]
 8013606:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013608:	4a92      	ldr	r2, [pc, #584]	; (8013854 <tcp_process+0x5a0>)
 801360a:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801360c:	8812      	ldrh	r2, [r2, #0]
 801360e:	b292      	uxth	r2, r2
 8013610:	9202      	str	r2, [sp, #8]
 8013612:	9301      	str	r3, [sp, #4]
 8013614:	4b90      	ldr	r3, [pc, #576]	; (8013858 <tcp_process+0x5a4>)
 8013616:	9300      	str	r3, [sp, #0]
 8013618:	4b90      	ldr	r3, [pc, #576]	; (801385c <tcp_process+0x5a8>)
 801361a:	4602      	mov	r2, r0
 801361c:	6878      	ldr	r0, [r7, #4]
 801361e:	f002 fc85 	bl	8015f2c <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8013622:	687b      	ldr	r3, [r7, #4]
 8013624:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013628:	2b05      	cmp	r3, #5
 801362a:	f200 8215 	bhi.w	8013a58 <tcp_process+0x7a4>
          pcb->rtime = 0;
 801362e:	687b      	ldr	r3, [r7, #4]
 8013630:	2200      	movs	r2, #0
 8013632:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8013634:	6878      	ldr	r0, [r7, #4]
 8013636:	f002 fa51 	bl	8015adc <tcp_rexmit_rto>
      break;
 801363a:	e20d      	b.n	8013a58 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 801363c:	4b81      	ldr	r3, [pc, #516]	; (8013844 <tcp_process+0x590>)
 801363e:	781b      	ldrb	r3, [r3, #0]
 8013640:	f003 0310 	and.w	r3, r3, #16
 8013644:	2b00      	cmp	r3, #0
 8013646:	f000 80a1 	beq.w	801378c <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801364a:	4b7f      	ldr	r3, [pc, #508]	; (8013848 <tcp_process+0x594>)
 801364c:	681a      	ldr	r2, [r3, #0]
 801364e:	687b      	ldr	r3, [r7, #4]
 8013650:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013652:	1ad3      	subs	r3, r2, r3
 8013654:	3b01      	subs	r3, #1
 8013656:	2b00      	cmp	r3, #0
 8013658:	db7e      	blt.n	8013758 <tcp_process+0x4a4>
 801365a:	4b7b      	ldr	r3, [pc, #492]	; (8013848 <tcp_process+0x594>)
 801365c:	681a      	ldr	r2, [r3, #0]
 801365e:	687b      	ldr	r3, [r7, #4]
 8013660:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013662:	1ad3      	subs	r3, r2, r3
 8013664:	2b00      	cmp	r3, #0
 8013666:	dc77      	bgt.n	8013758 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8013668:	687b      	ldr	r3, [r7, #4]
 801366a:	2204      	movs	r2, #4
 801366c:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 801366e:	687b      	ldr	r3, [r7, #4]
 8013670:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013672:	2b00      	cmp	r3, #0
 8013674:	d102      	bne.n	801367c <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8013676:	23fa      	movs	r3, #250	; 0xfa
 8013678:	76bb      	strb	r3, [r7, #26]
 801367a:	e01d      	b.n	80136b8 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 801367c:	687b      	ldr	r3, [r7, #4]
 801367e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013680:	699b      	ldr	r3, [r3, #24]
 8013682:	2b00      	cmp	r3, #0
 8013684:	d106      	bne.n	8013694 <tcp_process+0x3e0>
 8013686:	4b76      	ldr	r3, [pc, #472]	; (8013860 <tcp_process+0x5ac>)
 8013688:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 801368c:	4975      	ldr	r1, [pc, #468]	; (8013864 <tcp_process+0x5b0>)
 801368e:	4876      	ldr	r0, [pc, #472]	; (8013868 <tcp_process+0x5b4>)
 8013690:	f006 f8f6 	bl	8019880 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8013694:	687b      	ldr	r3, [r7, #4]
 8013696:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013698:	699b      	ldr	r3, [r3, #24]
 801369a:	2b00      	cmp	r3, #0
 801369c:	d00a      	beq.n	80136b4 <tcp_process+0x400>
 801369e:	687b      	ldr	r3, [r7, #4]
 80136a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80136a2:	699b      	ldr	r3, [r3, #24]
 80136a4:	687a      	ldr	r2, [r7, #4]
 80136a6:	6910      	ldr	r0, [r2, #16]
 80136a8:	2200      	movs	r2, #0
 80136aa:	6879      	ldr	r1, [r7, #4]
 80136ac:	4798      	blx	r3
 80136ae:	4603      	mov	r3, r0
 80136b0:	76bb      	strb	r3, [r7, #26]
 80136b2:	e001      	b.n	80136b8 <tcp_process+0x404>
 80136b4:	23f0      	movs	r3, #240	; 0xf0
 80136b6:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 80136b8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80136bc:	2b00      	cmp	r3, #0
 80136be:	d00a      	beq.n	80136d6 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 80136c0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80136c4:	f113 0f0d 	cmn.w	r3, #13
 80136c8:	d002      	beq.n	80136d0 <tcp_process+0x41c>
              tcp_abort(pcb);
 80136ca:	6878      	ldr	r0, [r7, #4]
 80136cc:	f7fd ff8a 	bl	80115e4 <tcp_abort>
            }
            return ERR_ABRT;
 80136d0:	f06f 030c 	mvn.w	r3, #12
 80136d4:	e1ce      	b.n	8013a74 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 80136d6:	6878      	ldr	r0, [r7, #4]
 80136d8:	f000 fae0 	bl	8013c9c <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 80136dc:	4b63      	ldr	r3, [pc, #396]	; (801386c <tcp_process+0x5b8>)
 80136de:	881b      	ldrh	r3, [r3, #0]
 80136e0:	2b00      	cmp	r3, #0
 80136e2:	d005      	beq.n	80136f0 <tcp_process+0x43c>
            recv_acked--;
 80136e4:	4b61      	ldr	r3, [pc, #388]	; (801386c <tcp_process+0x5b8>)
 80136e6:	881b      	ldrh	r3, [r3, #0]
 80136e8:	3b01      	subs	r3, #1
 80136ea:	b29a      	uxth	r2, r3
 80136ec:	4b5f      	ldr	r3, [pc, #380]	; (801386c <tcp_process+0x5b8>)
 80136ee:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80136f0:	687b      	ldr	r3, [r7, #4]
 80136f2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80136f4:	009a      	lsls	r2, r3, #2
 80136f6:	687b      	ldr	r3, [r7, #4]
 80136f8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80136fa:	005b      	lsls	r3, r3, #1
 80136fc:	f241 111c 	movw	r1, #4380	; 0x111c
 8013700:	428b      	cmp	r3, r1
 8013702:	bf38      	it	cc
 8013704:	460b      	movcc	r3, r1
 8013706:	429a      	cmp	r2, r3
 8013708:	d204      	bcs.n	8013714 <tcp_process+0x460>
 801370a:	687b      	ldr	r3, [r7, #4]
 801370c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801370e:	009b      	lsls	r3, r3, #2
 8013710:	b29b      	uxth	r3, r3
 8013712:	e00d      	b.n	8013730 <tcp_process+0x47c>
 8013714:	687b      	ldr	r3, [r7, #4]
 8013716:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013718:	005b      	lsls	r3, r3, #1
 801371a:	f241 121c 	movw	r2, #4380	; 0x111c
 801371e:	4293      	cmp	r3, r2
 8013720:	d904      	bls.n	801372c <tcp_process+0x478>
 8013722:	687b      	ldr	r3, [r7, #4]
 8013724:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013726:	005b      	lsls	r3, r3, #1
 8013728:	b29b      	uxth	r3, r3
 801372a:	e001      	b.n	8013730 <tcp_process+0x47c>
 801372c:	f241 131c 	movw	r3, #4380	; 0x111c
 8013730:	687a      	ldr	r2, [r7, #4]
 8013732:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8013736:	4b4e      	ldr	r3, [pc, #312]	; (8013870 <tcp_process+0x5bc>)
 8013738:	781b      	ldrb	r3, [r3, #0]
 801373a:	f003 0320 	and.w	r3, r3, #32
 801373e:	2b00      	cmp	r3, #0
 8013740:	d037      	beq.n	80137b2 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8013742:	687b      	ldr	r3, [r7, #4]
 8013744:	8b5b      	ldrh	r3, [r3, #26]
 8013746:	f043 0302 	orr.w	r3, r3, #2
 801374a:	b29a      	uxth	r2, r3
 801374c:	687b      	ldr	r3, [r7, #4]
 801374e:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8013750:	687b      	ldr	r3, [r7, #4]
 8013752:	2207      	movs	r2, #7
 8013754:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8013756:	e02c      	b.n	80137b2 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013758:	4b3b      	ldr	r3, [pc, #236]	; (8013848 <tcp_process+0x594>)
 801375a:	6819      	ldr	r1, [r3, #0]
 801375c:	4b3b      	ldr	r3, [pc, #236]	; (801384c <tcp_process+0x598>)
 801375e:	881b      	ldrh	r3, [r3, #0]
 8013760:	461a      	mov	r2, r3
 8013762:	4b3b      	ldr	r3, [pc, #236]	; (8013850 <tcp_process+0x59c>)
 8013764:	681b      	ldr	r3, [r3, #0]
 8013766:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013768:	4b3a      	ldr	r3, [pc, #232]	; (8013854 <tcp_process+0x5a0>)
 801376a:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801376c:	885b      	ldrh	r3, [r3, #2]
 801376e:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013770:	4a38      	ldr	r2, [pc, #224]	; (8013854 <tcp_process+0x5a0>)
 8013772:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013774:	8812      	ldrh	r2, [r2, #0]
 8013776:	b292      	uxth	r2, r2
 8013778:	9202      	str	r2, [sp, #8]
 801377a:	9301      	str	r3, [sp, #4]
 801377c:	4b36      	ldr	r3, [pc, #216]	; (8013858 <tcp_process+0x5a4>)
 801377e:	9300      	str	r3, [sp, #0]
 8013780:	4b36      	ldr	r3, [pc, #216]	; (801385c <tcp_process+0x5a8>)
 8013782:	4602      	mov	r2, r0
 8013784:	6878      	ldr	r0, [r7, #4]
 8013786:	f002 fbd1 	bl	8015f2c <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 801378a:	e167      	b.n	8013a5c <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 801378c:	4b2d      	ldr	r3, [pc, #180]	; (8013844 <tcp_process+0x590>)
 801378e:	781b      	ldrb	r3, [r3, #0]
 8013790:	f003 0302 	and.w	r3, r3, #2
 8013794:	2b00      	cmp	r3, #0
 8013796:	f000 8161 	beq.w	8013a5c <tcp_process+0x7a8>
 801379a:	687b      	ldr	r3, [r7, #4]
 801379c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801379e:	1e5a      	subs	r2, r3, #1
 80137a0:	4b2b      	ldr	r3, [pc, #172]	; (8013850 <tcp_process+0x59c>)
 80137a2:	681b      	ldr	r3, [r3, #0]
 80137a4:	429a      	cmp	r2, r3
 80137a6:	f040 8159 	bne.w	8013a5c <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 80137aa:	6878      	ldr	r0, [r7, #4]
 80137ac:	f002 f9b8 	bl	8015b20 <tcp_rexmit>
      break;
 80137b0:	e154      	b.n	8013a5c <tcp_process+0x7a8>
 80137b2:	e153      	b.n	8013a5c <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 80137b4:	6878      	ldr	r0, [r7, #4]
 80137b6:	f000 fa71 	bl	8013c9c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 80137ba:	4b2d      	ldr	r3, [pc, #180]	; (8013870 <tcp_process+0x5bc>)
 80137bc:	781b      	ldrb	r3, [r3, #0]
 80137be:	f003 0320 	and.w	r3, r3, #32
 80137c2:	2b00      	cmp	r3, #0
 80137c4:	f000 814c 	beq.w	8013a60 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 80137c8:	687b      	ldr	r3, [r7, #4]
 80137ca:	8b5b      	ldrh	r3, [r3, #26]
 80137cc:	f043 0302 	orr.w	r3, r3, #2
 80137d0:	b29a      	uxth	r2, r3
 80137d2:	687b      	ldr	r3, [r7, #4]
 80137d4:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 80137d6:	687b      	ldr	r3, [r7, #4]
 80137d8:	2207      	movs	r2, #7
 80137da:	751a      	strb	r2, [r3, #20]
      }
      break;
 80137dc:	e140      	b.n	8013a60 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 80137de:	6878      	ldr	r0, [r7, #4]
 80137e0:	f000 fa5c 	bl	8013c9c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80137e4:	4b22      	ldr	r3, [pc, #136]	; (8013870 <tcp_process+0x5bc>)
 80137e6:	781b      	ldrb	r3, [r3, #0]
 80137e8:	f003 0320 	and.w	r3, r3, #32
 80137ec:	2b00      	cmp	r3, #0
 80137ee:	d071      	beq.n	80138d4 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80137f0:	4b14      	ldr	r3, [pc, #80]	; (8013844 <tcp_process+0x590>)
 80137f2:	781b      	ldrb	r3, [r3, #0]
 80137f4:	f003 0310 	and.w	r3, r3, #16
 80137f8:	2b00      	cmp	r3, #0
 80137fa:	d060      	beq.n	80138be <tcp_process+0x60a>
 80137fc:	687b      	ldr	r3, [r7, #4]
 80137fe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013800:	4b11      	ldr	r3, [pc, #68]	; (8013848 <tcp_process+0x594>)
 8013802:	681b      	ldr	r3, [r3, #0]
 8013804:	429a      	cmp	r2, r3
 8013806:	d15a      	bne.n	80138be <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8013808:	687b      	ldr	r3, [r7, #4]
 801380a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801380c:	2b00      	cmp	r3, #0
 801380e:	d156      	bne.n	80138be <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8013810:	687b      	ldr	r3, [r7, #4]
 8013812:	8b5b      	ldrh	r3, [r3, #26]
 8013814:	f043 0302 	orr.w	r3, r3, #2
 8013818:	b29a      	uxth	r2, r3
 801381a:	687b      	ldr	r3, [r7, #4]
 801381c:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 801381e:	6878      	ldr	r0, [r7, #4]
 8013820:	f7fe fdbc 	bl	801239c <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8013824:	4b13      	ldr	r3, [pc, #76]	; (8013874 <tcp_process+0x5c0>)
 8013826:	681b      	ldr	r3, [r3, #0]
 8013828:	687a      	ldr	r2, [r7, #4]
 801382a:	429a      	cmp	r2, r3
 801382c:	d105      	bne.n	801383a <tcp_process+0x586>
 801382e:	4b11      	ldr	r3, [pc, #68]	; (8013874 <tcp_process+0x5c0>)
 8013830:	681b      	ldr	r3, [r3, #0]
 8013832:	68db      	ldr	r3, [r3, #12]
 8013834:	4a0f      	ldr	r2, [pc, #60]	; (8013874 <tcp_process+0x5c0>)
 8013836:	6013      	str	r3, [r2, #0]
 8013838:	e02e      	b.n	8013898 <tcp_process+0x5e4>
 801383a:	4b0e      	ldr	r3, [pc, #56]	; (8013874 <tcp_process+0x5c0>)
 801383c:	681b      	ldr	r3, [r3, #0]
 801383e:	617b      	str	r3, [r7, #20]
 8013840:	e027      	b.n	8013892 <tcp_process+0x5de>
 8013842:	bf00      	nop
 8013844:	200070d0 	.word	0x200070d0
 8013848:	200070c8 	.word	0x200070c8
 801384c:	200070ce 	.word	0x200070ce
 8013850:	200070c4 	.word	0x200070c4
 8013854:	200070b4 	.word	0x200070b4
 8013858:	200007c0 	.word	0x200007c0
 801385c:	200007c4 	.word	0x200007c4
 8013860:	0801d364 	.word	0x0801d364
 8013864:	0801d604 	.word	0x0801d604
 8013868:	0801d3b0 	.word	0x0801d3b0
 801386c:	200070cc 	.word	0x200070cc
 8013870:	200070d1 	.word	0x200070d1
 8013874:	20007098 	.word	0x20007098
 8013878:	697b      	ldr	r3, [r7, #20]
 801387a:	68db      	ldr	r3, [r3, #12]
 801387c:	687a      	ldr	r2, [r7, #4]
 801387e:	429a      	cmp	r2, r3
 8013880:	d104      	bne.n	801388c <tcp_process+0x5d8>
 8013882:	687b      	ldr	r3, [r7, #4]
 8013884:	68da      	ldr	r2, [r3, #12]
 8013886:	697b      	ldr	r3, [r7, #20]
 8013888:	60da      	str	r2, [r3, #12]
 801388a:	e005      	b.n	8013898 <tcp_process+0x5e4>
 801388c:	697b      	ldr	r3, [r7, #20]
 801388e:	68db      	ldr	r3, [r3, #12]
 8013890:	617b      	str	r3, [r7, #20]
 8013892:	697b      	ldr	r3, [r7, #20]
 8013894:	2b00      	cmp	r3, #0
 8013896:	d1ef      	bne.n	8013878 <tcp_process+0x5c4>
 8013898:	687b      	ldr	r3, [r7, #4]
 801389a:	2200      	movs	r2, #0
 801389c:	60da      	str	r2, [r3, #12]
 801389e:	4b77      	ldr	r3, [pc, #476]	; (8013a7c <tcp_process+0x7c8>)
 80138a0:	2201      	movs	r2, #1
 80138a2:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 80138a4:	687b      	ldr	r3, [r7, #4]
 80138a6:	220a      	movs	r2, #10
 80138a8:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 80138aa:	4b75      	ldr	r3, [pc, #468]	; (8013a80 <tcp_process+0x7cc>)
 80138ac:	681a      	ldr	r2, [r3, #0]
 80138ae:	687b      	ldr	r3, [r7, #4]
 80138b0:	60da      	str	r2, [r3, #12]
 80138b2:	4a73      	ldr	r2, [pc, #460]	; (8013a80 <tcp_process+0x7cc>)
 80138b4:	687b      	ldr	r3, [r7, #4]
 80138b6:	6013      	str	r3, [r2, #0]
 80138b8:	f002 fcfa 	bl	80162b0 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 80138bc:	e0d2      	b.n	8013a64 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 80138be:	687b      	ldr	r3, [r7, #4]
 80138c0:	8b5b      	ldrh	r3, [r3, #26]
 80138c2:	f043 0302 	orr.w	r3, r3, #2
 80138c6:	b29a      	uxth	r2, r3
 80138c8:	687b      	ldr	r3, [r7, #4]
 80138ca:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 80138cc:	687b      	ldr	r3, [r7, #4]
 80138ce:	2208      	movs	r2, #8
 80138d0:	751a      	strb	r2, [r3, #20]
      break;
 80138d2:	e0c7      	b.n	8013a64 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80138d4:	4b6b      	ldr	r3, [pc, #428]	; (8013a84 <tcp_process+0x7d0>)
 80138d6:	781b      	ldrb	r3, [r3, #0]
 80138d8:	f003 0310 	and.w	r3, r3, #16
 80138dc:	2b00      	cmp	r3, #0
 80138de:	f000 80c1 	beq.w	8013a64 <tcp_process+0x7b0>
 80138e2:	687b      	ldr	r3, [r7, #4]
 80138e4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80138e6:	4b68      	ldr	r3, [pc, #416]	; (8013a88 <tcp_process+0x7d4>)
 80138e8:	681b      	ldr	r3, [r3, #0]
 80138ea:	429a      	cmp	r2, r3
 80138ec:	f040 80ba 	bne.w	8013a64 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 80138f0:	687b      	ldr	r3, [r7, #4]
 80138f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80138f4:	2b00      	cmp	r3, #0
 80138f6:	f040 80b5 	bne.w	8013a64 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 80138fa:	687b      	ldr	r3, [r7, #4]
 80138fc:	2206      	movs	r2, #6
 80138fe:	751a      	strb	r2, [r3, #20]
      break;
 8013900:	e0b0      	b.n	8013a64 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8013902:	6878      	ldr	r0, [r7, #4]
 8013904:	f000 f9ca 	bl	8013c9c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8013908:	4b60      	ldr	r3, [pc, #384]	; (8013a8c <tcp_process+0x7d8>)
 801390a:	781b      	ldrb	r3, [r3, #0]
 801390c:	f003 0320 	and.w	r3, r3, #32
 8013910:	2b00      	cmp	r3, #0
 8013912:	f000 80a9 	beq.w	8013a68 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8013916:	687b      	ldr	r3, [r7, #4]
 8013918:	8b5b      	ldrh	r3, [r3, #26]
 801391a:	f043 0302 	orr.w	r3, r3, #2
 801391e:	b29a      	uxth	r2, r3
 8013920:	687b      	ldr	r3, [r7, #4]
 8013922:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8013924:	6878      	ldr	r0, [r7, #4]
 8013926:	f7fe fd39 	bl	801239c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801392a:	4b59      	ldr	r3, [pc, #356]	; (8013a90 <tcp_process+0x7dc>)
 801392c:	681b      	ldr	r3, [r3, #0]
 801392e:	687a      	ldr	r2, [r7, #4]
 8013930:	429a      	cmp	r2, r3
 8013932:	d105      	bne.n	8013940 <tcp_process+0x68c>
 8013934:	4b56      	ldr	r3, [pc, #344]	; (8013a90 <tcp_process+0x7dc>)
 8013936:	681b      	ldr	r3, [r3, #0]
 8013938:	68db      	ldr	r3, [r3, #12]
 801393a:	4a55      	ldr	r2, [pc, #340]	; (8013a90 <tcp_process+0x7dc>)
 801393c:	6013      	str	r3, [r2, #0]
 801393e:	e013      	b.n	8013968 <tcp_process+0x6b4>
 8013940:	4b53      	ldr	r3, [pc, #332]	; (8013a90 <tcp_process+0x7dc>)
 8013942:	681b      	ldr	r3, [r3, #0]
 8013944:	613b      	str	r3, [r7, #16]
 8013946:	e00c      	b.n	8013962 <tcp_process+0x6ae>
 8013948:	693b      	ldr	r3, [r7, #16]
 801394a:	68db      	ldr	r3, [r3, #12]
 801394c:	687a      	ldr	r2, [r7, #4]
 801394e:	429a      	cmp	r2, r3
 8013950:	d104      	bne.n	801395c <tcp_process+0x6a8>
 8013952:	687b      	ldr	r3, [r7, #4]
 8013954:	68da      	ldr	r2, [r3, #12]
 8013956:	693b      	ldr	r3, [r7, #16]
 8013958:	60da      	str	r2, [r3, #12]
 801395a:	e005      	b.n	8013968 <tcp_process+0x6b4>
 801395c:	693b      	ldr	r3, [r7, #16]
 801395e:	68db      	ldr	r3, [r3, #12]
 8013960:	613b      	str	r3, [r7, #16]
 8013962:	693b      	ldr	r3, [r7, #16]
 8013964:	2b00      	cmp	r3, #0
 8013966:	d1ef      	bne.n	8013948 <tcp_process+0x694>
 8013968:	687b      	ldr	r3, [r7, #4]
 801396a:	2200      	movs	r2, #0
 801396c:	60da      	str	r2, [r3, #12]
 801396e:	4b43      	ldr	r3, [pc, #268]	; (8013a7c <tcp_process+0x7c8>)
 8013970:	2201      	movs	r2, #1
 8013972:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8013974:	687b      	ldr	r3, [r7, #4]
 8013976:	220a      	movs	r2, #10
 8013978:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801397a:	4b41      	ldr	r3, [pc, #260]	; (8013a80 <tcp_process+0x7cc>)
 801397c:	681a      	ldr	r2, [r3, #0]
 801397e:	687b      	ldr	r3, [r7, #4]
 8013980:	60da      	str	r2, [r3, #12]
 8013982:	4a3f      	ldr	r2, [pc, #252]	; (8013a80 <tcp_process+0x7cc>)
 8013984:	687b      	ldr	r3, [r7, #4]
 8013986:	6013      	str	r3, [r2, #0]
 8013988:	f002 fc92 	bl	80162b0 <tcp_timer_needed>
      }
      break;
 801398c:	e06c      	b.n	8013a68 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 801398e:	6878      	ldr	r0, [r7, #4]
 8013990:	f000 f984 	bl	8013c9c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8013994:	4b3b      	ldr	r3, [pc, #236]	; (8013a84 <tcp_process+0x7d0>)
 8013996:	781b      	ldrb	r3, [r3, #0]
 8013998:	f003 0310 	and.w	r3, r3, #16
 801399c:	2b00      	cmp	r3, #0
 801399e:	d065      	beq.n	8013a6c <tcp_process+0x7b8>
 80139a0:	687b      	ldr	r3, [r7, #4]
 80139a2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80139a4:	4b38      	ldr	r3, [pc, #224]	; (8013a88 <tcp_process+0x7d4>)
 80139a6:	681b      	ldr	r3, [r3, #0]
 80139a8:	429a      	cmp	r2, r3
 80139aa:	d15f      	bne.n	8013a6c <tcp_process+0x7b8>
 80139ac:	687b      	ldr	r3, [r7, #4]
 80139ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80139b0:	2b00      	cmp	r3, #0
 80139b2:	d15b      	bne.n	8013a6c <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 80139b4:	6878      	ldr	r0, [r7, #4]
 80139b6:	f7fe fcf1 	bl	801239c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80139ba:	4b35      	ldr	r3, [pc, #212]	; (8013a90 <tcp_process+0x7dc>)
 80139bc:	681b      	ldr	r3, [r3, #0]
 80139be:	687a      	ldr	r2, [r7, #4]
 80139c0:	429a      	cmp	r2, r3
 80139c2:	d105      	bne.n	80139d0 <tcp_process+0x71c>
 80139c4:	4b32      	ldr	r3, [pc, #200]	; (8013a90 <tcp_process+0x7dc>)
 80139c6:	681b      	ldr	r3, [r3, #0]
 80139c8:	68db      	ldr	r3, [r3, #12]
 80139ca:	4a31      	ldr	r2, [pc, #196]	; (8013a90 <tcp_process+0x7dc>)
 80139cc:	6013      	str	r3, [r2, #0]
 80139ce:	e013      	b.n	80139f8 <tcp_process+0x744>
 80139d0:	4b2f      	ldr	r3, [pc, #188]	; (8013a90 <tcp_process+0x7dc>)
 80139d2:	681b      	ldr	r3, [r3, #0]
 80139d4:	60fb      	str	r3, [r7, #12]
 80139d6:	e00c      	b.n	80139f2 <tcp_process+0x73e>
 80139d8:	68fb      	ldr	r3, [r7, #12]
 80139da:	68db      	ldr	r3, [r3, #12]
 80139dc:	687a      	ldr	r2, [r7, #4]
 80139de:	429a      	cmp	r2, r3
 80139e0:	d104      	bne.n	80139ec <tcp_process+0x738>
 80139e2:	687b      	ldr	r3, [r7, #4]
 80139e4:	68da      	ldr	r2, [r3, #12]
 80139e6:	68fb      	ldr	r3, [r7, #12]
 80139e8:	60da      	str	r2, [r3, #12]
 80139ea:	e005      	b.n	80139f8 <tcp_process+0x744>
 80139ec:	68fb      	ldr	r3, [r7, #12]
 80139ee:	68db      	ldr	r3, [r3, #12]
 80139f0:	60fb      	str	r3, [r7, #12]
 80139f2:	68fb      	ldr	r3, [r7, #12]
 80139f4:	2b00      	cmp	r3, #0
 80139f6:	d1ef      	bne.n	80139d8 <tcp_process+0x724>
 80139f8:	687b      	ldr	r3, [r7, #4]
 80139fa:	2200      	movs	r2, #0
 80139fc:	60da      	str	r2, [r3, #12]
 80139fe:	4b1f      	ldr	r3, [pc, #124]	; (8013a7c <tcp_process+0x7c8>)
 8013a00:	2201      	movs	r2, #1
 8013a02:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8013a04:	687b      	ldr	r3, [r7, #4]
 8013a06:	220a      	movs	r2, #10
 8013a08:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8013a0a:	4b1d      	ldr	r3, [pc, #116]	; (8013a80 <tcp_process+0x7cc>)
 8013a0c:	681a      	ldr	r2, [r3, #0]
 8013a0e:	687b      	ldr	r3, [r7, #4]
 8013a10:	60da      	str	r2, [r3, #12]
 8013a12:	4a1b      	ldr	r2, [pc, #108]	; (8013a80 <tcp_process+0x7cc>)
 8013a14:	687b      	ldr	r3, [r7, #4]
 8013a16:	6013      	str	r3, [r2, #0]
 8013a18:	f002 fc4a 	bl	80162b0 <tcp_timer_needed>
      }
      break;
 8013a1c:	e026      	b.n	8013a6c <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8013a1e:	6878      	ldr	r0, [r7, #4]
 8013a20:	f000 f93c 	bl	8013c9c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8013a24:	4b17      	ldr	r3, [pc, #92]	; (8013a84 <tcp_process+0x7d0>)
 8013a26:	781b      	ldrb	r3, [r3, #0]
 8013a28:	f003 0310 	and.w	r3, r3, #16
 8013a2c:	2b00      	cmp	r3, #0
 8013a2e:	d01f      	beq.n	8013a70 <tcp_process+0x7bc>
 8013a30:	687b      	ldr	r3, [r7, #4]
 8013a32:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013a34:	4b14      	ldr	r3, [pc, #80]	; (8013a88 <tcp_process+0x7d4>)
 8013a36:	681b      	ldr	r3, [r3, #0]
 8013a38:	429a      	cmp	r2, r3
 8013a3a:	d119      	bne.n	8013a70 <tcp_process+0x7bc>
 8013a3c:	687b      	ldr	r3, [r7, #4]
 8013a3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013a40:	2b00      	cmp	r3, #0
 8013a42:	d115      	bne.n	8013a70 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8013a44:	4b11      	ldr	r3, [pc, #68]	; (8013a8c <tcp_process+0x7d8>)
 8013a46:	781b      	ldrb	r3, [r3, #0]
 8013a48:	f043 0310 	orr.w	r3, r3, #16
 8013a4c:	b2da      	uxtb	r2, r3
 8013a4e:	4b0f      	ldr	r3, [pc, #60]	; (8013a8c <tcp_process+0x7d8>)
 8013a50:	701a      	strb	r2, [r3, #0]
      }
      break;
 8013a52:	e00d      	b.n	8013a70 <tcp_process+0x7bc>
    default:
      break;
 8013a54:	bf00      	nop
 8013a56:	e00c      	b.n	8013a72 <tcp_process+0x7be>
      break;
 8013a58:	bf00      	nop
 8013a5a:	e00a      	b.n	8013a72 <tcp_process+0x7be>
      break;
 8013a5c:	bf00      	nop
 8013a5e:	e008      	b.n	8013a72 <tcp_process+0x7be>
      break;
 8013a60:	bf00      	nop
 8013a62:	e006      	b.n	8013a72 <tcp_process+0x7be>
      break;
 8013a64:	bf00      	nop
 8013a66:	e004      	b.n	8013a72 <tcp_process+0x7be>
      break;
 8013a68:	bf00      	nop
 8013a6a:	e002      	b.n	8013a72 <tcp_process+0x7be>
      break;
 8013a6c:	bf00      	nop
 8013a6e:	e000      	b.n	8013a72 <tcp_process+0x7be>
      break;
 8013a70:	bf00      	nop
  }
  return ERR_OK;
 8013a72:	2300      	movs	r3, #0
}
 8013a74:	4618      	mov	r0, r3
 8013a76:	3724      	adds	r7, #36	; 0x24
 8013a78:	46bd      	mov	sp, r7
 8013a7a:	bd90      	pop	{r4, r7, pc}
 8013a7c:	200070a0 	.word	0x200070a0
 8013a80:	2000709c 	.word	0x2000709c
 8013a84:	200070d0 	.word	0x200070d0
 8013a88:	200070c8 	.word	0x200070c8
 8013a8c:	200070d1 	.word	0x200070d1
 8013a90:	20007098 	.word	0x20007098

08013a94 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8013a94:	b590      	push	{r4, r7, lr}
 8013a96:	b085      	sub	sp, #20
 8013a98:	af00      	add	r7, sp, #0
 8013a9a:	6078      	str	r0, [r7, #4]
 8013a9c:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8013a9e:	687b      	ldr	r3, [r7, #4]
 8013aa0:	2b00      	cmp	r3, #0
 8013aa2:	d106      	bne.n	8013ab2 <tcp_oos_insert_segment+0x1e>
 8013aa4:	4b3b      	ldr	r3, [pc, #236]	; (8013b94 <tcp_oos_insert_segment+0x100>)
 8013aa6:	f240 421f 	movw	r2, #1055	; 0x41f
 8013aaa:	493b      	ldr	r1, [pc, #236]	; (8013b98 <tcp_oos_insert_segment+0x104>)
 8013aac:	483b      	ldr	r0, [pc, #236]	; (8013b9c <tcp_oos_insert_segment+0x108>)
 8013aae:	f005 fee7 	bl	8019880 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8013ab2:	687b      	ldr	r3, [r7, #4]
 8013ab4:	68db      	ldr	r3, [r3, #12]
 8013ab6:	899b      	ldrh	r3, [r3, #12]
 8013ab8:	b29b      	uxth	r3, r3
 8013aba:	4618      	mov	r0, r3
 8013abc:	f7fb fc26 	bl	800f30c <lwip_htons>
 8013ac0:	4603      	mov	r3, r0
 8013ac2:	b2db      	uxtb	r3, r3
 8013ac4:	f003 0301 	and.w	r3, r3, #1
 8013ac8:	2b00      	cmp	r3, #0
 8013aca:	d028      	beq.n	8013b1e <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8013acc:	6838      	ldr	r0, [r7, #0]
 8013ace:	f7fe fa63 	bl	8011f98 <tcp_segs_free>
    next = NULL;
 8013ad2:	2300      	movs	r3, #0
 8013ad4:	603b      	str	r3, [r7, #0]
 8013ad6:	e056      	b.n	8013b86 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8013ad8:	683b      	ldr	r3, [r7, #0]
 8013ada:	68db      	ldr	r3, [r3, #12]
 8013adc:	899b      	ldrh	r3, [r3, #12]
 8013ade:	b29b      	uxth	r3, r3
 8013ae0:	4618      	mov	r0, r3
 8013ae2:	f7fb fc13 	bl	800f30c <lwip_htons>
 8013ae6:	4603      	mov	r3, r0
 8013ae8:	b2db      	uxtb	r3, r3
 8013aea:	f003 0301 	and.w	r3, r3, #1
 8013aee:	2b00      	cmp	r3, #0
 8013af0:	d00d      	beq.n	8013b0e <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8013af2:	687b      	ldr	r3, [r7, #4]
 8013af4:	68db      	ldr	r3, [r3, #12]
 8013af6:	899b      	ldrh	r3, [r3, #12]
 8013af8:	b29c      	uxth	r4, r3
 8013afa:	2001      	movs	r0, #1
 8013afc:	f7fb fc06 	bl	800f30c <lwip_htons>
 8013b00:	4603      	mov	r3, r0
 8013b02:	461a      	mov	r2, r3
 8013b04:	687b      	ldr	r3, [r7, #4]
 8013b06:	68db      	ldr	r3, [r3, #12]
 8013b08:	4322      	orrs	r2, r4
 8013b0a:	b292      	uxth	r2, r2
 8013b0c:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8013b0e:	683b      	ldr	r3, [r7, #0]
 8013b10:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8013b12:	683b      	ldr	r3, [r7, #0]
 8013b14:	681b      	ldr	r3, [r3, #0]
 8013b16:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8013b18:	68f8      	ldr	r0, [r7, #12]
 8013b1a:	f7fe fa52 	bl	8011fc2 <tcp_seg_free>
    while (next &&
 8013b1e:	683b      	ldr	r3, [r7, #0]
 8013b20:	2b00      	cmp	r3, #0
 8013b22:	d00e      	beq.n	8013b42 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8013b24:	687b      	ldr	r3, [r7, #4]
 8013b26:	891b      	ldrh	r3, [r3, #8]
 8013b28:	461a      	mov	r2, r3
 8013b2a:	4b1d      	ldr	r3, [pc, #116]	; (8013ba0 <tcp_oos_insert_segment+0x10c>)
 8013b2c:	681b      	ldr	r3, [r3, #0]
 8013b2e:	441a      	add	r2, r3
 8013b30:	683b      	ldr	r3, [r7, #0]
 8013b32:	68db      	ldr	r3, [r3, #12]
 8013b34:	685b      	ldr	r3, [r3, #4]
 8013b36:	6839      	ldr	r1, [r7, #0]
 8013b38:	8909      	ldrh	r1, [r1, #8]
 8013b3a:	440b      	add	r3, r1
 8013b3c:	1ad3      	subs	r3, r2, r3
    while (next &&
 8013b3e:	2b00      	cmp	r3, #0
 8013b40:	daca      	bge.n	8013ad8 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8013b42:	683b      	ldr	r3, [r7, #0]
 8013b44:	2b00      	cmp	r3, #0
 8013b46:	d01e      	beq.n	8013b86 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8013b48:	687b      	ldr	r3, [r7, #4]
 8013b4a:	891b      	ldrh	r3, [r3, #8]
 8013b4c:	461a      	mov	r2, r3
 8013b4e:	4b14      	ldr	r3, [pc, #80]	; (8013ba0 <tcp_oos_insert_segment+0x10c>)
 8013b50:	681b      	ldr	r3, [r3, #0]
 8013b52:	441a      	add	r2, r3
 8013b54:	683b      	ldr	r3, [r7, #0]
 8013b56:	68db      	ldr	r3, [r3, #12]
 8013b58:	685b      	ldr	r3, [r3, #4]
 8013b5a:	1ad3      	subs	r3, r2, r3
    if (next &&
 8013b5c:	2b00      	cmp	r3, #0
 8013b5e:	dd12      	ble.n	8013b86 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8013b60:	683b      	ldr	r3, [r7, #0]
 8013b62:	68db      	ldr	r3, [r3, #12]
 8013b64:	685b      	ldr	r3, [r3, #4]
 8013b66:	b29a      	uxth	r2, r3
 8013b68:	4b0d      	ldr	r3, [pc, #52]	; (8013ba0 <tcp_oos_insert_segment+0x10c>)
 8013b6a:	681b      	ldr	r3, [r3, #0]
 8013b6c:	b29b      	uxth	r3, r3
 8013b6e:	1ad3      	subs	r3, r2, r3
 8013b70:	b29a      	uxth	r2, r3
 8013b72:	687b      	ldr	r3, [r7, #4]
 8013b74:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8013b76:	687b      	ldr	r3, [r7, #4]
 8013b78:	685a      	ldr	r2, [r3, #4]
 8013b7a:	687b      	ldr	r3, [r7, #4]
 8013b7c:	891b      	ldrh	r3, [r3, #8]
 8013b7e:	4619      	mov	r1, r3
 8013b80:	4610      	mov	r0, r2
 8013b82:	f7fc fe23 	bl	80107cc <pbuf_realloc>
    }
  }
  cseg->next = next;
 8013b86:	687b      	ldr	r3, [r7, #4]
 8013b88:	683a      	ldr	r2, [r7, #0]
 8013b8a:	601a      	str	r2, [r3, #0]
}
 8013b8c:	bf00      	nop
 8013b8e:	3714      	adds	r7, #20
 8013b90:	46bd      	mov	sp, r7
 8013b92:	bd90      	pop	{r4, r7, pc}
 8013b94:	0801d364 	.word	0x0801d364
 8013b98:	0801d624 	.word	0x0801d624
 8013b9c:	0801d3b0 	.word	0x0801d3b0
 8013ba0:	200070c4 	.word	0x200070c4

08013ba4 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8013ba4:	b5b0      	push	{r4, r5, r7, lr}
 8013ba6:	b086      	sub	sp, #24
 8013ba8:	af00      	add	r7, sp, #0
 8013baa:	60f8      	str	r0, [r7, #12]
 8013bac:	60b9      	str	r1, [r7, #8]
 8013bae:	607a      	str	r2, [r7, #4]
 8013bb0:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8013bb2:	e03e      	b.n	8013c32 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8013bb4:	68bb      	ldr	r3, [r7, #8]
 8013bb6:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8013bb8:	68bb      	ldr	r3, [r7, #8]
 8013bba:	681b      	ldr	r3, [r3, #0]
 8013bbc:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8013bbe:	697b      	ldr	r3, [r7, #20]
 8013bc0:	685b      	ldr	r3, [r3, #4]
 8013bc2:	4618      	mov	r0, r3
 8013bc4:	f7fd f80e 	bl	8010be4 <pbuf_clen>
 8013bc8:	4603      	mov	r3, r0
 8013bca:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8013bcc:	68fb      	ldr	r3, [r7, #12]
 8013bce:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013bd2:	8a7a      	ldrh	r2, [r7, #18]
 8013bd4:	429a      	cmp	r2, r3
 8013bd6:	d906      	bls.n	8013be6 <tcp_free_acked_segments+0x42>
 8013bd8:	4b2a      	ldr	r3, [pc, #168]	; (8013c84 <tcp_free_acked_segments+0xe0>)
 8013bda:	f240 4257 	movw	r2, #1111	; 0x457
 8013bde:	492a      	ldr	r1, [pc, #168]	; (8013c88 <tcp_free_acked_segments+0xe4>)
 8013be0:	482a      	ldr	r0, [pc, #168]	; (8013c8c <tcp_free_acked_segments+0xe8>)
 8013be2:	f005 fe4d 	bl	8019880 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8013be6:	68fb      	ldr	r3, [r7, #12]
 8013be8:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8013bec:	8a7b      	ldrh	r3, [r7, #18]
 8013bee:	1ad3      	subs	r3, r2, r3
 8013bf0:	b29a      	uxth	r2, r3
 8013bf2:	68fb      	ldr	r3, [r7, #12]
 8013bf4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8013bf8:	697b      	ldr	r3, [r7, #20]
 8013bfa:	891a      	ldrh	r2, [r3, #8]
 8013bfc:	4b24      	ldr	r3, [pc, #144]	; (8013c90 <tcp_free_acked_segments+0xec>)
 8013bfe:	881b      	ldrh	r3, [r3, #0]
 8013c00:	4413      	add	r3, r2
 8013c02:	b29a      	uxth	r2, r3
 8013c04:	4b22      	ldr	r3, [pc, #136]	; (8013c90 <tcp_free_acked_segments+0xec>)
 8013c06:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8013c08:	6978      	ldr	r0, [r7, #20]
 8013c0a:	f7fe f9da 	bl	8011fc2 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8013c0e:	68fb      	ldr	r3, [r7, #12]
 8013c10:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013c14:	2b00      	cmp	r3, #0
 8013c16:	d00c      	beq.n	8013c32 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8013c18:	68bb      	ldr	r3, [r7, #8]
 8013c1a:	2b00      	cmp	r3, #0
 8013c1c:	d109      	bne.n	8013c32 <tcp_free_acked_segments+0x8e>
 8013c1e:	683b      	ldr	r3, [r7, #0]
 8013c20:	2b00      	cmp	r3, #0
 8013c22:	d106      	bne.n	8013c32 <tcp_free_acked_segments+0x8e>
 8013c24:	4b17      	ldr	r3, [pc, #92]	; (8013c84 <tcp_free_acked_segments+0xe0>)
 8013c26:	f240 4261 	movw	r2, #1121	; 0x461
 8013c2a:	491a      	ldr	r1, [pc, #104]	; (8013c94 <tcp_free_acked_segments+0xf0>)
 8013c2c:	4817      	ldr	r0, [pc, #92]	; (8013c8c <tcp_free_acked_segments+0xe8>)
 8013c2e:	f005 fe27 	bl	8019880 <iprintf>
  while (seg_list != NULL &&
 8013c32:	68bb      	ldr	r3, [r7, #8]
 8013c34:	2b00      	cmp	r3, #0
 8013c36:	d020      	beq.n	8013c7a <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8013c38:	68bb      	ldr	r3, [r7, #8]
 8013c3a:	68db      	ldr	r3, [r3, #12]
 8013c3c:	685b      	ldr	r3, [r3, #4]
 8013c3e:	4618      	mov	r0, r3
 8013c40:	f7fb fb79 	bl	800f336 <lwip_htonl>
 8013c44:	4604      	mov	r4, r0
 8013c46:	68bb      	ldr	r3, [r7, #8]
 8013c48:	891b      	ldrh	r3, [r3, #8]
 8013c4a:	461d      	mov	r5, r3
 8013c4c:	68bb      	ldr	r3, [r7, #8]
 8013c4e:	68db      	ldr	r3, [r3, #12]
 8013c50:	899b      	ldrh	r3, [r3, #12]
 8013c52:	b29b      	uxth	r3, r3
 8013c54:	4618      	mov	r0, r3
 8013c56:	f7fb fb59 	bl	800f30c <lwip_htons>
 8013c5a:	4603      	mov	r3, r0
 8013c5c:	b2db      	uxtb	r3, r3
 8013c5e:	f003 0303 	and.w	r3, r3, #3
 8013c62:	2b00      	cmp	r3, #0
 8013c64:	d001      	beq.n	8013c6a <tcp_free_acked_segments+0xc6>
 8013c66:	2301      	movs	r3, #1
 8013c68:	e000      	b.n	8013c6c <tcp_free_acked_segments+0xc8>
 8013c6a:	2300      	movs	r3, #0
 8013c6c:	442b      	add	r3, r5
 8013c6e:	18e2      	adds	r2, r4, r3
 8013c70:	4b09      	ldr	r3, [pc, #36]	; (8013c98 <tcp_free_acked_segments+0xf4>)
 8013c72:	681b      	ldr	r3, [r3, #0]
 8013c74:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8013c76:	2b00      	cmp	r3, #0
 8013c78:	dd9c      	ble.n	8013bb4 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8013c7a:	68bb      	ldr	r3, [r7, #8]
}
 8013c7c:	4618      	mov	r0, r3
 8013c7e:	3718      	adds	r7, #24
 8013c80:	46bd      	mov	sp, r7
 8013c82:	bdb0      	pop	{r4, r5, r7, pc}
 8013c84:	0801d364 	.word	0x0801d364
 8013c88:	0801d64c 	.word	0x0801d64c
 8013c8c:	0801d3b0 	.word	0x0801d3b0
 8013c90:	200070cc 	.word	0x200070cc
 8013c94:	0801d674 	.word	0x0801d674
 8013c98:	200070c8 	.word	0x200070c8

08013c9c <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8013c9c:	b5b0      	push	{r4, r5, r7, lr}
 8013c9e:	b094      	sub	sp, #80	; 0x50
 8013ca0:	af00      	add	r7, sp, #0
 8013ca2:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8013ca4:	2300      	movs	r3, #0
 8013ca6:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8013ca8:	687b      	ldr	r3, [r7, #4]
 8013caa:	2b00      	cmp	r3, #0
 8013cac:	d106      	bne.n	8013cbc <tcp_receive+0x20>
 8013cae:	4b91      	ldr	r3, [pc, #580]	; (8013ef4 <tcp_receive+0x258>)
 8013cb0:	f240 427b 	movw	r2, #1147	; 0x47b
 8013cb4:	4990      	ldr	r1, [pc, #576]	; (8013ef8 <tcp_receive+0x25c>)
 8013cb6:	4891      	ldr	r0, [pc, #580]	; (8013efc <tcp_receive+0x260>)
 8013cb8:	f005 fde2 	bl	8019880 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8013cbc:	687b      	ldr	r3, [r7, #4]
 8013cbe:	7d1b      	ldrb	r3, [r3, #20]
 8013cc0:	2b03      	cmp	r3, #3
 8013cc2:	d806      	bhi.n	8013cd2 <tcp_receive+0x36>
 8013cc4:	4b8b      	ldr	r3, [pc, #556]	; (8013ef4 <tcp_receive+0x258>)
 8013cc6:	f240 427c 	movw	r2, #1148	; 0x47c
 8013cca:	498d      	ldr	r1, [pc, #564]	; (8013f00 <tcp_receive+0x264>)
 8013ccc:	488b      	ldr	r0, [pc, #556]	; (8013efc <tcp_receive+0x260>)
 8013cce:	f005 fdd7 	bl	8019880 <iprintf>

  if (flags & TCP_ACK) {
 8013cd2:	4b8c      	ldr	r3, [pc, #560]	; (8013f04 <tcp_receive+0x268>)
 8013cd4:	781b      	ldrb	r3, [r3, #0]
 8013cd6:	f003 0310 	and.w	r3, r3, #16
 8013cda:	2b00      	cmp	r3, #0
 8013cdc:	f000 8264 	beq.w	80141a8 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8013ce0:	687b      	ldr	r3, [r7, #4]
 8013ce2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8013ce6:	461a      	mov	r2, r3
 8013ce8:	687b      	ldr	r3, [r7, #4]
 8013cea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013cec:	4413      	add	r3, r2
 8013cee:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8013cf0:	687b      	ldr	r3, [r7, #4]
 8013cf2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8013cf4:	4b84      	ldr	r3, [pc, #528]	; (8013f08 <tcp_receive+0x26c>)
 8013cf6:	681b      	ldr	r3, [r3, #0]
 8013cf8:	1ad3      	subs	r3, r2, r3
 8013cfa:	2b00      	cmp	r3, #0
 8013cfc:	db1b      	blt.n	8013d36 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8013cfe:	687b      	ldr	r3, [r7, #4]
 8013d00:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8013d02:	4b81      	ldr	r3, [pc, #516]	; (8013f08 <tcp_receive+0x26c>)
 8013d04:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8013d06:	429a      	cmp	r2, r3
 8013d08:	d106      	bne.n	8013d18 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8013d0a:	687b      	ldr	r3, [r7, #4]
 8013d0c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8013d0e:	4b7f      	ldr	r3, [pc, #508]	; (8013f0c <tcp_receive+0x270>)
 8013d10:	681b      	ldr	r3, [r3, #0]
 8013d12:	1ad3      	subs	r3, r2, r3
 8013d14:	2b00      	cmp	r3, #0
 8013d16:	db0e      	blt.n	8013d36 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8013d18:	687b      	ldr	r3, [r7, #4]
 8013d1a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8013d1c:	4b7b      	ldr	r3, [pc, #492]	; (8013f0c <tcp_receive+0x270>)
 8013d1e:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8013d20:	429a      	cmp	r2, r3
 8013d22:	d125      	bne.n	8013d70 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8013d24:	4b7a      	ldr	r3, [pc, #488]	; (8013f10 <tcp_receive+0x274>)
 8013d26:	681b      	ldr	r3, [r3, #0]
 8013d28:	89db      	ldrh	r3, [r3, #14]
 8013d2a:	b29a      	uxth	r2, r3
 8013d2c:	687b      	ldr	r3, [r7, #4]
 8013d2e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8013d32:	429a      	cmp	r2, r3
 8013d34:	d91c      	bls.n	8013d70 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8013d36:	4b76      	ldr	r3, [pc, #472]	; (8013f10 <tcp_receive+0x274>)
 8013d38:	681b      	ldr	r3, [r3, #0]
 8013d3a:	89db      	ldrh	r3, [r3, #14]
 8013d3c:	b29a      	uxth	r2, r3
 8013d3e:	687b      	ldr	r3, [r7, #4]
 8013d40:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8013d44:	687b      	ldr	r3, [r7, #4]
 8013d46:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8013d4a:	687b      	ldr	r3, [r7, #4]
 8013d4c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8013d50:	429a      	cmp	r2, r3
 8013d52:	d205      	bcs.n	8013d60 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8013d54:	687b      	ldr	r3, [r7, #4]
 8013d56:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8013d5a:	687b      	ldr	r3, [r7, #4]
 8013d5c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8013d60:	4b69      	ldr	r3, [pc, #420]	; (8013f08 <tcp_receive+0x26c>)
 8013d62:	681a      	ldr	r2, [r3, #0]
 8013d64:	687b      	ldr	r3, [r7, #4]
 8013d66:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8013d68:	4b68      	ldr	r3, [pc, #416]	; (8013f0c <tcp_receive+0x270>)
 8013d6a:	681a      	ldr	r2, [r3, #0]
 8013d6c:	687b      	ldr	r3, [r7, #4]
 8013d6e:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8013d70:	4b66      	ldr	r3, [pc, #408]	; (8013f0c <tcp_receive+0x270>)
 8013d72:	681a      	ldr	r2, [r3, #0]
 8013d74:	687b      	ldr	r3, [r7, #4]
 8013d76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013d78:	1ad3      	subs	r3, r2, r3
 8013d7a:	2b00      	cmp	r3, #0
 8013d7c:	dc58      	bgt.n	8013e30 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8013d7e:	4b65      	ldr	r3, [pc, #404]	; (8013f14 <tcp_receive+0x278>)
 8013d80:	881b      	ldrh	r3, [r3, #0]
 8013d82:	2b00      	cmp	r3, #0
 8013d84:	d14b      	bne.n	8013e1e <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8013d86:	687b      	ldr	r3, [r7, #4]
 8013d88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013d8a:	687a      	ldr	r2, [r7, #4]
 8013d8c:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8013d90:	4413      	add	r3, r2
 8013d92:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013d94:	429a      	cmp	r2, r3
 8013d96:	d142      	bne.n	8013e1e <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8013d98:	687b      	ldr	r3, [r7, #4]
 8013d9a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8013d9e:	2b00      	cmp	r3, #0
 8013da0:	db3d      	blt.n	8013e1e <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8013da2:	687b      	ldr	r3, [r7, #4]
 8013da4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8013da6:	4b59      	ldr	r3, [pc, #356]	; (8013f0c <tcp_receive+0x270>)
 8013da8:	681b      	ldr	r3, [r3, #0]
 8013daa:	429a      	cmp	r2, r3
 8013dac:	d137      	bne.n	8013e1e <tcp_receive+0x182>
              found_dupack = 1;
 8013dae:	2301      	movs	r3, #1
 8013db0:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8013db2:	687b      	ldr	r3, [r7, #4]
 8013db4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8013db8:	2bff      	cmp	r3, #255	; 0xff
 8013dba:	d007      	beq.n	8013dcc <tcp_receive+0x130>
                ++pcb->dupacks;
 8013dbc:	687b      	ldr	r3, [r7, #4]
 8013dbe:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8013dc2:	3301      	adds	r3, #1
 8013dc4:	b2da      	uxtb	r2, r3
 8013dc6:	687b      	ldr	r3, [r7, #4]
 8013dc8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8013dcc:	687b      	ldr	r3, [r7, #4]
 8013dce:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8013dd2:	2b03      	cmp	r3, #3
 8013dd4:	d91b      	bls.n	8013e0e <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8013dd6:	687b      	ldr	r3, [r7, #4]
 8013dd8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8013ddc:	687b      	ldr	r3, [r7, #4]
 8013dde:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013de0:	4413      	add	r3, r2
 8013de2:	b29a      	uxth	r2, r3
 8013de4:	687b      	ldr	r3, [r7, #4]
 8013de6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8013dea:	429a      	cmp	r2, r3
 8013dec:	d30a      	bcc.n	8013e04 <tcp_receive+0x168>
 8013dee:	687b      	ldr	r3, [r7, #4]
 8013df0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8013df4:	687b      	ldr	r3, [r7, #4]
 8013df6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013df8:	4413      	add	r3, r2
 8013dfa:	b29a      	uxth	r2, r3
 8013dfc:	687b      	ldr	r3, [r7, #4]
 8013dfe:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8013e02:	e004      	b.n	8013e0e <tcp_receive+0x172>
 8013e04:	687b      	ldr	r3, [r7, #4]
 8013e06:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013e0a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 8013e0e:	687b      	ldr	r3, [r7, #4]
 8013e10:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8013e14:	2b02      	cmp	r3, #2
 8013e16:	d902      	bls.n	8013e1e <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8013e18:	6878      	ldr	r0, [r7, #4]
 8013e1a:	f001 feed 	bl	8015bf8 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8013e1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013e20:	2b00      	cmp	r3, #0
 8013e22:	f040 8161 	bne.w	80140e8 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 8013e26:	687b      	ldr	r3, [r7, #4]
 8013e28:	2200      	movs	r2, #0
 8013e2a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8013e2e:	e15b      	b.n	80140e8 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8013e30:	4b36      	ldr	r3, [pc, #216]	; (8013f0c <tcp_receive+0x270>)
 8013e32:	681a      	ldr	r2, [r3, #0]
 8013e34:	687b      	ldr	r3, [r7, #4]
 8013e36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013e38:	1ad3      	subs	r3, r2, r3
 8013e3a:	3b01      	subs	r3, #1
 8013e3c:	2b00      	cmp	r3, #0
 8013e3e:	f2c0 814e 	blt.w	80140de <tcp_receive+0x442>
 8013e42:	4b32      	ldr	r3, [pc, #200]	; (8013f0c <tcp_receive+0x270>)
 8013e44:	681a      	ldr	r2, [r3, #0]
 8013e46:	687b      	ldr	r3, [r7, #4]
 8013e48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013e4a:	1ad3      	subs	r3, r2, r3
 8013e4c:	2b00      	cmp	r3, #0
 8013e4e:	f300 8146 	bgt.w	80140de <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8013e52:	687b      	ldr	r3, [r7, #4]
 8013e54:	8b5b      	ldrh	r3, [r3, #26]
 8013e56:	f003 0304 	and.w	r3, r3, #4
 8013e5a:	2b00      	cmp	r3, #0
 8013e5c:	d010      	beq.n	8013e80 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8013e5e:	687b      	ldr	r3, [r7, #4]
 8013e60:	8b5b      	ldrh	r3, [r3, #26]
 8013e62:	f023 0304 	bic.w	r3, r3, #4
 8013e66:	b29a      	uxth	r2, r3
 8013e68:	687b      	ldr	r3, [r7, #4]
 8013e6a:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8013e6c:	687b      	ldr	r3, [r7, #4]
 8013e6e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8013e72:	687b      	ldr	r3, [r7, #4]
 8013e74:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8013e78:	687b      	ldr	r3, [r7, #4]
 8013e7a:	2200      	movs	r2, #0
 8013e7c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8013e80:	687b      	ldr	r3, [r7, #4]
 8013e82:	2200      	movs	r2, #0
 8013e84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8013e88:	687b      	ldr	r3, [r7, #4]
 8013e8a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8013e8e:	10db      	asrs	r3, r3, #3
 8013e90:	b21b      	sxth	r3, r3
 8013e92:	b29a      	uxth	r2, r3
 8013e94:	687b      	ldr	r3, [r7, #4]
 8013e96:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8013e9a:	b29b      	uxth	r3, r3
 8013e9c:	4413      	add	r3, r2
 8013e9e:	b29b      	uxth	r3, r3
 8013ea0:	b21a      	sxth	r2, r3
 8013ea2:	687b      	ldr	r3, [r7, #4]
 8013ea4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8013ea8:	4b18      	ldr	r3, [pc, #96]	; (8013f0c <tcp_receive+0x270>)
 8013eaa:	681b      	ldr	r3, [r3, #0]
 8013eac:	b29a      	uxth	r2, r3
 8013eae:	687b      	ldr	r3, [r7, #4]
 8013eb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013eb2:	b29b      	uxth	r3, r3
 8013eb4:	1ad3      	subs	r3, r2, r3
 8013eb6:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8013eb8:	687b      	ldr	r3, [r7, #4]
 8013eba:	2200      	movs	r2, #0
 8013ebc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8013ec0:	4b12      	ldr	r3, [pc, #72]	; (8013f0c <tcp_receive+0x270>)
 8013ec2:	681a      	ldr	r2, [r3, #0]
 8013ec4:	687b      	ldr	r3, [r7, #4]
 8013ec6:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8013ec8:	687b      	ldr	r3, [r7, #4]
 8013eca:	7d1b      	ldrb	r3, [r3, #20]
 8013ecc:	2b03      	cmp	r3, #3
 8013ece:	f240 8097 	bls.w	8014000 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 8013ed2:	687b      	ldr	r3, [r7, #4]
 8013ed4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8013ed8:	687b      	ldr	r3, [r7, #4]
 8013eda:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8013ede:	429a      	cmp	r2, r3
 8013ee0:	d245      	bcs.n	8013f6e <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8013ee2:	687b      	ldr	r3, [r7, #4]
 8013ee4:	8b5b      	ldrh	r3, [r3, #26]
 8013ee6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8013eea:	2b00      	cmp	r3, #0
 8013eec:	d014      	beq.n	8013f18 <tcp_receive+0x27c>
 8013eee:	2301      	movs	r3, #1
 8013ef0:	e013      	b.n	8013f1a <tcp_receive+0x27e>
 8013ef2:	bf00      	nop
 8013ef4:	0801d364 	.word	0x0801d364
 8013ef8:	0801d694 	.word	0x0801d694
 8013efc:	0801d3b0 	.word	0x0801d3b0
 8013f00:	0801d6b0 	.word	0x0801d6b0
 8013f04:	200070d0 	.word	0x200070d0
 8013f08:	200070c4 	.word	0x200070c4
 8013f0c:	200070c8 	.word	0x200070c8
 8013f10:	200070b4 	.word	0x200070b4
 8013f14:	200070ce 	.word	0x200070ce
 8013f18:	2302      	movs	r3, #2
 8013f1a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8013f1e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8013f22:	b29a      	uxth	r2, r3
 8013f24:	687b      	ldr	r3, [r7, #4]
 8013f26:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013f28:	fb12 f303 	smulbb	r3, r2, r3
 8013f2c:	b29b      	uxth	r3, r3
 8013f2e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8013f30:	4293      	cmp	r3, r2
 8013f32:	bf28      	it	cs
 8013f34:	4613      	movcs	r3, r2
 8013f36:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8013f38:	687b      	ldr	r3, [r7, #4]
 8013f3a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8013f3e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8013f40:	4413      	add	r3, r2
 8013f42:	b29a      	uxth	r2, r3
 8013f44:	687b      	ldr	r3, [r7, #4]
 8013f46:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8013f4a:	429a      	cmp	r2, r3
 8013f4c:	d309      	bcc.n	8013f62 <tcp_receive+0x2c6>
 8013f4e:	687b      	ldr	r3, [r7, #4]
 8013f50:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8013f54:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8013f56:	4413      	add	r3, r2
 8013f58:	b29a      	uxth	r2, r3
 8013f5a:	687b      	ldr	r3, [r7, #4]
 8013f5c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8013f60:	e04e      	b.n	8014000 <tcp_receive+0x364>
 8013f62:	687b      	ldr	r3, [r7, #4]
 8013f64:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013f68:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8013f6c:	e048      	b.n	8014000 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8013f6e:	687b      	ldr	r3, [r7, #4]
 8013f70:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8013f74:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8013f76:	4413      	add	r3, r2
 8013f78:	b29a      	uxth	r2, r3
 8013f7a:	687b      	ldr	r3, [r7, #4]
 8013f7c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8013f80:	429a      	cmp	r2, r3
 8013f82:	d309      	bcc.n	8013f98 <tcp_receive+0x2fc>
 8013f84:	687b      	ldr	r3, [r7, #4]
 8013f86:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8013f8a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8013f8c:	4413      	add	r3, r2
 8013f8e:	b29a      	uxth	r2, r3
 8013f90:	687b      	ldr	r3, [r7, #4]
 8013f92:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8013f96:	e004      	b.n	8013fa2 <tcp_receive+0x306>
 8013f98:	687b      	ldr	r3, [r7, #4]
 8013f9a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013f9e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8013fa2:	687b      	ldr	r3, [r7, #4]
 8013fa4:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8013fa8:	687b      	ldr	r3, [r7, #4]
 8013faa:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8013fae:	429a      	cmp	r2, r3
 8013fb0:	d326      	bcc.n	8014000 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8013fb2:	687b      	ldr	r3, [r7, #4]
 8013fb4:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8013fb8:	687b      	ldr	r3, [r7, #4]
 8013fba:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8013fbe:	1ad3      	subs	r3, r2, r3
 8013fc0:	b29a      	uxth	r2, r3
 8013fc2:	687b      	ldr	r3, [r7, #4]
 8013fc4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8013fc8:	687b      	ldr	r3, [r7, #4]
 8013fca:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8013fce:	687b      	ldr	r3, [r7, #4]
 8013fd0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013fd2:	4413      	add	r3, r2
 8013fd4:	b29a      	uxth	r2, r3
 8013fd6:	687b      	ldr	r3, [r7, #4]
 8013fd8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8013fdc:	429a      	cmp	r2, r3
 8013fde:	d30a      	bcc.n	8013ff6 <tcp_receive+0x35a>
 8013fe0:	687b      	ldr	r3, [r7, #4]
 8013fe2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8013fe6:	687b      	ldr	r3, [r7, #4]
 8013fe8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013fea:	4413      	add	r3, r2
 8013fec:	b29a      	uxth	r2, r3
 8013fee:	687b      	ldr	r3, [r7, #4]
 8013ff0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8013ff4:	e004      	b.n	8014000 <tcp_receive+0x364>
 8013ff6:	687b      	ldr	r3, [r7, #4]
 8013ff8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013ffc:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8014000:	687b      	ldr	r3, [r7, #4]
 8014002:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8014004:	687b      	ldr	r3, [r7, #4]
 8014006:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014008:	4a98      	ldr	r2, [pc, #608]	; (801426c <tcp_receive+0x5d0>)
 801400a:	6878      	ldr	r0, [r7, #4]
 801400c:	f7ff fdca 	bl	8013ba4 <tcp_free_acked_segments>
 8014010:	4602      	mov	r2, r0
 8014012:	687b      	ldr	r3, [r7, #4]
 8014014:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8014016:	687b      	ldr	r3, [r7, #4]
 8014018:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 801401a:	687b      	ldr	r3, [r7, #4]
 801401c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801401e:	4a94      	ldr	r2, [pc, #592]	; (8014270 <tcp_receive+0x5d4>)
 8014020:	6878      	ldr	r0, [r7, #4]
 8014022:	f7ff fdbf 	bl	8013ba4 <tcp_free_acked_segments>
 8014026:	4602      	mov	r2, r0
 8014028:	687b      	ldr	r3, [r7, #4]
 801402a:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 801402c:	687b      	ldr	r3, [r7, #4]
 801402e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014030:	2b00      	cmp	r3, #0
 8014032:	d104      	bne.n	801403e <tcp_receive+0x3a2>
        pcb->rtime = -1;
 8014034:	687b      	ldr	r3, [r7, #4]
 8014036:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801403a:	861a      	strh	r2, [r3, #48]	; 0x30
 801403c:	e002      	b.n	8014044 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 801403e:	687b      	ldr	r3, [r7, #4]
 8014040:	2200      	movs	r2, #0
 8014042:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8014044:	687b      	ldr	r3, [r7, #4]
 8014046:	2200      	movs	r2, #0
 8014048:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 801404a:	687b      	ldr	r3, [r7, #4]
 801404c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801404e:	2b00      	cmp	r3, #0
 8014050:	d103      	bne.n	801405a <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 8014052:	687b      	ldr	r3, [r7, #4]
 8014054:	2200      	movs	r2, #0
 8014056:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 801405a:	687b      	ldr	r3, [r7, #4]
 801405c:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8014060:	4b84      	ldr	r3, [pc, #528]	; (8014274 <tcp_receive+0x5d8>)
 8014062:	881b      	ldrh	r3, [r3, #0]
 8014064:	4413      	add	r3, r2
 8014066:	b29a      	uxth	r2, r3
 8014068:	687b      	ldr	r3, [r7, #4]
 801406a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 801406e:	687b      	ldr	r3, [r7, #4]
 8014070:	8b5b      	ldrh	r3, [r3, #26]
 8014072:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8014076:	2b00      	cmp	r3, #0
 8014078:	d035      	beq.n	80140e6 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 801407a:	687b      	ldr	r3, [r7, #4]
 801407c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801407e:	2b00      	cmp	r3, #0
 8014080:	d118      	bne.n	80140b4 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 8014082:	687b      	ldr	r3, [r7, #4]
 8014084:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014086:	2b00      	cmp	r3, #0
 8014088:	d00c      	beq.n	80140a4 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 801408a:	687b      	ldr	r3, [r7, #4]
 801408c:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 801408e:	687b      	ldr	r3, [r7, #4]
 8014090:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014092:	68db      	ldr	r3, [r3, #12]
 8014094:	685b      	ldr	r3, [r3, #4]
 8014096:	4618      	mov	r0, r3
 8014098:	f7fb f94d 	bl	800f336 <lwip_htonl>
 801409c:	4603      	mov	r3, r0
 801409e:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 80140a0:	2b00      	cmp	r3, #0
 80140a2:	dc20      	bgt.n	80140e6 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 80140a4:	687b      	ldr	r3, [r7, #4]
 80140a6:	8b5b      	ldrh	r3, [r3, #26]
 80140a8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80140ac:	b29a      	uxth	r2, r3
 80140ae:	687b      	ldr	r3, [r7, #4]
 80140b0:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80140b2:	e018      	b.n	80140e6 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 80140b4:	687b      	ldr	r3, [r7, #4]
 80140b6:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 80140b8:	687b      	ldr	r3, [r7, #4]
 80140ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80140bc:	68db      	ldr	r3, [r3, #12]
 80140be:	685b      	ldr	r3, [r3, #4]
 80140c0:	4618      	mov	r0, r3
 80140c2:	f7fb f938 	bl	800f336 <lwip_htonl>
 80140c6:	4603      	mov	r3, r0
 80140c8:	1ae3      	subs	r3, r4, r3
 80140ca:	2b00      	cmp	r3, #0
 80140cc:	dc0b      	bgt.n	80140e6 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 80140ce:	687b      	ldr	r3, [r7, #4]
 80140d0:	8b5b      	ldrh	r3, [r3, #26]
 80140d2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80140d6:	b29a      	uxth	r2, r3
 80140d8:	687b      	ldr	r3, [r7, #4]
 80140da:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80140dc:	e003      	b.n	80140e6 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 80140de:	6878      	ldr	r0, [r7, #4]
 80140e0:	f001 ff76 	bl	8015fd0 <tcp_send_empty_ack>
 80140e4:	e000      	b.n	80140e8 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80140e6:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 80140e8:	687b      	ldr	r3, [r7, #4]
 80140ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80140ec:	2b00      	cmp	r3, #0
 80140ee:	d05b      	beq.n	80141a8 <tcp_receive+0x50c>
 80140f0:	687b      	ldr	r3, [r7, #4]
 80140f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80140f4:	4b60      	ldr	r3, [pc, #384]	; (8014278 <tcp_receive+0x5dc>)
 80140f6:	681b      	ldr	r3, [r3, #0]
 80140f8:	1ad3      	subs	r3, r2, r3
 80140fa:	2b00      	cmp	r3, #0
 80140fc:	da54      	bge.n	80141a8 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 80140fe:	4b5f      	ldr	r3, [pc, #380]	; (801427c <tcp_receive+0x5e0>)
 8014100:	681b      	ldr	r3, [r3, #0]
 8014102:	b29a      	uxth	r2, r3
 8014104:	687b      	ldr	r3, [r7, #4]
 8014106:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014108:	b29b      	uxth	r3, r3
 801410a:	1ad3      	subs	r3, r2, r3
 801410c:	b29b      	uxth	r3, r3
 801410e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8014112:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8014116:	687b      	ldr	r3, [r7, #4]
 8014118:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801411c:	10db      	asrs	r3, r3, #3
 801411e:	b21b      	sxth	r3, r3
 8014120:	b29b      	uxth	r3, r3
 8014122:	1ad3      	subs	r3, r2, r3
 8014124:	b29b      	uxth	r3, r3
 8014126:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 801412a:	687b      	ldr	r3, [r7, #4]
 801412c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8014130:	b29a      	uxth	r2, r3
 8014132:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8014136:	4413      	add	r3, r2
 8014138:	b29b      	uxth	r3, r3
 801413a:	b21a      	sxth	r2, r3
 801413c:	687b      	ldr	r3, [r7, #4]
 801413e:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8014140:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8014144:	2b00      	cmp	r3, #0
 8014146:	da05      	bge.n	8014154 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8014148:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801414c:	425b      	negs	r3, r3
 801414e:	b29b      	uxth	r3, r3
 8014150:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8014154:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8014158:	687b      	ldr	r3, [r7, #4]
 801415a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801415e:	109b      	asrs	r3, r3, #2
 8014160:	b21b      	sxth	r3, r3
 8014162:	b29b      	uxth	r3, r3
 8014164:	1ad3      	subs	r3, r2, r3
 8014166:	b29b      	uxth	r3, r3
 8014168:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 801416c:	687b      	ldr	r3, [r7, #4]
 801416e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8014172:	b29a      	uxth	r2, r3
 8014174:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8014178:	4413      	add	r3, r2
 801417a:	b29b      	uxth	r3, r3
 801417c:	b21a      	sxth	r2, r3
 801417e:	687b      	ldr	r3, [r7, #4]
 8014180:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8014182:	687b      	ldr	r3, [r7, #4]
 8014184:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8014188:	10db      	asrs	r3, r3, #3
 801418a:	b21b      	sxth	r3, r3
 801418c:	b29a      	uxth	r2, r3
 801418e:	687b      	ldr	r3, [r7, #4]
 8014190:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8014194:	b29b      	uxth	r3, r3
 8014196:	4413      	add	r3, r2
 8014198:	b29b      	uxth	r3, r3
 801419a:	b21a      	sxth	r2, r3
 801419c:	687b      	ldr	r3, [r7, #4]
 801419e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 80141a2:	687b      	ldr	r3, [r7, #4]
 80141a4:	2200      	movs	r2, #0
 80141a6:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 80141a8:	4b35      	ldr	r3, [pc, #212]	; (8014280 <tcp_receive+0x5e4>)
 80141aa:	881b      	ldrh	r3, [r3, #0]
 80141ac:	2b00      	cmp	r3, #0
 80141ae:	f000 84e2 	beq.w	8014b76 <tcp_receive+0xeda>
 80141b2:	687b      	ldr	r3, [r7, #4]
 80141b4:	7d1b      	ldrb	r3, [r3, #20]
 80141b6:	2b06      	cmp	r3, #6
 80141b8:	f200 84dd 	bhi.w	8014b76 <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80141bc:	687b      	ldr	r3, [r7, #4]
 80141be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80141c0:	4b30      	ldr	r3, [pc, #192]	; (8014284 <tcp_receive+0x5e8>)
 80141c2:	681b      	ldr	r3, [r3, #0]
 80141c4:	1ad3      	subs	r3, r2, r3
 80141c6:	3b01      	subs	r3, #1
 80141c8:	2b00      	cmp	r3, #0
 80141ca:	f2c0 808f 	blt.w	80142ec <tcp_receive+0x650>
 80141ce:	687b      	ldr	r3, [r7, #4]
 80141d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80141d2:	4b2b      	ldr	r3, [pc, #172]	; (8014280 <tcp_receive+0x5e4>)
 80141d4:	881b      	ldrh	r3, [r3, #0]
 80141d6:	4619      	mov	r1, r3
 80141d8:	4b2a      	ldr	r3, [pc, #168]	; (8014284 <tcp_receive+0x5e8>)
 80141da:	681b      	ldr	r3, [r3, #0]
 80141dc:	440b      	add	r3, r1
 80141de:	1ad3      	subs	r3, r2, r3
 80141e0:	3301      	adds	r3, #1
 80141e2:	2b00      	cmp	r3, #0
 80141e4:	f300 8082 	bgt.w	80142ec <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 80141e8:	4b27      	ldr	r3, [pc, #156]	; (8014288 <tcp_receive+0x5ec>)
 80141ea:	685b      	ldr	r3, [r3, #4]
 80141ec:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 80141ee:	687b      	ldr	r3, [r7, #4]
 80141f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80141f2:	4b24      	ldr	r3, [pc, #144]	; (8014284 <tcp_receive+0x5e8>)
 80141f4:	681b      	ldr	r3, [r3, #0]
 80141f6:	1ad3      	subs	r3, r2, r3
 80141f8:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 80141fa:	4b23      	ldr	r3, [pc, #140]	; (8014288 <tcp_receive+0x5ec>)
 80141fc:	685b      	ldr	r3, [r3, #4]
 80141fe:	2b00      	cmp	r3, #0
 8014200:	d106      	bne.n	8014210 <tcp_receive+0x574>
 8014202:	4b22      	ldr	r3, [pc, #136]	; (801428c <tcp_receive+0x5f0>)
 8014204:	f240 5294 	movw	r2, #1428	; 0x594
 8014208:	4921      	ldr	r1, [pc, #132]	; (8014290 <tcp_receive+0x5f4>)
 801420a:	4822      	ldr	r0, [pc, #136]	; (8014294 <tcp_receive+0x5f8>)
 801420c:	f005 fb38 	bl	8019880 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8014210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014212:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8014216:	4293      	cmp	r3, r2
 8014218:	d906      	bls.n	8014228 <tcp_receive+0x58c>
 801421a:	4b1c      	ldr	r3, [pc, #112]	; (801428c <tcp_receive+0x5f0>)
 801421c:	f240 5295 	movw	r2, #1429	; 0x595
 8014220:	491d      	ldr	r1, [pc, #116]	; (8014298 <tcp_receive+0x5fc>)
 8014222:	481c      	ldr	r0, [pc, #112]	; (8014294 <tcp_receive+0x5f8>)
 8014224:	f005 fb2c 	bl	8019880 <iprintf>
      off = (u16_t)off32;
 8014228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801422a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 801422e:	4b16      	ldr	r3, [pc, #88]	; (8014288 <tcp_receive+0x5ec>)
 8014230:	685b      	ldr	r3, [r3, #4]
 8014232:	891b      	ldrh	r3, [r3, #8]
 8014234:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8014238:	429a      	cmp	r2, r3
 801423a:	d906      	bls.n	801424a <tcp_receive+0x5ae>
 801423c:	4b13      	ldr	r3, [pc, #76]	; (801428c <tcp_receive+0x5f0>)
 801423e:	f240 5297 	movw	r2, #1431	; 0x597
 8014242:	4916      	ldr	r1, [pc, #88]	; (801429c <tcp_receive+0x600>)
 8014244:	4813      	ldr	r0, [pc, #76]	; (8014294 <tcp_receive+0x5f8>)
 8014246:	f005 fb1b 	bl	8019880 <iprintf>
      inseg.len -= off;
 801424a:	4b0f      	ldr	r3, [pc, #60]	; (8014288 <tcp_receive+0x5ec>)
 801424c:	891a      	ldrh	r2, [r3, #8]
 801424e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8014252:	1ad3      	subs	r3, r2, r3
 8014254:	b29a      	uxth	r2, r3
 8014256:	4b0c      	ldr	r3, [pc, #48]	; (8014288 <tcp_receive+0x5ec>)
 8014258:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 801425a:	4b0b      	ldr	r3, [pc, #44]	; (8014288 <tcp_receive+0x5ec>)
 801425c:	685b      	ldr	r3, [r3, #4]
 801425e:	891a      	ldrh	r2, [r3, #8]
 8014260:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8014264:	1ad3      	subs	r3, r2, r3
 8014266:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8014268:	e02a      	b.n	80142c0 <tcp_receive+0x624>
 801426a:	bf00      	nop
 801426c:	0801d6cc 	.word	0x0801d6cc
 8014270:	0801d6d4 	.word	0x0801d6d4
 8014274:	200070cc 	.word	0x200070cc
 8014278:	200070c8 	.word	0x200070c8
 801427c:	2000708c 	.word	0x2000708c
 8014280:	200070ce 	.word	0x200070ce
 8014284:	200070c4 	.word	0x200070c4
 8014288:	200070a4 	.word	0x200070a4
 801428c:	0801d364 	.word	0x0801d364
 8014290:	0801d6dc 	.word	0x0801d6dc
 8014294:	0801d3b0 	.word	0x0801d3b0
 8014298:	0801d6ec 	.word	0x0801d6ec
 801429c:	0801d6fc 	.word	0x0801d6fc
        off -= p->len;
 80142a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80142a2:	895b      	ldrh	r3, [r3, #10]
 80142a4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80142a8:	1ad3      	subs	r3, r2, r3
 80142aa:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 80142ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80142b0:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80142b2:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 80142b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80142b6:	2200      	movs	r2, #0
 80142b8:	815a      	strh	r2, [r3, #10]
        p = p->next;
 80142ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80142bc:	681b      	ldr	r3, [r3, #0]
 80142be:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 80142c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80142c2:	895b      	ldrh	r3, [r3, #10]
 80142c4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80142c8:	429a      	cmp	r2, r3
 80142ca:	d8e9      	bhi.n	80142a0 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 80142cc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80142d0:	4619      	mov	r1, r3
 80142d2:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80142d4:	f7fc fb78 	bl	80109c8 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 80142d8:	687b      	ldr	r3, [r7, #4]
 80142da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80142dc:	4a91      	ldr	r2, [pc, #580]	; (8014524 <tcp_receive+0x888>)
 80142de:	6013      	str	r3, [r2, #0]
 80142e0:	4b91      	ldr	r3, [pc, #580]	; (8014528 <tcp_receive+0x88c>)
 80142e2:	68db      	ldr	r3, [r3, #12]
 80142e4:	4a8f      	ldr	r2, [pc, #572]	; (8014524 <tcp_receive+0x888>)
 80142e6:	6812      	ldr	r2, [r2, #0]
 80142e8:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80142ea:	e00d      	b.n	8014308 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 80142ec:	4b8d      	ldr	r3, [pc, #564]	; (8014524 <tcp_receive+0x888>)
 80142ee:	681a      	ldr	r2, [r3, #0]
 80142f0:	687b      	ldr	r3, [r7, #4]
 80142f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80142f4:	1ad3      	subs	r3, r2, r3
 80142f6:	2b00      	cmp	r3, #0
 80142f8:	da06      	bge.n	8014308 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 80142fa:	687b      	ldr	r3, [r7, #4]
 80142fc:	8b5b      	ldrh	r3, [r3, #26]
 80142fe:	f043 0302 	orr.w	r3, r3, #2
 8014302:	b29a      	uxth	r2, r3
 8014304:	687b      	ldr	r3, [r7, #4]
 8014306:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8014308:	4b86      	ldr	r3, [pc, #536]	; (8014524 <tcp_receive+0x888>)
 801430a:	681a      	ldr	r2, [r3, #0]
 801430c:	687b      	ldr	r3, [r7, #4]
 801430e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014310:	1ad3      	subs	r3, r2, r3
 8014312:	2b00      	cmp	r3, #0
 8014314:	f2c0 842a 	blt.w	8014b6c <tcp_receive+0xed0>
 8014318:	4b82      	ldr	r3, [pc, #520]	; (8014524 <tcp_receive+0x888>)
 801431a:	681a      	ldr	r2, [r3, #0]
 801431c:	687b      	ldr	r3, [r7, #4]
 801431e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014320:	6879      	ldr	r1, [r7, #4]
 8014322:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8014324:	440b      	add	r3, r1
 8014326:	1ad3      	subs	r3, r2, r3
 8014328:	3301      	adds	r3, #1
 801432a:	2b00      	cmp	r3, #0
 801432c:	f300 841e 	bgt.w	8014b6c <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8014330:	687b      	ldr	r3, [r7, #4]
 8014332:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014334:	4b7b      	ldr	r3, [pc, #492]	; (8014524 <tcp_receive+0x888>)
 8014336:	681b      	ldr	r3, [r3, #0]
 8014338:	429a      	cmp	r2, r3
 801433a:	f040 829a 	bne.w	8014872 <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 801433e:	4b7a      	ldr	r3, [pc, #488]	; (8014528 <tcp_receive+0x88c>)
 8014340:	891c      	ldrh	r4, [r3, #8]
 8014342:	4b79      	ldr	r3, [pc, #484]	; (8014528 <tcp_receive+0x88c>)
 8014344:	68db      	ldr	r3, [r3, #12]
 8014346:	899b      	ldrh	r3, [r3, #12]
 8014348:	b29b      	uxth	r3, r3
 801434a:	4618      	mov	r0, r3
 801434c:	f7fa ffde 	bl	800f30c <lwip_htons>
 8014350:	4603      	mov	r3, r0
 8014352:	b2db      	uxtb	r3, r3
 8014354:	f003 0303 	and.w	r3, r3, #3
 8014358:	2b00      	cmp	r3, #0
 801435a:	d001      	beq.n	8014360 <tcp_receive+0x6c4>
 801435c:	2301      	movs	r3, #1
 801435e:	e000      	b.n	8014362 <tcp_receive+0x6c6>
 8014360:	2300      	movs	r3, #0
 8014362:	4423      	add	r3, r4
 8014364:	b29a      	uxth	r2, r3
 8014366:	4b71      	ldr	r3, [pc, #452]	; (801452c <tcp_receive+0x890>)
 8014368:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 801436a:	687b      	ldr	r3, [r7, #4]
 801436c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801436e:	4b6f      	ldr	r3, [pc, #444]	; (801452c <tcp_receive+0x890>)
 8014370:	881b      	ldrh	r3, [r3, #0]
 8014372:	429a      	cmp	r2, r3
 8014374:	d275      	bcs.n	8014462 <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8014376:	4b6c      	ldr	r3, [pc, #432]	; (8014528 <tcp_receive+0x88c>)
 8014378:	68db      	ldr	r3, [r3, #12]
 801437a:	899b      	ldrh	r3, [r3, #12]
 801437c:	b29b      	uxth	r3, r3
 801437e:	4618      	mov	r0, r3
 8014380:	f7fa ffc4 	bl	800f30c <lwip_htons>
 8014384:	4603      	mov	r3, r0
 8014386:	b2db      	uxtb	r3, r3
 8014388:	f003 0301 	and.w	r3, r3, #1
 801438c:	2b00      	cmp	r3, #0
 801438e:	d01f      	beq.n	80143d0 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8014390:	4b65      	ldr	r3, [pc, #404]	; (8014528 <tcp_receive+0x88c>)
 8014392:	68db      	ldr	r3, [r3, #12]
 8014394:	899b      	ldrh	r3, [r3, #12]
 8014396:	b29b      	uxth	r3, r3
 8014398:	b21b      	sxth	r3, r3
 801439a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801439e:	b21c      	sxth	r4, r3
 80143a0:	4b61      	ldr	r3, [pc, #388]	; (8014528 <tcp_receive+0x88c>)
 80143a2:	68db      	ldr	r3, [r3, #12]
 80143a4:	899b      	ldrh	r3, [r3, #12]
 80143a6:	b29b      	uxth	r3, r3
 80143a8:	4618      	mov	r0, r3
 80143aa:	f7fa ffaf 	bl	800f30c <lwip_htons>
 80143ae:	4603      	mov	r3, r0
 80143b0:	b2db      	uxtb	r3, r3
 80143b2:	b29b      	uxth	r3, r3
 80143b4:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80143b8:	b29b      	uxth	r3, r3
 80143ba:	4618      	mov	r0, r3
 80143bc:	f7fa ffa6 	bl	800f30c <lwip_htons>
 80143c0:	4603      	mov	r3, r0
 80143c2:	b21b      	sxth	r3, r3
 80143c4:	4323      	orrs	r3, r4
 80143c6:	b21a      	sxth	r2, r3
 80143c8:	4b57      	ldr	r3, [pc, #348]	; (8014528 <tcp_receive+0x88c>)
 80143ca:	68db      	ldr	r3, [r3, #12]
 80143cc:	b292      	uxth	r2, r2
 80143ce:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 80143d0:	687b      	ldr	r3, [r7, #4]
 80143d2:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80143d4:	4b54      	ldr	r3, [pc, #336]	; (8014528 <tcp_receive+0x88c>)
 80143d6:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80143d8:	4b53      	ldr	r3, [pc, #332]	; (8014528 <tcp_receive+0x88c>)
 80143da:	68db      	ldr	r3, [r3, #12]
 80143dc:	899b      	ldrh	r3, [r3, #12]
 80143de:	b29b      	uxth	r3, r3
 80143e0:	4618      	mov	r0, r3
 80143e2:	f7fa ff93 	bl	800f30c <lwip_htons>
 80143e6:	4603      	mov	r3, r0
 80143e8:	b2db      	uxtb	r3, r3
 80143ea:	f003 0302 	and.w	r3, r3, #2
 80143ee:	2b00      	cmp	r3, #0
 80143f0:	d005      	beq.n	80143fe <tcp_receive+0x762>
            inseg.len -= 1;
 80143f2:	4b4d      	ldr	r3, [pc, #308]	; (8014528 <tcp_receive+0x88c>)
 80143f4:	891b      	ldrh	r3, [r3, #8]
 80143f6:	3b01      	subs	r3, #1
 80143f8:	b29a      	uxth	r2, r3
 80143fa:	4b4b      	ldr	r3, [pc, #300]	; (8014528 <tcp_receive+0x88c>)
 80143fc:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 80143fe:	4b4a      	ldr	r3, [pc, #296]	; (8014528 <tcp_receive+0x88c>)
 8014400:	685b      	ldr	r3, [r3, #4]
 8014402:	4a49      	ldr	r2, [pc, #292]	; (8014528 <tcp_receive+0x88c>)
 8014404:	8912      	ldrh	r2, [r2, #8]
 8014406:	4611      	mov	r1, r2
 8014408:	4618      	mov	r0, r3
 801440a:	f7fc f9df 	bl	80107cc <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 801440e:	4b46      	ldr	r3, [pc, #280]	; (8014528 <tcp_receive+0x88c>)
 8014410:	891c      	ldrh	r4, [r3, #8]
 8014412:	4b45      	ldr	r3, [pc, #276]	; (8014528 <tcp_receive+0x88c>)
 8014414:	68db      	ldr	r3, [r3, #12]
 8014416:	899b      	ldrh	r3, [r3, #12]
 8014418:	b29b      	uxth	r3, r3
 801441a:	4618      	mov	r0, r3
 801441c:	f7fa ff76 	bl	800f30c <lwip_htons>
 8014420:	4603      	mov	r3, r0
 8014422:	b2db      	uxtb	r3, r3
 8014424:	f003 0303 	and.w	r3, r3, #3
 8014428:	2b00      	cmp	r3, #0
 801442a:	d001      	beq.n	8014430 <tcp_receive+0x794>
 801442c:	2301      	movs	r3, #1
 801442e:	e000      	b.n	8014432 <tcp_receive+0x796>
 8014430:	2300      	movs	r3, #0
 8014432:	4423      	add	r3, r4
 8014434:	b29a      	uxth	r2, r3
 8014436:	4b3d      	ldr	r3, [pc, #244]	; (801452c <tcp_receive+0x890>)
 8014438:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801443a:	4b3c      	ldr	r3, [pc, #240]	; (801452c <tcp_receive+0x890>)
 801443c:	881b      	ldrh	r3, [r3, #0]
 801443e:	461a      	mov	r2, r3
 8014440:	4b38      	ldr	r3, [pc, #224]	; (8014524 <tcp_receive+0x888>)
 8014442:	681b      	ldr	r3, [r3, #0]
 8014444:	441a      	add	r2, r3
 8014446:	687b      	ldr	r3, [r7, #4]
 8014448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801444a:	6879      	ldr	r1, [r7, #4]
 801444c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801444e:	440b      	add	r3, r1
 8014450:	429a      	cmp	r2, r3
 8014452:	d006      	beq.n	8014462 <tcp_receive+0x7c6>
 8014454:	4b36      	ldr	r3, [pc, #216]	; (8014530 <tcp_receive+0x894>)
 8014456:	f240 52cb 	movw	r2, #1483	; 0x5cb
 801445a:	4936      	ldr	r1, [pc, #216]	; (8014534 <tcp_receive+0x898>)
 801445c:	4836      	ldr	r0, [pc, #216]	; (8014538 <tcp_receive+0x89c>)
 801445e:	f005 fa0f 	bl	8019880 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8014462:	687b      	ldr	r3, [r7, #4]
 8014464:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014466:	2b00      	cmp	r3, #0
 8014468:	f000 80e7 	beq.w	801463a <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801446c:	4b2e      	ldr	r3, [pc, #184]	; (8014528 <tcp_receive+0x88c>)
 801446e:	68db      	ldr	r3, [r3, #12]
 8014470:	899b      	ldrh	r3, [r3, #12]
 8014472:	b29b      	uxth	r3, r3
 8014474:	4618      	mov	r0, r3
 8014476:	f7fa ff49 	bl	800f30c <lwip_htons>
 801447a:	4603      	mov	r3, r0
 801447c:	b2db      	uxtb	r3, r3
 801447e:	f003 0301 	and.w	r3, r3, #1
 8014482:	2b00      	cmp	r3, #0
 8014484:	d010      	beq.n	80144a8 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8014486:	e00a      	b.n	801449e <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8014488:	687b      	ldr	r3, [r7, #4]
 801448a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801448c:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 801448e:	687b      	ldr	r3, [r7, #4]
 8014490:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014492:	681a      	ldr	r2, [r3, #0]
 8014494:	687b      	ldr	r3, [r7, #4]
 8014496:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8014498:	68f8      	ldr	r0, [r7, #12]
 801449a:	f7fd fd92 	bl	8011fc2 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 801449e:	687b      	ldr	r3, [r7, #4]
 80144a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80144a2:	2b00      	cmp	r3, #0
 80144a4:	d1f0      	bne.n	8014488 <tcp_receive+0x7ec>
 80144a6:	e0c8      	b.n	801463a <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 80144a8:	687b      	ldr	r3, [r7, #4]
 80144aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80144ac:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 80144ae:	e052      	b.n	8014556 <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80144b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80144b2:	68db      	ldr	r3, [r3, #12]
 80144b4:	899b      	ldrh	r3, [r3, #12]
 80144b6:	b29b      	uxth	r3, r3
 80144b8:	4618      	mov	r0, r3
 80144ba:	f7fa ff27 	bl	800f30c <lwip_htons>
 80144be:	4603      	mov	r3, r0
 80144c0:	b2db      	uxtb	r3, r3
 80144c2:	f003 0301 	and.w	r3, r3, #1
 80144c6:	2b00      	cmp	r3, #0
 80144c8:	d03d      	beq.n	8014546 <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 80144ca:	4b17      	ldr	r3, [pc, #92]	; (8014528 <tcp_receive+0x88c>)
 80144cc:	68db      	ldr	r3, [r3, #12]
 80144ce:	899b      	ldrh	r3, [r3, #12]
 80144d0:	b29b      	uxth	r3, r3
 80144d2:	4618      	mov	r0, r3
 80144d4:	f7fa ff1a 	bl	800f30c <lwip_htons>
 80144d8:	4603      	mov	r3, r0
 80144da:	b2db      	uxtb	r3, r3
 80144dc:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80144e0:	2b00      	cmp	r3, #0
 80144e2:	d130      	bne.n	8014546 <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 80144e4:	4b10      	ldr	r3, [pc, #64]	; (8014528 <tcp_receive+0x88c>)
 80144e6:	68db      	ldr	r3, [r3, #12]
 80144e8:	899b      	ldrh	r3, [r3, #12]
 80144ea:	b29c      	uxth	r4, r3
 80144ec:	2001      	movs	r0, #1
 80144ee:	f7fa ff0d 	bl	800f30c <lwip_htons>
 80144f2:	4603      	mov	r3, r0
 80144f4:	461a      	mov	r2, r3
 80144f6:	4b0c      	ldr	r3, [pc, #48]	; (8014528 <tcp_receive+0x88c>)
 80144f8:	68db      	ldr	r3, [r3, #12]
 80144fa:	4322      	orrs	r2, r4
 80144fc:	b292      	uxth	r2, r2
 80144fe:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8014500:	4b09      	ldr	r3, [pc, #36]	; (8014528 <tcp_receive+0x88c>)
 8014502:	891c      	ldrh	r4, [r3, #8]
 8014504:	4b08      	ldr	r3, [pc, #32]	; (8014528 <tcp_receive+0x88c>)
 8014506:	68db      	ldr	r3, [r3, #12]
 8014508:	899b      	ldrh	r3, [r3, #12]
 801450a:	b29b      	uxth	r3, r3
 801450c:	4618      	mov	r0, r3
 801450e:	f7fa fefd 	bl	800f30c <lwip_htons>
 8014512:	4603      	mov	r3, r0
 8014514:	b2db      	uxtb	r3, r3
 8014516:	f003 0303 	and.w	r3, r3, #3
 801451a:	2b00      	cmp	r3, #0
 801451c:	d00e      	beq.n	801453c <tcp_receive+0x8a0>
 801451e:	2301      	movs	r3, #1
 8014520:	e00d      	b.n	801453e <tcp_receive+0x8a2>
 8014522:	bf00      	nop
 8014524:	200070c4 	.word	0x200070c4
 8014528:	200070a4 	.word	0x200070a4
 801452c:	200070ce 	.word	0x200070ce
 8014530:	0801d364 	.word	0x0801d364
 8014534:	0801d70c 	.word	0x0801d70c
 8014538:	0801d3b0 	.word	0x0801d3b0
 801453c:	2300      	movs	r3, #0
 801453e:	4423      	add	r3, r4
 8014540:	b29a      	uxth	r2, r3
 8014542:	4b98      	ldr	r3, [pc, #608]	; (80147a4 <tcp_receive+0xb08>)
 8014544:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8014546:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014548:	613b      	str	r3, [r7, #16]
              next = next->next;
 801454a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801454c:	681b      	ldr	r3, [r3, #0]
 801454e:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8014550:	6938      	ldr	r0, [r7, #16]
 8014552:	f7fd fd36 	bl	8011fc2 <tcp_seg_free>
            while (next &&
 8014556:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014558:	2b00      	cmp	r3, #0
 801455a:	d00e      	beq.n	801457a <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 801455c:	4b91      	ldr	r3, [pc, #580]	; (80147a4 <tcp_receive+0xb08>)
 801455e:	881b      	ldrh	r3, [r3, #0]
 8014560:	461a      	mov	r2, r3
 8014562:	4b91      	ldr	r3, [pc, #580]	; (80147a8 <tcp_receive+0xb0c>)
 8014564:	681b      	ldr	r3, [r3, #0]
 8014566:	441a      	add	r2, r3
 8014568:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801456a:	68db      	ldr	r3, [r3, #12]
 801456c:	685b      	ldr	r3, [r3, #4]
 801456e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8014570:	8909      	ldrh	r1, [r1, #8]
 8014572:	440b      	add	r3, r1
 8014574:	1ad3      	subs	r3, r2, r3
            while (next &&
 8014576:	2b00      	cmp	r3, #0
 8014578:	da9a      	bge.n	80144b0 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 801457a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801457c:	2b00      	cmp	r3, #0
 801457e:	d059      	beq.n	8014634 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 8014580:	4b88      	ldr	r3, [pc, #544]	; (80147a4 <tcp_receive+0xb08>)
 8014582:	881b      	ldrh	r3, [r3, #0]
 8014584:	461a      	mov	r2, r3
 8014586:	4b88      	ldr	r3, [pc, #544]	; (80147a8 <tcp_receive+0xb0c>)
 8014588:	681b      	ldr	r3, [r3, #0]
 801458a:	441a      	add	r2, r3
 801458c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801458e:	68db      	ldr	r3, [r3, #12]
 8014590:	685b      	ldr	r3, [r3, #4]
 8014592:	1ad3      	subs	r3, r2, r3
            if (next &&
 8014594:	2b00      	cmp	r3, #0
 8014596:	dd4d      	ble.n	8014634 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8014598:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801459a:	68db      	ldr	r3, [r3, #12]
 801459c:	685b      	ldr	r3, [r3, #4]
 801459e:	b29a      	uxth	r2, r3
 80145a0:	4b81      	ldr	r3, [pc, #516]	; (80147a8 <tcp_receive+0xb0c>)
 80145a2:	681b      	ldr	r3, [r3, #0]
 80145a4:	b29b      	uxth	r3, r3
 80145a6:	1ad3      	subs	r3, r2, r3
 80145a8:	b29a      	uxth	r2, r3
 80145aa:	4b80      	ldr	r3, [pc, #512]	; (80147ac <tcp_receive+0xb10>)
 80145ac:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80145ae:	4b7f      	ldr	r3, [pc, #508]	; (80147ac <tcp_receive+0xb10>)
 80145b0:	68db      	ldr	r3, [r3, #12]
 80145b2:	899b      	ldrh	r3, [r3, #12]
 80145b4:	b29b      	uxth	r3, r3
 80145b6:	4618      	mov	r0, r3
 80145b8:	f7fa fea8 	bl	800f30c <lwip_htons>
 80145bc:	4603      	mov	r3, r0
 80145be:	b2db      	uxtb	r3, r3
 80145c0:	f003 0302 	and.w	r3, r3, #2
 80145c4:	2b00      	cmp	r3, #0
 80145c6:	d005      	beq.n	80145d4 <tcp_receive+0x938>
                inseg.len -= 1;
 80145c8:	4b78      	ldr	r3, [pc, #480]	; (80147ac <tcp_receive+0xb10>)
 80145ca:	891b      	ldrh	r3, [r3, #8]
 80145cc:	3b01      	subs	r3, #1
 80145ce:	b29a      	uxth	r2, r3
 80145d0:	4b76      	ldr	r3, [pc, #472]	; (80147ac <tcp_receive+0xb10>)
 80145d2:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 80145d4:	4b75      	ldr	r3, [pc, #468]	; (80147ac <tcp_receive+0xb10>)
 80145d6:	685b      	ldr	r3, [r3, #4]
 80145d8:	4a74      	ldr	r2, [pc, #464]	; (80147ac <tcp_receive+0xb10>)
 80145da:	8912      	ldrh	r2, [r2, #8]
 80145dc:	4611      	mov	r1, r2
 80145de:	4618      	mov	r0, r3
 80145e0:	f7fc f8f4 	bl	80107cc <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 80145e4:	4b71      	ldr	r3, [pc, #452]	; (80147ac <tcp_receive+0xb10>)
 80145e6:	891c      	ldrh	r4, [r3, #8]
 80145e8:	4b70      	ldr	r3, [pc, #448]	; (80147ac <tcp_receive+0xb10>)
 80145ea:	68db      	ldr	r3, [r3, #12]
 80145ec:	899b      	ldrh	r3, [r3, #12]
 80145ee:	b29b      	uxth	r3, r3
 80145f0:	4618      	mov	r0, r3
 80145f2:	f7fa fe8b 	bl	800f30c <lwip_htons>
 80145f6:	4603      	mov	r3, r0
 80145f8:	b2db      	uxtb	r3, r3
 80145fa:	f003 0303 	and.w	r3, r3, #3
 80145fe:	2b00      	cmp	r3, #0
 8014600:	d001      	beq.n	8014606 <tcp_receive+0x96a>
 8014602:	2301      	movs	r3, #1
 8014604:	e000      	b.n	8014608 <tcp_receive+0x96c>
 8014606:	2300      	movs	r3, #0
 8014608:	4423      	add	r3, r4
 801460a:	b29a      	uxth	r2, r3
 801460c:	4b65      	ldr	r3, [pc, #404]	; (80147a4 <tcp_receive+0xb08>)
 801460e:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8014610:	4b64      	ldr	r3, [pc, #400]	; (80147a4 <tcp_receive+0xb08>)
 8014612:	881b      	ldrh	r3, [r3, #0]
 8014614:	461a      	mov	r2, r3
 8014616:	4b64      	ldr	r3, [pc, #400]	; (80147a8 <tcp_receive+0xb0c>)
 8014618:	681b      	ldr	r3, [r3, #0]
 801461a:	441a      	add	r2, r3
 801461c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801461e:	68db      	ldr	r3, [r3, #12]
 8014620:	685b      	ldr	r3, [r3, #4]
 8014622:	429a      	cmp	r2, r3
 8014624:	d006      	beq.n	8014634 <tcp_receive+0x998>
 8014626:	4b62      	ldr	r3, [pc, #392]	; (80147b0 <tcp_receive+0xb14>)
 8014628:	f240 52fc 	movw	r2, #1532	; 0x5fc
 801462c:	4961      	ldr	r1, [pc, #388]	; (80147b4 <tcp_receive+0xb18>)
 801462e:	4862      	ldr	r0, [pc, #392]	; (80147b8 <tcp_receive+0xb1c>)
 8014630:	f005 f926 	bl	8019880 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8014634:	687b      	ldr	r3, [r7, #4]
 8014636:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8014638:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 801463a:	4b5a      	ldr	r3, [pc, #360]	; (80147a4 <tcp_receive+0xb08>)
 801463c:	881b      	ldrh	r3, [r3, #0]
 801463e:	461a      	mov	r2, r3
 8014640:	4b59      	ldr	r3, [pc, #356]	; (80147a8 <tcp_receive+0xb0c>)
 8014642:	681b      	ldr	r3, [r3, #0]
 8014644:	441a      	add	r2, r3
 8014646:	687b      	ldr	r3, [r7, #4]
 8014648:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 801464a:	687b      	ldr	r3, [r7, #4]
 801464c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801464e:	4b55      	ldr	r3, [pc, #340]	; (80147a4 <tcp_receive+0xb08>)
 8014650:	881b      	ldrh	r3, [r3, #0]
 8014652:	429a      	cmp	r2, r3
 8014654:	d206      	bcs.n	8014664 <tcp_receive+0x9c8>
 8014656:	4b56      	ldr	r3, [pc, #344]	; (80147b0 <tcp_receive+0xb14>)
 8014658:	f240 6207 	movw	r2, #1543	; 0x607
 801465c:	4957      	ldr	r1, [pc, #348]	; (80147bc <tcp_receive+0xb20>)
 801465e:	4856      	ldr	r0, [pc, #344]	; (80147b8 <tcp_receive+0xb1c>)
 8014660:	f005 f90e 	bl	8019880 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8014664:	687b      	ldr	r3, [r7, #4]
 8014666:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8014668:	4b4e      	ldr	r3, [pc, #312]	; (80147a4 <tcp_receive+0xb08>)
 801466a:	881b      	ldrh	r3, [r3, #0]
 801466c:	1ad3      	subs	r3, r2, r3
 801466e:	b29a      	uxth	r2, r3
 8014670:	687b      	ldr	r3, [r7, #4]
 8014672:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8014674:	6878      	ldr	r0, [r7, #4]
 8014676:	f7fc ffc1 	bl	80115fc <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 801467a:	4b4c      	ldr	r3, [pc, #304]	; (80147ac <tcp_receive+0xb10>)
 801467c:	685b      	ldr	r3, [r3, #4]
 801467e:	891b      	ldrh	r3, [r3, #8]
 8014680:	2b00      	cmp	r3, #0
 8014682:	d006      	beq.n	8014692 <tcp_receive+0x9f6>
          recv_data = inseg.p;
 8014684:	4b49      	ldr	r3, [pc, #292]	; (80147ac <tcp_receive+0xb10>)
 8014686:	685b      	ldr	r3, [r3, #4]
 8014688:	4a4d      	ldr	r2, [pc, #308]	; (80147c0 <tcp_receive+0xb24>)
 801468a:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 801468c:	4b47      	ldr	r3, [pc, #284]	; (80147ac <tcp_receive+0xb10>)
 801468e:	2200      	movs	r2, #0
 8014690:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8014692:	4b46      	ldr	r3, [pc, #280]	; (80147ac <tcp_receive+0xb10>)
 8014694:	68db      	ldr	r3, [r3, #12]
 8014696:	899b      	ldrh	r3, [r3, #12]
 8014698:	b29b      	uxth	r3, r3
 801469a:	4618      	mov	r0, r3
 801469c:	f7fa fe36 	bl	800f30c <lwip_htons>
 80146a0:	4603      	mov	r3, r0
 80146a2:	b2db      	uxtb	r3, r3
 80146a4:	f003 0301 	and.w	r3, r3, #1
 80146a8:	2b00      	cmp	r3, #0
 80146aa:	f000 80b8 	beq.w	801481e <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 80146ae:	4b45      	ldr	r3, [pc, #276]	; (80147c4 <tcp_receive+0xb28>)
 80146b0:	781b      	ldrb	r3, [r3, #0]
 80146b2:	f043 0320 	orr.w	r3, r3, #32
 80146b6:	b2da      	uxtb	r2, r3
 80146b8:	4b42      	ldr	r3, [pc, #264]	; (80147c4 <tcp_receive+0xb28>)
 80146ba:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 80146bc:	e0af      	b.n	801481e <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 80146be:	687b      	ldr	r3, [r7, #4]
 80146c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80146c2:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 80146c4:	687b      	ldr	r3, [r7, #4]
 80146c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80146c8:	68db      	ldr	r3, [r3, #12]
 80146ca:	685b      	ldr	r3, [r3, #4]
 80146cc:	4a36      	ldr	r2, [pc, #216]	; (80147a8 <tcp_receive+0xb0c>)
 80146ce:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 80146d0:	68bb      	ldr	r3, [r7, #8]
 80146d2:	891b      	ldrh	r3, [r3, #8]
 80146d4:	461c      	mov	r4, r3
 80146d6:	68bb      	ldr	r3, [r7, #8]
 80146d8:	68db      	ldr	r3, [r3, #12]
 80146da:	899b      	ldrh	r3, [r3, #12]
 80146dc:	b29b      	uxth	r3, r3
 80146de:	4618      	mov	r0, r3
 80146e0:	f7fa fe14 	bl	800f30c <lwip_htons>
 80146e4:	4603      	mov	r3, r0
 80146e6:	b2db      	uxtb	r3, r3
 80146e8:	f003 0303 	and.w	r3, r3, #3
 80146ec:	2b00      	cmp	r3, #0
 80146ee:	d001      	beq.n	80146f4 <tcp_receive+0xa58>
 80146f0:	2301      	movs	r3, #1
 80146f2:	e000      	b.n	80146f6 <tcp_receive+0xa5a>
 80146f4:	2300      	movs	r3, #0
 80146f6:	191a      	adds	r2, r3, r4
 80146f8:	687b      	ldr	r3, [r7, #4]
 80146fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80146fc:	441a      	add	r2, r3
 80146fe:	687b      	ldr	r3, [r7, #4]
 8014700:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8014702:	687b      	ldr	r3, [r7, #4]
 8014704:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014706:	461c      	mov	r4, r3
 8014708:	68bb      	ldr	r3, [r7, #8]
 801470a:	891b      	ldrh	r3, [r3, #8]
 801470c:	461d      	mov	r5, r3
 801470e:	68bb      	ldr	r3, [r7, #8]
 8014710:	68db      	ldr	r3, [r3, #12]
 8014712:	899b      	ldrh	r3, [r3, #12]
 8014714:	b29b      	uxth	r3, r3
 8014716:	4618      	mov	r0, r3
 8014718:	f7fa fdf8 	bl	800f30c <lwip_htons>
 801471c:	4603      	mov	r3, r0
 801471e:	b2db      	uxtb	r3, r3
 8014720:	f003 0303 	and.w	r3, r3, #3
 8014724:	2b00      	cmp	r3, #0
 8014726:	d001      	beq.n	801472c <tcp_receive+0xa90>
 8014728:	2301      	movs	r3, #1
 801472a:	e000      	b.n	801472e <tcp_receive+0xa92>
 801472c:	2300      	movs	r3, #0
 801472e:	442b      	add	r3, r5
 8014730:	429c      	cmp	r4, r3
 8014732:	d206      	bcs.n	8014742 <tcp_receive+0xaa6>
 8014734:	4b1e      	ldr	r3, [pc, #120]	; (80147b0 <tcp_receive+0xb14>)
 8014736:	f240 622b 	movw	r2, #1579	; 0x62b
 801473a:	4923      	ldr	r1, [pc, #140]	; (80147c8 <tcp_receive+0xb2c>)
 801473c:	481e      	ldr	r0, [pc, #120]	; (80147b8 <tcp_receive+0xb1c>)
 801473e:	f005 f89f 	bl	8019880 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8014742:	68bb      	ldr	r3, [r7, #8]
 8014744:	891b      	ldrh	r3, [r3, #8]
 8014746:	461c      	mov	r4, r3
 8014748:	68bb      	ldr	r3, [r7, #8]
 801474a:	68db      	ldr	r3, [r3, #12]
 801474c:	899b      	ldrh	r3, [r3, #12]
 801474e:	b29b      	uxth	r3, r3
 8014750:	4618      	mov	r0, r3
 8014752:	f7fa fddb 	bl	800f30c <lwip_htons>
 8014756:	4603      	mov	r3, r0
 8014758:	b2db      	uxtb	r3, r3
 801475a:	f003 0303 	and.w	r3, r3, #3
 801475e:	2b00      	cmp	r3, #0
 8014760:	d001      	beq.n	8014766 <tcp_receive+0xaca>
 8014762:	2301      	movs	r3, #1
 8014764:	e000      	b.n	8014768 <tcp_receive+0xacc>
 8014766:	2300      	movs	r3, #0
 8014768:	1919      	adds	r1, r3, r4
 801476a:	687b      	ldr	r3, [r7, #4]
 801476c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801476e:	b28b      	uxth	r3, r1
 8014770:	1ad3      	subs	r3, r2, r3
 8014772:	b29a      	uxth	r2, r3
 8014774:	687b      	ldr	r3, [r7, #4]
 8014776:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8014778:	6878      	ldr	r0, [r7, #4]
 801477a:	f7fc ff3f 	bl	80115fc <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 801477e:	68bb      	ldr	r3, [r7, #8]
 8014780:	685b      	ldr	r3, [r3, #4]
 8014782:	891b      	ldrh	r3, [r3, #8]
 8014784:	2b00      	cmp	r3, #0
 8014786:	d028      	beq.n	80147da <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8014788:	4b0d      	ldr	r3, [pc, #52]	; (80147c0 <tcp_receive+0xb24>)
 801478a:	681b      	ldr	r3, [r3, #0]
 801478c:	2b00      	cmp	r3, #0
 801478e:	d01d      	beq.n	80147cc <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 8014790:	4b0b      	ldr	r3, [pc, #44]	; (80147c0 <tcp_receive+0xb24>)
 8014792:	681a      	ldr	r2, [r3, #0]
 8014794:	68bb      	ldr	r3, [r7, #8]
 8014796:	685b      	ldr	r3, [r3, #4]
 8014798:	4619      	mov	r1, r3
 801479a:	4610      	mov	r0, r2
 801479c:	f7fc fa5c 	bl	8010c58 <pbuf_cat>
 80147a0:	e018      	b.n	80147d4 <tcp_receive+0xb38>
 80147a2:	bf00      	nop
 80147a4:	200070ce 	.word	0x200070ce
 80147a8:	200070c4 	.word	0x200070c4
 80147ac:	200070a4 	.word	0x200070a4
 80147b0:	0801d364 	.word	0x0801d364
 80147b4:	0801d744 	.word	0x0801d744
 80147b8:	0801d3b0 	.word	0x0801d3b0
 80147bc:	0801d780 	.word	0x0801d780
 80147c0:	200070d4 	.word	0x200070d4
 80147c4:	200070d1 	.word	0x200070d1
 80147c8:	0801d7a0 	.word	0x0801d7a0
            } else {
              recv_data = cseg->p;
 80147cc:	68bb      	ldr	r3, [r7, #8]
 80147ce:	685b      	ldr	r3, [r3, #4]
 80147d0:	4a70      	ldr	r2, [pc, #448]	; (8014994 <tcp_receive+0xcf8>)
 80147d2:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 80147d4:	68bb      	ldr	r3, [r7, #8]
 80147d6:	2200      	movs	r2, #0
 80147d8:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80147da:	68bb      	ldr	r3, [r7, #8]
 80147dc:	68db      	ldr	r3, [r3, #12]
 80147de:	899b      	ldrh	r3, [r3, #12]
 80147e0:	b29b      	uxth	r3, r3
 80147e2:	4618      	mov	r0, r3
 80147e4:	f7fa fd92 	bl	800f30c <lwip_htons>
 80147e8:	4603      	mov	r3, r0
 80147ea:	b2db      	uxtb	r3, r3
 80147ec:	f003 0301 	and.w	r3, r3, #1
 80147f0:	2b00      	cmp	r3, #0
 80147f2:	d00d      	beq.n	8014810 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 80147f4:	4b68      	ldr	r3, [pc, #416]	; (8014998 <tcp_receive+0xcfc>)
 80147f6:	781b      	ldrb	r3, [r3, #0]
 80147f8:	f043 0320 	orr.w	r3, r3, #32
 80147fc:	b2da      	uxtb	r2, r3
 80147fe:	4b66      	ldr	r3, [pc, #408]	; (8014998 <tcp_receive+0xcfc>)
 8014800:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8014802:	687b      	ldr	r3, [r7, #4]
 8014804:	7d1b      	ldrb	r3, [r3, #20]
 8014806:	2b04      	cmp	r3, #4
 8014808:	d102      	bne.n	8014810 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 801480a:	687b      	ldr	r3, [r7, #4]
 801480c:	2207      	movs	r2, #7
 801480e:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8014810:	68bb      	ldr	r3, [r7, #8]
 8014812:	681a      	ldr	r2, [r3, #0]
 8014814:	687b      	ldr	r3, [r7, #4]
 8014816:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8014818:	68b8      	ldr	r0, [r7, #8]
 801481a:	f7fd fbd2 	bl	8011fc2 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 801481e:	687b      	ldr	r3, [r7, #4]
 8014820:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014822:	2b00      	cmp	r3, #0
 8014824:	d008      	beq.n	8014838 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8014826:	687b      	ldr	r3, [r7, #4]
 8014828:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801482a:	68db      	ldr	r3, [r3, #12]
 801482c:	685a      	ldr	r2, [r3, #4]
 801482e:	687b      	ldr	r3, [r7, #4]
 8014830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8014832:	429a      	cmp	r2, r3
 8014834:	f43f af43 	beq.w	80146be <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8014838:	687b      	ldr	r3, [r7, #4]
 801483a:	8b5b      	ldrh	r3, [r3, #26]
 801483c:	f003 0301 	and.w	r3, r3, #1
 8014840:	2b00      	cmp	r3, #0
 8014842:	d00e      	beq.n	8014862 <tcp_receive+0xbc6>
 8014844:	687b      	ldr	r3, [r7, #4]
 8014846:	8b5b      	ldrh	r3, [r3, #26]
 8014848:	f023 0301 	bic.w	r3, r3, #1
 801484c:	b29a      	uxth	r2, r3
 801484e:	687b      	ldr	r3, [r7, #4]
 8014850:	835a      	strh	r2, [r3, #26]
 8014852:	687b      	ldr	r3, [r7, #4]
 8014854:	8b5b      	ldrh	r3, [r3, #26]
 8014856:	f043 0302 	orr.w	r3, r3, #2
 801485a:	b29a      	uxth	r2, r3
 801485c:	687b      	ldr	r3, [r7, #4]
 801485e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8014860:	e188      	b.n	8014b74 <tcp_receive+0xed8>
        tcp_ack(pcb);
 8014862:	687b      	ldr	r3, [r7, #4]
 8014864:	8b5b      	ldrh	r3, [r3, #26]
 8014866:	f043 0301 	orr.w	r3, r3, #1
 801486a:	b29a      	uxth	r2, r3
 801486c:	687b      	ldr	r3, [r7, #4]
 801486e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8014870:	e180      	b.n	8014b74 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8014872:	687b      	ldr	r3, [r7, #4]
 8014874:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014876:	2b00      	cmp	r3, #0
 8014878:	d106      	bne.n	8014888 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 801487a:	4848      	ldr	r0, [pc, #288]	; (801499c <tcp_receive+0xd00>)
 801487c:	f7fd fbba 	bl	8011ff4 <tcp_seg_copy>
 8014880:	4602      	mov	r2, r0
 8014882:	687b      	ldr	r3, [r7, #4]
 8014884:	675a      	str	r2, [r3, #116]	; 0x74
 8014886:	e16d      	b.n	8014b64 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8014888:	2300      	movs	r3, #0
 801488a:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801488c:	687b      	ldr	r3, [r7, #4]
 801488e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014890:	63bb      	str	r3, [r7, #56]	; 0x38
 8014892:	e157      	b.n	8014b44 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 8014894:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014896:	68db      	ldr	r3, [r3, #12]
 8014898:	685a      	ldr	r2, [r3, #4]
 801489a:	4b41      	ldr	r3, [pc, #260]	; (80149a0 <tcp_receive+0xd04>)
 801489c:	681b      	ldr	r3, [r3, #0]
 801489e:	429a      	cmp	r2, r3
 80148a0:	d11d      	bne.n	80148de <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 80148a2:	4b3e      	ldr	r3, [pc, #248]	; (801499c <tcp_receive+0xd00>)
 80148a4:	891a      	ldrh	r2, [r3, #8]
 80148a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80148a8:	891b      	ldrh	r3, [r3, #8]
 80148aa:	429a      	cmp	r2, r3
 80148ac:	f240 814f 	bls.w	8014b4e <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80148b0:	483a      	ldr	r0, [pc, #232]	; (801499c <tcp_receive+0xd00>)
 80148b2:	f7fd fb9f 	bl	8011ff4 <tcp_seg_copy>
 80148b6:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 80148b8:	697b      	ldr	r3, [r7, #20]
 80148ba:	2b00      	cmp	r3, #0
 80148bc:	f000 8149 	beq.w	8014b52 <tcp_receive+0xeb6>
                  if (prev != NULL) {
 80148c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80148c2:	2b00      	cmp	r3, #0
 80148c4:	d003      	beq.n	80148ce <tcp_receive+0xc32>
                    prev->next = cseg;
 80148c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80148c8:	697a      	ldr	r2, [r7, #20]
 80148ca:	601a      	str	r2, [r3, #0]
 80148cc:	e002      	b.n	80148d4 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 80148ce:	687b      	ldr	r3, [r7, #4]
 80148d0:	697a      	ldr	r2, [r7, #20]
 80148d2:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 80148d4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80148d6:	6978      	ldr	r0, [r7, #20]
 80148d8:	f7ff f8dc 	bl	8013a94 <tcp_oos_insert_segment>
                }
                break;
 80148dc:	e139      	b.n	8014b52 <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 80148de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80148e0:	2b00      	cmp	r3, #0
 80148e2:	d117      	bne.n	8014914 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 80148e4:	4b2e      	ldr	r3, [pc, #184]	; (80149a0 <tcp_receive+0xd04>)
 80148e6:	681a      	ldr	r2, [r3, #0]
 80148e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80148ea:	68db      	ldr	r3, [r3, #12]
 80148ec:	685b      	ldr	r3, [r3, #4]
 80148ee:	1ad3      	subs	r3, r2, r3
 80148f0:	2b00      	cmp	r3, #0
 80148f2:	da57      	bge.n	80149a4 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80148f4:	4829      	ldr	r0, [pc, #164]	; (801499c <tcp_receive+0xd00>)
 80148f6:	f7fd fb7d 	bl	8011ff4 <tcp_seg_copy>
 80148fa:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 80148fc:	69bb      	ldr	r3, [r7, #24]
 80148fe:	2b00      	cmp	r3, #0
 8014900:	f000 8129 	beq.w	8014b56 <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 8014904:	687b      	ldr	r3, [r7, #4]
 8014906:	69ba      	ldr	r2, [r7, #24]
 8014908:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 801490a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801490c:	69b8      	ldr	r0, [r7, #24]
 801490e:	f7ff f8c1 	bl	8013a94 <tcp_oos_insert_segment>
                  }
                  break;
 8014912:	e120      	b.n	8014b56 <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8014914:	4b22      	ldr	r3, [pc, #136]	; (80149a0 <tcp_receive+0xd04>)
 8014916:	681a      	ldr	r2, [r3, #0]
 8014918:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801491a:	68db      	ldr	r3, [r3, #12]
 801491c:	685b      	ldr	r3, [r3, #4]
 801491e:	1ad3      	subs	r3, r2, r3
 8014920:	3b01      	subs	r3, #1
 8014922:	2b00      	cmp	r3, #0
 8014924:	db3e      	blt.n	80149a4 <tcp_receive+0xd08>
 8014926:	4b1e      	ldr	r3, [pc, #120]	; (80149a0 <tcp_receive+0xd04>)
 8014928:	681a      	ldr	r2, [r3, #0]
 801492a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801492c:	68db      	ldr	r3, [r3, #12]
 801492e:	685b      	ldr	r3, [r3, #4]
 8014930:	1ad3      	subs	r3, r2, r3
 8014932:	3301      	adds	r3, #1
 8014934:	2b00      	cmp	r3, #0
 8014936:	dc35      	bgt.n	80149a4 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8014938:	4818      	ldr	r0, [pc, #96]	; (801499c <tcp_receive+0xd00>)
 801493a:	f7fd fb5b 	bl	8011ff4 <tcp_seg_copy>
 801493e:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8014940:	69fb      	ldr	r3, [r7, #28]
 8014942:	2b00      	cmp	r3, #0
 8014944:	f000 8109 	beq.w	8014b5a <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8014948:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801494a:	68db      	ldr	r3, [r3, #12]
 801494c:	685b      	ldr	r3, [r3, #4]
 801494e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014950:	8912      	ldrh	r2, [r2, #8]
 8014952:	441a      	add	r2, r3
 8014954:	4b12      	ldr	r3, [pc, #72]	; (80149a0 <tcp_receive+0xd04>)
 8014956:	681b      	ldr	r3, [r3, #0]
 8014958:	1ad3      	subs	r3, r2, r3
 801495a:	2b00      	cmp	r3, #0
 801495c:	dd12      	ble.n	8014984 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 801495e:	4b10      	ldr	r3, [pc, #64]	; (80149a0 <tcp_receive+0xd04>)
 8014960:	681b      	ldr	r3, [r3, #0]
 8014962:	b29a      	uxth	r2, r3
 8014964:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014966:	68db      	ldr	r3, [r3, #12]
 8014968:	685b      	ldr	r3, [r3, #4]
 801496a:	b29b      	uxth	r3, r3
 801496c:	1ad3      	subs	r3, r2, r3
 801496e:	b29a      	uxth	r2, r3
 8014970:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014972:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8014974:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014976:	685a      	ldr	r2, [r3, #4]
 8014978:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801497a:	891b      	ldrh	r3, [r3, #8]
 801497c:	4619      	mov	r1, r3
 801497e:	4610      	mov	r0, r2
 8014980:	f7fb ff24 	bl	80107cc <pbuf_realloc>
                    }
                    prev->next = cseg;
 8014984:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014986:	69fa      	ldr	r2, [r7, #28]
 8014988:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 801498a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801498c:	69f8      	ldr	r0, [r7, #28]
 801498e:	f7ff f881 	bl	8013a94 <tcp_oos_insert_segment>
                  }
                  break;
 8014992:	e0e2      	b.n	8014b5a <tcp_receive+0xebe>
 8014994:	200070d4 	.word	0x200070d4
 8014998:	200070d1 	.word	0x200070d1
 801499c:	200070a4 	.word	0x200070a4
 80149a0:	200070c4 	.word	0x200070c4
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 80149a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80149a6:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 80149a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80149aa:	681b      	ldr	r3, [r3, #0]
 80149ac:	2b00      	cmp	r3, #0
 80149ae:	f040 80c6 	bne.w	8014b3e <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 80149b2:	4b80      	ldr	r3, [pc, #512]	; (8014bb4 <tcp_receive+0xf18>)
 80149b4:	681a      	ldr	r2, [r3, #0]
 80149b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80149b8:	68db      	ldr	r3, [r3, #12]
 80149ba:	685b      	ldr	r3, [r3, #4]
 80149bc:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 80149be:	2b00      	cmp	r3, #0
 80149c0:	f340 80bd 	ble.w	8014b3e <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80149c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80149c6:	68db      	ldr	r3, [r3, #12]
 80149c8:	899b      	ldrh	r3, [r3, #12]
 80149ca:	b29b      	uxth	r3, r3
 80149cc:	4618      	mov	r0, r3
 80149ce:	f7fa fc9d 	bl	800f30c <lwip_htons>
 80149d2:	4603      	mov	r3, r0
 80149d4:	b2db      	uxtb	r3, r3
 80149d6:	f003 0301 	and.w	r3, r3, #1
 80149da:	2b00      	cmp	r3, #0
 80149dc:	f040 80bf 	bne.w	8014b5e <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 80149e0:	4875      	ldr	r0, [pc, #468]	; (8014bb8 <tcp_receive+0xf1c>)
 80149e2:	f7fd fb07 	bl	8011ff4 <tcp_seg_copy>
 80149e6:	4602      	mov	r2, r0
 80149e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80149ea:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 80149ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80149ee:	681b      	ldr	r3, [r3, #0]
 80149f0:	2b00      	cmp	r3, #0
 80149f2:	f000 80b6 	beq.w	8014b62 <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 80149f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80149f8:	68db      	ldr	r3, [r3, #12]
 80149fa:	685b      	ldr	r3, [r3, #4]
 80149fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80149fe:	8912      	ldrh	r2, [r2, #8]
 8014a00:	441a      	add	r2, r3
 8014a02:	4b6c      	ldr	r3, [pc, #432]	; (8014bb4 <tcp_receive+0xf18>)
 8014a04:	681b      	ldr	r3, [r3, #0]
 8014a06:	1ad3      	subs	r3, r2, r3
 8014a08:	2b00      	cmp	r3, #0
 8014a0a:	dd12      	ble.n	8014a32 <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8014a0c:	4b69      	ldr	r3, [pc, #420]	; (8014bb4 <tcp_receive+0xf18>)
 8014a0e:	681b      	ldr	r3, [r3, #0]
 8014a10:	b29a      	uxth	r2, r3
 8014a12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014a14:	68db      	ldr	r3, [r3, #12]
 8014a16:	685b      	ldr	r3, [r3, #4]
 8014a18:	b29b      	uxth	r3, r3
 8014a1a:	1ad3      	subs	r3, r2, r3
 8014a1c:	b29a      	uxth	r2, r3
 8014a1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014a20:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8014a22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014a24:	685a      	ldr	r2, [r3, #4]
 8014a26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014a28:	891b      	ldrh	r3, [r3, #8]
 8014a2a:	4619      	mov	r1, r3
 8014a2c:	4610      	mov	r0, r2
 8014a2e:	f7fb fecd 	bl	80107cc <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8014a32:	4b62      	ldr	r3, [pc, #392]	; (8014bbc <tcp_receive+0xf20>)
 8014a34:	881b      	ldrh	r3, [r3, #0]
 8014a36:	461a      	mov	r2, r3
 8014a38:	4b5e      	ldr	r3, [pc, #376]	; (8014bb4 <tcp_receive+0xf18>)
 8014a3a:	681b      	ldr	r3, [r3, #0]
 8014a3c:	441a      	add	r2, r3
 8014a3e:	687b      	ldr	r3, [r7, #4]
 8014a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014a42:	6879      	ldr	r1, [r7, #4]
 8014a44:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8014a46:	440b      	add	r3, r1
 8014a48:	1ad3      	subs	r3, r2, r3
 8014a4a:	2b00      	cmp	r3, #0
 8014a4c:	f340 8089 	ble.w	8014b62 <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8014a50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014a52:	681b      	ldr	r3, [r3, #0]
 8014a54:	68db      	ldr	r3, [r3, #12]
 8014a56:	899b      	ldrh	r3, [r3, #12]
 8014a58:	b29b      	uxth	r3, r3
 8014a5a:	4618      	mov	r0, r3
 8014a5c:	f7fa fc56 	bl	800f30c <lwip_htons>
 8014a60:	4603      	mov	r3, r0
 8014a62:	b2db      	uxtb	r3, r3
 8014a64:	f003 0301 	and.w	r3, r3, #1
 8014a68:	2b00      	cmp	r3, #0
 8014a6a:	d022      	beq.n	8014ab2 <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8014a6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014a6e:	681b      	ldr	r3, [r3, #0]
 8014a70:	68db      	ldr	r3, [r3, #12]
 8014a72:	899b      	ldrh	r3, [r3, #12]
 8014a74:	b29b      	uxth	r3, r3
 8014a76:	b21b      	sxth	r3, r3
 8014a78:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8014a7c:	b21c      	sxth	r4, r3
 8014a7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014a80:	681b      	ldr	r3, [r3, #0]
 8014a82:	68db      	ldr	r3, [r3, #12]
 8014a84:	899b      	ldrh	r3, [r3, #12]
 8014a86:	b29b      	uxth	r3, r3
 8014a88:	4618      	mov	r0, r3
 8014a8a:	f7fa fc3f 	bl	800f30c <lwip_htons>
 8014a8e:	4603      	mov	r3, r0
 8014a90:	b2db      	uxtb	r3, r3
 8014a92:	b29b      	uxth	r3, r3
 8014a94:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8014a98:	b29b      	uxth	r3, r3
 8014a9a:	4618      	mov	r0, r3
 8014a9c:	f7fa fc36 	bl	800f30c <lwip_htons>
 8014aa0:	4603      	mov	r3, r0
 8014aa2:	b21b      	sxth	r3, r3
 8014aa4:	4323      	orrs	r3, r4
 8014aa6:	b21a      	sxth	r2, r3
 8014aa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014aaa:	681b      	ldr	r3, [r3, #0]
 8014aac:	68db      	ldr	r3, [r3, #12]
 8014aae:	b292      	uxth	r2, r2
 8014ab0:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8014ab2:	687b      	ldr	r3, [r7, #4]
 8014ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014ab6:	b29a      	uxth	r2, r3
 8014ab8:	687b      	ldr	r3, [r7, #4]
 8014aba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014abc:	4413      	add	r3, r2
 8014abe:	b299      	uxth	r1, r3
 8014ac0:	4b3c      	ldr	r3, [pc, #240]	; (8014bb4 <tcp_receive+0xf18>)
 8014ac2:	681b      	ldr	r3, [r3, #0]
 8014ac4:	b29a      	uxth	r2, r3
 8014ac6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014ac8:	681b      	ldr	r3, [r3, #0]
 8014aca:	1a8a      	subs	r2, r1, r2
 8014acc:	b292      	uxth	r2, r2
 8014ace:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8014ad0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014ad2:	681b      	ldr	r3, [r3, #0]
 8014ad4:	685a      	ldr	r2, [r3, #4]
 8014ad6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014ad8:	681b      	ldr	r3, [r3, #0]
 8014ada:	891b      	ldrh	r3, [r3, #8]
 8014adc:	4619      	mov	r1, r3
 8014ade:	4610      	mov	r0, r2
 8014ae0:	f7fb fe74 	bl	80107cc <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8014ae4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014ae6:	681b      	ldr	r3, [r3, #0]
 8014ae8:	891c      	ldrh	r4, [r3, #8]
 8014aea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014aec:	681b      	ldr	r3, [r3, #0]
 8014aee:	68db      	ldr	r3, [r3, #12]
 8014af0:	899b      	ldrh	r3, [r3, #12]
 8014af2:	b29b      	uxth	r3, r3
 8014af4:	4618      	mov	r0, r3
 8014af6:	f7fa fc09 	bl	800f30c <lwip_htons>
 8014afa:	4603      	mov	r3, r0
 8014afc:	b2db      	uxtb	r3, r3
 8014afe:	f003 0303 	and.w	r3, r3, #3
 8014b02:	2b00      	cmp	r3, #0
 8014b04:	d001      	beq.n	8014b0a <tcp_receive+0xe6e>
 8014b06:	2301      	movs	r3, #1
 8014b08:	e000      	b.n	8014b0c <tcp_receive+0xe70>
 8014b0a:	2300      	movs	r3, #0
 8014b0c:	4423      	add	r3, r4
 8014b0e:	b29a      	uxth	r2, r3
 8014b10:	4b2a      	ldr	r3, [pc, #168]	; (8014bbc <tcp_receive+0xf20>)
 8014b12:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8014b14:	4b29      	ldr	r3, [pc, #164]	; (8014bbc <tcp_receive+0xf20>)
 8014b16:	881b      	ldrh	r3, [r3, #0]
 8014b18:	461a      	mov	r2, r3
 8014b1a:	4b26      	ldr	r3, [pc, #152]	; (8014bb4 <tcp_receive+0xf18>)
 8014b1c:	681b      	ldr	r3, [r3, #0]
 8014b1e:	441a      	add	r2, r3
 8014b20:	687b      	ldr	r3, [r7, #4]
 8014b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014b24:	6879      	ldr	r1, [r7, #4]
 8014b26:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8014b28:	440b      	add	r3, r1
 8014b2a:	429a      	cmp	r2, r3
 8014b2c:	d019      	beq.n	8014b62 <tcp_receive+0xec6>
 8014b2e:	4b24      	ldr	r3, [pc, #144]	; (8014bc0 <tcp_receive+0xf24>)
 8014b30:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 8014b34:	4923      	ldr	r1, [pc, #140]	; (8014bc4 <tcp_receive+0xf28>)
 8014b36:	4824      	ldr	r0, [pc, #144]	; (8014bc8 <tcp_receive+0xf2c>)
 8014b38:	f004 fea2 	bl	8019880 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8014b3c:	e011      	b.n	8014b62 <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8014b3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014b40:	681b      	ldr	r3, [r3, #0]
 8014b42:	63bb      	str	r3, [r7, #56]	; 0x38
 8014b44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014b46:	2b00      	cmp	r3, #0
 8014b48:	f47f aea4 	bne.w	8014894 <tcp_receive+0xbf8>
 8014b4c:	e00a      	b.n	8014b64 <tcp_receive+0xec8>
                break;
 8014b4e:	bf00      	nop
 8014b50:	e008      	b.n	8014b64 <tcp_receive+0xec8>
                break;
 8014b52:	bf00      	nop
 8014b54:	e006      	b.n	8014b64 <tcp_receive+0xec8>
                  break;
 8014b56:	bf00      	nop
 8014b58:	e004      	b.n	8014b64 <tcp_receive+0xec8>
                  break;
 8014b5a:	bf00      	nop
 8014b5c:	e002      	b.n	8014b64 <tcp_receive+0xec8>
                  break;
 8014b5e:	bf00      	nop
 8014b60:	e000      	b.n	8014b64 <tcp_receive+0xec8>
                break;
 8014b62:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8014b64:	6878      	ldr	r0, [r7, #4]
 8014b66:	f001 fa33 	bl	8015fd0 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8014b6a:	e003      	b.n	8014b74 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8014b6c:	6878      	ldr	r0, [r7, #4]
 8014b6e:	f001 fa2f 	bl	8015fd0 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8014b72:	e01a      	b.n	8014baa <tcp_receive+0xf0e>
 8014b74:	e019      	b.n	8014baa <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8014b76:	4b0f      	ldr	r3, [pc, #60]	; (8014bb4 <tcp_receive+0xf18>)
 8014b78:	681a      	ldr	r2, [r3, #0]
 8014b7a:	687b      	ldr	r3, [r7, #4]
 8014b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014b7e:	1ad3      	subs	r3, r2, r3
 8014b80:	2b00      	cmp	r3, #0
 8014b82:	db0a      	blt.n	8014b9a <tcp_receive+0xefe>
 8014b84:	4b0b      	ldr	r3, [pc, #44]	; (8014bb4 <tcp_receive+0xf18>)
 8014b86:	681a      	ldr	r2, [r3, #0]
 8014b88:	687b      	ldr	r3, [r7, #4]
 8014b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014b8c:	6879      	ldr	r1, [r7, #4]
 8014b8e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8014b90:	440b      	add	r3, r1
 8014b92:	1ad3      	subs	r3, r2, r3
 8014b94:	3301      	adds	r3, #1
 8014b96:	2b00      	cmp	r3, #0
 8014b98:	dd07      	ble.n	8014baa <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 8014b9a:	687b      	ldr	r3, [r7, #4]
 8014b9c:	8b5b      	ldrh	r3, [r3, #26]
 8014b9e:	f043 0302 	orr.w	r3, r3, #2
 8014ba2:	b29a      	uxth	r2, r3
 8014ba4:	687b      	ldr	r3, [r7, #4]
 8014ba6:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8014ba8:	e7ff      	b.n	8014baa <tcp_receive+0xf0e>
 8014baa:	bf00      	nop
 8014bac:	3750      	adds	r7, #80	; 0x50
 8014bae:	46bd      	mov	sp, r7
 8014bb0:	bdb0      	pop	{r4, r5, r7, pc}
 8014bb2:	bf00      	nop
 8014bb4:	200070c4 	.word	0x200070c4
 8014bb8:	200070a4 	.word	0x200070a4
 8014bbc:	200070ce 	.word	0x200070ce
 8014bc0:	0801d364 	.word	0x0801d364
 8014bc4:	0801d70c 	.word	0x0801d70c
 8014bc8:	0801d3b0 	.word	0x0801d3b0

08014bcc <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8014bcc:	b480      	push	{r7}
 8014bce:	b083      	sub	sp, #12
 8014bd0:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8014bd2:	4b15      	ldr	r3, [pc, #84]	; (8014c28 <tcp_get_next_optbyte+0x5c>)
 8014bd4:	881b      	ldrh	r3, [r3, #0]
 8014bd6:	1c5a      	adds	r2, r3, #1
 8014bd8:	b291      	uxth	r1, r2
 8014bda:	4a13      	ldr	r2, [pc, #76]	; (8014c28 <tcp_get_next_optbyte+0x5c>)
 8014bdc:	8011      	strh	r1, [r2, #0]
 8014bde:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8014be0:	4b12      	ldr	r3, [pc, #72]	; (8014c2c <tcp_get_next_optbyte+0x60>)
 8014be2:	681b      	ldr	r3, [r3, #0]
 8014be4:	2b00      	cmp	r3, #0
 8014be6:	d004      	beq.n	8014bf2 <tcp_get_next_optbyte+0x26>
 8014be8:	4b11      	ldr	r3, [pc, #68]	; (8014c30 <tcp_get_next_optbyte+0x64>)
 8014bea:	881b      	ldrh	r3, [r3, #0]
 8014bec:	88fa      	ldrh	r2, [r7, #6]
 8014bee:	429a      	cmp	r2, r3
 8014bf0:	d208      	bcs.n	8014c04 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8014bf2:	4b10      	ldr	r3, [pc, #64]	; (8014c34 <tcp_get_next_optbyte+0x68>)
 8014bf4:	681b      	ldr	r3, [r3, #0]
 8014bf6:	3314      	adds	r3, #20
 8014bf8:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8014bfa:	88fb      	ldrh	r3, [r7, #6]
 8014bfc:	683a      	ldr	r2, [r7, #0]
 8014bfe:	4413      	add	r3, r2
 8014c00:	781b      	ldrb	r3, [r3, #0]
 8014c02:	e00b      	b.n	8014c1c <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8014c04:	88fb      	ldrh	r3, [r7, #6]
 8014c06:	b2da      	uxtb	r2, r3
 8014c08:	4b09      	ldr	r3, [pc, #36]	; (8014c30 <tcp_get_next_optbyte+0x64>)
 8014c0a:	881b      	ldrh	r3, [r3, #0]
 8014c0c:	b2db      	uxtb	r3, r3
 8014c0e:	1ad3      	subs	r3, r2, r3
 8014c10:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8014c12:	4b06      	ldr	r3, [pc, #24]	; (8014c2c <tcp_get_next_optbyte+0x60>)
 8014c14:	681a      	ldr	r2, [r3, #0]
 8014c16:	797b      	ldrb	r3, [r7, #5]
 8014c18:	4413      	add	r3, r2
 8014c1a:	781b      	ldrb	r3, [r3, #0]
  }
}
 8014c1c:	4618      	mov	r0, r3
 8014c1e:	370c      	adds	r7, #12
 8014c20:	46bd      	mov	sp, r7
 8014c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c26:	4770      	bx	lr
 8014c28:	200070c0 	.word	0x200070c0
 8014c2c:	200070bc 	.word	0x200070bc
 8014c30:	200070ba 	.word	0x200070ba
 8014c34:	200070b4 	.word	0x200070b4

08014c38 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8014c38:	b580      	push	{r7, lr}
 8014c3a:	b084      	sub	sp, #16
 8014c3c:	af00      	add	r7, sp, #0
 8014c3e:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8014c40:	687b      	ldr	r3, [r7, #4]
 8014c42:	2b00      	cmp	r3, #0
 8014c44:	d106      	bne.n	8014c54 <tcp_parseopt+0x1c>
 8014c46:	4b32      	ldr	r3, [pc, #200]	; (8014d10 <tcp_parseopt+0xd8>)
 8014c48:	f240 727d 	movw	r2, #1917	; 0x77d
 8014c4c:	4931      	ldr	r1, [pc, #196]	; (8014d14 <tcp_parseopt+0xdc>)
 8014c4e:	4832      	ldr	r0, [pc, #200]	; (8014d18 <tcp_parseopt+0xe0>)
 8014c50:	f004 fe16 	bl	8019880 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8014c54:	4b31      	ldr	r3, [pc, #196]	; (8014d1c <tcp_parseopt+0xe4>)
 8014c56:	881b      	ldrh	r3, [r3, #0]
 8014c58:	2b00      	cmp	r3, #0
 8014c5a:	d056      	beq.n	8014d0a <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8014c5c:	4b30      	ldr	r3, [pc, #192]	; (8014d20 <tcp_parseopt+0xe8>)
 8014c5e:	2200      	movs	r2, #0
 8014c60:	801a      	strh	r2, [r3, #0]
 8014c62:	e046      	b.n	8014cf2 <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 8014c64:	f7ff ffb2 	bl	8014bcc <tcp_get_next_optbyte>
 8014c68:	4603      	mov	r3, r0
 8014c6a:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8014c6c:	7bfb      	ldrb	r3, [r7, #15]
 8014c6e:	2b02      	cmp	r3, #2
 8014c70:	d006      	beq.n	8014c80 <tcp_parseopt+0x48>
 8014c72:	2b02      	cmp	r3, #2
 8014c74:	dc2c      	bgt.n	8014cd0 <tcp_parseopt+0x98>
 8014c76:	2b00      	cmp	r3, #0
 8014c78:	d042      	beq.n	8014d00 <tcp_parseopt+0xc8>
 8014c7a:	2b01      	cmp	r3, #1
 8014c7c:	d128      	bne.n	8014cd0 <tcp_parseopt+0x98>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 8014c7e:	e038      	b.n	8014cf2 <tcp_parseopt+0xba>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8014c80:	f7ff ffa4 	bl	8014bcc <tcp_get_next_optbyte>
 8014c84:	4603      	mov	r3, r0
 8014c86:	2b04      	cmp	r3, #4
 8014c88:	d13c      	bne.n	8014d04 <tcp_parseopt+0xcc>
 8014c8a:	4b25      	ldr	r3, [pc, #148]	; (8014d20 <tcp_parseopt+0xe8>)
 8014c8c:	881b      	ldrh	r3, [r3, #0]
 8014c8e:	3301      	adds	r3, #1
 8014c90:	4a22      	ldr	r2, [pc, #136]	; (8014d1c <tcp_parseopt+0xe4>)
 8014c92:	8812      	ldrh	r2, [r2, #0]
 8014c94:	4293      	cmp	r3, r2
 8014c96:	da35      	bge.n	8014d04 <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8014c98:	f7ff ff98 	bl	8014bcc <tcp_get_next_optbyte>
 8014c9c:	4603      	mov	r3, r0
 8014c9e:	b29b      	uxth	r3, r3
 8014ca0:	021b      	lsls	r3, r3, #8
 8014ca2:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8014ca4:	f7ff ff92 	bl	8014bcc <tcp_get_next_optbyte>
 8014ca8:	4603      	mov	r3, r0
 8014caa:	b29a      	uxth	r2, r3
 8014cac:	89bb      	ldrh	r3, [r7, #12]
 8014cae:	4313      	orrs	r3, r2
 8014cb0:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8014cb2:	89bb      	ldrh	r3, [r7, #12]
 8014cb4:	f240 52b4 	movw	r2, #1460	; 0x5b4
 8014cb8:	4293      	cmp	r3, r2
 8014cba:	d804      	bhi.n	8014cc6 <tcp_parseopt+0x8e>
 8014cbc:	89bb      	ldrh	r3, [r7, #12]
 8014cbe:	2b00      	cmp	r3, #0
 8014cc0:	d001      	beq.n	8014cc6 <tcp_parseopt+0x8e>
 8014cc2:	89ba      	ldrh	r2, [r7, #12]
 8014cc4:	e001      	b.n	8014cca <tcp_parseopt+0x92>
 8014cc6:	f240 52b4 	movw	r2, #1460	; 0x5b4
 8014cca:	687b      	ldr	r3, [r7, #4]
 8014ccc:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8014cce:	e010      	b.n	8014cf2 <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8014cd0:	f7ff ff7c 	bl	8014bcc <tcp_get_next_optbyte>
 8014cd4:	4603      	mov	r3, r0
 8014cd6:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8014cd8:	7afb      	ldrb	r3, [r7, #11]
 8014cda:	2b01      	cmp	r3, #1
 8014cdc:	d914      	bls.n	8014d08 <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8014cde:	7afb      	ldrb	r3, [r7, #11]
 8014ce0:	b29a      	uxth	r2, r3
 8014ce2:	4b0f      	ldr	r3, [pc, #60]	; (8014d20 <tcp_parseopt+0xe8>)
 8014ce4:	881b      	ldrh	r3, [r3, #0]
 8014ce6:	4413      	add	r3, r2
 8014ce8:	b29b      	uxth	r3, r3
 8014cea:	3b02      	subs	r3, #2
 8014cec:	b29a      	uxth	r2, r3
 8014cee:	4b0c      	ldr	r3, [pc, #48]	; (8014d20 <tcp_parseopt+0xe8>)
 8014cf0:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8014cf2:	4b0b      	ldr	r3, [pc, #44]	; (8014d20 <tcp_parseopt+0xe8>)
 8014cf4:	881a      	ldrh	r2, [r3, #0]
 8014cf6:	4b09      	ldr	r3, [pc, #36]	; (8014d1c <tcp_parseopt+0xe4>)
 8014cf8:	881b      	ldrh	r3, [r3, #0]
 8014cfa:	429a      	cmp	r2, r3
 8014cfc:	d3b2      	bcc.n	8014c64 <tcp_parseopt+0x2c>
 8014cfe:	e004      	b.n	8014d0a <tcp_parseopt+0xd2>
          return;
 8014d00:	bf00      	nop
 8014d02:	e002      	b.n	8014d0a <tcp_parseopt+0xd2>
            return;
 8014d04:	bf00      	nop
 8014d06:	e000      	b.n	8014d0a <tcp_parseopt+0xd2>
            return;
 8014d08:	bf00      	nop
      }
    }
  }
}
 8014d0a:	3710      	adds	r7, #16
 8014d0c:	46bd      	mov	sp, r7
 8014d0e:	bd80      	pop	{r7, pc}
 8014d10:	0801d364 	.word	0x0801d364
 8014d14:	0801d7c8 	.word	0x0801d7c8
 8014d18:	0801d3b0 	.word	0x0801d3b0
 8014d1c:	200070b8 	.word	0x200070b8
 8014d20:	200070c0 	.word	0x200070c0

08014d24 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8014d24:	b480      	push	{r7}
 8014d26:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8014d28:	4b05      	ldr	r3, [pc, #20]	; (8014d40 <tcp_trigger_input_pcb_close+0x1c>)
 8014d2a:	781b      	ldrb	r3, [r3, #0]
 8014d2c:	f043 0310 	orr.w	r3, r3, #16
 8014d30:	b2da      	uxtb	r2, r3
 8014d32:	4b03      	ldr	r3, [pc, #12]	; (8014d40 <tcp_trigger_input_pcb_close+0x1c>)
 8014d34:	701a      	strb	r2, [r3, #0]
}
 8014d36:	bf00      	nop
 8014d38:	46bd      	mov	sp, r7
 8014d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d3e:	4770      	bx	lr
 8014d40:	200070d1 	.word	0x200070d1

08014d44 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8014d44:	b580      	push	{r7, lr}
 8014d46:	b084      	sub	sp, #16
 8014d48:	af00      	add	r7, sp, #0
 8014d4a:	60f8      	str	r0, [r7, #12]
 8014d4c:	60b9      	str	r1, [r7, #8]
 8014d4e:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8014d50:	68fb      	ldr	r3, [r7, #12]
 8014d52:	2b00      	cmp	r3, #0
 8014d54:	d00a      	beq.n	8014d6c <tcp_route+0x28>
 8014d56:	68fb      	ldr	r3, [r7, #12]
 8014d58:	7a1b      	ldrb	r3, [r3, #8]
 8014d5a:	2b00      	cmp	r3, #0
 8014d5c:	d006      	beq.n	8014d6c <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8014d5e:	68fb      	ldr	r3, [r7, #12]
 8014d60:	7a1b      	ldrb	r3, [r3, #8]
 8014d62:	4618      	mov	r0, r3
 8014d64:	f7fb fb76 	bl	8010454 <netif_get_by_index>
 8014d68:	4603      	mov	r3, r0
 8014d6a:	e003      	b.n	8014d74 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8014d6c:	6878      	ldr	r0, [r7, #4]
 8014d6e:	f002 fe61 	bl	8017a34 <ip4_route>
 8014d72:	4603      	mov	r3, r0
  }
}
 8014d74:	4618      	mov	r0, r3
 8014d76:	3710      	adds	r7, #16
 8014d78:	46bd      	mov	sp, r7
 8014d7a:	bd80      	pop	{r7, pc}

08014d7c <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8014d7c:	b590      	push	{r4, r7, lr}
 8014d7e:	b087      	sub	sp, #28
 8014d80:	af00      	add	r7, sp, #0
 8014d82:	60f8      	str	r0, [r7, #12]
 8014d84:	60b9      	str	r1, [r7, #8]
 8014d86:	603b      	str	r3, [r7, #0]
 8014d88:	4613      	mov	r3, r2
 8014d8a:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8014d8c:	68fb      	ldr	r3, [r7, #12]
 8014d8e:	2b00      	cmp	r3, #0
 8014d90:	d105      	bne.n	8014d9e <tcp_create_segment+0x22>
 8014d92:	4b44      	ldr	r3, [pc, #272]	; (8014ea4 <tcp_create_segment+0x128>)
 8014d94:	22a3      	movs	r2, #163	; 0xa3
 8014d96:	4944      	ldr	r1, [pc, #272]	; (8014ea8 <tcp_create_segment+0x12c>)
 8014d98:	4844      	ldr	r0, [pc, #272]	; (8014eac <tcp_create_segment+0x130>)
 8014d9a:	f004 fd71 	bl	8019880 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8014d9e:	68bb      	ldr	r3, [r7, #8]
 8014da0:	2b00      	cmp	r3, #0
 8014da2:	d105      	bne.n	8014db0 <tcp_create_segment+0x34>
 8014da4:	4b3f      	ldr	r3, [pc, #252]	; (8014ea4 <tcp_create_segment+0x128>)
 8014da6:	22a4      	movs	r2, #164	; 0xa4
 8014da8:	4941      	ldr	r1, [pc, #260]	; (8014eb0 <tcp_create_segment+0x134>)
 8014daa:	4840      	ldr	r0, [pc, #256]	; (8014eac <tcp_create_segment+0x130>)
 8014dac:	f004 fd68 	bl	8019880 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8014db0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8014db4:	009b      	lsls	r3, r3, #2
 8014db6:	b2db      	uxtb	r3, r3
 8014db8:	f003 0304 	and.w	r3, r3, #4
 8014dbc:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8014dbe:	2003      	movs	r0, #3
 8014dc0:	f7fa ffc2 	bl	800fd48 <memp_malloc>
 8014dc4:	6138      	str	r0, [r7, #16]
 8014dc6:	693b      	ldr	r3, [r7, #16]
 8014dc8:	2b00      	cmp	r3, #0
 8014dca:	d104      	bne.n	8014dd6 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8014dcc:	68b8      	ldr	r0, [r7, #8]
 8014dce:	f7fb fe81 	bl	8010ad4 <pbuf_free>
    return NULL;
 8014dd2:	2300      	movs	r3, #0
 8014dd4:	e061      	b.n	8014e9a <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 8014dd6:	693b      	ldr	r3, [r7, #16]
 8014dd8:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8014ddc:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8014dde:	693b      	ldr	r3, [r7, #16]
 8014de0:	2200      	movs	r2, #0
 8014de2:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8014de4:	693b      	ldr	r3, [r7, #16]
 8014de6:	68ba      	ldr	r2, [r7, #8]
 8014de8:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8014dea:	68bb      	ldr	r3, [r7, #8]
 8014dec:	891a      	ldrh	r2, [r3, #8]
 8014dee:	7dfb      	ldrb	r3, [r7, #23]
 8014df0:	b29b      	uxth	r3, r3
 8014df2:	429a      	cmp	r2, r3
 8014df4:	d205      	bcs.n	8014e02 <tcp_create_segment+0x86>
 8014df6:	4b2b      	ldr	r3, [pc, #172]	; (8014ea4 <tcp_create_segment+0x128>)
 8014df8:	22b0      	movs	r2, #176	; 0xb0
 8014dfa:	492e      	ldr	r1, [pc, #184]	; (8014eb4 <tcp_create_segment+0x138>)
 8014dfc:	482b      	ldr	r0, [pc, #172]	; (8014eac <tcp_create_segment+0x130>)
 8014dfe:	f004 fd3f 	bl	8019880 <iprintf>
  seg->len = p->tot_len - optlen;
 8014e02:	68bb      	ldr	r3, [r7, #8]
 8014e04:	891a      	ldrh	r2, [r3, #8]
 8014e06:	7dfb      	ldrb	r3, [r7, #23]
 8014e08:	b29b      	uxth	r3, r3
 8014e0a:	1ad3      	subs	r3, r2, r3
 8014e0c:	b29a      	uxth	r2, r3
 8014e0e:	693b      	ldr	r3, [r7, #16]
 8014e10:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8014e12:	2114      	movs	r1, #20
 8014e14:	68b8      	ldr	r0, [r7, #8]
 8014e16:	f7fb fdc7 	bl	80109a8 <pbuf_add_header>
 8014e1a:	4603      	mov	r3, r0
 8014e1c:	2b00      	cmp	r3, #0
 8014e1e:	d004      	beq.n	8014e2a <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8014e20:	6938      	ldr	r0, [r7, #16]
 8014e22:	f7fd f8ce 	bl	8011fc2 <tcp_seg_free>
    return NULL;
 8014e26:	2300      	movs	r3, #0
 8014e28:	e037      	b.n	8014e9a <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8014e2a:	693b      	ldr	r3, [r7, #16]
 8014e2c:	685b      	ldr	r3, [r3, #4]
 8014e2e:	685a      	ldr	r2, [r3, #4]
 8014e30:	693b      	ldr	r3, [r7, #16]
 8014e32:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8014e34:	68fb      	ldr	r3, [r7, #12]
 8014e36:	8ada      	ldrh	r2, [r3, #22]
 8014e38:	693b      	ldr	r3, [r7, #16]
 8014e3a:	68dc      	ldr	r4, [r3, #12]
 8014e3c:	4610      	mov	r0, r2
 8014e3e:	f7fa fa65 	bl	800f30c <lwip_htons>
 8014e42:	4603      	mov	r3, r0
 8014e44:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8014e46:	68fb      	ldr	r3, [r7, #12]
 8014e48:	8b1a      	ldrh	r2, [r3, #24]
 8014e4a:	693b      	ldr	r3, [r7, #16]
 8014e4c:	68dc      	ldr	r4, [r3, #12]
 8014e4e:	4610      	mov	r0, r2
 8014e50:	f7fa fa5c 	bl	800f30c <lwip_htons>
 8014e54:	4603      	mov	r3, r0
 8014e56:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8014e58:	693b      	ldr	r3, [r7, #16]
 8014e5a:	68dc      	ldr	r4, [r3, #12]
 8014e5c:	6838      	ldr	r0, [r7, #0]
 8014e5e:	f7fa fa6a 	bl	800f336 <lwip_htonl>
 8014e62:	4603      	mov	r3, r0
 8014e64:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8014e66:	7dfb      	ldrb	r3, [r7, #23]
 8014e68:	089b      	lsrs	r3, r3, #2
 8014e6a:	b2db      	uxtb	r3, r3
 8014e6c:	b29b      	uxth	r3, r3
 8014e6e:	3305      	adds	r3, #5
 8014e70:	b29b      	uxth	r3, r3
 8014e72:	031b      	lsls	r3, r3, #12
 8014e74:	b29a      	uxth	r2, r3
 8014e76:	79fb      	ldrb	r3, [r7, #7]
 8014e78:	b29b      	uxth	r3, r3
 8014e7a:	4313      	orrs	r3, r2
 8014e7c:	b29a      	uxth	r2, r3
 8014e7e:	693b      	ldr	r3, [r7, #16]
 8014e80:	68dc      	ldr	r4, [r3, #12]
 8014e82:	4610      	mov	r0, r2
 8014e84:	f7fa fa42 	bl	800f30c <lwip_htons>
 8014e88:	4603      	mov	r3, r0
 8014e8a:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8014e8c:	693b      	ldr	r3, [r7, #16]
 8014e8e:	68db      	ldr	r3, [r3, #12]
 8014e90:	2200      	movs	r2, #0
 8014e92:	749a      	strb	r2, [r3, #18]
 8014e94:	2200      	movs	r2, #0
 8014e96:	74da      	strb	r2, [r3, #19]
  return seg;
 8014e98:	693b      	ldr	r3, [r7, #16]
}
 8014e9a:	4618      	mov	r0, r3
 8014e9c:	371c      	adds	r7, #28
 8014e9e:	46bd      	mov	sp, r7
 8014ea0:	bd90      	pop	{r4, r7, pc}
 8014ea2:	bf00      	nop
 8014ea4:	0801d7e4 	.word	0x0801d7e4
 8014ea8:	0801d818 	.word	0x0801d818
 8014eac:	0801d838 	.word	0x0801d838
 8014eb0:	0801d860 	.word	0x0801d860
 8014eb4:	0801d884 	.word	0x0801d884

08014eb8 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8014eb8:	b590      	push	{r4, r7, lr}
 8014eba:	b08b      	sub	sp, #44	; 0x2c
 8014ebc:	af02      	add	r7, sp, #8
 8014ebe:	6078      	str	r0, [r7, #4]
 8014ec0:	460b      	mov	r3, r1
 8014ec2:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8014ec4:	2300      	movs	r3, #0
 8014ec6:	61fb      	str	r3, [r7, #28]
 8014ec8:	2300      	movs	r3, #0
 8014eca:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8014ecc:	2300      	movs	r3, #0
 8014ece:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8014ed0:	687b      	ldr	r3, [r7, #4]
 8014ed2:	2b00      	cmp	r3, #0
 8014ed4:	d106      	bne.n	8014ee4 <tcp_split_unsent_seg+0x2c>
 8014ed6:	4b95      	ldr	r3, [pc, #596]	; (801512c <tcp_split_unsent_seg+0x274>)
 8014ed8:	f240 324b 	movw	r2, #843	; 0x34b
 8014edc:	4994      	ldr	r1, [pc, #592]	; (8015130 <tcp_split_unsent_seg+0x278>)
 8014ede:	4895      	ldr	r0, [pc, #596]	; (8015134 <tcp_split_unsent_seg+0x27c>)
 8014ee0:	f004 fcce 	bl	8019880 <iprintf>

  useg = pcb->unsent;
 8014ee4:	687b      	ldr	r3, [r7, #4]
 8014ee6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014ee8:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8014eea:	697b      	ldr	r3, [r7, #20]
 8014eec:	2b00      	cmp	r3, #0
 8014eee:	d102      	bne.n	8014ef6 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8014ef0:	f04f 33ff 	mov.w	r3, #4294967295
 8014ef4:	e116      	b.n	8015124 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8014ef6:	887b      	ldrh	r3, [r7, #2]
 8014ef8:	2b00      	cmp	r3, #0
 8014efa:	d109      	bne.n	8014f10 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8014efc:	4b8b      	ldr	r3, [pc, #556]	; (801512c <tcp_split_unsent_seg+0x274>)
 8014efe:	f240 3253 	movw	r2, #851	; 0x353
 8014f02:	498d      	ldr	r1, [pc, #564]	; (8015138 <tcp_split_unsent_seg+0x280>)
 8014f04:	488b      	ldr	r0, [pc, #556]	; (8015134 <tcp_split_unsent_seg+0x27c>)
 8014f06:	f004 fcbb 	bl	8019880 <iprintf>
    return ERR_VAL;
 8014f0a:	f06f 0305 	mvn.w	r3, #5
 8014f0e:	e109      	b.n	8015124 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8014f10:	697b      	ldr	r3, [r7, #20]
 8014f12:	891b      	ldrh	r3, [r3, #8]
 8014f14:	887a      	ldrh	r2, [r7, #2]
 8014f16:	429a      	cmp	r2, r3
 8014f18:	d301      	bcc.n	8014f1e <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8014f1a:	2300      	movs	r3, #0
 8014f1c:	e102      	b.n	8015124 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8014f1e:	687b      	ldr	r3, [r7, #4]
 8014f20:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014f22:	887a      	ldrh	r2, [r7, #2]
 8014f24:	429a      	cmp	r2, r3
 8014f26:	d906      	bls.n	8014f36 <tcp_split_unsent_seg+0x7e>
 8014f28:	4b80      	ldr	r3, [pc, #512]	; (801512c <tcp_split_unsent_seg+0x274>)
 8014f2a:	f240 325b 	movw	r2, #859	; 0x35b
 8014f2e:	4983      	ldr	r1, [pc, #524]	; (801513c <tcp_split_unsent_seg+0x284>)
 8014f30:	4880      	ldr	r0, [pc, #512]	; (8015134 <tcp_split_unsent_seg+0x27c>)
 8014f32:	f004 fca5 	bl	8019880 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8014f36:	697b      	ldr	r3, [r7, #20]
 8014f38:	891b      	ldrh	r3, [r3, #8]
 8014f3a:	2b00      	cmp	r3, #0
 8014f3c:	d106      	bne.n	8014f4c <tcp_split_unsent_seg+0x94>
 8014f3e:	4b7b      	ldr	r3, [pc, #492]	; (801512c <tcp_split_unsent_seg+0x274>)
 8014f40:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8014f44:	497e      	ldr	r1, [pc, #504]	; (8015140 <tcp_split_unsent_seg+0x288>)
 8014f46:	487b      	ldr	r0, [pc, #492]	; (8015134 <tcp_split_unsent_seg+0x27c>)
 8014f48:	f004 fc9a 	bl	8019880 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8014f4c:	697b      	ldr	r3, [r7, #20]
 8014f4e:	7a9b      	ldrb	r3, [r3, #10]
 8014f50:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8014f52:	7bfb      	ldrb	r3, [r7, #15]
 8014f54:	009b      	lsls	r3, r3, #2
 8014f56:	b2db      	uxtb	r3, r3
 8014f58:	f003 0304 	and.w	r3, r3, #4
 8014f5c:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8014f5e:	697b      	ldr	r3, [r7, #20]
 8014f60:	891a      	ldrh	r2, [r3, #8]
 8014f62:	887b      	ldrh	r3, [r7, #2]
 8014f64:	1ad3      	subs	r3, r2, r3
 8014f66:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8014f68:	7bbb      	ldrb	r3, [r7, #14]
 8014f6a:	b29a      	uxth	r2, r3
 8014f6c:	89bb      	ldrh	r3, [r7, #12]
 8014f6e:	4413      	add	r3, r2
 8014f70:	b29b      	uxth	r3, r3
 8014f72:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014f76:	4619      	mov	r1, r3
 8014f78:	2036      	movs	r0, #54	; 0x36
 8014f7a:	f7fb fac7 	bl	801050c <pbuf_alloc>
 8014f7e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8014f80:	693b      	ldr	r3, [r7, #16]
 8014f82:	2b00      	cmp	r3, #0
 8014f84:	f000 80b7 	beq.w	80150f6 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8014f88:	697b      	ldr	r3, [r7, #20]
 8014f8a:	685b      	ldr	r3, [r3, #4]
 8014f8c:	891a      	ldrh	r2, [r3, #8]
 8014f8e:	697b      	ldr	r3, [r7, #20]
 8014f90:	891b      	ldrh	r3, [r3, #8]
 8014f92:	1ad3      	subs	r3, r2, r3
 8014f94:	b29a      	uxth	r2, r3
 8014f96:	887b      	ldrh	r3, [r7, #2]
 8014f98:	4413      	add	r3, r2
 8014f9a:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8014f9c:	697b      	ldr	r3, [r7, #20]
 8014f9e:	6858      	ldr	r0, [r3, #4]
 8014fa0:	693b      	ldr	r3, [r7, #16]
 8014fa2:	685a      	ldr	r2, [r3, #4]
 8014fa4:	7bbb      	ldrb	r3, [r7, #14]
 8014fa6:	18d1      	adds	r1, r2, r3
 8014fa8:	897b      	ldrh	r3, [r7, #10]
 8014faa:	89ba      	ldrh	r2, [r7, #12]
 8014fac:	f7fb ff7c 	bl	8010ea8 <pbuf_copy_partial>
 8014fb0:	4603      	mov	r3, r0
 8014fb2:	461a      	mov	r2, r3
 8014fb4:	89bb      	ldrh	r3, [r7, #12]
 8014fb6:	4293      	cmp	r3, r2
 8014fb8:	f040 809f 	bne.w	80150fa <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8014fbc:	697b      	ldr	r3, [r7, #20]
 8014fbe:	68db      	ldr	r3, [r3, #12]
 8014fc0:	899b      	ldrh	r3, [r3, #12]
 8014fc2:	b29b      	uxth	r3, r3
 8014fc4:	4618      	mov	r0, r3
 8014fc6:	f7fa f9a1 	bl	800f30c <lwip_htons>
 8014fca:	4603      	mov	r3, r0
 8014fcc:	b2db      	uxtb	r3, r3
 8014fce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8014fd2:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8014fd4:	2300      	movs	r3, #0
 8014fd6:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8014fd8:	7efb      	ldrb	r3, [r7, #27]
 8014fda:	f003 0308 	and.w	r3, r3, #8
 8014fde:	2b00      	cmp	r3, #0
 8014fe0:	d007      	beq.n	8014ff2 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8014fe2:	7efb      	ldrb	r3, [r7, #27]
 8014fe4:	f023 0308 	bic.w	r3, r3, #8
 8014fe8:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8014fea:	7ebb      	ldrb	r3, [r7, #26]
 8014fec:	f043 0308 	orr.w	r3, r3, #8
 8014ff0:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8014ff2:	7efb      	ldrb	r3, [r7, #27]
 8014ff4:	f003 0301 	and.w	r3, r3, #1
 8014ff8:	2b00      	cmp	r3, #0
 8014ffa:	d007      	beq.n	801500c <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8014ffc:	7efb      	ldrb	r3, [r7, #27]
 8014ffe:	f023 0301 	bic.w	r3, r3, #1
 8015002:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8015004:	7ebb      	ldrb	r3, [r7, #26]
 8015006:	f043 0301 	orr.w	r3, r3, #1
 801500a:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 801500c:	697b      	ldr	r3, [r7, #20]
 801500e:	68db      	ldr	r3, [r3, #12]
 8015010:	685b      	ldr	r3, [r3, #4]
 8015012:	4618      	mov	r0, r3
 8015014:	f7fa f98f 	bl	800f336 <lwip_htonl>
 8015018:	4602      	mov	r2, r0
 801501a:	887b      	ldrh	r3, [r7, #2]
 801501c:	18d1      	adds	r1, r2, r3
 801501e:	7eba      	ldrb	r2, [r7, #26]
 8015020:	7bfb      	ldrb	r3, [r7, #15]
 8015022:	9300      	str	r3, [sp, #0]
 8015024:	460b      	mov	r3, r1
 8015026:	6939      	ldr	r1, [r7, #16]
 8015028:	6878      	ldr	r0, [r7, #4]
 801502a:	f7ff fea7 	bl	8014d7c <tcp_create_segment>
 801502e:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8015030:	69fb      	ldr	r3, [r7, #28]
 8015032:	2b00      	cmp	r3, #0
 8015034:	d063      	beq.n	80150fe <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8015036:	697b      	ldr	r3, [r7, #20]
 8015038:	685b      	ldr	r3, [r3, #4]
 801503a:	4618      	mov	r0, r3
 801503c:	f7fb fdd2 	bl	8010be4 <pbuf_clen>
 8015040:	4603      	mov	r3, r0
 8015042:	461a      	mov	r2, r3
 8015044:	687b      	ldr	r3, [r7, #4]
 8015046:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801504a:	1a9b      	subs	r3, r3, r2
 801504c:	b29a      	uxth	r2, r3
 801504e:	687b      	ldr	r3, [r7, #4]
 8015050:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8015054:	697b      	ldr	r3, [r7, #20]
 8015056:	6858      	ldr	r0, [r3, #4]
 8015058:	697b      	ldr	r3, [r7, #20]
 801505a:	685b      	ldr	r3, [r3, #4]
 801505c:	891a      	ldrh	r2, [r3, #8]
 801505e:	89bb      	ldrh	r3, [r7, #12]
 8015060:	1ad3      	subs	r3, r2, r3
 8015062:	b29b      	uxth	r3, r3
 8015064:	4619      	mov	r1, r3
 8015066:	f7fb fbb1 	bl	80107cc <pbuf_realloc>
  useg->len -= remainder;
 801506a:	697b      	ldr	r3, [r7, #20]
 801506c:	891a      	ldrh	r2, [r3, #8]
 801506e:	89bb      	ldrh	r3, [r7, #12]
 8015070:	1ad3      	subs	r3, r2, r3
 8015072:	b29a      	uxth	r2, r3
 8015074:	697b      	ldr	r3, [r7, #20]
 8015076:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8015078:	697b      	ldr	r3, [r7, #20]
 801507a:	68db      	ldr	r3, [r3, #12]
 801507c:	899b      	ldrh	r3, [r3, #12]
 801507e:	b29c      	uxth	r4, r3
 8015080:	7efb      	ldrb	r3, [r7, #27]
 8015082:	b29b      	uxth	r3, r3
 8015084:	4618      	mov	r0, r3
 8015086:	f7fa f941 	bl	800f30c <lwip_htons>
 801508a:	4603      	mov	r3, r0
 801508c:	461a      	mov	r2, r3
 801508e:	697b      	ldr	r3, [r7, #20]
 8015090:	68db      	ldr	r3, [r3, #12]
 8015092:	4322      	orrs	r2, r4
 8015094:	b292      	uxth	r2, r2
 8015096:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8015098:	697b      	ldr	r3, [r7, #20]
 801509a:	685b      	ldr	r3, [r3, #4]
 801509c:	4618      	mov	r0, r3
 801509e:	f7fb fda1 	bl	8010be4 <pbuf_clen>
 80150a2:	4603      	mov	r3, r0
 80150a4:	461a      	mov	r2, r3
 80150a6:	687b      	ldr	r3, [r7, #4]
 80150a8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80150ac:	4413      	add	r3, r2
 80150ae:	b29a      	uxth	r2, r3
 80150b0:	687b      	ldr	r3, [r7, #4]
 80150b2:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80150b6:	69fb      	ldr	r3, [r7, #28]
 80150b8:	685b      	ldr	r3, [r3, #4]
 80150ba:	4618      	mov	r0, r3
 80150bc:	f7fb fd92 	bl	8010be4 <pbuf_clen>
 80150c0:	4603      	mov	r3, r0
 80150c2:	461a      	mov	r2, r3
 80150c4:	687b      	ldr	r3, [r7, #4]
 80150c6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80150ca:	4413      	add	r3, r2
 80150cc:	b29a      	uxth	r2, r3
 80150ce:	687b      	ldr	r3, [r7, #4]
 80150d0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 80150d4:	697b      	ldr	r3, [r7, #20]
 80150d6:	681a      	ldr	r2, [r3, #0]
 80150d8:	69fb      	ldr	r3, [r7, #28]
 80150da:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 80150dc:	697b      	ldr	r3, [r7, #20]
 80150de:	69fa      	ldr	r2, [r7, #28]
 80150e0:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 80150e2:	69fb      	ldr	r3, [r7, #28]
 80150e4:	681b      	ldr	r3, [r3, #0]
 80150e6:	2b00      	cmp	r3, #0
 80150e8:	d103      	bne.n	80150f2 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 80150ea:	687b      	ldr	r3, [r7, #4]
 80150ec:	2200      	movs	r2, #0
 80150ee:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 80150f2:	2300      	movs	r3, #0
 80150f4:	e016      	b.n	8015124 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 80150f6:	bf00      	nop
 80150f8:	e002      	b.n	8015100 <tcp_split_unsent_seg+0x248>
    goto memerr;
 80150fa:	bf00      	nop
 80150fc:	e000      	b.n	8015100 <tcp_split_unsent_seg+0x248>
    goto memerr;
 80150fe:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8015100:	69fb      	ldr	r3, [r7, #28]
 8015102:	2b00      	cmp	r3, #0
 8015104:	d006      	beq.n	8015114 <tcp_split_unsent_seg+0x25c>
 8015106:	4b09      	ldr	r3, [pc, #36]	; (801512c <tcp_split_unsent_seg+0x274>)
 8015108:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 801510c:	490d      	ldr	r1, [pc, #52]	; (8015144 <tcp_split_unsent_seg+0x28c>)
 801510e:	4809      	ldr	r0, [pc, #36]	; (8015134 <tcp_split_unsent_seg+0x27c>)
 8015110:	f004 fbb6 	bl	8019880 <iprintf>
  if (p != NULL) {
 8015114:	693b      	ldr	r3, [r7, #16]
 8015116:	2b00      	cmp	r3, #0
 8015118:	d002      	beq.n	8015120 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 801511a:	6938      	ldr	r0, [r7, #16]
 801511c:	f7fb fcda 	bl	8010ad4 <pbuf_free>
  }

  return ERR_MEM;
 8015120:	f04f 33ff 	mov.w	r3, #4294967295
}
 8015124:	4618      	mov	r0, r3
 8015126:	3724      	adds	r7, #36	; 0x24
 8015128:	46bd      	mov	sp, r7
 801512a:	bd90      	pop	{r4, r7, pc}
 801512c:	0801d7e4 	.word	0x0801d7e4
 8015130:	0801db78 	.word	0x0801db78
 8015134:	0801d838 	.word	0x0801d838
 8015138:	0801db9c 	.word	0x0801db9c
 801513c:	0801dbc0 	.word	0x0801dbc0
 8015140:	0801dbd0 	.word	0x0801dbd0
 8015144:	0801dbe0 	.word	0x0801dbe0

08015148 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8015148:	b590      	push	{r4, r7, lr}
 801514a:	b085      	sub	sp, #20
 801514c:	af00      	add	r7, sp, #0
 801514e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8015150:	687b      	ldr	r3, [r7, #4]
 8015152:	2b00      	cmp	r3, #0
 8015154:	d106      	bne.n	8015164 <tcp_send_fin+0x1c>
 8015156:	4b21      	ldr	r3, [pc, #132]	; (80151dc <tcp_send_fin+0x94>)
 8015158:	f240 32eb 	movw	r2, #1003	; 0x3eb
 801515c:	4920      	ldr	r1, [pc, #128]	; (80151e0 <tcp_send_fin+0x98>)
 801515e:	4821      	ldr	r0, [pc, #132]	; (80151e4 <tcp_send_fin+0x9c>)
 8015160:	f004 fb8e 	bl	8019880 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8015164:	687b      	ldr	r3, [r7, #4]
 8015166:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015168:	2b00      	cmp	r3, #0
 801516a:	d02e      	beq.n	80151ca <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801516c:	687b      	ldr	r3, [r7, #4]
 801516e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015170:	60fb      	str	r3, [r7, #12]
 8015172:	e002      	b.n	801517a <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8015174:	68fb      	ldr	r3, [r7, #12]
 8015176:	681b      	ldr	r3, [r3, #0]
 8015178:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801517a:	68fb      	ldr	r3, [r7, #12]
 801517c:	681b      	ldr	r3, [r3, #0]
 801517e:	2b00      	cmp	r3, #0
 8015180:	d1f8      	bne.n	8015174 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8015182:	68fb      	ldr	r3, [r7, #12]
 8015184:	68db      	ldr	r3, [r3, #12]
 8015186:	899b      	ldrh	r3, [r3, #12]
 8015188:	b29b      	uxth	r3, r3
 801518a:	4618      	mov	r0, r3
 801518c:	f7fa f8be 	bl	800f30c <lwip_htons>
 8015190:	4603      	mov	r3, r0
 8015192:	b2db      	uxtb	r3, r3
 8015194:	f003 0307 	and.w	r3, r3, #7
 8015198:	2b00      	cmp	r3, #0
 801519a:	d116      	bne.n	80151ca <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 801519c:	68fb      	ldr	r3, [r7, #12]
 801519e:	68db      	ldr	r3, [r3, #12]
 80151a0:	899b      	ldrh	r3, [r3, #12]
 80151a2:	b29c      	uxth	r4, r3
 80151a4:	2001      	movs	r0, #1
 80151a6:	f7fa f8b1 	bl	800f30c <lwip_htons>
 80151aa:	4603      	mov	r3, r0
 80151ac:	461a      	mov	r2, r3
 80151ae:	68fb      	ldr	r3, [r7, #12]
 80151b0:	68db      	ldr	r3, [r3, #12]
 80151b2:	4322      	orrs	r2, r4
 80151b4:	b292      	uxth	r2, r2
 80151b6:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 80151b8:	687b      	ldr	r3, [r7, #4]
 80151ba:	8b5b      	ldrh	r3, [r3, #26]
 80151bc:	f043 0320 	orr.w	r3, r3, #32
 80151c0:	b29a      	uxth	r2, r3
 80151c2:	687b      	ldr	r3, [r7, #4]
 80151c4:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 80151c6:	2300      	movs	r3, #0
 80151c8:	e004      	b.n	80151d4 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 80151ca:	2101      	movs	r1, #1
 80151cc:	6878      	ldr	r0, [r7, #4]
 80151ce:	f000 f80b 	bl	80151e8 <tcp_enqueue_flags>
 80151d2:	4603      	mov	r3, r0
}
 80151d4:	4618      	mov	r0, r3
 80151d6:	3714      	adds	r7, #20
 80151d8:	46bd      	mov	sp, r7
 80151da:	bd90      	pop	{r4, r7, pc}
 80151dc:	0801d7e4 	.word	0x0801d7e4
 80151e0:	0801dbec 	.word	0x0801dbec
 80151e4:	0801d838 	.word	0x0801d838

080151e8 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 80151e8:	b580      	push	{r7, lr}
 80151ea:	b08a      	sub	sp, #40	; 0x28
 80151ec:	af02      	add	r7, sp, #8
 80151ee:	6078      	str	r0, [r7, #4]
 80151f0:	460b      	mov	r3, r1
 80151f2:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 80151f4:	2300      	movs	r3, #0
 80151f6:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 80151f8:	2300      	movs	r3, #0
 80151fa:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 80151fc:	78fb      	ldrb	r3, [r7, #3]
 80151fe:	f003 0303 	and.w	r3, r3, #3
 8015202:	2b00      	cmp	r3, #0
 8015204:	d106      	bne.n	8015214 <tcp_enqueue_flags+0x2c>
 8015206:	4b67      	ldr	r3, [pc, #412]	; (80153a4 <tcp_enqueue_flags+0x1bc>)
 8015208:	f240 4211 	movw	r2, #1041	; 0x411
 801520c:	4966      	ldr	r1, [pc, #408]	; (80153a8 <tcp_enqueue_flags+0x1c0>)
 801520e:	4867      	ldr	r0, [pc, #412]	; (80153ac <tcp_enqueue_flags+0x1c4>)
 8015210:	f004 fb36 	bl	8019880 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8015214:	687b      	ldr	r3, [r7, #4]
 8015216:	2b00      	cmp	r3, #0
 8015218:	d106      	bne.n	8015228 <tcp_enqueue_flags+0x40>
 801521a:	4b62      	ldr	r3, [pc, #392]	; (80153a4 <tcp_enqueue_flags+0x1bc>)
 801521c:	f240 4213 	movw	r2, #1043	; 0x413
 8015220:	4963      	ldr	r1, [pc, #396]	; (80153b0 <tcp_enqueue_flags+0x1c8>)
 8015222:	4862      	ldr	r0, [pc, #392]	; (80153ac <tcp_enqueue_flags+0x1c4>)
 8015224:	f004 fb2c 	bl	8019880 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8015228:	78fb      	ldrb	r3, [r7, #3]
 801522a:	f003 0302 	and.w	r3, r3, #2
 801522e:	2b00      	cmp	r3, #0
 8015230:	d001      	beq.n	8015236 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8015232:	2301      	movs	r3, #1
 8015234:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8015236:	7ffb      	ldrb	r3, [r7, #31]
 8015238:	009b      	lsls	r3, r3, #2
 801523a:	b2db      	uxtb	r3, r3
 801523c:	f003 0304 	and.w	r3, r3, #4
 8015240:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8015242:	7dfb      	ldrb	r3, [r7, #23]
 8015244:	b29b      	uxth	r3, r3
 8015246:	f44f 7220 	mov.w	r2, #640	; 0x280
 801524a:	4619      	mov	r1, r3
 801524c:	2036      	movs	r0, #54	; 0x36
 801524e:	f7fb f95d 	bl	801050c <pbuf_alloc>
 8015252:	6138      	str	r0, [r7, #16]
 8015254:	693b      	ldr	r3, [r7, #16]
 8015256:	2b00      	cmp	r3, #0
 8015258:	d109      	bne.n	801526e <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801525a:	687b      	ldr	r3, [r7, #4]
 801525c:	8b5b      	ldrh	r3, [r3, #26]
 801525e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015262:	b29a      	uxth	r2, r3
 8015264:	687b      	ldr	r3, [r7, #4]
 8015266:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8015268:	f04f 33ff 	mov.w	r3, #4294967295
 801526c:	e095      	b.n	801539a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 801526e:	693b      	ldr	r3, [r7, #16]
 8015270:	895a      	ldrh	r2, [r3, #10]
 8015272:	7dfb      	ldrb	r3, [r7, #23]
 8015274:	b29b      	uxth	r3, r3
 8015276:	429a      	cmp	r2, r3
 8015278:	d206      	bcs.n	8015288 <tcp_enqueue_flags+0xa0>
 801527a:	4b4a      	ldr	r3, [pc, #296]	; (80153a4 <tcp_enqueue_flags+0x1bc>)
 801527c:	f240 4239 	movw	r2, #1081	; 0x439
 8015280:	494c      	ldr	r1, [pc, #304]	; (80153b4 <tcp_enqueue_flags+0x1cc>)
 8015282:	484a      	ldr	r0, [pc, #296]	; (80153ac <tcp_enqueue_flags+0x1c4>)
 8015284:	f004 fafc 	bl	8019880 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8015288:	687b      	ldr	r3, [r7, #4]
 801528a:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 801528c:	78fa      	ldrb	r2, [r7, #3]
 801528e:	7ffb      	ldrb	r3, [r7, #31]
 8015290:	9300      	str	r3, [sp, #0]
 8015292:	460b      	mov	r3, r1
 8015294:	6939      	ldr	r1, [r7, #16]
 8015296:	6878      	ldr	r0, [r7, #4]
 8015298:	f7ff fd70 	bl	8014d7c <tcp_create_segment>
 801529c:	60f8      	str	r0, [r7, #12]
 801529e:	68fb      	ldr	r3, [r7, #12]
 80152a0:	2b00      	cmp	r3, #0
 80152a2:	d109      	bne.n	80152b8 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80152a4:	687b      	ldr	r3, [r7, #4]
 80152a6:	8b5b      	ldrh	r3, [r3, #26]
 80152a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80152ac:	b29a      	uxth	r2, r3
 80152ae:	687b      	ldr	r3, [r7, #4]
 80152b0:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80152b2:	f04f 33ff 	mov.w	r3, #4294967295
 80152b6:	e070      	b.n	801539a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 80152b8:	68fb      	ldr	r3, [r7, #12]
 80152ba:	68db      	ldr	r3, [r3, #12]
 80152bc:	f003 0303 	and.w	r3, r3, #3
 80152c0:	2b00      	cmp	r3, #0
 80152c2:	d006      	beq.n	80152d2 <tcp_enqueue_flags+0xea>
 80152c4:	4b37      	ldr	r3, [pc, #220]	; (80153a4 <tcp_enqueue_flags+0x1bc>)
 80152c6:	f240 4242 	movw	r2, #1090	; 0x442
 80152ca:	493b      	ldr	r1, [pc, #236]	; (80153b8 <tcp_enqueue_flags+0x1d0>)
 80152cc:	4837      	ldr	r0, [pc, #220]	; (80153ac <tcp_enqueue_flags+0x1c4>)
 80152ce:	f004 fad7 	bl	8019880 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 80152d2:	68fb      	ldr	r3, [r7, #12]
 80152d4:	891b      	ldrh	r3, [r3, #8]
 80152d6:	2b00      	cmp	r3, #0
 80152d8:	d006      	beq.n	80152e8 <tcp_enqueue_flags+0x100>
 80152da:	4b32      	ldr	r3, [pc, #200]	; (80153a4 <tcp_enqueue_flags+0x1bc>)
 80152dc:	f240 4243 	movw	r2, #1091	; 0x443
 80152e0:	4936      	ldr	r1, [pc, #216]	; (80153bc <tcp_enqueue_flags+0x1d4>)
 80152e2:	4832      	ldr	r0, [pc, #200]	; (80153ac <tcp_enqueue_flags+0x1c4>)
 80152e4:	f004 facc 	bl	8019880 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 80152e8:	687b      	ldr	r3, [r7, #4]
 80152ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80152ec:	2b00      	cmp	r3, #0
 80152ee:	d103      	bne.n	80152f8 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 80152f0:	687b      	ldr	r3, [r7, #4]
 80152f2:	68fa      	ldr	r2, [r7, #12]
 80152f4:	66da      	str	r2, [r3, #108]	; 0x6c
 80152f6:	e00d      	b.n	8015314 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 80152f8:	687b      	ldr	r3, [r7, #4]
 80152fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80152fc:	61bb      	str	r3, [r7, #24]
 80152fe:	e002      	b.n	8015306 <tcp_enqueue_flags+0x11e>
 8015300:	69bb      	ldr	r3, [r7, #24]
 8015302:	681b      	ldr	r3, [r3, #0]
 8015304:	61bb      	str	r3, [r7, #24]
 8015306:	69bb      	ldr	r3, [r7, #24]
 8015308:	681b      	ldr	r3, [r3, #0]
 801530a:	2b00      	cmp	r3, #0
 801530c:	d1f8      	bne.n	8015300 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 801530e:	69bb      	ldr	r3, [r7, #24]
 8015310:	68fa      	ldr	r2, [r7, #12]
 8015312:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8015314:	687b      	ldr	r3, [r7, #4]
 8015316:	2200      	movs	r2, #0
 8015318:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 801531c:	78fb      	ldrb	r3, [r7, #3]
 801531e:	f003 0302 	and.w	r3, r3, #2
 8015322:	2b00      	cmp	r3, #0
 8015324:	d104      	bne.n	8015330 <tcp_enqueue_flags+0x148>
 8015326:	78fb      	ldrb	r3, [r7, #3]
 8015328:	f003 0301 	and.w	r3, r3, #1
 801532c:	2b00      	cmp	r3, #0
 801532e:	d004      	beq.n	801533a <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8015330:	687b      	ldr	r3, [r7, #4]
 8015332:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8015334:	1c5a      	adds	r2, r3, #1
 8015336:	687b      	ldr	r3, [r7, #4]
 8015338:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 801533a:	78fb      	ldrb	r3, [r7, #3]
 801533c:	f003 0301 	and.w	r3, r3, #1
 8015340:	2b00      	cmp	r3, #0
 8015342:	d006      	beq.n	8015352 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8015344:	687b      	ldr	r3, [r7, #4]
 8015346:	8b5b      	ldrh	r3, [r3, #26]
 8015348:	f043 0320 	orr.w	r3, r3, #32
 801534c:	b29a      	uxth	r2, r3
 801534e:	687b      	ldr	r3, [r7, #4]
 8015350:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8015352:	68fb      	ldr	r3, [r7, #12]
 8015354:	685b      	ldr	r3, [r3, #4]
 8015356:	4618      	mov	r0, r3
 8015358:	f7fb fc44 	bl	8010be4 <pbuf_clen>
 801535c:	4603      	mov	r3, r0
 801535e:	461a      	mov	r2, r3
 8015360:	687b      	ldr	r3, [r7, #4]
 8015362:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8015366:	4413      	add	r3, r2
 8015368:	b29a      	uxth	r2, r3
 801536a:	687b      	ldr	r3, [r7, #4]
 801536c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8015370:	687b      	ldr	r3, [r7, #4]
 8015372:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8015376:	2b00      	cmp	r3, #0
 8015378:	d00e      	beq.n	8015398 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 801537a:	687b      	ldr	r3, [r7, #4]
 801537c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801537e:	2b00      	cmp	r3, #0
 8015380:	d10a      	bne.n	8015398 <tcp_enqueue_flags+0x1b0>
 8015382:	687b      	ldr	r3, [r7, #4]
 8015384:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015386:	2b00      	cmp	r3, #0
 8015388:	d106      	bne.n	8015398 <tcp_enqueue_flags+0x1b0>
 801538a:	4b06      	ldr	r3, [pc, #24]	; (80153a4 <tcp_enqueue_flags+0x1bc>)
 801538c:	f240 4265 	movw	r2, #1125	; 0x465
 8015390:	490b      	ldr	r1, [pc, #44]	; (80153c0 <tcp_enqueue_flags+0x1d8>)
 8015392:	4806      	ldr	r0, [pc, #24]	; (80153ac <tcp_enqueue_flags+0x1c4>)
 8015394:	f004 fa74 	bl	8019880 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8015398:	2300      	movs	r3, #0
}
 801539a:	4618      	mov	r0, r3
 801539c:	3720      	adds	r7, #32
 801539e:	46bd      	mov	sp, r7
 80153a0:	bd80      	pop	{r7, pc}
 80153a2:	bf00      	nop
 80153a4:	0801d7e4 	.word	0x0801d7e4
 80153a8:	0801dc08 	.word	0x0801dc08
 80153ac:	0801d838 	.word	0x0801d838
 80153b0:	0801dc60 	.word	0x0801dc60
 80153b4:	0801dc80 	.word	0x0801dc80
 80153b8:	0801dcbc 	.word	0x0801dcbc
 80153bc:	0801dcd4 	.word	0x0801dcd4
 80153c0:	0801dd00 	.word	0x0801dd00

080153c4 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 80153c4:	b5b0      	push	{r4, r5, r7, lr}
 80153c6:	b08a      	sub	sp, #40	; 0x28
 80153c8:	af00      	add	r7, sp, #0
 80153ca:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 80153cc:	687b      	ldr	r3, [r7, #4]
 80153ce:	2b00      	cmp	r3, #0
 80153d0:	d106      	bne.n	80153e0 <tcp_output+0x1c>
 80153d2:	4b8a      	ldr	r3, [pc, #552]	; (80155fc <tcp_output+0x238>)
 80153d4:	f240 42e1 	movw	r2, #1249	; 0x4e1
 80153d8:	4989      	ldr	r1, [pc, #548]	; (8015600 <tcp_output+0x23c>)
 80153da:	488a      	ldr	r0, [pc, #552]	; (8015604 <tcp_output+0x240>)
 80153dc:	f004 fa50 	bl	8019880 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 80153e0:	687b      	ldr	r3, [r7, #4]
 80153e2:	7d1b      	ldrb	r3, [r3, #20]
 80153e4:	2b01      	cmp	r3, #1
 80153e6:	d106      	bne.n	80153f6 <tcp_output+0x32>
 80153e8:	4b84      	ldr	r3, [pc, #528]	; (80155fc <tcp_output+0x238>)
 80153ea:	f240 42e3 	movw	r2, #1251	; 0x4e3
 80153ee:	4986      	ldr	r1, [pc, #536]	; (8015608 <tcp_output+0x244>)
 80153f0:	4884      	ldr	r0, [pc, #528]	; (8015604 <tcp_output+0x240>)
 80153f2:	f004 fa45 	bl	8019880 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 80153f6:	4b85      	ldr	r3, [pc, #532]	; (801560c <tcp_output+0x248>)
 80153f8:	681b      	ldr	r3, [r3, #0]
 80153fa:	687a      	ldr	r2, [r7, #4]
 80153fc:	429a      	cmp	r2, r3
 80153fe:	d101      	bne.n	8015404 <tcp_output+0x40>
    return ERR_OK;
 8015400:	2300      	movs	r3, #0
 8015402:	e1ce      	b.n	80157a2 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8015404:	687b      	ldr	r3, [r7, #4]
 8015406:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801540a:	687b      	ldr	r3, [r7, #4]
 801540c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8015410:	4293      	cmp	r3, r2
 8015412:	bf28      	it	cs
 8015414:	4613      	movcs	r3, r2
 8015416:	b29b      	uxth	r3, r3
 8015418:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 801541a:	687b      	ldr	r3, [r7, #4]
 801541c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801541e:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8015420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015422:	2b00      	cmp	r3, #0
 8015424:	d10b      	bne.n	801543e <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8015426:	687b      	ldr	r3, [r7, #4]
 8015428:	8b5b      	ldrh	r3, [r3, #26]
 801542a:	f003 0302 	and.w	r3, r3, #2
 801542e:	2b00      	cmp	r3, #0
 8015430:	f000 81aa 	beq.w	8015788 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8015434:	6878      	ldr	r0, [r7, #4]
 8015436:	f000 fdcb 	bl	8015fd0 <tcp_send_empty_ack>
 801543a:	4603      	mov	r3, r0
 801543c:	e1b1      	b.n	80157a2 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 801543e:	6879      	ldr	r1, [r7, #4]
 8015440:	687b      	ldr	r3, [r7, #4]
 8015442:	3304      	adds	r3, #4
 8015444:	461a      	mov	r2, r3
 8015446:	6878      	ldr	r0, [r7, #4]
 8015448:	f7ff fc7c 	bl	8014d44 <tcp_route>
 801544c:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 801544e:	697b      	ldr	r3, [r7, #20]
 8015450:	2b00      	cmp	r3, #0
 8015452:	d102      	bne.n	801545a <tcp_output+0x96>
    return ERR_RTE;
 8015454:	f06f 0303 	mvn.w	r3, #3
 8015458:	e1a3      	b.n	80157a2 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 801545a:	687b      	ldr	r3, [r7, #4]
 801545c:	2b00      	cmp	r3, #0
 801545e:	d003      	beq.n	8015468 <tcp_output+0xa4>
 8015460:	687b      	ldr	r3, [r7, #4]
 8015462:	681b      	ldr	r3, [r3, #0]
 8015464:	2b00      	cmp	r3, #0
 8015466:	d111      	bne.n	801548c <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8015468:	697b      	ldr	r3, [r7, #20]
 801546a:	2b00      	cmp	r3, #0
 801546c:	d002      	beq.n	8015474 <tcp_output+0xb0>
 801546e:	697b      	ldr	r3, [r7, #20]
 8015470:	3304      	adds	r3, #4
 8015472:	e000      	b.n	8015476 <tcp_output+0xb2>
 8015474:	2300      	movs	r3, #0
 8015476:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8015478:	693b      	ldr	r3, [r7, #16]
 801547a:	2b00      	cmp	r3, #0
 801547c:	d102      	bne.n	8015484 <tcp_output+0xc0>
      return ERR_RTE;
 801547e:	f06f 0303 	mvn.w	r3, #3
 8015482:	e18e      	b.n	80157a2 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8015484:	693b      	ldr	r3, [r7, #16]
 8015486:	681a      	ldr	r2, [r3, #0]
 8015488:	687b      	ldr	r3, [r7, #4]
 801548a:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 801548c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801548e:	68db      	ldr	r3, [r3, #12]
 8015490:	685b      	ldr	r3, [r3, #4]
 8015492:	4618      	mov	r0, r3
 8015494:	f7f9 ff4f 	bl	800f336 <lwip_htonl>
 8015498:	4602      	mov	r2, r0
 801549a:	687b      	ldr	r3, [r7, #4]
 801549c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801549e:	1ad3      	subs	r3, r2, r3
 80154a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80154a2:	8912      	ldrh	r2, [r2, #8]
 80154a4:	4413      	add	r3, r2
 80154a6:	69ba      	ldr	r2, [r7, #24]
 80154a8:	429a      	cmp	r2, r3
 80154aa:	d227      	bcs.n	80154fc <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 80154ac:	687b      	ldr	r3, [r7, #4]
 80154ae:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80154b2:	461a      	mov	r2, r3
 80154b4:	69bb      	ldr	r3, [r7, #24]
 80154b6:	4293      	cmp	r3, r2
 80154b8:	d114      	bne.n	80154e4 <tcp_output+0x120>
 80154ba:	687b      	ldr	r3, [r7, #4]
 80154bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80154be:	2b00      	cmp	r3, #0
 80154c0:	d110      	bne.n	80154e4 <tcp_output+0x120>
 80154c2:	687b      	ldr	r3, [r7, #4]
 80154c4:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80154c8:	2b00      	cmp	r3, #0
 80154ca:	d10b      	bne.n	80154e4 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 80154cc:	687b      	ldr	r3, [r7, #4]
 80154ce:	2200      	movs	r2, #0
 80154d0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 80154d4:	687b      	ldr	r3, [r7, #4]
 80154d6:	2201      	movs	r2, #1
 80154d8:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 80154dc:	687b      	ldr	r3, [r7, #4]
 80154de:	2200      	movs	r2, #0
 80154e0:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 80154e4:	687b      	ldr	r3, [r7, #4]
 80154e6:	8b5b      	ldrh	r3, [r3, #26]
 80154e8:	f003 0302 	and.w	r3, r3, #2
 80154ec:	2b00      	cmp	r3, #0
 80154ee:	f000 814d 	beq.w	801578c <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 80154f2:	6878      	ldr	r0, [r7, #4]
 80154f4:	f000 fd6c 	bl	8015fd0 <tcp_send_empty_ack>
 80154f8:	4603      	mov	r3, r0
 80154fa:	e152      	b.n	80157a2 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 80154fc:	687b      	ldr	r3, [r7, #4]
 80154fe:	2200      	movs	r2, #0
 8015500:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8015504:	687b      	ldr	r3, [r7, #4]
 8015506:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015508:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 801550a:	6a3b      	ldr	r3, [r7, #32]
 801550c:	2b00      	cmp	r3, #0
 801550e:	f000 811c 	beq.w	801574a <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8015512:	e002      	b.n	801551a <tcp_output+0x156>
 8015514:	6a3b      	ldr	r3, [r7, #32]
 8015516:	681b      	ldr	r3, [r3, #0]
 8015518:	623b      	str	r3, [r7, #32]
 801551a:	6a3b      	ldr	r3, [r7, #32]
 801551c:	681b      	ldr	r3, [r3, #0]
 801551e:	2b00      	cmp	r3, #0
 8015520:	d1f8      	bne.n	8015514 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8015522:	e112      	b.n	801574a <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8015524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015526:	68db      	ldr	r3, [r3, #12]
 8015528:	899b      	ldrh	r3, [r3, #12]
 801552a:	b29b      	uxth	r3, r3
 801552c:	4618      	mov	r0, r3
 801552e:	f7f9 feed 	bl	800f30c <lwip_htons>
 8015532:	4603      	mov	r3, r0
 8015534:	b2db      	uxtb	r3, r3
 8015536:	f003 0304 	and.w	r3, r3, #4
 801553a:	2b00      	cmp	r3, #0
 801553c:	d006      	beq.n	801554c <tcp_output+0x188>
 801553e:	4b2f      	ldr	r3, [pc, #188]	; (80155fc <tcp_output+0x238>)
 8015540:	f240 5236 	movw	r2, #1334	; 0x536
 8015544:	4932      	ldr	r1, [pc, #200]	; (8015610 <tcp_output+0x24c>)
 8015546:	482f      	ldr	r0, [pc, #188]	; (8015604 <tcp_output+0x240>)
 8015548:	f004 f99a 	bl	8019880 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801554c:	687b      	ldr	r3, [r7, #4]
 801554e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015550:	2b00      	cmp	r3, #0
 8015552:	d01f      	beq.n	8015594 <tcp_output+0x1d0>
 8015554:	687b      	ldr	r3, [r7, #4]
 8015556:	8b5b      	ldrh	r3, [r3, #26]
 8015558:	f003 0344 	and.w	r3, r3, #68	; 0x44
 801555c:	2b00      	cmp	r3, #0
 801555e:	d119      	bne.n	8015594 <tcp_output+0x1d0>
 8015560:	687b      	ldr	r3, [r7, #4]
 8015562:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015564:	2b00      	cmp	r3, #0
 8015566:	d00b      	beq.n	8015580 <tcp_output+0x1bc>
 8015568:	687b      	ldr	r3, [r7, #4]
 801556a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801556c:	681b      	ldr	r3, [r3, #0]
 801556e:	2b00      	cmp	r3, #0
 8015570:	d110      	bne.n	8015594 <tcp_output+0x1d0>
 8015572:	687b      	ldr	r3, [r7, #4]
 8015574:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015576:	891a      	ldrh	r2, [r3, #8]
 8015578:	687b      	ldr	r3, [r7, #4]
 801557a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801557c:	429a      	cmp	r2, r3
 801557e:	d209      	bcs.n	8015594 <tcp_output+0x1d0>
 8015580:	687b      	ldr	r3, [r7, #4]
 8015582:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8015586:	2b00      	cmp	r3, #0
 8015588:	d004      	beq.n	8015594 <tcp_output+0x1d0>
 801558a:	687b      	ldr	r3, [r7, #4]
 801558c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8015590:	2b0f      	cmp	r3, #15
 8015592:	d901      	bls.n	8015598 <tcp_output+0x1d4>
 8015594:	2301      	movs	r3, #1
 8015596:	e000      	b.n	801559a <tcp_output+0x1d6>
 8015598:	2300      	movs	r3, #0
 801559a:	2b00      	cmp	r3, #0
 801559c:	d106      	bne.n	80155ac <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 801559e:	687b      	ldr	r3, [r7, #4]
 80155a0:	8b5b      	ldrh	r3, [r3, #26]
 80155a2:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80155a6:	2b00      	cmp	r3, #0
 80155a8:	f000 80e4 	beq.w	8015774 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 80155ac:	687b      	ldr	r3, [r7, #4]
 80155ae:	7d1b      	ldrb	r3, [r3, #20]
 80155b0:	2b02      	cmp	r3, #2
 80155b2:	d00d      	beq.n	80155d0 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 80155b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80155b6:	68db      	ldr	r3, [r3, #12]
 80155b8:	899b      	ldrh	r3, [r3, #12]
 80155ba:	b29c      	uxth	r4, r3
 80155bc:	2010      	movs	r0, #16
 80155be:	f7f9 fea5 	bl	800f30c <lwip_htons>
 80155c2:	4603      	mov	r3, r0
 80155c4:	461a      	mov	r2, r3
 80155c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80155c8:	68db      	ldr	r3, [r3, #12]
 80155ca:	4322      	orrs	r2, r4
 80155cc:	b292      	uxth	r2, r2
 80155ce:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 80155d0:	697a      	ldr	r2, [r7, #20]
 80155d2:	6879      	ldr	r1, [r7, #4]
 80155d4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80155d6:	f000 f909 	bl	80157ec <tcp_output_segment>
 80155da:	4603      	mov	r3, r0
 80155dc:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 80155de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80155e2:	2b00      	cmp	r3, #0
 80155e4:	d016      	beq.n	8015614 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80155e6:	687b      	ldr	r3, [r7, #4]
 80155e8:	8b5b      	ldrh	r3, [r3, #26]
 80155ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80155ee:	b29a      	uxth	r2, r3
 80155f0:	687b      	ldr	r3, [r7, #4]
 80155f2:	835a      	strh	r2, [r3, #26]
      return err;
 80155f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80155f8:	e0d3      	b.n	80157a2 <tcp_output+0x3de>
 80155fa:	bf00      	nop
 80155fc:	0801d7e4 	.word	0x0801d7e4
 8015600:	0801dd28 	.word	0x0801dd28
 8015604:	0801d838 	.word	0x0801d838
 8015608:	0801dd40 	.word	0x0801dd40
 801560c:	200070d8 	.word	0x200070d8
 8015610:	0801dd68 	.word	0x0801dd68
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8015614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015616:	681a      	ldr	r2, [r3, #0]
 8015618:	687b      	ldr	r3, [r7, #4]
 801561a:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 801561c:	687b      	ldr	r3, [r7, #4]
 801561e:	7d1b      	ldrb	r3, [r3, #20]
 8015620:	2b02      	cmp	r3, #2
 8015622:	d006      	beq.n	8015632 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8015624:	687b      	ldr	r3, [r7, #4]
 8015626:	8b5b      	ldrh	r3, [r3, #26]
 8015628:	f023 0303 	bic.w	r3, r3, #3
 801562c:	b29a      	uxth	r2, r3
 801562e:	687b      	ldr	r3, [r7, #4]
 8015630:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8015632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015634:	68db      	ldr	r3, [r3, #12]
 8015636:	685b      	ldr	r3, [r3, #4]
 8015638:	4618      	mov	r0, r3
 801563a:	f7f9 fe7c 	bl	800f336 <lwip_htonl>
 801563e:	4604      	mov	r4, r0
 8015640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015642:	891b      	ldrh	r3, [r3, #8]
 8015644:	461d      	mov	r5, r3
 8015646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015648:	68db      	ldr	r3, [r3, #12]
 801564a:	899b      	ldrh	r3, [r3, #12]
 801564c:	b29b      	uxth	r3, r3
 801564e:	4618      	mov	r0, r3
 8015650:	f7f9 fe5c 	bl	800f30c <lwip_htons>
 8015654:	4603      	mov	r3, r0
 8015656:	b2db      	uxtb	r3, r3
 8015658:	f003 0303 	and.w	r3, r3, #3
 801565c:	2b00      	cmp	r3, #0
 801565e:	d001      	beq.n	8015664 <tcp_output+0x2a0>
 8015660:	2301      	movs	r3, #1
 8015662:	e000      	b.n	8015666 <tcp_output+0x2a2>
 8015664:	2300      	movs	r3, #0
 8015666:	442b      	add	r3, r5
 8015668:	4423      	add	r3, r4
 801566a:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801566c:	687b      	ldr	r3, [r7, #4]
 801566e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8015670:	68bb      	ldr	r3, [r7, #8]
 8015672:	1ad3      	subs	r3, r2, r3
 8015674:	2b00      	cmp	r3, #0
 8015676:	da02      	bge.n	801567e <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8015678:	687b      	ldr	r3, [r7, #4]
 801567a:	68ba      	ldr	r2, [r7, #8]
 801567c:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 801567e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015680:	891b      	ldrh	r3, [r3, #8]
 8015682:	461c      	mov	r4, r3
 8015684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015686:	68db      	ldr	r3, [r3, #12]
 8015688:	899b      	ldrh	r3, [r3, #12]
 801568a:	b29b      	uxth	r3, r3
 801568c:	4618      	mov	r0, r3
 801568e:	f7f9 fe3d 	bl	800f30c <lwip_htons>
 8015692:	4603      	mov	r3, r0
 8015694:	b2db      	uxtb	r3, r3
 8015696:	f003 0303 	and.w	r3, r3, #3
 801569a:	2b00      	cmp	r3, #0
 801569c:	d001      	beq.n	80156a2 <tcp_output+0x2de>
 801569e:	2301      	movs	r3, #1
 80156a0:	e000      	b.n	80156a4 <tcp_output+0x2e0>
 80156a2:	2300      	movs	r3, #0
 80156a4:	4423      	add	r3, r4
 80156a6:	2b00      	cmp	r3, #0
 80156a8:	d049      	beq.n	801573e <tcp_output+0x37a>
      seg->next = NULL;
 80156aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80156ac:	2200      	movs	r2, #0
 80156ae:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 80156b0:	687b      	ldr	r3, [r7, #4]
 80156b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80156b4:	2b00      	cmp	r3, #0
 80156b6:	d105      	bne.n	80156c4 <tcp_output+0x300>
        pcb->unacked = seg;
 80156b8:	687b      	ldr	r3, [r7, #4]
 80156ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80156bc:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 80156be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80156c0:	623b      	str	r3, [r7, #32]
 80156c2:	e03f      	b.n	8015744 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 80156c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80156c6:	68db      	ldr	r3, [r3, #12]
 80156c8:	685b      	ldr	r3, [r3, #4]
 80156ca:	4618      	mov	r0, r3
 80156cc:	f7f9 fe33 	bl	800f336 <lwip_htonl>
 80156d0:	4604      	mov	r4, r0
 80156d2:	6a3b      	ldr	r3, [r7, #32]
 80156d4:	68db      	ldr	r3, [r3, #12]
 80156d6:	685b      	ldr	r3, [r3, #4]
 80156d8:	4618      	mov	r0, r3
 80156da:	f7f9 fe2c 	bl	800f336 <lwip_htonl>
 80156de:	4603      	mov	r3, r0
 80156e0:	1ae3      	subs	r3, r4, r3
 80156e2:	2b00      	cmp	r3, #0
 80156e4:	da24      	bge.n	8015730 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 80156e6:	687b      	ldr	r3, [r7, #4]
 80156e8:	3370      	adds	r3, #112	; 0x70
 80156ea:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80156ec:	e002      	b.n	80156f4 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 80156ee:	69fb      	ldr	r3, [r7, #28]
 80156f0:	681b      	ldr	r3, [r3, #0]
 80156f2:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80156f4:	69fb      	ldr	r3, [r7, #28]
 80156f6:	681b      	ldr	r3, [r3, #0]
 80156f8:	2b00      	cmp	r3, #0
 80156fa:	d011      	beq.n	8015720 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80156fc:	69fb      	ldr	r3, [r7, #28]
 80156fe:	681b      	ldr	r3, [r3, #0]
 8015700:	68db      	ldr	r3, [r3, #12]
 8015702:	685b      	ldr	r3, [r3, #4]
 8015704:	4618      	mov	r0, r3
 8015706:	f7f9 fe16 	bl	800f336 <lwip_htonl>
 801570a:	4604      	mov	r4, r0
 801570c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801570e:	68db      	ldr	r3, [r3, #12]
 8015710:	685b      	ldr	r3, [r3, #4]
 8015712:	4618      	mov	r0, r3
 8015714:	f7f9 fe0f 	bl	800f336 <lwip_htonl>
 8015718:	4603      	mov	r3, r0
 801571a:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 801571c:	2b00      	cmp	r3, #0
 801571e:	dbe6      	blt.n	80156ee <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8015720:	69fb      	ldr	r3, [r7, #28]
 8015722:	681a      	ldr	r2, [r3, #0]
 8015724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015726:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8015728:	69fb      	ldr	r3, [r7, #28]
 801572a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801572c:	601a      	str	r2, [r3, #0]
 801572e:	e009      	b.n	8015744 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8015730:	6a3b      	ldr	r3, [r7, #32]
 8015732:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015734:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8015736:	6a3b      	ldr	r3, [r7, #32]
 8015738:	681b      	ldr	r3, [r3, #0]
 801573a:	623b      	str	r3, [r7, #32]
 801573c:	e002      	b.n	8015744 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 801573e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015740:	f7fc fc3f 	bl	8011fc2 <tcp_seg_free>
    }
    seg = pcb->unsent;
 8015744:	687b      	ldr	r3, [r7, #4]
 8015746:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015748:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 801574a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801574c:	2b00      	cmp	r3, #0
 801574e:	d012      	beq.n	8015776 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8015750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015752:	68db      	ldr	r3, [r3, #12]
 8015754:	685b      	ldr	r3, [r3, #4]
 8015756:	4618      	mov	r0, r3
 8015758:	f7f9 fded 	bl	800f336 <lwip_htonl>
 801575c:	4602      	mov	r2, r0
 801575e:	687b      	ldr	r3, [r7, #4]
 8015760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015762:	1ad3      	subs	r3, r2, r3
 8015764:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015766:	8912      	ldrh	r2, [r2, #8]
 8015768:	4413      	add	r3, r2
  while (seg != NULL &&
 801576a:	69ba      	ldr	r2, [r7, #24]
 801576c:	429a      	cmp	r2, r3
 801576e:	f4bf aed9 	bcs.w	8015524 <tcp_output+0x160>
 8015772:	e000      	b.n	8015776 <tcp_output+0x3b2>
      break;
 8015774:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8015776:	687b      	ldr	r3, [r7, #4]
 8015778:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801577a:	2b00      	cmp	r3, #0
 801577c:	d108      	bne.n	8015790 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801577e:	687b      	ldr	r3, [r7, #4]
 8015780:	2200      	movs	r2, #0
 8015782:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8015786:	e004      	b.n	8015792 <tcp_output+0x3ce>
    goto output_done;
 8015788:	bf00      	nop
 801578a:	e002      	b.n	8015792 <tcp_output+0x3ce>
    goto output_done;
 801578c:	bf00      	nop
 801578e:	e000      	b.n	8015792 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8015790:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8015792:	687b      	ldr	r3, [r7, #4]
 8015794:	8b5b      	ldrh	r3, [r3, #26]
 8015796:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801579a:	b29a      	uxth	r2, r3
 801579c:	687b      	ldr	r3, [r7, #4]
 801579e:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 80157a0:	2300      	movs	r3, #0
}
 80157a2:	4618      	mov	r0, r3
 80157a4:	3728      	adds	r7, #40	; 0x28
 80157a6:	46bd      	mov	sp, r7
 80157a8:	bdb0      	pop	{r4, r5, r7, pc}
 80157aa:	bf00      	nop

080157ac <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 80157ac:	b580      	push	{r7, lr}
 80157ae:	b082      	sub	sp, #8
 80157b0:	af00      	add	r7, sp, #0
 80157b2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 80157b4:	687b      	ldr	r3, [r7, #4]
 80157b6:	2b00      	cmp	r3, #0
 80157b8:	d106      	bne.n	80157c8 <tcp_output_segment_busy+0x1c>
 80157ba:	4b09      	ldr	r3, [pc, #36]	; (80157e0 <tcp_output_segment_busy+0x34>)
 80157bc:	f240 529a 	movw	r2, #1434	; 0x59a
 80157c0:	4908      	ldr	r1, [pc, #32]	; (80157e4 <tcp_output_segment_busy+0x38>)
 80157c2:	4809      	ldr	r0, [pc, #36]	; (80157e8 <tcp_output_segment_busy+0x3c>)
 80157c4:	f004 f85c 	bl	8019880 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 80157c8:	687b      	ldr	r3, [r7, #4]
 80157ca:	685b      	ldr	r3, [r3, #4]
 80157cc:	7b9b      	ldrb	r3, [r3, #14]
 80157ce:	2b01      	cmp	r3, #1
 80157d0:	d001      	beq.n	80157d6 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 80157d2:	2301      	movs	r3, #1
 80157d4:	e000      	b.n	80157d8 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 80157d6:	2300      	movs	r3, #0
}
 80157d8:	4618      	mov	r0, r3
 80157da:	3708      	adds	r7, #8
 80157dc:	46bd      	mov	sp, r7
 80157de:	bd80      	pop	{r7, pc}
 80157e0:	0801d7e4 	.word	0x0801d7e4
 80157e4:	0801dd80 	.word	0x0801dd80
 80157e8:	0801d838 	.word	0x0801d838

080157ec <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 80157ec:	b5b0      	push	{r4, r5, r7, lr}
 80157ee:	b08c      	sub	sp, #48	; 0x30
 80157f0:	af04      	add	r7, sp, #16
 80157f2:	60f8      	str	r0, [r7, #12]
 80157f4:	60b9      	str	r1, [r7, #8]
 80157f6:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 80157f8:	68fb      	ldr	r3, [r7, #12]
 80157fa:	2b00      	cmp	r3, #0
 80157fc:	d106      	bne.n	801580c <tcp_output_segment+0x20>
 80157fe:	4b64      	ldr	r3, [pc, #400]	; (8015990 <tcp_output_segment+0x1a4>)
 8015800:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8015804:	4963      	ldr	r1, [pc, #396]	; (8015994 <tcp_output_segment+0x1a8>)
 8015806:	4864      	ldr	r0, [pc, #400]	; (8015998 <tcp_output_segment+0x1ac>)
 8015808:	f004 f83a 	bl	8019880 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 801580c:	68bb      	ldr	r3, [r7, #8]
 801580e:	2b00      	cmp	r3, #0
 8015810:	d106      	bne.n	8015820 <tcp_output_segment+0x34>
 8015812:	4b5f      	ldr	r3, [pc, #380]	; (8015990 <tcp_output_segment+0x1a4>)
 8015814:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8015818:	4960      	ldr	r1, [pc, #384]	; (801599c <tcp_output_segment+0x1b0>)
 801581a:	485f      	ldr	r0, [pc, #380]	; (8015998 <tcp_output_segment+0x1ac>)
 801581c:	f004 f830 	bl	8019880 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8015820:	687b      	ldr	r3, [r7, #4]
 8015822:	2b00      	cmp	r3, #0
 8015824:	d106      	bne.n	8015834 <tcp_output_segment+0x48>
 8015826:	4b5a      	ldr	r3, [pc, #360]	; (8015990 <tcp_output_segment+0x1a4>)
 8015828:	f240 52ba 	movw	r2, #1466	; 0x5ba
 801582c:	495c      	ldr	r1, [pc, #368]	; (80159a0 <tcp_output_segment+0x1b4>)
 801582e:	485a      	ldr	r0, [pc, #360]	; (8015998 <tcp_output_segment+0x1ac>)
 8015830:	f004 f826 	bl	8019880 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8015834:	68f8      	ldr	r0, [r7, #12]
 8015836:	f7ff ffb9 	bl	80157ac <tcp_output_segment_busy>
 801583a:	4603      	mov	r3, r0
 801583c:	2b00      	cmp	r3, #0
 801583e:	d001      	beq.n	8015844 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8015840:	2300      	movs	r3, #0
 8015842:	e0a1      	b.n	8015988 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8015844:	68bb      	ldr	r3, [r7, #8]
 8015846:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015848:	68fb      	ldr	r3, [r7, #12]
 801584a:	68dc      	ldr	r4, [r3, #12]
 801584c:	4610      	mov	r0, r2
 801584e:	f7f9 fd72 	bl	800f336 <lwip_htonl>
 8015852:	4603      	mov	r3, r0
 8015854:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8015856:	68bb      	ldr	r3, [r7, #8]
 8015858:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 801585a:	68fb      	ldr	r3, [r7, #12]
 801585c:	68dc      	ldr	r4, [r3, #12]
 801585e:	4610      	mov	r0, r2
 8015860:	f7f9 fd54 	bl	800f30c <lwip_htons>
 8015864:	4603      	mov	r3, r0
 8015866:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8015868:	68bb      	ldr	r3, [r7, #8]
 801586a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801586c:	68ba      	ldr	r2, [r7, #8]
 801586e:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8015870:	441a      	add	r2, r3
 8015872:	68bb      	ldr	r3, [r7, #8]
 8015874:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8015876:	68fb      	ldr	r3, [r7, #12]
 8015878:	68db      	ldr	r3, [r3, #12]
 801587a:	3314      	adds	r3, #20
 801587c:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 801587e:	68fb      	ldr	r3, [r7, #12]
 8015880:	7a9b      	ldrb	r3, [r3, #10]
 8015882:	f003 0301 	and.w	r3, r3, #1
 8015886:	2b00      	cmp	r3, #0
 8015888:	d015      	beq.n	80158b6 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 801588a:	68bb      	ldr	r3, [r7, #8]
 801588c:	3304      	adds	r3, #4
 801588e:	461a      	mov	r2, r3
 8015890:	6879      	ldr	r1, [r7, #4]
 8015892:	f240 50b4 	movw	r0, #1460	; 0x5b4
 8015896:	f7fc fe8b 	bl	80125b0 <tcp_eff_send_mss_netif>
 801589a:	4603      	mov	r3, r0
 801589c:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 801589e:	8b7b      	ldrh	r3, [r7, #26]
 80158a0:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 80158a4:	4618      	mov	r0, r3
 80158a6:	f7f9 fd46 	bl	800f336 <lwip_htonl>
 80158aa:	4602      	mov	r2, r0
 80158ac:	69fb      	ldr	r3, [r7, #28]
 80158ae:	601a      	str	r2, [r3, #0]
    opts += 1;
 80158b0:	69fb      	ldr	r3, [r7, #28]
 80158b2:	3304      	adds	r3, #4
 80158b4:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 80158b6:	68bb      	ldr	r3, [r7, #8]
 80158b8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80158bc:	2b00      	cmp	r3, #0
 80158be:	da02      	bge.n	80158c6 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 80158c0:	68bb      	ldr	r3, [r7, #8]
 80158c2:	2200      	movs	r2, #0
 80158c4:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 80158c6:	68bb      	ldr	r3, [r7, #8]
 80158c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80158ca:	2b00      	cmp	r3, #0
 80158cc:	d10c      	bne.n	80158e8 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 80158ce:	4b35      	ldr	r3, [pc, #212]	; (80159a4 <tcp_output_segment+0x1b8>)
 80158d0:	681a      	ldr	r2, [r3, #0]
 80158d2:	68bb      	ldr	r3, [r7, #8]
 80158d4:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 80158d6:	68fb      	ldr	r3, [r7, #12]
 80158d8:	68db      	ldr	r3, [r3, #12]
 80158da:	685b      	ldr	r3, [r3, #4]
 80158dc:	4618      	mov	r0, r3
 80158de:	f7f9 fd2a 	bl	800f336 <lwip_htonl>
 80158e2:	4602      	mov	r2, r0
 80158e4:	68bb      	ldr	r3, [r7, #8]
 80158e6:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 80158e8:	68fb      	ldr	r3, [r7, #12]
 80158ea:	68da      	ldr	r2, [r3, #12]
 80158ec:	68fb      	ldr	r3, [r7, #12]
 80158ee:	685b      	ldr	r3, [r3, #4]
 80158f0:	685b      	ldr	r3, [r3, #4]
 80158f2:	1ad3      	subs	r3, r2, r3
 80158f4:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 80158f6:	68fb      	ldr	r3, [r7, #12]
 80158f8:	685b      	ldr	r3, [r3, #4]
 80158fa:	8959      	ldrh	r1, [r3, #10]
 80158fc:	68fb      	ldr	r3, [r7, #12]
 80158fe:	685b      	ldr	r3, [r3, #4]
 8015900:	8b3a      	ldrh	r2, [r7, #24]
 8015902:	1a8a      	subs	r2, r1, r2
 8015904:	b292      	uxth	r2, r2
 8015906:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8015908:	68fb      	ldr	r3, [r7, #12]
 801590a:	685b      	ldr	r3, [r3, #4]
 801590c:	8919      	ldrh	r1, [r3, #8]
 801590e:	68fb      	ldr	r3, [r7, #12]
 8015910:	685b      	ldr	r3, [r3, #4]
 8015912:	8b3a      	ldrh	r2, [r7, #24]
 8015914:	1a8a      	subs	r2, r1, r2
 8015916:	b292      	uxth	r2, r2
 8015918:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 801591a:	68fb      	ldr	r3, [r7, #12]
 801591c:	685b      	ldr	r3, [r3, #4]
 801591e:	68fa      	ldr	r2, [r7, #12]
 8015920:	68d2      	ldr	r2, [r2, #12]
 8015922:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8015924:	68fb      	ldr	r3, [r7, #12]
 8015926:	68db      	ldr	r3, [r3, #12]
 8015928:	2200      	movs	r2, #0
 801592a:	741a      	strb	r2, [r3, #16]
 801592c:	2200      	movs	r2, #0
 801592e:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8015930:	68fb      	ldr	r3, [r7, #12]
 8015932:	68da      	ldr	r2, [r3, #12]
 8015934:	68fb      	ldr	r3, [r7, #12]
 8015936:	7a9b      	ldrb	r3, [r3, #10]
 8015938:	f003 0301 	and.w	r3, r3, #1
 801593c:	2b00      	cmp	r3, #0
 801593e:	d001      	beq.n	8015944 <tcp_output_segment+0x158>
 8015940:	2318      	movs	r3, #24
 8015942:	e000      	b.n	8015946 <tcp_output_segment+0x15a>
 8015944:	2314      	movs	r3, #20
 8015946:	4413      	add	r3, r2
 8015948:	69fa      	ldr	r2, [r7, #28]
 801594a:	429a      	cmp	r2, r3
 801594c:	d006      	beq.n	801595c <tcp_output_segment+0x170>
 801594e:	4b10      	ldr	r3, [pc, #64]	; (8015990 <tcp_output_segment+0x1a4>)
 8015950:	f240 621c 	movw	r2, #1564	; 0x61c
 8015954:	4914      	ldr	r1, [pc, #80]	; (80159a8 <tcp_output_segment+0x1bc>)
 8015956:	4810      	ldr	r0, [pc, #64]	; (8015998 <tcp_output_segment+0x1ac>)
 8015958:	f003 ff92 	bl	8019880 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 801595c:	68fb      	ldr	r3, [r7, #12]
 801595e:	6858      	ldr	r0, [r3, #4]
 8015960:	68b9      	ldr	r1, [r7, #8]
 8015962:	68bb      	ldr	r3, [r7, #8]
 8015964:	1d1c      	adds	r4, r3, #4
 8015966:	68bb      	ldr	r3, [r7, #8]
 8015968:	7add      	ldrb	r5, [r3, #11]
 801596a:	68bb      	ldr	r3, [r7, #8]
 801596c:	7a9b      	ldrb	r3, [r3, #10]
 801596e:	687a      	ldr	r2, [r7, #4]
 8015970:	9202      	str	r2, [sp, #8]
 8015972:	2206      	movs	r2, #6
 8015974:	9201      	str	r2, [sp, #4]
 8015976:	9300      	str	r3, [sp, #0]
 8015978:	462b      	mov	r3, r5
 801597a:	4622      	mov	r2, r4
 801597c:	f002 fa18 	bl	8017db0 <ip4_output_if>
 8015980:	4603      	mov	r3, r0
 8015982:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8015984:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8015988:	4618      	mov	r0, r3
 801598a:	3720      	adds	r7, #32
 801598c:	46bd      	mov	sp, r7
 801598e:	bdb0      	pop	{r4, r5, r7, pc}
 8015990:	0801d7e4 	.word	0x0801d7e4
 8015994:	0801dda8 	.word	0x0801dda8
 8015998:	0801d838 	.word	0x0801d838
 801599c:	0801ddc8 	.word	0x0801ddc8
 80159a0:	0801dde8 	.word	0x0801dde8
 80159a4:	2000708c 	.word	0x2000708c
 80159a8:	0801de0c 	.word	0x0801de0c

080159ac <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 80159ac:	b5b0      	push	{r4, r5, r7, lr}
 80159ae:	b084      	sub	sp, #16
 80159b0:	af00      	add	r7, sp, #0
 80159b2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 80159b4:	687b      	ldr	r3, [r7, #4]
 80159b6:	2b00      	cmp	r3, #0
 80159b8:	d106      	bne.n	80159c8 <tcp_rexmit_rto_prepare+0x1c>
 80159ba:	4b31      	ldr	r3, [pc, #196]	; (8015a80 <tcp_rexmit_rto_prepare+0xd4>)
 80159bc:	f240 6263 	movw	r2, #1635	; 0x663
 80159c0:	4930      	ldr	r1, [pc, #192]	; (8015a84 <tcp_rexmit_rto_prepare+0xd8>)
 80159c2:	4831      	ldr	r0, [pc, #196]	; (8015a88 <tcp_rexmit_rto_prepare+0xdc>)
 80159c4:	f003 ff5c 	bl	8019880 <iprintf>

  if (pcb->unacked == NULL) {
 80159c8:	687b      	ldr	r3, [r7, #4]
 80159ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80159cc:	2b00      	cmp	r3, #0
 80159ce:	d102      	bne.n	80159d6 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 80159d0:	f06f 0305 	mvn.w	r3, #5
 80159d4:	e050      	b.n	8015a78 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80159d6:	687b      	ldr	r3, [r7, #4]
 80159d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80159da:	60fb      	str	r3, [r7, #12]
 80159dc:	e00b      	b.n	80159f6 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 80159de:	68f8      	ldr	r0, [r7, #12]
 80159e0:	f7ff fee4 	bl	80157ac <tcp_output_segment_busy>
 80159e4:	4603      	mov	r3, r0
 80159e6:	2b00      	cmp	r3, #0
 80159e8:	d002      	beq.n	80159f0 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 80159ea:	f06f 0305 	mvn.w	r3, #5
 80159ee:	e043      	b.n	8015a78 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80159f0:	68fb      	ldr	r3, [r7, #12]
 80159f2:	681b      	ldr	r3, [r3, #0]
 80159f4:	60fb      	str	r3, [r7, #12]
 80159f6:	68fb      	ldr	r3, [r7, #12]
 80159f8:	681b      	ldr	r3, [r3, #0]
 80159fa:	2b00      	cmp	r3, #0
 80159fc:	d1ef      	bne.n	80159de <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 80159fe:	68f8      	ldr	r0, [r7, #12]
 8015a00:	f7ff fed4 	bl	80157ac <tcp_output_segment_busy>
 8015a04:	4603      	mov	r3, r0
 8015a06:	2b00      	cmp	r3, #0
 8015a08:	d002      	beq.n	8015a10 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8015a0a:	f06f 0305 	mvn.w	r3, #5
 8015a0e:	e033      	b.n	8015a78 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8015a10:	687b      	ldr	r3, [r7, #4]
 8015a12:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8015a14:	68fb      	ldr	r3, [r7, #12]
 8015a16:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8015a18:	687b      	ldr	r3, [r7, #4]
 8015a1a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8015a1c:	687b      	ldr	r3, [r7, #4]
 8015a1e:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8015a20:	687b      	ldr	r3, [r7, #4]
 8015a22:	2200      	movs	r2, #0
 8015a24:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8015a26:	687b      	ldr	r3, [r7, #4]
 8015a28:	8b5b      	ldrh	r3, [r3, #26]
 8015a2a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8015a2e:	b29a      	uxth	r2, r3
 8015a30:	687b      	ldr	r3, [r7, #4]
 8015a32:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8015a34:	68fb      	ldr	r3, [r7, #12]
 8015a36:	68db      	ldr	r3, [r3, #12]
 8015a38:	685b      	ldr	r3, [r3, #4]
 8015a3a:	4618      	mov	r0, r3
 8015a3c:	f7f9 fc7b 	bl	800f336 <lwip_htonl>
 8015a40:	4604      	mov	r4, r0
 8015a42:	68fb      	ldr	r3, [r7, #12]
 8015a44:	891b      	ldrh	r3, [r3, #8]
 8015a46:	461d      	mov	r5, r3
 8015a48:	68fb      	ldr	r3, [r7, #12]
 8015a4a:	68db      	ldr	r3, [r3, #12]
 8015a4c:	899b      	ldrh	r3, [r3, #12]
 8015a4e:	b29b      	uxth	r3, r3
 8015a50:	4618      	mov	r0, r3
 8015a52:	f7f9 fc5b 	bl	800f30c <lwip_htons>
 8015a56:	4603      	mov	r3, r0
 8015a58:	b2db      	uxtb	r3, r3
 8015a5a:	f003 0303 	and.w	r3, r3, #3
 8015a5e:	2b00      	cmp	r3, #0
 8015a60:	d001      	beq.n	8015a66 <tcp_rexmit_rto_prepare+0xba>
 8015a62:	2301      	movs	r3, #1
 8015a64:	e000      	b.n	8015a68 <tcp_rexmit_rto_prepare+0xbc>
 8015a66:	2300      	movs	r3, #0
 8015a68:	442b      	add	r3, r5
 8015a6a:	18e2      	adds	r2, r4, r3
 8015a6c:	687b      	ldr	r3, [r7, #4]
 8015a6e:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8015a70:	687b      	ldr	r3, [r7, #4]
 8015a72:	2200      	movs	r2, #0
 8015a74:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 8015a76:	2300      	movs	r3, #0
}
 8015a78:	4618      	mov	r0, r3
 8015a7a:	3710      	adds	r7, #16
 8015a7c:	46bd      	mov	sp, r7
 8015a7e:	bdb0      	pop	{r4, r5, r7, pc}
 8015a80:	0801d7e4 	.word	0x0801d7e4
 8015a84:	0801de20 	.word	0x0801de20
 8015a88:	0801d838 	.word	0x0801d838

08015a8c <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8015a8c:	b580      	push	{r7, lr}
 8015a8e:	b082      	sub	sp, #8
 8015a90:	af00      	add	r7, sp, #0
 8015a92:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8015a94:	687b      	ldr	r3, [r7, #4]
 8015a96:	2b00      	cmp	r3, #0
 8015a98:	d106      	bne.n	8015aa8 <tcp_rexmit_rto_commit+0x1c>
 8015a9a:	4b0d      	ldr	r3, [pc, #52]	; (8015ad0 <tcp_rexmit_rto_commit+0x44>)
 8015a9c:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8015aa0:	490c      	ldr	r1, [pc, #48]	; (8015ad4 <tcp_rexmit_rto_commit+0x48>)
 8015aa2:	480d      	ldr	r0, [pc, #52]	; (8015ad8 <tcp_rexmit_rto_commit+0x4c>)
 8015aa4:	f003 feec 	bl	8019880 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8015aa8:	687b      	ldr	r3, [r7, #4]
 8015aaa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8015aae:	2bff      	cmp	r3, #255	; 0xff
 8015ab0:	d007      	beq.n	8015ac2 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8015ab2:	687b      	ldr	r3, [r7, #4]
 8015ab4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8015ab8:	3301      	adds	r3, #1
 8015aba:	b2da      	uxtb	r2, r3
 8015abc:	687b      	ldr	r3, [r7, #4]
 8015abe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8015ac2:	6878      	ldr	r0, [r7, #4]
 8015ac4:	f7ff fc7e 	bl	80153c4 <tcp_output>
}
 8015ac8:	bf00      	nop
 8015aca:	3708      	adds	r7, #8
 8015acc:	46bd      	mov	sp, r7
 8015ace:	bd80      	pop	{r7, pc}
 8015ad0:	0801d7e4 	.word	0x0801d7e4
 8015ad4:	0801de44 	.word	0x0801de44
 8015ad8:	0801d838 	.word	0x0801d838

08015adc <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8015adc:	b580      	push	{r7, lr}
 8015ade:	b082      	sub	sp, #8
 8015ae0:	af00      	add	r7, sp, #0
 8015ae2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8015ae4:	687b      	ldr	r3, [r7, #4]
 8015ae6:	2b00      	cmp	r3, #0
 8015ae8:	d106      	bne.n	8015af8 <tcp_rexmit_rto+0x1c>
 8015aea:	4b0a      	ldr	r3, [pc, #40]	; (8015b14 <tcp_rexmit_rto+0x38>)
 8015aec:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8015af0:	4909      	ldr	r1, [pc, #36]	; (8015b18 <tcp_rexmit_rto+0x3c>)
 8015af2:	480a      	ldr	r0, [pc, #40]	; (8015b1c <tcp_rexmit_rto+0x40>)
 8015af4:	f003 fec4 	bl	8019880 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8015af8:	6878      	ldr	r0, [r7, #4]
 8015afa:	f7ff ff57 	bl	80159ac <tcp_rexmit_rto_prepare>
 8015afe:	4603      	mov	r3, r0
 8015b00:	2b00      	cmp	r3, #0
 8015b02:	d102      	bne.n	8015b0a <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8015b04:	6878      	ldr	r0, [r7, #4]
 8015b06:	f7ff ffc1 	bl	8015a8c <tcp_rexmit_rto_commit>
  }
}
 8015b0a:	bf00      	nop
 8015b0c:	3708      	adds	r7, #8
 8015b0e:	46bd      	mov	sp, r7
 8015b10:	bd80      	pop	{r7, pc}
 8015b12:	bf00      	nop
 8015b14:	0801d7e4 	.word	0x0801d7e4
 8015b18:	0801de68 	.word	0x0801de68
 8015b1c:	0801d838 	.word	0x0801d838

08015b20 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8015b20:	b590      	push	{r4, r7, lr}
 8015b22:	b085      	sub	sp, #20
 8015b24:	af00      	add	r7, sp, #0
 8015b26:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8015b28:	687b      	ldr	r3, [r7, #4]
 8015b2a:	2b00      	cmp	r3, #0
 8015b2c:	d106      	bne.n	8015b3c <tcp_rexmit+0x1c>
 8015b2e:	4b2f      	ldr	r3, [pc, #188]	; (8015bec <tcp_rexmit+0xcc>)
 8015b30:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8015b34:	492e      	ldr	r1, [pc, #184]	; (8015bf0 <tcp_rexmit+0xd0>)
 8015b36:	482f      	ldr	r0, [pc, #188]	; (8015bf4 <tcp_rexmit+0xd4>)
 8015b38:	f003 fea2 	bl	8019880 <iprintf>

  if (pcb->unacked == NULL) {
 8015b3c:	687b      	ldr	r3, [r7, #4]
 8015b3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015b40:	2b00      	cmp	r3, #0
 8015b42:	d102      	bne.n	8015b4a <tcp_rexmit+0x2a>
    return ERR_VAL;
 8015b44:	f06f 0305 	mvn.w	r3, #5
 8015b48:	e04c      	b.n	8015be4 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8015b4a:	687b      	ldr	r3, [r7, #4]
 8015b4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015b4e:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8015b50:	68b8      	ldr	r0, [r7, #8]
 8015b52:	f7ff fe2b 	bl	80157ac <tcp_output_segment_busy>
 8015b56:	4603      	mov	r3, r0
 8015b58:	2b00      	cmp	r3, #0
 8015b5a:	d002      	beq.n	8015b62 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8015b5c:	f06f 0305 	mvn.w	r3, #5
 8015b60:	e040      	b.n	8015be4 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8015b62:	68bb      	ldr	r3, [r7, #8]
 8015b64:	681a      	ldr	r2, [r3, #0]
 8015b66:	687b      	ldr	r3, [r7, #4]
 8015b68:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 8015b6a:	687b      	ldr	r3, [r7, #4]
 8015b6c:	336c      	adds	r3, #108	; 0x6c
 8015b6e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8015b70:	e002      	b.n	8015b78 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8015b72:	68fb      	ldr	r3, [r7, #12]
 8015b74:	681b      	ldr	r3, [r3, #0]
 8015b76:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8015b78:	68fb      	ldr	r3, [r7, #12]
 8015b7a:	681b      	ldr	r3, [r3, #0]
 8015b7c:	2b00      	cmp	r3, #0
 8015b7e:	d011      	beq.n	8015ba4 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8015b80:	68fb      	ldr	r3, [r7, #12]
 8015b82:	681b      	ldr	r3, [r3, #0]
 8015b84:	68db      	ldr	r3, [r3, #12]
 8015b86:	685b      	ldr	r3, [r3, #4]
 8015b88:	4618      	mov	r0, r3
 8015b8a:	f7f9 fbd4 	bl	800f336 <lwip_htonl>
 8015b8e:	4604      	mov	r4, r0
 8015b90:	68bb      	ldr	r3, [r7, #8]
 8015b92:	68db      	ldr	r3, [r3, #12]
 8015b94:	685b      	ldr	r3, [r3, #4]
 8015b96:	4618      	mov	r0, r3
 8015b98:	f7f9 fbcd 	bl	800f336 <lwip_htonl>
 8015b9c:	4603      	mov	r3, r0
 8015b9e:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8015ba0:	2b00      	cmp	r3, #0
 8015ba2:	dbe6      	blt.n	8015b72 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8015ba4:	68fb      	ldr	r3, [r7, #12]
 8015ba6:	681a      	ldr	r2, [r3, #0]
 8015ba8:	68bb      	ldr	r3, [r7, #8]
 8015baa:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8015bac:	68fb      	ldr	r3, [r7, #12]
 8015bae:	68ba      	ldr	r2, [r7, #8]
 8015bb0:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8015bb2:	68bb      	ldr	r3, [r7, #8]
 8015bb4:	681b      	ldr	r3, [r3, #0]
 8015bb6:	2b00      	cmp	r3, #0
 8015bb8:	d103      	bne.n	8015bc2 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8015bba:	687b      	ldr	r3, [r7, #4]
 8015bbc:	2200      	movs	r2, #0
 8015bbe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8015bc2:	687b      	ldr	r3, [r7, #4]
 8015bc4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8015bc8:	2bff      	cmp	r3, #255	; 0xff
 8015bca:	d007      	beq.n	8015bdc <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8015bcc:	687b      	ldr	r3, [r7, #4]
 8015bce:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8015bd2:	3301      	adds	r3, #1
 8015bd4:	b2da      	uxtb	r2, r3
 8015bd6:	687b      	ldr	r3, [r7, #4]
 8015bd8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8015bdc:	687b      	ldr	r3, [r7, #4]
 8015bde:	2200      	movs	r2, #0
 8015be0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8015be2:	2300      	movs	r3, #0
}
 8015be4:	4618      	mov	r0, r3
 8015be6:	3714      	adds	r7, #20
 8015be8:	46bd      	mov	sp, r7
 8015bea:	bd90      	pop	{r4, r7, pc}
 8015bec:	0801d7e4 	.word	0x0801d7e4
 8015bf0:	0801de84 	.word	0x0801de84
 8015bf4:	0801d838 	.word	0x0801d838

08015bf8 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8015bf8:	b580      	push	{r7, lr}
 8015bfa:	b082      	sub	sp, #8
 8015bfc:	af00      	add	r7, sp, #0
 8015bfe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8015c00:	687b      	ldr	r3, [r7, #4]
 8015c02:	2b00      	cmp	r3, #0
 8015c04:	d106      	bne.n	8015c14 <tcp_rexmit_fast+0x1c>
 8015c06:	4b2a      	ldr	r3, [pc, #168]	; (8015cb0 <tcp_rexmit_fast+0xb8>)
 8015c08:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8015c0c:	4929      	ldr	r1, [pc, #164]	; (8015cb4 <tcp_rexmit_fast+0xbc>)
 8015c0e:	482a      	ldr	r0, [pc, #168]	; (8015cb8 <tcp_rexmit_fast+0xc0>)
 8015c10:	f003 fe36 	bl	8019880 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8015c14:	687b      	ldr	r3, [r7, #4]
 8015c16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015c18:	2b00      	cmp	r3, #0
 8015c1a:	d045      	beq.n	8015ca8 <tcp_rexmit_fast+0xb0>
 8015c1c:	687b      	ldr	r3, [r7, #4]
 8015c1e:	8b5b      	ldrh	r3, [r3, #26]
 8015c20:	f003 0304 	and.w	r3, r3, #4
 8015c24:	2b00      	cmp	r3, #0
 8015c26:	d13f      	bne.n	8015ca8 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8015c28:	6878      	ldr	r0, [r7, #4]
 8015c2a:	f7ff ff79 	bl	8015b20 <tcp_rexmit>
 8015c2e:	4603      	mov	r3, r0
 8015c30:	2b00      	cmp	r3, #0
 8015c32:	d139      	bne.n	8015ca8 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8015c34:	687b      	ldr	r3, [r7, #4]
 8015c36:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8015c3a:	687b      	ldr	r3, [r7, #4]
 8015c3c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8015c40:	4293      	cmp	r3, r2
 8015c42:	bf28      	it	cs
 8015c44:	4613      	movcs	r3, r2
 8015c46:	b29b      	uxth	r3, r3
 8015c48:	2b00      	cmp	r3, #0
 8015c4a:	da00      	bge.n	8015c4e <tcp_rexmit_fast+0x56>
 8015c4c:	3301      	adds	r3, #1
 8015c4e:	105b      	asrs	r3, r3, #1
 8015c50:	b29a      	uxth	r2, r3
 8015c52:	687b      	ldr	r3, [r7, #4]
 8015c54:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8015c58:	687b      	ldr	r3, [r7, #4]
 8015c5a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8015c5e:	461a      	mov	r2, r3
 8015c60:	687b      	ldr	r3, [r7, #4]
 8015c62:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015c64:	005b      	lsls	r3, r3, #1
 8015c66:	429a      	cmp	r2, r3
 8015c68:	d206      	bcs.n	8015c78 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8015c6a:	687b      	ldr	r3, [r7, #4]
 8015c6c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015c6e:	005b      	lsls	r3, r3, #1
 8015c70:	b29a      	uxth	r2, r3
 8015c72:	687b      	ldr	r3, [r7, #4]
 8015c74:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8015c78:	687b      	ldr	r3, [r7, #4]
 8015c7a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8015c7e:	687b      	ldr	r3, [r7, #4]
 8015c80:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015c82:	4619      	mov	r1, r3
 8015c84:	0049      	lsls	r1, r1, #1
 8015c86:	440b      	add	r3, r1
 8015c88:	b29b      	uxth	r3, r3
 8015c8a:	4413      	add	r3, r2
 8015c8c:	b29a      	uxth	r2, r3
 8015c8e:	687b      	ldr	r3, [r7, #4]
 8015c90:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8015c94:	687b      	ldr	r3, [r7, #4]
 8015c96:	8b5b      	ldrh	r3, [r3, #26]
 8015c98:	f043 0304 	orr.w	r3, r3, #4
 8015c9c:	b29a      	uxth	r2, r3
 8015c9e:	687b      	ldr	r3, [r7, #4]
 8015ca0:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8015ca2:	687b      	ldr	r3, [r7, #4]
 8015ca4:	2200      	movs	r2, #0
 8015ca6:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 8015ca8:	bf00      	nop
 8015caa:	3708      	adds	r7, #8
 8015cac:	46bd      	mov	sp, r7
 8015cae:	bd80      	pop	{r7, pc}
 8015cb0:	0801d7e4 	.word	0x0801d7e4
 8015cb4:	0801de9c 	.word	0x0801de9c
 8015cb8:	0801d838 	.word	0x0801d838

08015cbc <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8015cbc:	b580      	push	{r7, lr}
 8015cbe:	b086      	sub	sp, #24
 8015cc0:	af00      	add	r7, sp, #0
 8015cc2:	60f8      	str	r0, [r7, #12]
 8015cc4:	607b      	str	r3, [r7, #4]
 8015cc6:	460b      	mov	r3, r1
 8015cc8:	817b      	strh	r3, [r7, #10]
 8015cca:	4613      	mov	r3, r2
 8015ccc:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8015cce:	897a      	ldrh	r2, [r7, #10]
 8015cd0:	893b      	ldrh	r3, [r7, #8]
 8015cd2:	4413      	add	r3, r2
 8015cd4:	b29b      	uxth	r3, r3
 8015cd6:	3314      	adds	r3, #20
 8015cd8:	b29b      	uxth	r3, r3
 8015cda:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015cde:	4619      	mov	r1, r3
 8015ce0:	2022      	movs	r0, #34	; 0x22
 8015ce2:	f7fa fc13 	bl	801050c <pbuf_alloc>
 8015ce6:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8015ce8:	697b      	ldr	r3, [r7, #20]
 8015cea:	2b00      	cmp	r3, #0
 8015cec:	d04d      	beq.n	8015d8a <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8015cee:	897b      	ldrh	r3, [r7, #10]
 8015cf0:	3313      	adds	r3, #19
 8015cf2:	697a      	ldr	r2, [r7, #20]
 8015cf4:	8952      	ldrh	r2, [r2, #10]
 8015cf6:	4293      	cmp	r3, r2
 8015cf8:	db06      	blt.n	8015d08 <tcp_output_alloc_header_common+0x4c>
 8015cfa:	4b26      	ldr	r3, [pc, #152]	; (8015d94 <tcp_output_alloc_header_common+0xd8>)
 8015cfc:	f240 7223 	movw	r2, #1827	; 0x723
 8015d00:	4925      	ldr	r1, [pc, #148]	; (8015d98 <tcp_output_alloc_header_common+0xdc>)
 8015d02:	4826      	ldr	r0, [pc, #152]	; (8015d9c <tcp_output_alloc_header_common+0xe0>)
 8015d04:	f003 fdbc 	bl	8019880 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8015d08:	697b      	ldr	r3, [r7, #20]
 8015d0a:	685b      	ldr	r3, [r3, #4]
 8015d0c:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8015d0e:	8c3b      	ldrh	r3, [r7, #32]
 8015d10:	4618      	mov	r0, r3
 8015d12:	f7f9 fafb 	bl	800f30c <lwip_htons>
 8015d16:	4603      	mov	r3, r0
 8015d18:	461a      	mov	r2, r3
 8015d1a:	693b      	ldr	r3, [r7, #16]
 8015d1c:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8015d1e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015d20:	4618      	mov	r0, r3
 8015d22:	f7f9 faf3 	bl	800f30c <lwip_htons>
 8015d26:	4603      	mov	r3, r0
 8015d28:	461a      	mov	r2, r3
 8015d2a:	693b      	ldr	r3, [r7, #16]
 8015d2c:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8015d2e:	693b      	ldr	r3, [r7, #16]
 8015d30:	687a      	ldr	r2, [r7, #4]
 8015d32:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8015d34:	68f8      	ldr	r0, [r7, #12]
 8015d36:	f7f9 fafe 	bl	800f336 <lwip_htonl>
 8015d3a:	4602      	mov	r2, r0
 8015d3c:	693b      	ldr	r3, [r7, #16]
 8015d3e:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8015d40:	897b      	ldrh	r3, [r7, #10]
 8015d42:	089b      	lsrs	r3, r3, #2
 8015d44:	b29b      	uxth	r3, r3
 8015d46:	3305      	adds	r3, #5
 8015d48:	b29b      	uxth	r3, r3
 8015d4a:	031b      	lsls	r3, r3, #12
 8015d4c:	b29a      	uxth	r2, r3
 8015d4e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8015d52:	b29b      	uxth	r3, r3
 8015d54:	4313      	orrs	r3, r2
 8015d56:	b29b      	uxth	r3, r3
 8015d58:	4618      	mov	r0, r3
 8015d5a:	f7f9 fad7 	bl	800f30c <lwip_htons>
 8015d5e:	4603      	mov	r3, r0
 8015d60:	461a      	mov	r2, r3
 8015d62:	693b      	ldr	r3, [r7, #16]
 8015d64:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8015d66:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8015d68:	4618      	mov	r0, r3
 8015d6a:	f7f9 facf 	bl	800f30c <lwip_htons>
 8015d6e:	4603      	mov	r3, r0
 8015d70:	461a      	mov	r2, r3
 8015d72:	693b      	ldr	r3, [r7, #16]
 8015d74:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8015d76:	693b      	ldr	r3, [r7, #16]
 8015d78:	2200      	movs	r2, #0
 8015d7a:	741a      	strb	r2, [r3, #16]
 8015d7c:	2200      	movs	r2, #0
 8015d7e:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8015d80:	693b      	ldr	r3, [r7, #16]
 8015d82:	2200      	movs	r2, #0
 8015d84:	749a      	strb	r2, [r3, #18]
 8015d86:	2200      	movs	r2, #0
 8015d88:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8015d8a:	697b      	ldr	r3, [r7, #20]
}
 8015d8c:	4618      	mov	r0, r3
 8015d8e:	3718      	adds	r7, #24
 8015d90:	46bd      	mov	sp, r7
 8015d92:	bd80      	pop	{r7, pc}
 8015d94:	0801d7e4 	.word	0x0801d7e4
 8015d98:	0801debc 	.word	0x0801debc
 8015d9c:	0801d838 	.word	0x0801d838

08015da0 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8015da0:	b5b0      	push	{r4, r5, r7, lr}
 8015da2:	b08a      	sub	sp, #40	; 0x28
 8015da4:	af04      	add	r7, sp, #16
 8015da6:	60f8      	str	r0, [r7, #12]
 8015da8:	607b      	str	r3, [r7, #4]
 8015daa:	460b      	mov	r3, r1
 8015dac:	817b      	strh	r3, [r7, #10]
 8015dae:	4613      	mov	r3, r2
 8015db0:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8015db2:	68fb      	ldr	r3, [r7, #12]
 8015db4:	2b00      	cmp	r3, #0
 8015db6:	d106      	bne.n	8015dc6 <tcp_output_alloc_header+0x26>
 8015db8:	4b15      	ldr	r3, [pc, #84]	; (8015e10 <tcp_output_alloc_header+0x70>)
 8015dba:	f240 7242 	movw	r2, #1858	; 0x742
 8015dbe:	4915      	ldr	r1, [pc, #84]	; (8015e14 <tcp_output_alloc_header+0x74>)
 8015dc0:	4815      	ldr	r0, [pc, #84]	; (8015e18 <tcp_output_alloc_header+0x78>)
 8015dc2:	f003 fd5d 	bl	8019880 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8015dc6:	68fb      	ldr	r3, [r7, #12]
 8015dc8:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8015dca:	68fb      	ldr	r3, [r7, #12]
 8015dcc:	8adb      	ldrh	r3, [r3, #22]
 8015dce:	68fa      	ldr	r2, [r7, #12]
 8015dd0:	8b12      	ldrh	r2, [r2, #24]
 8015dd2:	68f9      	ldr	r1, [r7, #12]
 8015dd4:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 8015dd6:	893d      	ldrh	r5, [r7, #8]
 8015dd8:	897c      	ldrh	r4, [r7, #10]
 8015dda:	9103      	str	r1, [sp, #12]
 8015ddc:	2110      	movs	r1, #16
 8015dde:	9102      	str	r1, [sp, #8]
 8015de0:	9201      	str	r2, [sp, #4]
 8015de2:	9300      	str	r3, [sp, #0]
 8015de4:	687b      	ldr	r3, [r7, #4]
 8015de6:	462a      	mov	r2, r5
 8015de8:	4621      	mov	r1, r4
 8015dea:	f7ff ff67 	bl	8015cbc <tcp_output_alloc_header_common>
 8015dee:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8015df0:	697b      	ldr	r3, [r7, #20]
 8015df2:	2b00      	cmp	r3, #0
 8015df4:	d006      	beq.n	8015e04 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8015df6:	68fb      	ldr	r3, [r7, #12]
 8015df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015dfa:	68fa      	ldr	r2, [r7, #12]
 8015dfc:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8015dfe:	441a      	add	r2, r3
 8015e00:	68fb      	ldr	r3, [r7, #12]
 8015e02:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8015e04:	697b      	ldr	r3, [r7, #20]
}
 8015e06:	4618      	mov	r0, r3
 8015e08:	3718      	adds	r7, #24
 8015e0a:	46bd      	mov	sp, r7
 8015e0c:	bdb0      	pop	{r4, r5, r7, pc}
 8015e0e:	bf00      	nop
 8015e10:	0801d7e4 	.word	0x0801d7e4
 8015e14:	0801deec 	.word	0x0801deec
 8015e18:	0801d838 	.word	0x0801d838

08015e1c <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8015e1c:	b580      	push	{r7, lr}
 8015e1e:	b088      	sub	sp, #32
 8015e20:	af00      	add	r7, sp, #0
 8015e22:	60f8      	str	r0, [r7, #12]
 8015e24:	60b9      	str	r1, [r7, #8]
 8015e26:	4611      	mov	r1, r2
 8015e28:	461a      	mov	r2, r3
 8015e2a:	460b      	mov	r3, r1
 8015e2c:	71fb      	strb	r3, [r7, #7]
 8015e2e:	4613      	mov	r3, r2
 8015e30:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8015e32:	2300      	movs	r3, #0
 8015e34:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8015e36:	68bb      	ldr	r3, [r7, #8]
 8015e38:	2b00      	cmp	r3, #0
 8015e3a:	d106      	bne.n	8015e4a <tcp_output_fill_options+0x2e>
 8015e3c:	4b12      	ldr	r3, [pc, #72]	; (8015e88 <tcp_output_fill_options+0x6c>)
 8015e3e:	f240 7256 	movw	r2, #1878	; 0x756
 8015e42:	4912      	ldr	r1, [pc, #72]	; (8015e8c <tcp_output_fill_options+0x70>)
 8015e44:	4812      	ldr	r0, [pc, #72]	; (8015e90 <tcp_output_fill_options+0x74>)
 8015e46:	f003 fd1b 	bl	8019880 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8015e4a:	68bb      	ldr	r3, [r7, #8]
 8015e4c:	685b      	ldr	r3, [r3, #4]
 8015e4e:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8015e50:	69bb      	ldr	r3, [r7, #24]
 8015e52:	3314      	adds	r3, #20
 8015e54:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8015e56:	8bfb      	ldrh	r3, [r7, #30]
 8015e58:	009b      	lsls	r3, r3, #2
 8015e5a:	461a      	mov	r2, r3
 8015e5c:	79fb      	ldrb	r3, [r7, #7]
 8015e5e:	009b      	lsls	r3, r3, #2
 8015e60:	f003 0304 	and.w	r3, r3, #4
 8015e64:	4413      	add	r3, r2
 8015e66:	3314      	adds	r3, #20
 8015e68:	69ba      	ldr	r2, [r7, #24]
 8015e6a:	4413      	add	r3, r2
 8015e6c:	697a      	ldr	r2, [r7, #20]
 8015e6e:	429a      	cmp	r2, r3
 8015e70:	d006      	beq.n	8015e80 <tcp_output_fill_options+0x64>
 8015e72:	4b05      	ldr	r3, [pc, #20]	; (8015e88 <tcp_output_fill_options+0x6c>)
 8015e74:	f240 7275 	movw	r2, #1909	; 0x775
 8015e78:	4906      	ldr	r1, [pc, #24]	; (8015e94 <tcp_output_fill_options+0x78>)
 8015e7a:	4805      	ldr	r0, [pc, #20]	; (8015e90 <tcp_output_fill_options+0x74>)
 8015e7c:	f003 fd00 	bl	8019880 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8015e80:	bf00      	nop
 8015e82:	3720      	adds	r7, #32
 8015e84:	46bd      	mov	sp, r7
 8015e86:	bd80      	pop	{r7, pc}
 8015e88:	0801d7e4 	.word	0x0801d7e4
 8015e8c:	0801df14 	.word	0x0801df14
 8015e90:	0801d838 	.word	0x0801d838
 8015e94:	0801de0c 	.word	0x0801de0c

08015e98 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8015e98:	b580      	push	{r7, lr}
 8015e9a:	b08a      	sub	sp, #40	; 0x28
 8015e9c:	af04      	add	r7, sp, #16
 8015e9e:	60f8      	str	r0, [r7, #12]
 8015ea0:	60b9      	str	r1, [r7, #8]
 8015ea2:	607a      	str	r2, [r7, #4]
 8015ea4:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8015ea6:	68bb      	ldr	r3, [r7, #8]
 8015ea8:	2b00      	cmp	r3, #0
 8015eaa:	d106      	bne.n	8015eba <tcp_output_control_segment+0x22>
 8015eac:	4b1c      	ldr	r3, [pc, #112]	; (8015f20 <tcp_output_control_segment+0x88>)
 8015eae:	f240 7287 	movw	r2, #1927	; 0x787
 8015eb2:	491c      	ldr	r1, [pc, #112]	; (8015f24 <tcp_output_control_segment+0x8c>)
 8015eb4:	481c      	ldr	r0, [pc, #112]	; (8015f28 <tcp_output_control_segment+0x90>)
 8015eb6:	f003 fce3 	bl	8019880 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8015eba:	683a      	ldr	r2, [r7, #0]
 8015ebc:	6879      	ldr	r1, [r7, #4]
 8015ebe:	68f8      	ldr	r0, [r7, #12]
 8015ec0:	f7fe ff40 	bl	8014d44 <tcp_route>
 8015ec4:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8015ec6:	693b      	ldr	r3, [r7, #16]
 8015ec8:	2b00      	cmp	r3, #0
 8015eca:	d102      	bne.n	8015ed2 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8015ecc:	23fc      	movs	r3, #252	; 0xfc
 8015ece:	75fb      	strb	r3, [r7, #23]
 8015ed0:	e01c      	b.n	8015f0c <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8015ed2:	68fb      	ldr	r3, [r7, #12]
 8015ed4:	2b00      	cmp	r3, #0
 8015ed6:	d006      	beq.n	8015ee6 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8015ed8:	68fb      	ldr	r3, [r7, #12]
 8015eda:	7adb      	ldrb	r3, [r3, #11]
 8015edc:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8015ede:	68fb      	ldr	r3, [r7, #12]
 8015ee0:	7a9b      	ldrb	r3, [r3, #10]
 8015ee2:	757b      	strb	r3, [r7, #21]
 8015ee4:	e003      	b.n	8015eee <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8015ee6:	23ff      	movs	r3, #255	; 0xff
 8015ee8:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8015eea:	2300      	movs	r3, #0
 8015eec:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8015eee:	7dba      	ldrb	r2, [r7, #22]
 8015ef0:	693b      	ldr	r3, [r7, #16]
 8015ef2:	9302      	str	r3, [sp, #8]
 8015ef4:	2306      	movs	r3, #6
 8015ef6:	9301      	str	r3, [sp, #4]
 8015ef8:	7d7b      	ldrb	r3, [r7, #21]
 8015efa:	9300      	str	r3, [sp, #0]
 8015efc:	4613      	mov	r3, r2
 8015efe:	683a      	ldr	r2, [r7, #0]
 8015f00:	6879      	ldr	r1, [r7, #4]
 8015f02:	68b8      	ldr	r0, [r7, #8]
 8015f04:	f001 ff54 	bl	8017db0 <ip4_output_if>
 8015f08:	4603      	mov	r3, r0
 8015f0a:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8015f0c:	68b8      	ldr	r0, [r7, #8]
 8015f0e:	f7fa fde1 	bl	8010ad4 <pbuf_free>
  return err;
 8015f12:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8015f16:	4618      	mov	r0, r3
 8015f18:	3718      	adds	r7, #24
 8015f1a:	46bd      	mov	sp, r7
 8015f1c:	bd80      	pop	{r7, pc}
 8015f1e:	bf00      	nop
 8015f20:	0801d7e4 	.word	0x0801d7e4
 8015f24:	0801df3c 	.word	0x0801df3c
 8015f28:	0801d838 	.word	0x0801d838

08015f2c <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8015f2c:	b590      	push	{r4, r7, lr}
 8015f2e:	b08b      	sub	sp, #44	; 0x2c
 8015f30:	af04      	add	r7, sp, #16
 8015f32:	60f8      	str	r0, [r7, #12]
 8015f34:	60b9      	str	r1, [r7, #8]
 8015f36:	607a      	str	r2, [r7, #4]
 8015f38:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8015f3a:	683b      	ldr	r3, [r7, #0]
 8015f3c:	2b00      	cmp	r3, #0
 8015f3e:	d106      	bne.n	8015f4e <tcp_rst+0x22>
 8015f40:	4b1f      	ldr	r3, [pc, #124]	; (8015fc0 <tcp_rst+0x94>)
 8015f42:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8015f46:	491f      	ldr	r1, [pc, #124]	; (8015fc4 <tcp_rst+0x98>)
 8015f48:	481f      	ldr	r0, [pc, #124]	; (8015fc8 <tcp_rst+0x9c>)
 8015f4a:	f003 fc99 	bl	8019880 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8015f4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015f50:	2b00      	cmp	r3, #0
 8015f52:	d106      	bne.n	8015f62 <tcp_rst+0x36>
 8015f54:	4b1a      	ldr	r3, [pc, #104]	; (8015fc0 <tcp_rst+0x94>)
 8015f56:	f240 72c5 	movw	r2, #1989	; 0x7c5
 8015f5a:	491c      	ldr	r1, [pc, #112]	; (8015fcc <tcp_rst+0xa0>)
 8015f5c:	481a      	ldr	r0, [pc, #104]	; (8015fc8 <tcp_rst+0x9c>)
 8015f5e:	f003 fc8f 	bl	8019880 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8015f62:	2300      	movs	r3, #0
 8015f64:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8015f66:	f24d 0316 	movw	r3, #53270	; 0xd016
 8015f6a:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8015f6c:	7dfb      	ldrb	r3, [r7, #23]
 8015f6e:	b29c      	uxth	r4, r3
 8015f70:	68b8      	ldr	r0, [r7, #8]
 8015f72:	f7f9 f9e0 	bl	800f336 <lwip_htonl>
 8015f76:	4602      	mov	r2, r0
 8015f78:	8abb      	ldrh	r3, [r7, #20]
 8015f7a:	9303      	str	r3, [sp, #12]
 8015f7c:	2314      	movs	r3, #20
 8015f7e:	9302      	str	r3, [sp, #8]
 8015f80:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8015f82:	9301      	str	r3, [sp, #4]
 8015f84:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8015f86:	9300      	str	r3, [sp, #0]
 8015f88:	4613      	mov	r3, r2
 8015f8a:	2200      	movs	r2, #0
 8015f8c:	4621      	mov	r1, r4
 8015f8e:	6878      	ldr	r0, [r7, #4]
 8015f90:	f7ff fe94 	bl	8015cbc <tcp_output_alloc_header_common>
 8015f94:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8015f96:	693b      	ldr	r3, [r7, #16]
 8015f98:	2b00      	cmp	r3, #0
 8015f9a:	d00c      	beq.n	8015fb6 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8015f9c:	7dfb      	ldrb	r3, [r7, #23]
 8015f9e:	2200      	movs	r2, #0
 8015fa0:	6939      	ldr	r1, [r7, #16]
 8015fa2:	68f8      	ldr	r0, [r7, #12]
 8015fa4:	f7ff ff3a 	bl	8015e1c <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8015fa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015faa:	683a      	ldr	r2, [r7, #0]
 8015fac:	6939      	ldr	r1, [r7, #16]
 8015fae:	68f8      	ldr	r0, [r7, #12]
 8015fb0:	f7ff ff72 	bl	8015e98 <tcp_output_control_segment>
 8015fb4:	e000      	b.n	8015fb8 <tcp_rst+0x8c>
    return;
 8015fb6:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8015fb8:	371c      	adds	r7, #28
 8015fba:	46bd      	mov	sp, r7
 8015fbc:	bd90      	pop	{r4, r7, pc}
 8015fbe:	bf00      	nop
 8015fc0:	0801d7e4 	.word	0x0801d7e4
 8015fc4:	0801df68 	.word	0x0801df68
 8015fc8:	0801d838 	.word	0x0801d838
 8015fcc:	0801df84 	.word	0x0801df84

08015fd0 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8015fd0:	b590      	push	{r4, r7, lr}
 8015fd2:	b087      	sub	sp, #28
 8015fd4:	af00      	add	r7, sp, #0
 8015fd6:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8015fd8:	2300      	movs	r3, #0
 8015fda:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8015fdc:	2300      	movs	r3, #0
 8015fde:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8015fe0:	687b      	ldr	r3, [r7, #4]
 8015fe2:	2b00      	cmp	r3, #0
 8015fe4:	d106      	bne.n	8015ff4 <tcp_send_empty_ack+0x24>
 8015fe6:	4b28      	ldr	r3, [pc, #160]	; (8016088 <tcp_send_empty_ack+0xb8>)
 8015fe8:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8015fec:	4927      	ldr	r1, [pc, #156]	; (801608c <tcp_send_empty_ack+0xbc>)
 8015fee:	4828      	ldr	r0, [pc, #160]	; (8016090 <tcp_send_empty_ack+0xc0>)
 8015ff0:	f003 fc46 	bl	8019880 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8015ff4:	7dfb      	ldrb	r3, [r7, #23]
 8015ff6:	009b      	lsls	r3, r3, #2
 8015ff8:	b2db      	uxtb	r3, r3
 8015ffa:	f003 0304 	and.w	r3, r3, #4
 8015ffe:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8016000:	7d7b      	ldrb	r3, [r7, #21]
 8016002:	b29c      	uxth	r4, r3
 8016004:	687b      	ldr	r3, [r7, #4]
 8016006:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016008:	4618      	mov	r0, r3
 801600a:	f7f9 f994 	bl	800f336 <lwip_htonl>
 801600e:	4603      	mov	r3, r0
 8016010:	2200      	movs	r2, #0
 8016012:	4621      	mov	r1, r4
 8016014:	6878      	ldr	r0, [r7, #4]
 8016016:	f7ff fec3 	bl	8015da0 <tcp_output_alloc_header>
 801601a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801601c:	693b      	ldr	r3, [r7, #16]
 801601e:	2b00      	cmp	r3, #0
 8016020:	d109      	bne.n	8016036 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8016022:	687b      	ldr	r3, [r7, #4]
 8016024:	8b5b      	ldrh	r3, [r3, #26]
 8016026:	f043 0303 	orr.w	r3, r3, #3
 801602a:	b29a      	uxth	r2, r3
 801602c:	687b      	ldr	r3, [r7, #4]
 801602e:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8016030:	f06f 0301 	mvn.w	r3, #1
 8016034:	e023      	b.n	801607e <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8016036:	7dbb      	ldrb	r3, [r7, #22]
 8016038:	7dfa      	ldrb	r2, [r7, #23]
 801603a:	6939      	ldr	r1, [r7, #16]
 801603c:	6878      	ldr	r0, [r7, #4]
 801603e:	f7ff feed 	bl	8015e1c <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8016042:	687a      	ldr	r2, [r7, #4]
 8016044:	687b      	ldr	r3, [r7, #4]
 8016046:	3304      	adds	r3, #4
 8016048:	6939      	ldr	r1, [r7, #16]
 801604a:	6878      	ldr	r0, [r7, #4]
 801604c:	f7ff ff24 	bl	8015e98 <tcp_output_control_segment>
 8016050:	4603      	mov	r3, r0
 8016052:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8016054:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016058:	2b00      	cmp	r3, #0
 801605a:	d007      	beq.n	801606c <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801605c:	687b      	ldr	r3, [r7, #4]
 801605e:	8b5b      	ldrh	r3, [r3, #26]
 8016060:	f043 0303 	orr.w	r3, r3, #3
 8016064:	b29a      	uxth	r2, r3
 8016066:	687b      	ldr	r3, [r7, #4]
 8016068:	835a      	strh	r2, [r3, #26]
 801606a:	e006      	b.n	801607a <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801606c:	687b      	ldr	r3, [r7, #4]
 801606e:	8b5b      	ldrh	r3, [r3, #26]
 8016070:	f023 0303 	bic.w	r3, r3, #3
 8016074:	b29a      	uxth	r2, r3
 8016076:	687b      	ldr	r3, [r7, #4]
 8016078:	835a      	strh	r2, [r3, #26]
  }

  return err;
 801607a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801607e:	4618      	mov	r0, r3
 8016080:	371c      	adds	r7, #28
 8016082:	46bd      	mov	sp, r7
 8016084:	bd90      	pop	{r4, r7, pc}
 8016086:	bf00      	nop
 8016088:	0801d7e4 	.word	0x0801d7e4
 801608c:	0801dfa0 	.word	0x0801dfa0
 8016090:	0801d838 	.word	0x0801d838

08016094 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8016094:	b590      	push	{r4, r7, lr}
 8016096:	b087      	sub	sp, #28
 8016098:	af00      	add	r7, sp, #0
 801609a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801609c:	2300      	movs	r3, #0
 801609e:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 80160a0:	687b      	ldr	r3, [r7, #4]
 80160a2:	2b00      	cmp	r3, #0
 80160a4:	d106      	bne.n	80160b4 <tcp_keepalive+0x20>
 80160a6:	4b18      	ldr	r3, [pc, #96]	; (8016108 <tcp_keepalive+0x74>)
 80160a8:	f640 0224 	movw	r2, #2084	; 0x824
 80160ac:	4917      	ldr	r1, [pc, #92]	; (801610c <tcp_keepalive+0x78>)
 80160ae:	4818      	ldr	r0, [pc, #96]	; (8016110 <tcp_keepalive+0x7c>)
 80160b0:	f003 fbe6 	bl	8019880 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 80160b4:	7dfb      	ldrb	r3, [r7, #23]
 80160b6:	b29c      	uxth	r4, r3
 80160b8:	687b      	ldr	r3, [r7, #4]
 80160ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80160bc:	3b01      	subs	r3, #1
 80160be:	4618      	mov	r0, r3
 80160c0:	f7f9 f939 	bl	800f336 <lwip_htonl>
 80160c4:	4603      	mov	r3, r0
 80160c6:	2200      	movs	r2, #0
 80160c8:	4621      	mov	r1, r4
 80160ca:	6878      	ldr	r0, [r7, #4]
 80160cc:	f7ff fe68 	bl	8015da0 <tcp_output_alloc_header>
 80160d0:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80160d2:	693b      	ldr	r3, [r7, #16]
 80160d4:	2b00      	cmp	r3, #0
 80160d6:	d102      	bne.n	80160de <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 80160d8:	f04f 33ff 	mov.w	r3, #4294967295
 80160dc:	e010      	b.n	8016100 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80160de:	7dfb      	ldrb	r3, [r7, #23]
 80160e0:	2200      	movs	r2, #0
 80160e2:	6939      	ldr	r1, [r7, #16]
 80160e4:	6878      	ldr	r0, [r7, #4]
 80160e6:	f7ff fe99 	bl	8015e1c <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80160ea:	687a      	ldr	r2, [r7, #4]
 80160ec:	687b      	ldr	r3, [r7, #4]
 80160ee:	3304      	adds	r3, #4
 80160f0:	6939      	ldr	r1, [r7, #16]
 80160f2:	6878      	ldr	r0, [r7, #4]
 80160f4:	f7ff fed0 	bl	8015e98 <tcp_output_control_segment>
 80160f8:	4603      	mov	r3, r0
 80160fa:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80160fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8016100:	4618      	mov	r0, r3
 8016102:	371c      	adds	r7, #28
 8016104:	46bd      	mov	sp, r7
 8016106:	bd90      	pop	{r4, r7, pc}
 8016108:	0801d7e4 	.word	0x0801d7e4
 801610c:	0801dfc0 	.word	0x0801dfc0
 8016110:	0801d838 	.word	0x0801d838

08016114 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8016114:	b590      	push	{r4, r7, lr}
 8016116:	b08b      	sub	sp, #44	; 0x2c
 8016118:	af00      	add	r7, sp, #0
 801611a:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801611c:	2300      	movs	r3, #0
 801611e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8016122:	687b      	ldr	r3, [r7, #4]
 8016124:	2b00      	cmp	r3, #0
 8016126:	d106      	bne.n	8016136 <tcp_zero_window_probe+0x22>
 8016128:	4b4c      	ldr	r3, [pc, #304]	; (801625c <tcp_zero_window_probe+0x148>)
 801612a:	f640 024f 	movw	r2, #2127	; 0x84f
 801612e:	494c      	ldr	r1, [pc, #304]	; (8016260 <tcp_zero_window_probe+0x14c>)
 8016130:	484c      	ldr	r0, [pc, #304]	; (8016264 <tcp_zero_window_probe+0x150>)
 8016132:	f003 fba5 	bl	8019880 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8016136:	687b      	ldr	r3, [r7, #4]
 8016138:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801613a:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 801613c:	6a3b      	ldr	r3, [r7, #32]
 801613e:	2b00      	cmp	r3, #0
 8016140:	d101      	bne.n	8016146 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8016142:	2300      	movs	r3, #0
 8016144:	e086      	b.n	8016254 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8016146:	687b      	ldr	r3, [r7, #4]
 8016148:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801614c:	2bff      	cmp	r3, #255	; 0xff
 801614e:	d007      	beq.n	8016160 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8016150:	687b      	ldr	r3, [r7, #4]
 8016152:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8016156:	3301      	adds	r3, #1
 8016158:	b2da      	uxtb	r2, r3
 801615a:	687b      	ldr	r3, [r7, #4]
 801615c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8016160:	6a3b      	ldr	r3, [r7, #32]
 8016162:	68db      	ldr	r3, [r3, #12]
 8016164:	899b      	ldrh	r3, [r3, #12]
 8016166:	b29b      	uxth	r3, r3
 8016168:	4618      	mov	r0, r3
 801616a:	f7f9 f8cf 	bl	800f30c <lwip_htons>
 801616e:	4603      	mov	r3, r0
 8016170:	b2db      	uxtb	r3, r3
 8016172:	f003 0301 	and.w	r3, r3, #1
 8016176:	2b00      	cmp	r3, #0
 8016178:	d005      	beq.n	8016186 <tcp_zero_window_probe+0x72>
 801617a:	6a3b      	ldr	r3, [r7, #32]
 801617c:	891b      	ldrh	r3, [r3, #8]
 801617e:	2b00      	cmp	r3, #0
 8016180:	d101      	bne.n	8016186 <tcp_zero_window_probe+0x72>
 8016182:	2301      	movs	r3, #1
 8016184:	e000      	b.n	8016188 <tcp_zero_window_probe+0x74>
 8016186:	2300      	movs	r3, #0
 8016188:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 801618a:	7ffb      	ldrb	r3, [r7, #31]
 801618c:	2b00      	cmp	r3, #0
 801618e:	bf0c      	ite	eq
 8016190:	2301      	moveq	r3, #1
 8016192:	2300      	movne	r3, #0
 8016194:	b2db      	uxtb	r3, r3
 8016196:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8016198:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801619c:	b299      	uxth	r1, r3
 801619e:	6a3b      	ldr	r3, [r7, #32]
 80161a0:	68db      	ldr	r3, [r3, #12]
 80161a2:	685b      	ldr	r3, [r3, #4]
 80161a4:	8bba      	ldrh	r2, [r7, #28]
 80161a6:	6878      	ldr	r0, [r7, #4]
 80161a8:	f7ff fdfa 	bl	8015da0 <tcp_output_alloc_header>
 80161ac:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 80161ae:	69bb      	ldr	r3, [r7, #24]
 80161b0:	2b00      	cmp	r3, #0
 80161b2:	d102      	bne.n	80161ba <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 80161b4:	f04f 33ff 	mov.w	r3, #4294967295
 80161b8:	e04c      	b.n	8016254 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 80161ba:	69bb      	ldr	r3, [r7, #24]
 80161bc:	685b      	ldr	r3, [r3, #4]
 80161be:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 80161c0:	7ffb      	ldrb	r3, [r7, #31]
 80161c2:	2b00      	cmp	r3, #0
 80161c4:	d011      	beq.n	80161ea <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 80161c6:	697b      	ldr	r3, [r7, #20]
 80161c8:	899b      	ldrh	r3, [r3, #12]
 80161ca:	b29b      	uxth	r3, r3
 80161cc:	b21b      	sxth	r3, r3
 80161ce:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80161d2:	b21c      	sxth	r4, r3
 80161d4:	2011      	movs	r0, #17
 80161d6:	f7f9 f899 	bl	800f30c <lwip_htons>
 80161da:	4603      	mov	r3, r0
 80161dc:	b21b      	sxth	r3, r3
 80161de:	4323      	orrs	r3, r4
 80161e0:	b21b      	sxth	r3, r3
 80161e2:	b29a      	uxth	r2, r3
 80161e4:	697b      	ldr	r3, [r7, #20]
 80161e6:	819a      	strh	r2, [r3, #12]
 80161e8:	e010      	b.n	801620c <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 80161ea:	69bb      	ldr	r3, [r7, #24]
 80161ec:	685b      	ldr	r3, [r3, #4]
 80161ee:	3314      	adds	r3, #20
 80161f0:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 80161f2:	6a3b      	ldr	r3, [r7, #32]
 80161f4:	6858      	ldr	r0, [r3, #4]
 80161f6:	6a3b      	ldr	r3, [r7, #32]
 80161f8:	685b      	ldr	r3, [r3, #4]
 80161fa:	891a      	ldrh	r2, [r3, #8]
 80161fc:	6a3b      	ldr	r3, [r7, #32]
 80161fe:	891b      	ldrh	r3, [r3, #8]
 8016200:	1ad3      	subs	r3, r2, r3
 8016202:	b29b      	uxth	r3, r3
 8016204:	2201      	movs	r2, #1
 8016206:	6939      	ldr	r1, [r7, #16]
 8016208:	f7fa fe4e 	bl	8010ea8 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 801620c:	6a3b      	ldr	r3, [r7, #32]
 801620e:	68db      	ldr	r3, [r3, #12]
 8016210:	685b      	ldr	r3, [r3, #4]
 8016212:	4618      	mov	r0, r3
 8016214:	f7f9 f88f 	bl	800f336 <lwip_htonl>
 8016218:	4603      	mov	r3, r0
 801621a:	3301      	adds	r3, #1
 801621c:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801621e:	687b      	ldr	r3, [r7, #4]
 8016220:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8016222:	68fb      	ldr	r3, [r7, #12]
 8016224:	1ad3      	subs	r3, r2, r3
 8016226:	2b00      	cmp	r3, #0
 8016228:	da02      	bge.n	8016230 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 801622a:	687b      	ldr	r3, [r7, #4]
 801622c:	68fa      	ldr	r2, [r7, #12]
 801622e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8016230:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016234:	2200      	movs	r2, #0
 8016236:	69b9      	ldr	r1, [r7, #24]
 8016238:	6878      	ldr	r0, [r7, #4]
 801623a:	f7ff fdef 	bl	8015e1c <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801623e:	687a      	ldr	r2, [r7, #4]
 8016240:	687b      	ldr	r3, [r7, #4]
 8016242:	3304      	adds	r3, #4
 8016244:	69b9      	ldr	r1, [r7, #24]
 8016246:	6878      	ldr	r0, [r7, #4]
 8016248:	f7ff fe26 	bl	8015e98 <tcp_output_control_segment>
 801624c:	4603      	mov	r3, r0
 801624e:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8016250:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8016254:	4618      	mov	r0, r3
 8016256:	372c      	adds	r7, #44	; 0x2c
 8016258:	46bd      	mov	sp, r7
 801625a:	bd90      	pop	{r4, r7, pc}
 801625c:	0801d7e4 	.word	0x0801d7e4
 8016260:	0801dfdc 	.word	0x0801dfdc
 8016264:	0801d838 	.word	0x0801d838

08016268 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8016268:	b580      	push	{r7, lr}
 801626a:	b082      	sub	sp, #8
 801626c:	af00      	add	r7, sp, #0
 801626e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8016270:	f7fa ff08 	bl	8011084 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8016274:	4b0a      	ldr	r3, [pc, #40]	; (80162a0 <tcpip_tcp_timer+0x38>)
 8016276:	681b      	ldr	r3, [r3, #0]
 8016278:	2b00      	cmp	r3, #0
 801627a:	d103      	bne.n	8016284 <tcpip_tcp_timer+0x1c>
 801627c:	4b09      	ldr	r3, [pc, #36]	; (80162a4 <tcpip_tcp_timer+0x3c>)
 801627e:	681b      	ldr	r3, [r3, #0]
 8016280:	2b00      	cmp	r3, #0
 8016282:	d005      	beq.n	8016290 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8016284:	2200      	movs	r2, #0
 8016286:	4908      	ldr	r1, [pc, #32]	; (80162a8 <tcpip_tcp_timer+0x40>)
 8016288:	20fa      	movs	r0, #250	; 0xfa
 801628a:	f000 f8f3 	bl	8016474 <sys_timeout>
 801628e:	e003      	b.n	8016298 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8016290:	4b06      	ldr	r3, [pc, #24]	; (80162ac <tcpip_tcp_timer+0x44>)
 8016292:	2200      	movs	r2, #0
 8016294:	601a      	str	r2, [r3, #0]
  }
}
 8016296:	bf00      	nop
 8016298:	bf00      	nop
 801629a:	3708      	adds	r7, #8
 801629c:	46bd      	mov	sp, r7
 801629e:	bd80      	pop	{r7, pc}
 80162a0:	20007098 	.word	0x20007098
 80162a4:	2000709c 	.word	0x2000709c
 80162a8:	08016269 	.word	0x08016269
 80162ac:	200070e4 	.word	0x200070e4

080162b0 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 80162b0:	b580      	push	{r7, lr}
 80162b2:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 80162b4:	4b0a      	ldr	r3, [pc, #40]	; (80162e0 <tcp_timer_needed+0x30>)
 80162b6:	681b      	ldr	r3, [r3, #0]
 80162b8:	2b00      	cmp	r3, #0
 80162ba:	d10f      	bne.n	80162dc <tcp_timer_needed+0x2c>
 80162bc:	4b09      	ldr	r3, [pc, #36]	; (80162e4 <tcp_timer_needed+0x34>)
 80162be:	681b      	ldr	r3, [r3, #0]
 80162c0:	2b00      	cmp	r3, #0
 80162c2:	d103      	bne.n	80162cc <tcp_timer_needed+0x1c>
 80162c4:	4b08      	ldr	r3, [pc, #32]	; (80162e8 <tcp_timer_needed+0x38>)
 80162c6:	681b      	ldr	r3, [r3, #0]
 80162c8:	2b00      	cmp	r3, #0
 80162ca:	d007      	beq.n	80162dc <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 80162cc:	4b04      	ldr	r3, [pc, #16]	; (80162e0 <tcp_timer_needed+0x30>)
 80162ce:	2201      	movs	r2, #1
 80162d0:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80162d2:	2200      	movs	r2, #0
 80162d4:	4905      	ldr	r1, [pc, #20]	; (80162ec <tcp_timer_needed+0x3c>)
 80162d6:	20fa      	movs	r0, #250	; 0xfa
 80162d8:	f000 f8cc 	bl	8016474 <sys_timeout>
  }
}
 80162dc:	bf00      	nop
 80162de:	bd80      	pop	{r7, pc}
 80162e0:	200070e4 	.word	0x200070e4
 80162e4:	20007098 	.word	0x20007098
 80162e8:	2000709c 	.word	0x2000709c
 80162ec:	08016269 	.word	0x08016269

080162f0 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 80162f0:	b580      	push	{r7, lr}
 80162f2:	b086      	sub	sp, #24
 80162f4:	af00      	add	r7, sp, #0
 80162f6:	60f8      	str	r0, [r7, #12]
 80162f8:	60b9      	str	r1, [r7, #8]
 80162fa:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 80162fc:	2006      	movs	r0, #6
 80162fe:	f7f9 fd23 	bl	800fd48 <memp_malloc>
 8016302:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8016304:	693b      	ldr	r3, [r7, #16]
 8016306:	2b00      	cmp	r3, #0
 8016308:	d109      	bne.n	801631e <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801630a:	693b      	ldr	r3, [r7, #16]
 801630c:	2b00      	cmp	r3, #0
 801630e:	d151      	bne.n	80163b4 <sys_timeout_abs+0xc4>
 8016310:	4b2a      	ldr	r3, [pc, #168]	; (80163bc <sys_timeout_abs+0xcc>)
 8016312:	22be      	movs	r2, #190	; 0xbe
 8016314:	492a      	ldr	r1, [pc, #168]	; (80163c0 <sys_timeout_abs+0xd0>)
 8016316:	482b      	ldr	r0, [pc, #172]	; (80163c4 <sys_timeout_abs+0xd4>)
 8016318:	f003 fab2 	bl	8019880 <iprintf>
    return;
 801631c:	e04a      	b.n	80163b4 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 801631e:	693b      	ldr	r3, [r7, #16]
 8016320:	2200      	movs	r2, #0
 8016322:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8016324:	693b      	ldr	r3, [r7, #16]
 8016326:	68ba      	ldr	r2, [r7, #8]
 8016328:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 801632a:	693b      	ldr	r3, [r7, #16]
 801632c:	687a      	ldr	r2, [r7, #4]
 801632e:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8016330:	693b      	ldr	r3, [r7, #16]
 8016332:	68fa      	ldr	r2, [r7, #12]
 8016334:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8016336:	4b24      	ldr	r3, [pc, #144]	; (80163c8 <sys_timeout_abs+0xd8>)
 8016338:	681b      	ldr	r3, [r3, #0]
 801633a:	2b00      	cmp	r3, #0
 801633c:	d103      	bne.n	8016346 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 801633e:	4a22      	ldr	r2, [pc, #136]	; (80163c8 <sys_timeout_abs+0xd8>)
 8016340:	693b      	ldr	r3, [r7, #16]
 8016342:	6013      	str	r3, [r2, #0]
    return;
 8016344:	e037      	b.n	80163b6 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8016346:	693b      	ldr	r3, [r7, #16]
 8016348:	685a      	ldr	r2, [r3, #4]
 801634a:	4b1f      	ldr	r3, [pc, #124]	; (80163c8 <sys_timeout_abs+0xd8>)
 801634c:	681b      	ldr	r3, [r3, #0]
 801634e:	685b      	ldr	r3, [r3, #4]
 8016350:	1ad3      	subs	r3, r2, r3
 8016352:	0fdb      	lsrs	r3, r3, #31
 8016354:	f003 0301 	and.w	r3, r3, #1
 8016358:	b2db      	uxtb	r3, r3
 801635a:	2b00      	cmp	r3, #0
 801635c:	d007      	beq.n	801636e <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 801635e:	4b1a      	ldr	r3, [pc, #104]	; (80163c8 <sys_timeout_abs+0xd8>)
 8016360:	681a      	ldr	r2, [r3, #0]
 8016362:	693b      	ldr	r3, [r7, #16]
 8016364:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8016366:	4a18      	ldr	r2, [pc, #96]	; (80163c8 <sys_timeout_abs+0xd8>)
 8016368:	693b      	ldr	r3, [r7, #16]
 801636a:	6013      	str	r3, [r2, #0]
 801636c:	e023      	b.n	80163b6 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 801636e:	4b16      	ldr	r3, [pc, #88]	; (80163c8 <sys_timeout_abs+0xd8>)
 8016370:	681b      	ldr	r3, [r3, #0]
 8016372:	617b      	str	r3, [r7, #20]
 8016374:	e01a      	b.n	80163ac <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8016376:	697b      	ldr	r3, [r7, #20]
 8016378:	681b      	ldr	r3, [r3, #0]
 801637a:	2b00      	cmp	r3, #0
 801637c:	d00b      	beq.n	8016396 <sys_timeout_abs+0xa6>
 801637e:	693b      	ldr	r3, [r7, #16]
 8016380:	685a      	ldr	r2, [r3, #4]
 8016382:	697b      	ldr	r3, [r7, #20]
 8016384:	681b      	ldr	r3, [r3, #0]
 8016386:	685b      	ldr	r3, [r3, #4]
 8016388:	1ad3      	subs	r3, r2, r3
 801638a:	0fdb      	lsrs	r3, r3, #31
 801638c:	f003 0301 	and.w	r3, r3, #1
 8016390:	b2db      	uxtb	r3, r3
 8016392:	2b00      	cmp	r3, #0
 8016394:	d007      	beq.n	80163a6 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8016396:	697b      	ldr	r3, [r7, #20]
 8016398:	681a      	ldr	r2, [r3, #0]
 801639a:	693b      	ldr	r3, [r7, #16]
 801639c:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 801639e:	697b      	ldr	r3, [r7, #20]
 80163a0:	693a      	ldr	r2, [r7, #16]
 80163a2:	601a      	str	r2, [r3, #0]
        break;
 80163a4:	e007      	b.n	80163b6 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 80163a6:	697b      	ldr	r3, [r7, #20]
 80163a8:	681b      	ldr	r3, [r3, #0]
 80163aa:	617b      	str	r3, [r7, #20]
 80163ac:	697b      	ldr	r3, [r7, #20]
 80163ae:	2b00      	cmp	r3, #0
 80163b0:	d1e1      	bne.n	8016376 <sys_timeout_abs+0x86>
 80163b2:	e000      	b.n	80163b6 <sys_timeout_abs+0xc6>
    return;
 80163b4:	bf00      	nop
      }
    }
  }
}
 80163b6:	3718      	adds	r7, #24
 80163b8:	46bd      	mov	sp, r7
 80163ba:	bd80      	pop	{r7, pc}
 80163bc:	0801e000 	.word	0x0801e000
 80163c0:	0801e034 	.word	0x0801e034
 80163c4:	0801e074 	.word	0x0801e074
 80163c8:	200070dc 	.word	0x200070dc

080163cc <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 80163cc:	b580      	push	{r7, lr}
 80163ce:	b086      	sub	sp, #24
 80163d0:	af00      	add	r7, sp, #0
 80163d2:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 80163d4:	687b      	ldr	r3, [r7, #4]
 80163d6:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 80163d8:	697b      	ldr	r3, [r7, #20]
 80163da:	685b      	ldr	r3, [r3, #4]
 80163dc:	4798      	blx	r3

  now = sys_now();
 80163de:	f7f8 fdb5 	bl	800ef4c <sys_now>
 80163e2:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 80163e4:	697b      	ldr	r3, [r7, #20]
 80163e6:	681a      	ldr	r2, [r3, #0]
 80163e8:	4b0f      	ldr	r3, [pc, #60]	; (8016428 <lwip_cyclic_timer+0x5c>)
 80163ea:	681b      	ldr	r3, [r3, #0]
 80163ec:	4413      	add	r3, r2
 80163ee:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 80163f0:	68fa      	ldr	r2, [r7, #12]
 80163f2:	693b      	ldr	r3, [r7, #16]
 80163f4:	1ad3      	subs	r3, r2, r3
 80163f6:	0fdb      	lsrs	r3, r3, #31
 80163f8:	f003 0301 	and.w	r3, r3, #1
 80163fc:	b2db      	uxtb	r3, r3
 80163fe:	2b00      	cmp	r3, #0
 8016400:	d009      	beq.n	8016416 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8016402:	697b      	ldr	r3, [r7, #20]
 8016404:	681a      	ldr	r2, [r3, #0]
 8016406:	693b      	ldr	r3, [r7, #16]
 8016408:	4413      	add	r3, r2
 801640a:	687a      	ldr	r2, [r7, #4]
 801640c:	4907      	ldr	r1, [pc, #28]	; (801642c <lwip_cyclic_timer+0x60>)
 801640e:	4618      	mov	r0, r3
 8016410:	f7ff ff6e 	bl	80162f0 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8016414:	e004      	b.n	8016420 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8016416:	687a      	ldr	r2, [r7, #4]
 8016418:	4904      	ldr	r1, [pc, #16]	; (801642c <lwip_cyclic_timer+0x60>)
 801641a:	68f8      	ldr	r0, [r7, #12]
 801641c:	f7ff ff68 	bl	80162f0 <sys_timeout_abs>
}
 8016420:	bf00      	nop
 8016422:	3718      	adds	r7, #24
 8016424:	46bd      	mov	sp, r7
 8016426:	bd80      	pop	{r7, pc}
 8016428:	200070e0 	.word	0x200070e0
 801642c:	080163cd 	.word	0x080163cd

08016430 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8016430:	b580      	push	{r7, lr}
 8016432:	b082      	sub	sp, #8
 8016434:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8016436:	2301      	movs	r3, #1
 8016438:	607b      	str	r3, [r7, #4]
 801643a:	e00e      	b.n	801645a <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 801643c:	4a0b      	ldr	r2, [pc, #44]	; (801646c <sys_timeouts_init+0x3c>)
 801643e:	687b      	ldr	r3, [r7, #4]
 8016440:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8016444:	687b      	ldr	r3, [r7, #4]
 8016446:	00db      	lsls	r3, r3, #3
 8016448:	4a08      	ldr	r2, [pc, #32]	; (801646c <sys_timeouts_init+0x3c>)
 801644a:	4413      	add	r3, r2
 801644c:	461a      	mov	r2, r3
 801644e:	4908      	ldr	r1, [pc, #32]	; (8016470 <sys_timeouts_init+0x40>)
 8016450:	f000 f810 	bl	8016474 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8016454:	687b      	ldr	r3, [r7, #4]
 8016456:	3301      	adds	r3, #1
 8016458:	607b      	str	r3, [r7, #4]
 801645a:	687b      	ldr	r3, [r7, #4]
 801645c:	2b02      	cmp	r3, #2
 801645e:	d9ed      	bls.n	801643c <sys_timeouts_init+0xc>
  }
}
 8016460:	bf00      	nop
 8016462:	bf00      	nop
 8016464:	3708      	adds	r7, #8
 8016466:	46bd      	mov	sp, r7
 8016468:	bd80      	pop	{r7, pc}
 801646a:	bf00      	nop
 801646c:	0801ec2c 	.word	0x0801ec2c
 8016470:	080163cd 	.word	0x080163cd

08016474 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8016474:	b580      	push	{r7, lr}
 8016476:	b086      	sub	sp, #24
 8016478:	af00      	add	r7, sp, #0
 801647a:	60f8      	str	r0, [r7, #12]
 801647c:	60b9      	str	r1, [r7, #8]
 801647e:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8016480:	68fb      	ldr	r3, [r7, #12]
 8016482:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8016486:	d306      	bcc.n	8016496 <sys_timeout+0x22>
 8016488:	4b0a      	ldr	r3, [pc, #40]	; (80164b4 <sys_timeout+0x40>)
 801648a:	f240 1229 	movw	r2, #297	; 0x129
 801648e:	490a      	ldr	r1, [pc, #40]	; (80164b8 <sys_timeout+0x44>)
 8016490:	480a      	ldr	r0, [pc, #40]	; (80164bc <sys_timeout+0x48>)
 8016492:	f003 f9f5 	bl	8019880 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8016496:	f7f8 fd59 	bl	800ef4c <sys_now>
 801649a:	4602      	mov	r2, r0
 801649c:	68fb      	ldr	r3, [r7, #12]
 801649e:	4413      	add	r3, r2
 80164a0:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 80164a2:	687a      	ldr	r2, [r7, #4]
 80164a4:	68b9      	ldr	r1, [r7, #8]
 80164a6:	6978      	ldr	r0, [r7, #20]
 80164a8:	f7ff ff22 	bl	80162f0 <sys_timeout_abs>
#endif
}
 80164ac:	bf00      	nop
 80164ae:	3718      	adds	r7, #24
 80164b0:	46bd      	mov	sp, r7
 80164b2:	bd80      	pop	{r7, pc}
 80164b4:	0801e000 	.word	0x0801e000
 80164b8:	0801e09c 	.word	0x0801e09c
 80164bc:	0801e074 	.word	0x0801e074

080164c0 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 80164c0:	b580      	push	{r7, lr}
 80164c2:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80164c4:	f002 fca2 	bl	8018e0c <rand>
 80164c8:	4603      	mov	r3, r0
 80164ca:	b29b      	uxth	r3, r3
 80164cc:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80164d0:	b29b      	uxth	r3, r3
 80164d2:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80164d6:	b29a      	uxth	r2, r3
 80164d8:	4b01      	ldr	r3, [pc, #4]	; (80164e0 <udp_init+0x20>)
 80164da:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80164dc:	bf00      	nop
 80164de:	bd80      	pop	{r7, pc}
 80164e0:	20000060 	.word	0x20000060

080164e4 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 80164e4:	b580      	push	{r7, lr}
 80164e6:	b084      	sub	sp, #16
 80164e8:	af00      	add	r7, sp, #0
 80164ea:	60f8      	str	r0, [r7, #12]
 80164ec:	60b9      	str	r1, [r7, #8]
 80164ee:	4613      	mov	r3, r2
 80164f0:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 80164f2:	68fb      	ldr	r3, [r7, #12]
 80164f4:	2b00      	cmp	r3, #0
 80164f6:	d105      	bne.n	8016504 <udp_input_local_match+0x20>
 80164f8:	4b27      	ldr	r3, [pc, #156]	; (8016598 <udp_input_local_match+0xb4>)
 80164fa:	2287      	movs	r2, #135	; 0x87
 80164fc:	4927      	ldr	r1, [pc, #156]	; (801659c <udp_input_local_match+0xb8>)
 80164fe:	4828      	ldr	r0, [pc, #160]	; (80165a0 <udp_input_local_match+0xbc>)
 8016500:	f003 f9be 	bl	8019880 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8016504:	68bb      	ldr	r3, [r7, #8]
 8016506:	2b00      	cmp	r3, #0
 8016508:	d105      	bne.n	8016516 <udp_input_local_match+0x32>
 801650a:	4b23      	ldr	r3, [pc, #140]	; (8016598 <udp_input_local_match+0xb4>)
 801650c:	2288      	movs	r2, #136	; 0x88
 801650e:	4925      	ldr	r1, [pc, #148]	; (80165a4 <udp_input_local_match+0xc0>)
 8016510:	4823      	ldr	r0, [pc, #140]	; (80165a0 <udp_input_local_match+0xbc>)
 8016512:	f003 f9b5 	bl	8019880 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8016516:	68fb      	ldr	r3, [r7, #12]
 8016518:	7a1b      	ldrb	r3, [r3, #8]
 801651a:	2b00      	cmp	r3, #0
 801651c:	d00b      	beq.n	8016536 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801651e:	68fb      	ldr	r3, [r7, #12]
 8016520:	7a1a      	ldrb	r2, [r3, #8]
 8016522:	4b21      	ldr	r3, [pc, #132]	; (80165a8 <udp_input_local_match+0xc4>)
 8016524:	685b      	ldr	r3, [r3, #4]
 8016526:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801652a:	3301      	adds	r3, #1
 801652c:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801652e:	429a      	cmp	r2, r3
 8016530:	d001      	beq.n	8016536 <udp_input_local_match+0x52>
    return 0;
 8016532:	2300      	movs	r3, #0
 8016534:	e02b      	b.n	801658e <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8016536:	79fb      	ldrb	r3, [r7, #7]
 8016538:	2b00      	cmp	r3, #0
 801653a:	d018      	beq.n	801656e <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801653c:	68fb      	ldr	r3, [r7, #12]
 801653e:	2b00      	cmp	r3, #0
 8016540:	d013      	beq.n	801656a <udp_input_local_match+0x86>
 8016542:	68fb      	ldr	r3, [r7, #12]
 8016544:	681b      	ldr	r3, [r3, #0]
 8016546:	2b00      	cmp	r3, #0
 8016548:	d00f      	beq.n	801656a <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801654a:	4b17      	ldr	r3, [pc, #92]	; (80165a8 <udp_input_local_match+0xc4>)
 801654c:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801654e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016552:	d00a      	beq.n	801656a <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8016554:	68fb      	ldr	r3, [r7, #12]
 8016556:	681a      	ldr	r2, [r3, #0]
 8016558:	4b13      	ldr	r3, [pc, #76]	; (80165a8 <udp_input_local_match+0xc4>)
 801655a:	695b      	ldr	r3, [r3, #20]
 801655c:	405a      	eors	r2, r3
 801655e:	68bb      	ldr	r3, [r7, #8]
 8016560:	3308      	adds	r3, #8
 8016562:	681b      	ldr	r3, [r3, #0]
 8016564:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8016566:	2b00      	cmp	r3, #0
 8016568:	d110      	bne.n	801658c <udp_input_local_match+0xa8>
          return 1;
 801656a:	2301      	movs	r3, #1
 801656c:	e00f      	b.n	801658e <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801656e:	68fb      	ldr	r3, [r7, #12]
 8016570:	2b00      	cmp	r3, #0
 8016572:	d009      	beq.n	8016588 <udp_input_local_match+0xa4>
 8016574:	68fb      	ldr	r3, [r7, #12]
 8016576:	681b      	ldr	r3, [r3, #0]
 8016578:	2b00      	cmp	r3, #0
 801657a:	d005      	beq.n	8016588 <udp_input_local_match+0xa4>
 801657c:	68fb      	ldr	r3, [r7, #12]
 801657e:	681a      	ldr	r2, [r3, #0]
 8016580:	4b09      	ldr	r3, [pc, #36]	; (80165a8 <udp_input_local_match+0xc4>)
 8016582:	695b      	ldr	r3, [r3, #20]
 8016584:	429a      	cmp	r2, r3
 8016586:	d101      	bne.n	801658c <udp_input_local_match+0xa8>
        return 1;
 8016588:	2301      	movs	r3, #1
 801658a:	e000      	b.n	801658e <udp_input_local_match+0xaa>
      }
  }

  return 0;
 801658c:	2300      	movs	r3, #0
}
 801658e:	4618      	mov	r0, r3
 8016590:	3710      	adds	r7, #16
 8016592:	46bd      	mov	sp, r7
 8016594:	bd80      	pop	{r7, pc}
 8016596:	bf00      	nop
 8016598:	0801e0e8 	.word	0x0801e0e8
 801659c:	0801e118 	.word	0x0801e118
 80165a0:	0801e13c 	.word	0x0801e13c
 80165a4:	0801e164 	.word	0x0801e164
 80165a8:	200007b0 	.word	0x200007b0

080165ac <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 80165ac:	b590      	push	{r4, r7, lr}
 80165ae:	b08d      	sub	sp, #52	; 0x34
 80165b0:	af02      	add	r7, sp, #8
 80165b2:	6078      	str	r0, [r7, #4]
 80165b4:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 80165b6:	2300      	movs	r3, #0
 80165b8:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 80165ba:	687b      	ldr	r3, [r7, #4]
 80165bc:	2b00      	cmp	r3, #0
 80165be:	d105      	bne.n	80165cc <udp_input+0x20>
 80165c0:	4b7c      	ldr	r3, [pc, #496]	; (80167b4 <udp_input+0x208>)
 80165c2:	22cf      	movs	r2, #207	; 0xcf
 80165c4:	497c      	ldr	r1, [pc, #496]	; (80167b8 <udp_input+0x20c>)
 80165c6:	487d      	ldr	r0, [pc, #500]	; (80167bc <udp_input+0x210>)
 80165c8:	f003 f95a 	bl	8019880 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 80165cc:	683b      	ldr	r3, [r7, #0]
 80165ce:	2b00      	cmp	r3, #0
 80165d0:	d105      	bne.n	80165de <udp_input+0x32>
 80165d2:	4b78      	ldr	r3, [pc, #480]	; (80167b4 <udp_input+0x208>)
 80165d4:	22d0      	movs	r2, #208	; 0xd0
 80165d6:	497a      	ldr	r1, [pc, #488]	; (80167c0 <udp_input+0x214>)
 80165d8:	4878      	ldr	r0, [pc, #480]	; (80167bc <udp_input+0x210>)
 80165da:	f003 f951 	bl	8019880 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 80165de:	687b      	ldr	r3, [r7, #4]
 80165e0:	895b      	ldrh	r3, [r3, #10]
 80165e2:	2b07      	cmp	r3, #7
 80165e4:	d803      	bhi.n	80165ee <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 80165e6:	6878      	ldr	r0, [r7, #4]
 80165e8:	f7fa fa74 	bl	8010ad4 <pbuf_free>
    goto end;
 80165ec:	e0de      	b.n	80167ac <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 80165ee:	687b      	ldr	r3, [r7, #4]
 80165f0:	685b      	ldr	r3, [r3, #4]
 80165f2:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 80165f4:	4b73      	ldr	r3, [pc, #460]	; (80167c4 <udp_input+0x218>)
 80165f6:	695b      	ldr	r3, [r3, #20]
 80165f8:	4a72      	ldr	r2, [pc, #456]	; (80167c4 <udp_input+0x218>)
 80165fa:	6812      	ldr	r2, [r2, #0]
 80165fc:	4611      	mov	r1, r2
 80165fe:	4618      	mov	r0, r3
 8016600:	f001 fcae 	bl	8017f60 <ip4_addr_isbroadcast_u32>
 8016604:	4603      	mov	r3, r0
 8016606:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8016608:	697b      	ldr	r3, [r7, #20]
 801660a:	881b      	ldrh	r3, [r3, #0]
 801660c:	b29b      	uxth	r3, r3
 801660e:	4618      	mov	r0, r3
 8016610:	f7f8 fe7c 	bl	800f30c <lwip_htons>
 8016614:	4603      	mov	r3, r0
 8016616:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8016618:	697b      	ldr	r3, [r7, #20]
 801661a:	885b      	ldrh	r3, [r3, #2]
 801661c:	b29b      	uxth	r3, r3
 801661e:	4618      	mov	r0, r3
 8016620:	f7f8 fe74 	bl	800f30c <lwip_htons>
 8016624:	4603      	mov	r3, r0
 8016626:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8016628:	2300      	movs	r3, #0
 801662a:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 801662c:	2300      	movs	r3, #0
 801662e:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8016630:	2300      	movs	r3, #0
 8016632:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8016634:	4b64      	ldr	r3, [pc, #400]	; (80167c8 <udp_input+0x21c>)
 8016636:	681b      	ldr	r3, [r3, #0]
 8016638:	627b      	str	r3, [r7, #36]	; 0x24
 801663a:	e054      	b.n	80166e6 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 801663c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801663e:	8a5b      	ldrh	r3, [r3, #18]
 8016640:	89fa      	ldrh	r2, [r7, #14]
 8016642:	429a      	cmp	r2, r3
 8016644:	d14a      	bne.n	80166dc <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8016646:	7cfb      	ldrb	r3, [r7, #19]
 8016648:	461a      	mov	r2, r3
 801664a:	6839      	ldr	r1, [r7, #0]
 801664c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801664e:	f7ff ff49 	bl	80164e4 <udp_input_local_match>
 8016652:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8016654:	2b00      	cmp	r3, #0
 8016656:	d041      	beq.n	80166dc <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8016658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801665a:	7c1b      	ldrb	r3, [r3, #16]
 801665c:	f003 0304 	and.w	r3, r3, #4
 8016660:	2b00      	cmp	r3, #0
 8016662:	d11d      	bne.n	80166a0 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8016664:	69fb      	ldr	r3, [r7, #28]
 8016666:	2b00      	cmp	r3, #0
 8016668:	d102      	bne.n	8016670 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 801666a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801666c:	61fb      	str	r3, [r7, #28]
 801666e:	e017      	b.n	80166a0 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8016670:	7cfb      	ldrb	r3, [r7, #19]
 8016672:	2b00      	cmp	r3, #0
 8016674:	d014      	beq.n	80166a0 <udp_input+0xf4>
 8016676:	4b53      	ldr	r3, [pc, #332]	; (80167c4 <udp_input+0x218>)
 8016678:	695b      	ldr	r3, [r3, #20]
 801667a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801667e:	d10f      	bne.n	80166a0 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8016680:	69fb      	ldr	r3, [r7, #28]
 8016682:	681a      	ldr	r2, [r3, #0]
 8016684:	683b      	ldr	r3, [r7, #0]
 8016686:	3304      	adds	r3, #4
 8016688:	681b      	ldr	r3, [r3, #0]
 801668a:	429a      	cmp	r2, r3
 801668c:	d008      	beq.n	80166a0 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 801668e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016690:	681a      	ldr	r2, [r3, #0]
 8016692:	683b      	ldr	r3, [r7, #0]
 8016694:	3304      	adds	r3, #4
 8016696:	681b      	ldr	r3, [r3, #0]
 8016698:	429a      	cmp	r2, r3
 801669a:	d101      	bne.n	80166a0 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 801669c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801669e:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 80166a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80166a2:	8a9b      	ldrh	r3, [r3, #20]
 80166a4:	8a3a      	ldrh	r2, [r7, #16]
 80166a6:	429a      	cmp	r2, r3
 80166a8:	d118      	bne.n	80166dc <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 80166aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80166ac:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 80166ae:	2b00      	cmp	r3, #0
 80166b0:	d005      	beq.n	80166be <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 80166b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80166b4:	685a      	ldr	r2, [r3, #4]
 80166b6:	4b43      	ldr	r3, [pc, #268]	; (80167c4 <udp_input+0x218>)
 80166b8:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 80166ba:	429a      	cmp	r2, r3
 80166bc:	d10e      	bne.n	80166dc <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 80166be:	6a3b      	ldr	r3, [r7, #32]
 80166c0:	2b00      	cmp	r3, #0
 80166c2:	d014      	beq.n	80166ee <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 80166c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80166c6:	68da      	ldr	r2, [r3, #12]
 80166c8:	6a3b      	ldr	r3, [r7, #32]
 80166ca:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 80166cc:	4b3e      	ldr	r3, [pc, #248]	; (80167c8 <udp_input+0x21c>)
 80166ce:	681a      	ldr	r2, [r3, #0]
 80166d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80166d2:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 80166d4:	4a3c      	ldr	r2, [pc, #240]	; (80167c8 <udp_input+0x21c>)
 80166d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80166d8:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 80166da:	e008      	b.n	80166ee <udp_input+0x142>
      }
    }

    prev = pcb;
 80166dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80166de:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80166e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80166e2:	68db      	ldr	r3, [r3, #12]
 80166e4:	627b      	str	r3, [r7, #36]	; 0x24
 80166e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80166e8:	2b00      	cmp	r3, #0
 80166ea:	d1a7      	bne.n	801663c <udp_input+0x90>
 80166ec:	e000      	b.n	80166f0 <udp_input+0x144>
        break;
 80166ee:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 80166f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80166f2:	2b00      	cmp	r3, #0
 80166f4:	d101      	bne.n	80166fa <udp_input+0x14e>
    pcb = uncon_pcb;
 80166f6:	69fb      	ldr	r3, [r7, #28]
 80166f8:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 80166fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80166fc:	2b00      	cmp	r3, #0
 80166fe:	d002      	beq.n	8016706 <udp_input+0x15a>
    for_us = 1;
 8016700:	2301      	movs	r3, #1
 8016702:	76fb      	strb	r3, [r7, #27]
 8016704:	e00a      	b.n	801671c <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8016706:	683b      	ldr	r3, [r7, #0]
 8016708:	3304      	adds	r3, #4
 801670a:	681a      	ldr	r2, [r3, #0]
 801670c:	4b2d      	ldr	r3, [pc, #180]	; (80167c4 <udp_input+0x218>)
 801670e:	695b      	ldr	r3, [r3, #20]
 8016710:	429a      	cmp	r2, r3
 8016712:	bf0c      	ite	eq
 8016714:	2301      	moveq	r3, #1
 8016716:	2300      	movne	r3, #0
 8016718:	b2db      	uxtb	r3, r3
 801671a:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 801671c:	7efb      	ldrb	r3, [r7, #27]
 801671e:	2b00      	cmp	r3, #0
 8016720:	d041      	beq.n	80167a6 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8016722:	2108      	movs	r1, #8
 8016724:	6878      	ldr	r0, [r7, #4]
 8016726:	f7fa f94f 	bl	80109c8 <pbuf_remove_header>
 801672a:	4603      	mov	r3, r0
 801672c:	2b00      	cmp	r3, #0
 801672e:	d00a      	beq.n	8016746 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8016730:	4b20      	ldr	r3, [pc, #128]	; (80167b4 <udp_input+0x208>)
 8016732:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8016736:	4925      	ldr	r1, [pc, #148]	; (80167cc <udp_input+0x220>)
 8016738:	4820      	ldr	r0, [pc, #128]	; (80167bc <udp_input+0x210>)
 801673a:	f003 f8a1 	bl	8019880 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 801673e:	6878      	ldr	r0, [r7, #4]
 8016740:	f7fa f9c8 	bl	8010ad4 <pbuf_free>
      goto end;
 8016744:	e032      	b.n	80167ac <udp_input+0x200>
    }

    if (pcb != NULL) {
 8016746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016748:	2b00      	cmp	r3, #0
 801674a:	d012      	beq.n	8016772 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 801674c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801674e:	699b      	ldr	r3, [r3, #24]
 8016750:	2b00      	cmp	r3, #0
 8016752:	d00a      	beq.n	801676a <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8016754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016756:	699c      	ldr	r4, [r3, #24]
 8016758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801675a:	69d8      	ldr	r0, [r3, #28]
 801675c:	8a3b      	ldrh	r3, [r7, #16]
 801675e:	9300      	str	r3, [sp, #0]
 8016760:	4b1b      	ldr	r3, [pc, #108]	; (80167d0 <udp_input+0x224>)
 8016762:	687a      	ldr	r2, [r7, #4]
 8016764:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016766:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8016768:	e021      	b.n	80167ae <udp_input+0x202>
        pbuf_free(p);
 801676a:	6878      	ldr	r0, [r7, #4]
 801676c:	f7fa f9b2 	bl	8010ad4 <pbuf_free>
        goto end;
 8016770:	e01c      	b.n	80167ac <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8016772:	7cfb      	ldrb	r3, [r7, #19]
 8016774:	2b00      	cmp	r3, #0
 8016776:	d112      	bne.n	801679e <udp_input+0x1f2>
 8016778:	4b12      	ldr	r3, [pc, #72]	; (80167c4 <udp_input+0x218>)
 801677a:	695b      	ldr	r3, [r3, #20]
 801677c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8016780:	2be0      	cmp	r3, #224	; 0xe0
 8016782:	d00c      	beq.n	801679e <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8016784:	4b0f      	ldr	r3, [pc, #60]	; (80167c4 <udp_input+0x218>)
 8016786:	899b      	ldrh	r3, [r3, #12]
 8016788:	3308      	adds	r3, #8
 801678a:	b29b      	uxth	r3, r3
 801678c:	b21b      	sxth	r3, r3
 801678e:	4619      	mov	r1, r3
 8016790:	6878      	ldr	r0, [r7, #4]
 8016792:	f7fa f98c 	bl	8010aae <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8016796:	2103      	movs	r1, #3
 8016798:	6878      	ldr	r0, [r7, #4]
 801679a:	f001 f8b7 	bl	801790c <icmp_dest_unreach>
      pbuf_free(p);
 801679e:	6878      	ldr	r0, [r7, #4]
 80167a0:	f7fa f998 	bl	8010ad4 <pbuf_free>
  return;
 80167a4:	e003      	b.n	80167ae <udp_input+0x202>
    pbuf_free(p);
 80167a6:	6878      	ldr	r0, [r7, #4]
 80167a8:	f7fa f994 	bl	8010ad4 <pbuf_free>
  return;
 80167ac:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 80167ae:	372c      	adds	r7, #44	; 0x2c
 80167b0:	46bd      	mov	sp, r7
 80167b2:	bd90      	pop	{r4, r7, pc}
 80167b4:	0801e0e8 	.word	0x0801e0e8
 80167b8:	0801e18c 	.word	0x0801e18c
 80167bc:	0801e13c 	.word	0x0801e13c
 80167c0:	0801e1a4 	.word	0x0801e1a4
 80167c4:	200007b0 	.word	0x200007b0
 80167c8:	200070e8 	.word	0x200070e8
 80167cc:	0801e1c0 	.word	0x0801e1c0
 80167d0:	200007c0 	.word	0x200007c0

080167d4 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80167d4:	b480      	push	{r7}
 80167d6:	b085      	sub	sp, #20
 80167d8:	af00      	add	r7, sp, #0
 80167da:	6078      	str	r0, [r7, #4]
 80167dc:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 80167de:	687b      	ldr	r3, [r7, #4]
 80167e0:	2b00      	cmp	r3, #0
 80167e2:	d01e      	beq.n	8016822 <udp_netif_ip_addr_changed+0x4e>
 80167e4:	687b      	ldr	r3, [r7, #4]
 80167e6:	681b      	ldr	r3, [r3, #0]
 80167e8:	2b00      	cmp	r3, #0
 80167ea:	d01a      	beq.n	8016822 <udp_netif_ip_addr_changed+0x4e>
 80167ec:	683b      	ldr	r3, [r7, #0]
 80167ee:	2b00      	cmp	r3, #0
 80167f0:	d017      	beq.n	8016822 <udp_netif_ip_addr_changed+0x4e>
 80167f2:	683b      	ldr	r3, [r7, #0]
 80167f4:	681b      	ldr	r3, [r3, #0]
 80167f6:	2b00      	cmp	r3, #0
 80167f8:	d013      	beq.n	8016822 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80167fa:	4b0d      	ldr	r3, [pc, #52]	; (8016830 <udp_netif_ip_addr_changed+0x5c>)
 80167fc:	681b      	ldr	r3, [r3, #0]
 80167fe:	60fb      	str	r3, [r7, #12]
 8016800:	e00c      	b.n	801681c <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8016802:	68fb      	ldr	r3, [r7, #12]
 8016804:	681a      	ldr	r2, [r3, #0]
 8016806:	687b      	ldr	r3, [r7, #4]
 8016808:	681b      	ldr	r3, [r3, #0]
 801680a:	429a      	cmp	r2, r3
 801680c:	d103      	bne.n	8016816 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801680e:	683b      	ldr	r3, [r7, #0]
 8016810:	681a      	ldr	r2, [r3, #0]
 8016812:	68fb      	ldr	r3, [r7, #12]
 8016814:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8016816:	68fb      	ldr	r3, [r7, #12]
 8016818:	68db      	ldr	r3, [r3, #12]
 801681a:	60fb      	str	r3, [r7, #12]
 801681c:	68fb      	ldr	r3, [r7, #12]
 801681e:	2b00      	cmp	r3, #0
 8016820:	d1ef      	bne.n	8016802 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8016822:	bf00      	nop
 8016824:	3714      	adds	r7, #20
 8016826:	46bd      	mov	sp, r7
 8016828:	f85d 7b04 	ldr.w	r7, [sp], #4
 801682c:	4770      	bx	lr
 801682e:	bf00      	nop
 8016830:	200070e8 	.word	0x200070e8

08016834 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8016834:	b580      	push	{r7, lr}
 8016836:	b082      	sub	sp, #8
 8016838:	af00      	add	r7, sp, #0
 801683a:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 801683c:	4915      	ldr	r1, [pc, #84]	; (8016894 <etharp_free_entry+0x60>)
 801683e:	687a      	ldr	r2, [r7, #4]
 8016840:	4613      	mov	r3, r2
 8016842:	005b      	lsls	r3, r3, #1
 8016844:	4413      	add	r3, r2
 8016846:	00db      	lsls	r3, r3, #3
 8016848:	440b      	add	r3, r1
 801684a:	681b      	ldr	r3, [r3, #0]
 801684c:	2b00      	cmp	r3, #0
 801684e:	d013      	beq.n	8016878 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8016850:	4910      	ldr	r1, [pc, #64]	; (8016894 <etharp_free_entry+0x60>)
 8016852:	687a      	ldr	r2, [r7, #4]
 8016854:	4613      	mov	r3, r2
 8016856:	005b      	lsls	r3, r3, #1
 8016858:	4413      	add	r3, r2
 801685a:	00db      	lsls	r3, r3, #3
 801685c:	440b      	add	r3, r1
 801685e:	681b      	ldr	r3, [r3, #0]
 8016860:	4618      	mov	r0, r3
 8016862:	f7fa f937 	bl	8010ad4 <pbuf_free>
    arp_table[i].q = NULL;
 8016866:	490b      	ldr	r1, [pc, #44]	; (8016894 <etharp_free_entry+0x60>)
 8016868:	687a      	ldr	r2, [r7, #4]
 801686a:	4613      	mov	r3, r2
 801686c:	005b      	lsls	r3, r3, #1
 801686e:	4413      	add	r3, r2
 8016870:	00db      	lsls	r3, r3, #3
 8016872:	440b      	add	r3, r1
 8016874:	2200      	movs	r2, #0
 8016876:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8016878:	4906      	ldr	r1, [pc, #24]	; (8016894 <etharp_free_entry+0x60>)
 801687a:	687a      	ldr	r2, [r7, #4]
 801687c:	4613      	mov	r3, r2
 801687e:	005b      	lsls	r3, r3, #1
 8016880:	4413      	add	r3, r2
 8016882:	00db      	lsls	r3, r3, #3
 8016884:	440b      	add	r3, r1
 8016886:	3314      	adds	r3, #20
 8016888:	2200      	movs	r2, #0
 801688a:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 801688c:	bf00      	nop
 801688e:	3708      	adds	r7, #8
 8016890:	46bd      	mov	sp, r7
 8016892:	bd80      	pop	{r7, pc}
 8016894:	200070ec 	.word	0x200070ec

08016898 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8016898:	b580      	push	{r7, lr}
 801689a:	b082      	sub	sp, #8
 801689c:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801689e:	2300      	movs	r3, #0
 80168a0:	607b      	str	r3, [r7, #4]
 80168a2:	e096      	b.n	80169d2 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 80168a4:	494f      	ldr	r1, [pc, #316]	; (80169e4 <etharp_tmr+0x14c>)
 80168a6:	687a      	ldr	r2, [r7, #4]
 80168a8:	4613      	mov	r3, r2
 80168aa:	005b      	lsls	r3, r3, #1
 80168ac:	4413      	add	r3, r2
 80168ae:	00db      	lsls	r3, r3, #3
 80168b0:	440b      	add	r3, r1
 80168b2:	3314      	adds	r3, #20
 80168b4:	781b      	ldrb	r3, [r3, #0]
 80168b6:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 80168b8:	78fb      	ldrb	r3, [r7, #3]
 80168ba:	2b00      	cmp	r3, #0
 80168bc:	f000 8086 	beq.w	80169cc <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 80168c0:	4948      	ldr	r1, [pc, #288]	; (80169e4 <etharp_tmr+0x14c>)
 80168c2:	687a      	ldr	r2, [r7, #4]
 80168c4:	4613      	mov	r3, r2
 80168c6:	005b      	lsls	r3, r3, #1
 80168c8:	4413      	add	r3, r2
 80168ca:	00db      	lsls	r3, r3, #3
 80168cc:	440b      	add	r3, r1
 80168ce:	3312      	adds	r3, #18
 80168d0:	881b      	ldrh	r3, [r3, #0]
 80168d2:	3301      	adds	r3, #1
 80168d4:	b298      	uxth	r0, r3
 80168d6:	4943      	ldr	r1, [pc, #268]	; (80169e4 <etharp_tmr+0x14c>)
 80168d8:	687a      	ldr	r2, [r7, #4]
 80168da:	4613      	mov	r3, r2
 80168dc:	005b      	lsls	r3, r3, #1
 80168de:	4413      	add	r3, r2
 80168e0:	00db      	lsls	r3, r3, #3
 80168e2:	440b      	add	r3, r1
 80168e4:	3312      	adds	r3, #18
 80168e6:	4602      	mov	r2, r0
 80168e8:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80168ea:	493e      	ldr	r1, [pc, #248]	; (80169e4 <etharp_tmr+0x14c>)
 80168ec:	687a      	ldr	r2, [r7, #4]
 80168ee:	4613      	mov	r3, r2
 80168f0:	005b      	lsls	r3, r3, #1
 80168f2:	4413      	add	r3, r2
 80168f4:	00db      	lsls	r3, r3, #3
 80168f6:	440b      	add	r3, r1
 80168f8:	3312      	adds	r3, #18
 80168fa:	881b      	ldrh	r3, [r3, #0]
 80168fc:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8016900:	d215      	bcs.n	801692e <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8016902:	4938      	ldr	r1, [pc, #224]	; (80169e4 <etharp_tmr+0x14c>)
 8016904:	687a      	ldr	r2, [r7, #4]
 8016906:	4613      	mov	r3, r2
 8016908:	005b      	lsls	r3, r3, #1
 801690a:	4413      	add	r3, r2
 801690c:	00db      	lsls	r3, r3, #3
 801690e:	440b      	add	r3, r1
 8016910:	3314      	adds	r3, #20
 8016912:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8016914:	2b01      	cmp	r3, #1
 8016916:	d10e      	bne.n	8016936 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8016918:	4932      	ldr	r1, [pc, #200]	; (80169e4 <etharp_tmr+0x14c>)
 801691a:	687a      	ldr	r2, [r7, #4]
 801691c:	4613      	mov	r3, r2
 801691e:	005b      	lsls	r3, r3, #1
 8016920:	4413      	add	r3, r2
 8016922:	00db      	lsls	r3, r3, #3
 8016924:	440b      	add	r3, r1
 8016926:	3312      	adds	r3, #18
 8016928:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801692a:	2b04      	cmp	r3, #4
 801692c:	d903      	bls.n	8016936 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 801692e:	6878      	ldr	r0, [r7, #4]
 8016930:	f7ff ff80 	bl	8016834 <etharp_free_entry>
 8016934:	e04a      	b.n	80169cc <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8016936:	492b      	ldr	r1, [pc, #172]	; (80169e4 <etharp_tmr+0x14c>)
 8016938:	687a      	ldr	r2, [r7, #4]
 801693a:	4613      	mov	r3, r2
 801693c:	005b      	lsls	r3, r3, #1
 801693e:	4413      	add	r3, r2
 8016940:	00db      	lsls	r3, r3, #3
 8016942:	440b      	add	r3, r1
 8016944:	3314      	adds	r3, #20
 8016946:	781b      	ldrb	r3, [r3, #0]
 8016948:	2b03      	cmp	r3, #3
 801694a:	d10a      	bne.n	8016962 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 801694c:	4925      	ldr	r1, [pc, #148]	; (80169e4 <etharp_tmr+0x14c>)
 801694e:	687a      	ldr	r2, [r7, #4]
 8016950:	4613      	mov	r3, r2
 8016952:	005b      	lsls	r3, r3, #1
 8016954:	4413      	add	r3, r2
 8016956:	00db      	lsls	r3, r3, #3
 8016958:	440b      	add	r3, r1
 801695a:	3314      	adds	r3, #20
 801695c:	2204      	movs	r2, #4
 801695e:	701a      	strb	r2, [r3, #0]
 8016960:	e034      	b.n	80169cc <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8016962:	4920      	ldr	r1, [pc, #128]	; (80169e4 <etharp_tmr+0x14c>)
 8016964:	687a      	ldr	r2, [r7, #4]
 8016966:	4613      	mov	r3, r2
 8016968:	005b      	lsls	r3, r3, #1
 801696a:	4413      	add	r3, r2
 801696c:	00db      	lsls	r3, r3, #3
 801696e:	440b      	add	r3, r1
 8016970:	3314      	adds	r3, #20
 8016972:	781b      	ldrb	r3, [r3, #0]
 8016974:	2b04      	cmp	r3, #4
 8016976:	d10a      	bne.n	801698e <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8016978:	491a      	ldr	r1, [pc, #104]	; (80169e4 <etharp_tmr+0x14c>)
 801697a:	687a      	ldr	r2, [r7, #4]
 801697c:	4613      	mov	r3, r2
 801697e:	005b      	lsls	r3, r3, #1
 8016980:	4413      	add	r3, r2
 8016982:	00db      	lsls	r3, r3, #3
 8016984:	440b      	add	r3, r1
 8016986:	3314      	adds	r3, #20
 8016988:	2202      	movs	r2, #2
 801698a:	701a      	strb	r2, [r3, #0]
 801698c:	e01e      	b.n	80169cc <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801698e:	4915      	ldr	r1, [pc, #84]	; (80169e4 <etharp_tmr+0x14c>)
 8016990:	687a      	ldr	r2, [r7, #4]
 8016992:	4613      	mov	r3, r2
 8016994:	005b      	lsls	r3, r3, #1
 8016996:	4413      	add	r3, r2
 8016998:	00db      	lsls	r3, r3, #3
 801699a:	440b      	add	r3, r1
 801699c:	3314      	adds	r3, #20
 801699e:	781b      	ldrb	r3, [r3, #0]
 80169a0:	2b01      	cmp	r3, #1
 80169a2:	d113      	bne.n	80169cc <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 80169a4:	490f      	ldr	r1, [pc, #60]	; (80169e4 <etharp_tmr+0x14c>)
 80169a6:	687a      	ldr	r2, [r7, #4]
 80169a8:	4613      	mov	r3, r2
 80169aa:	005b      	lsls	r3, r3, #1
 80169ac:	4413      	add	r3, r2
 80169ae:	00db      	lsls	r3, r3, #3
 80169b0:	440b      	add	r3, r1
 80169b2:	3308      	adds	r3, #8
 80169b4:	6818      	ldr	r0, [r3, #0]
 80169b6:	687a      	ldr	r2, [r7, #4]
 80169b8:	4613      	mov	r3, r2
 80169ba:	005b      	lsls	r3, r3, #1
 80169bc:	4413      	add	r3, r2
 80169be:	00db      	lsls	r3, r3, #3
 80169c0:	4a08      	ldr	r2, [pc, #32]	; (80169e4 <etharp_tmr+0x14c>)
 80169c2:	4413      	add	r3, r2
 80169c4:	3304      	adds	r3, #4
 80169c6:	4619      	mov	r1, r3
 80169c8:	f000 fe6e 	bl	80176a8 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80169cc:	687b      	ldr	r3, [r7, #4]
 80169ce:	3301      	adds	r3, #1
 80169d0:	607b      	str	r3, [r7, #4]
 80169d2:	687b      	ldr	r3, [r7, #4]
 80169d4:	2b09      	cmp	r3, #9
 80169d6:	f77f af65 	ble.w	80168a4 <etharp_tmr+0xc>
      }
    }
  }
}
 80169da:	bf00      	nop
 80169dc:	bf00      	nop
 80169de:	3708      	adds	r7, #8
 80169e0:	46bd      	mov	sp, r7
 80169e2:	bd80      	pop	{r7, pc}
 80169e4:	200070ec 	.word	0x200070ec

080169e8 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 80169e8:	b580      	push	{r7, lr}
 80169ea:	b08a      	sub	sp, #40	; 0x28
 80169ec:	af00      	add	r7, sp, #0
 80169ee:	60f8      	str	r0, [r7, #12]
 80169f0:	460b      	mov	r3, r1
 80169f2:	607a      	str	r2, [r7, #4]
 80169f4:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 80169f6:	230a      	movs	r3, #10
 80169f8:	84fb      	strh	r3, [r7, #38]	; 0x26
 80169fa:	230a      	movs	r3, #10
 80169fc:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 80169fe:	230a      	movs	r3, #10
 8016a00:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8016a02:	2300      	movs	r3, #0
 8016a04:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8016a06:	230a      	movs	r3, #10
 8016a08:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8016a0a:	2300      	movs	r3, #0
 8016a0c:	83bb      	strh	r3, [r7, #28]
 8016a0e:	2300      	movs	r3, #0
 8016a10:	837b      	strh	r3, [r7, #26]
 8016a12:	2300      	movs	r3, #0
 8016a14:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016a16:	2300      	movs	r3, #0
 8016a18:	843b      	strh	r3, [r7, #32]
 8016a1a:	e0ae      	b.n	8016b7a <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8016a1c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016a20:	49a6      	ldr	r1, [pc, #664]	; (8016cbc <etharp_find_entry+0x2d4>)
 8016a22:	4613      	mov	r3, r2
 8016a24:	005b      	lsls	r3, r3, #1
 8016a26:	4413      	add	r3, r2
 8016a28:	00db      	lsls	r3, r3, #3
 8016a2a:	440b      	add	r3, r1
 8016a2c:	3314      	adds	r3, #20
 8016a2e:	781b      	ldrb	r3, [r3, #0]
 8016a30:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8016a32:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8016a36:	2b0a      	cmp	r3, #10
 8016a38:	d105      	bne.n	8016a46 <etharp_find_entry+0x5e>
 8016a3a:	7dfb      	ldrb	r3, [r7, #23]
 8016a3c:	2b00      	cmp	r3, #0
 8016a3e:	d102      	bne.n	8016a46 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8016a40:	8c3b      	ldrh	r3, [r7, #32]
 8016a42:	847b      	strh	r3, [r7, #34]	; 0x22
 8016a44:	e095      	b.n	8016b72 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8016a46:	7dfb      	ldrb	r3, [r7, #23]
 8016a48:	2b00      	cmp	r3, #0
 8016a4a:	f000 8092 	beq.w	8016b72 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8016a4e:	7dfb      	ldrb	r3, [r7, #23]
 8016a50:	2b01      	cmp	r3, #1
 8016a52:	d009      	beq.n	8016a68 <etharp_find_entry+0x80>
 8016a54:	7dfb      	ldrb	r3, [r7, #23]
 8016a56:	2b01      	cmp	r3, #1
 8016a58:	d806      	bhi.n	8016a68 <etharp_find_entry+0x80>
 8016a5a:	4b99      	ldr	r3, [pc, #612]	; (8016cc0 <etharp_find_entry+0x2d8>)
 8016a5c:	f240 1223 	movw	r2, #291	; 0x123
 8016a60:	4998      	ldr	r1, [pc, #608]	; (8016cc4 <etharp_find_entry+0x2dc>)
 8016a62:	4899      	ldr	r0, [pc, #612]	; (8016cc8 <etharp_find_entry+0x2e0>)
 8016a64:	f002 ff0c 	bl	8019880 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8016a68:	68fb      	ldr	r3, [r7, #12]
 8016a6a:	2b00      	cmp	r3, #0
 8016a6c:	d020      	beq.n	8016ab0 <etharp_find_entry+0xc8>
 8016a6e:	68fb      	ldr	r3, [r7, #12]
 8016a70:	6819      	ldr	r1, [r3, #0]
 8016a72:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016a76:	4891      	ldr	r0, [pc, #580]	; (8016cbc <etharp_find_entry+0x2d4>)
 8016a78:	4613      	mov	r3, r2
 8016a7a:	005b      	lsls	r3, r3, #1
 8016a7c:	4413      	add	r3, r2
 8016a7e:	00db      	lsls	r3, r3, #3
 8016a80:	4403      	add	r3, r0
 8016a82:	3304      	adds	r3, #4
 8016a84:	681b      	ldr	r3, [r3, #0]
 8016a86:	4299      	cmp	r1, r3
 8016a88:	d112      	bne.n	8016ab0 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8016a8a:	687b      	ldr	r3, [r7, #4]
 8016a8c:	2b00      	cmp	r3, #0
 8016a8e:	d00c      	beq.n	8016aaa <etharp_find_entry+0xc2>
 8016a90:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016a94:	4989      	ldr	r1, [pc, #548]	; (8016cbc <etharp_find_entry+0x2d4>)
 8016a96:	4613      	mov	r3, r2
 8016a98:	005b      	lsls	r3, r3, #1
 8016a9a:	4413      	add	r3, r2
 8016a9c:	00db      	lsls	r3, r3, #3
 8016a9e:	440b      	add	r3, r1
 8016aa0:	3308      	adds	r3, #8
 8016aa2:	681b      	ldr	r3, [r3, #0]
 8016aa4:	687a      	ldr	r2, [r7, #4]
 8016aa6:	429a      	cmp	r2, r3
 8016aa8:	d102      	bne.n	8016ab0 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8016aaa:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8016aae:	e100      	b.n	8016cb2 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8016ab0:	7dfb      	ldrb	r3, [r7, #23]
 8016ab2:	2b01      	cmp	r3, #1
 8016ab4:	d140      	bne.n	8016b38 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8016ab6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016aba:	4980      	ldr	r1, [pc, #512]	; (8016cbc <etharp_find_entry+0x2d4>)
 8016abc:	4613      	mov	r3, r2
 8016abe:	005b      	lsls	r3, r3, #1
 8016ac0:	4413      	add	r3, r2
 8016ac2:	00db      	lsls	r3, r3, #3
 8016ac4:	440b      	add	r3, r1
 8016ac6:	681b      	ldr	r3, [r3, #0]
 8016ac8:	2b00      	cmp	r3, #0
 8016aca:	d01a      	beq.n	8016b02 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8016acc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016ad0:	497a      	ldr	r1, [pc, #488]	; (8016cbc <etharp_find_entry+0x2d4>)
 8016ad2:	4613      	mov	r3, r2
 8016ad4:	005b      	lsls	r3, r3, #1
 8016ad6:	4413      	add	r3, r2
 8016ad8:	00db      	lsls	r3, r3, #3
 8016ada:	440b      	add	r3, r1
 8016adc:	3312      	adds	r3, #18
 8016ade:	881b      	ldrh	r3, [r3, #0]
 8016ae0:	8bba      	ldrh	r2, [r7, #28]
 8016ae2:	429a      	cmp	r2, r3
 8016ae4:	d845      	bhi.n	8016b72 <etharp_find_entry+0x18a>
            old_queue = i;
 8016ae6:	8c3b      	ldrh	r3, [r7, #32]
 8016ae8:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8016aea:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016aee:	4973      	ldr	r1, [pc, #460]	; (8016cbc <etharp_find_entry+0x2d4>)
 8016af0:	4613      	mov	r3, r2
 8016af2:	005b      	lsls	r3, r3, #1
 8016af4:	4413      	add	r3, r2
 8016af6:	00db      	lsls	r3, r3, #3
 8016af8:	440b      	add	r3, r1
 8016afa:	3312      	adds	r3, #18
 8016afc:	881b      	ldrh	r3, [r3, #0]
 8016afe:	83bb      	strh	r3, [r7, #28]
 8016b00:	e037      	b.n	8016b72 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8016b02:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016b06:	496d      	ldr	r1, [pc, #436]	; (8016cbc <etharp_find_entry+0x2d4>)
 8016b08:	4613      	mov	r3, r2
 8016b0a:	005b      	lsls	r3, r3, #1
 8016b0c:	4413      	add	r3, r2
 8016b0e:	00db      	lsls	r3, r3, #3
 8016b10:	440b      	add	r3, r1
 8016b12:	3312      	adds	r3, #18
 8016b14:	881b      	ldrh	r3, [r3, #0]
 8016b16:	8b7a      	ldrh	r2, [r7, #26]
 8016b18:	429a      	cmp	r2, r3
 8016b1a:	d82a      	bhi.n	8016b72 <etharp_find_entry+0x18a>
            old_pending = i;
 8016b1c:	8c3b      	ldrh	r3, [r7, #32]
 8016b1e:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8016b20:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016b24:	4965      	ldr	r1, [pc, #404]	; (8016cbc <etharp_find_entry+0x2d4>)
 8016b26:	4613      	mov	r3, r2
 8016b28:	005b      	lsls	r3, r3, #1
 8016b2a:	4413      	add	r3, r2
 8016b2c:	00db      	lsls	r3, r3, #3
 8016b2e:	440b      	add	r3, r1
 8016b30:	3312      	adds	r3, #18
 8016b32:	881b      	ldrh	r3, [r3, #0]
 8016b34:	837b      	strh	r3, [r7, #26]
 8016b36:	e01c      	b.n	8016b72 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8016b38:	7dfb      	ldrb	r3, [r7, #23]
 8016b3a:	2b01      	cmp	r3, #1
 8016b3c:	d919      	bls.n	8016b72 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8016b3e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016b42:	495e      	ldr	r1, [pc, #376]	; (8016cbc <etharp_find_entry+0x2d4>)
 8016b44:	4613      	mov	r3, r2
 8016b46:	005b      	lsls	r3, r3, #1
 8016b48:	4413      	add	r3, r2
 8016b4a:	00db      	lsls	r3, r3, #3
 8016b4c:	440b      	add	r3, r1
 8016b4e:	3312      	adds	r3, #18
 8016b50:	881b      	ldrh	r3, [r3, #0]
 8016b52:	8b3a      	ldrh	r2, [r7, #24]
 8016b54:	429a      	cmp	r2, r3
 8016b56:	d80c      	bhi.n	8016b72 <etharp_find_entry+0x18a>
            old_stable = i;
 8016b58:	8c3b      	ldrh	r3, [r7, #32]
 8016b5a:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8016b5c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016b60:	4956      	ldr	r1, [pc, #344]	; (8016cbc <etharp_find_entry+0x2d4>)
 8016b62:	4613      	mov	r3, r2
 8016b64:	005b      	lsls	r3, r3, #1
 8016b66:	4413      	add	r3, r2
 8016b68:	00db      	lsls	r3, r3, #3
 8016b6a:	440b      	add	r3, r1
 8016b6c:	3312      	adds	r3, #18
 8016b6e:	881b      	ldrh	r3, [r3, #0]
 8016b70:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016b72:	8c3b      	ldrh	r3, [r7, #32]
 8016b74:	3301      	adds	r3, #1
 8016b76:	b29b      	uxth	r3, r3
 8016b78:	843b      	strh	r3, [r7, #32]
 8016b7a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8016b7e:	2b09      	cmp	r3, #9
 8016b80:	f77f af4c 	ble.w	8016a1c <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8016b84:	7afb      	ldrb	r3, [r7, #11]
 8016b86:	f003 0302 	and.w	r3, r3, #2
 8016b8a:	2b00      	cmp	r3, #0
 8016b8c:	d108      	bne.n	8016ba0 <etharp_find_entry+0x1b8>
 8016b8e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8016b92:	2b0a      	cmp	r3, #10
 8016b94:	d107      	bne.n	8016ba6 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8016b96:	7afb      	ldrb	r3, [r7, #11]
 8016b98:	f003 0301 	and.w	r3, r3, #1
 8016b9c:	2b00      	cmp	r3, #0
 8016b9e:	d102      	bne.n	8016ba6 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8016ba0:	f04f 33ff 	mov.w	r3, #4294967295
 8016ba4:	e085      	b.n	8016cb2 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8016ba6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8016baa:	2b09      	cmp	r3, #9
 8016bac:	dc02      	bgt.n	8016bb4 <etharp_find_entry+0x1cc>
    i = empty;
 8016bae:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016bb0:	843b      	strh	r3, [r7, #32]
 8016bb2:	e039      	b.n	8016c28 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8016bb4:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8016bb8:	2b09      	cmp	r3, #9
 8016bba:	dc14      	bgt.n	8016be6 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8016bbc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016bbe:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8016bc0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016bc4:	493d      	ldr	r1, [pc, #244]	; (8016cbc <etharp_find_entry+0x2d4>)
 8016bc6:	4613      	mov	r3, r2
 8016bc8:	005b      	lsls	r3, r3, #1
 8016bca:	4413      	add	r3, r2
 8016bcc:	00db      	lsls	r3, r3, #3
 8016bce:	440b      	add	r3, r1
 8016bd0:	681b      	ldr	r3, [r3, #0]
 8016bd2:	2b00      	cmp	r3, #0
 8016bd4:	d018      	beq.n	8016c08 <etharp_find_entry+0x220>
 8016bd6:	4b3a      	ldr	r3, [pc, #232]	; (8016cc0 <etharp_find_entry+0x2d8>)
 8016bd8:	f240 126d 	movw	r2, #365	; 0x16d
 8016bdc:	493b      	ldr	r1, [pc, #236]	; (8016ccc <etharp_find_entry+0x2e4>)
 8016bde:	483a      	ldr	r0, [pc, #232]	; (8016cc8 <etharp_find_entry+0x2e0>)
 8016be0:	f002 fe4e 	bl	8019880 <iprintf>
 8016be4:	e010      	b.n	8016c08 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8016be6:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8016bea:	2b09      	cmp	r3, #9
 8016bec:	dc02      	bgt.n	8016bf4 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8016bee:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8016bf0:	843b      	strh	r3, [r7, #32]
 8016bf2:	e009      	b.n	8016c08 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8016bf4:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8016bf8:	2b09      	cmp	r3, #9
 8016bfa:	dc02      	bgt.n	8016c02 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8016bfc:	8bfb      	ldrh	r3, [r7, #30]
 8016bfe:	843b      	strh	r3, [r7, #32]
 8016c00:	e002      	b.n	8016c08 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8016c02:	f04f 33ff 	mov.w	r3, #4294967295
 8016c06:	e054      	b.n	8016cb2 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8016c08:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8016c0c:	2b09      	cmp	r3, #9
 8016c0e:	dd06      	ble.n	8016c1e <etharp_find_entry+0x236>
 8016c10:	4b2b      	ldr	r3, [pc, #172]	; (8016cc0 <etharp_find_entry+0x2d8>)
 8016c12:	f240 127f 	movw	r2, #383	; 0x17f
 8016c16:	492e      	ldr	r1, [pc, #184]	; (8016cd0 <etharp_find_entry+0x2e8>)
 8016c18:	482b      	ldr	r0, [pc, #172]	; (8016cc8 <etharp_find_entry+0x2e0>)
 8016c1a:	f002 fe31 	bl	8019880 <iprintf>
    etharp_free_entry(i);
 8016c1e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8016c22:	4618      	mov	r0, r3
 8016c24:	f7ff fe06 	bl	8016834 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8016c28:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8016c2c:	2b09      	cmp	r3, #9
 8016c2e:	dd06      	ble.n	8016c3e <etharp_find_entry+0x256>
 8016c30:	4b23      	ldr	r3, [pc, #140]	; (8016cc0 <etharp_find_entry+0x2d8>)
 8016c32:	f240 1283 	movw	r2, #387	; 0x183
 8016c36:	4926      	ldr	r1, [pc, #152]	; (8016cd0 <etharp_find_entry+0x2e8>)
 8016c38:	4823      	ldr	r0, [pc, #140]	; (8016cc8 <etharp_find_entry+0x2e0>)
 8016c3a:	f002 fe21 	bl	8019880 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8016c3e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016c42:	491e      	ldr	r1, [pc, #120]	; (8016cbc <etharp_find_entry+0x2d4>)
 8016c44:	4613      	mov	r3, r2
 8016c46:	005b      	lsls	r3, r3, #1
 8016c48:	4413      	add	r3, r2
 8016c4a:	00db      	lsls	r3, r3, #3
 8016c4c:	440b      	add	r3, r1
 8016c4e:	3314      	adds	r3, #20
 8016c50:	781b      	ldrb	r3, [r3, #0]
 8016c52:	2b00      	cmp	r3, #0
 8016c54:	d006      	beq.n	8016c64 <etharp_find_entry+0x27c>
 8016c56:	4b1a      	ldr	r3, [pc, #104]	; (8016cc0 <etharp_find_entry+0x2d8>)
 8016c58:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8016c5c:	491d      	ldr	r1, [pc, #116]	; (8016cd4 <etharp_find_entry+0x2ec>)
 8016c5e:	481a      	ldr	r0, [pc, #104]	; (8016cc8 <etharp_find_entry+0x2e0>)
 8016c60:	f002 fe0e 	bl	8019880 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8016c64:	68fb      	ldr	r3, [r7, #12]
 8016c66:	2b00      	cmp	r3, #0
 8016c68:	d00b      	beq.n	8016c82 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8016c6a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016c6e:	68fb      	ldr	r3, [r7, #12]
 8016c70:	6819      	ldr	r1, [r3, #0]
 8016c72:	4812      	ldr	r0, [pc, #72]	; (8016cbc <etharp_find_entry+0x2d4>)
 8016c74:	4613      	mov	r3, r2
 8016c76:	005b      	lsls	r3, r3, #1
 8016c78:	4413      	add	r3, r2
 8016c7a:	00db      	lsls	r3, r3, #3
 8016c7c:	4403      	add	r3, r0
 8016c7e:	3304      	adds	r3, #4
 8016c80:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8016c82:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016c86:	490d      	ldr	r1, [pc, #52]	; (8016cbc <etharp_find_entry+0x2d4>)
 8016c88:	4613      	mov	r3, r2
 8016c8a:	005b      	lsls	r3, r3, #1
 8016c8c:	4413      	add	r3, r2
 8016c8e:	00db      	lsls	r3, r3, #3
 8016c90:	440b      	add	r3, r1
 8016c92:	3312      	adds	r3, #18
 8016c94:	2200      	movs	r2, #0
 8016c96:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8016c98:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016c9c:	4907      	ldr	r1, [pc, #28]	; (8016cbc <etharp_find_entry+0x2d4>)
 8016c9e:	4613      	mov	r3, r2
 8016ca0:	005b      	lsls	r3, r3, #1
 8016ca2:	4413      	add	r3, r2
 8016ca4:	00db      	lsls	r3, r3, #3
 8016ca6:	440b      	add	r3, r1
 8016ca8:	3308      	adds	r3, #8
 8016caa:	687a      	ldr	r2, [r7, #4]
 8016cac:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8016cae:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8016cb2:	4618      	mov	r0, r3
 8016cb4:	3728      	adds	r7, #40	; 0x28
 8016cb6:	46bd      	mov	sp, r7
 8016cb8:	bd80      	pop	{r7, pc}
 8016cba:	bf00      	nop
 8016cbc:	200070ec 	.word	0x200070ec
 8016cc0:	0801e44c 	.word	0x0801e44c
 8016cc4:	0801e484 	.word	0x0801e484
 8016cc8:	0801e4c4 	.word	0x0801e4c4
 8016ccc:	0801e4ec 	.word	0x0801e4ec
 8016cd0:	0801e504 	.word	0x0801e504
 8016cd4:	0801e518 	.word	0x0801e518

08016cd8 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8016cd8:	b580      	push	{r7, lr}
 8016cda:	b088      	sub	sp, #32
 8016cdc:	af02      	add	r7, sp, #8
 8016cde:	60f8      	str	r0, [r7, #12]
 8016ce0:	60b9      	str	r1, [r7, #8]
 8016ce2:	607a      	str	r2, [r7, #4]
 8016ce4:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8016ce6:	68fb      	ldr	r3, [r7, #12]
 8016ce8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8016cec:	2b06      	cmp	r3, #6
 8016cee:	d006      	beq.n	8016cfe <etharp_update_arp_entry+0x26>
 8016cf0:	4b48      	ldr	r3, [pc, #288]	; (8016e14 <etharp_update_arp_entry+0x13c>)
 8016cf2:	f240 12a9 	movw	r2, #425	; 0x1a9
 8016cf6:	4948      	ldr	r1, [pc, #288]	; (8016e18 <etharp_update_arp_entry+0x140>)
 8016cf8:	4848      	ldr	r0, [pc, #288]	; (8016e1c <etharp_update_arp_entry+0x144>)
 8016cfa:	f002 fdc1 	bl	8019880 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8016cfe:	68bb      	ldr	r3, [r7, #8]
 8016d00:	2b00      	cmp	r3, #0
 8016d02:	d012      	beq.n	8016d2a <etharp_update_arp_entry+0x52>
 8016d04:	68bb      	ldr	r3, [r7, #8]
 8016d06:	681b      	ldr	r3, [r3, #0]
 8016d08:	2b00      	cmp	r3, #0
 8016d0a:	d00e      	beq.n	8016d2a <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8016d0c:	68bb      	ldr	r3, [r7, #8]
 8016d0e:	681b      	ldr	r3, [r3, #0]
 8016d10:	68f9      	ldr	r1, [r7, #12]
 8016d12:	4618      	mov	r0, r3
 8016d14:	f001 f924 	bl	8017f60 <ip4_addr_isbroadcast_u32>
 8016d18:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8016d1a:	2b00      	cmp	r3, #0
 8016d1c:	d105      	bne.n	8016d2a <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8016d1e:	68bb      	ldr	r3, [r7, #8]
 8016d20:	681b      	ldr	r3, [r3, #0]
 8016d22:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8016d26:	2be0      	cmp	r3, #224	; 0xe0
 8016d28:	d102      	bne.n	8016d30 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8016d2a:	f06f 030f 	mvn.w	r3, #15
 8016d2e:	e06c      	b.n	8016e0a <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8016d30:	78fb      	ldrb	r3, [r7, #3]
 8016d32:	68fa      	ldr	r2, [r7, #12]
 8016d34:	4619      	mov	r1, r3
 8016d36:	68b8      	ldr	r0, [r7, #8]
 8016d38:	f7ff fe56 	bl	80169e8 <etharp_find_entry>
 8016d3c:	4603      	mov	r3, r0
 8016d3e:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8016d40:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8016d44:	2b00      	cmp	r3, #0
 8016d46:	da02      	bge.n	8016d4e <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8016d48:	8afb      	ldrh	r3, [r7, #22]
 8016d4a:	b25b      	sxtb	r3, r3
 8016d4c:	e05d      	b.n	8016e0a <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8016d4e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016d52:	4933      	ldr	r1, [pc, #204]	; (8016e20 <etharp_update_arp_entry+0x148>)
 8016d54:	4613      	mov	r3, r2
 8016d56:	005b      	lsls	r3, r3, #1
 8016d58:	4413      	add	r3, r2
 8016d5a:	00db      	lsls	r3, r3, #3
 8016d5c:	440b      	add	r3, r1
 8016d5e:	3314      	adds	r3, #20
 8016d60:	2202      	movs	r2, #2
 8016d62:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8016d64:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016d68:	492d      	ldr	r1, [pc, #180]	; (8016e20 <etharp_update_arp_entry+0x148>)
 8016d6a:	4613      	mov	r3, r2
 8016d6c:	005b      	lsls	r3, r3, #1
 8016d6e:	4413      	add	r3, r2
 8016d70:	00db      	lsls	r3, r3, #3
 8016d72:	440b      	add	r3, r1
 8016d74:	3308      	adds	r3, #8
 8016d76:	68fa      	ldr	r2, [r7, #12]
 8016d78:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8016d7a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016d7e:	4613      	mov	r3, r2
 8016d80:	005b      	lsls	r3, r3, #1
 8016d82:	4413      	add	r3, r2
 8016d84:	00db      	lsls	r3, r3, #3
 8016d86:	3308      	adds	r3, #8
 8016d88:	4a25      	ldr	r2, [pc, #148]	; (8016e20 <etharp_update_arp_entry+0x148>)
 8016d8a:	4413      	add	r3, r2
 8016d8c:	3304      	adds	r3, #4
 8016d8e:	2206      	movs	r2, #6
 8016d90:	6879      	ldr	r1, [r7, #4]
 8016d92:	4618      	mov	r0, r3
 8016d94:	f002 ff43 	bl	8019c1e <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8016d98:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016d9c:	4920      	ldr	r1, [pc, #128]	; (8016e20 <etharp_update_arp_entry+0x148>)
 8016d9e:	4613      	mov	r3, r2
 8016da0:	005b      	lsls	r3, r3, #1
 8016da2:	4413      	add	r3, r2
 8016da4:	00db      	lsls	r3, r3, #3
 8016da6:	440b      	add	r3, r1
 8016da8:	3312      	adds	r3, #18
 8016daa:	2200      	movs	r2, #0
 8016dac:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8016dae:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016db2:	491b      	ldr	r1, [pc, #108]	; (8016e20 <etharp_update_arp_entry+0x148>)
 8016db4:	4613      	mov	r3, r2
 8016db6:	005b      	lsls	r3, r3, #1
 8016db8:	4413      	add	r3, r2
 8016dba:	00db      	lsls	r3, r3, #3
 8016dbc:	440b      	add	r3, r1
 8016dbe:	681b      	ldr	r3, [r3, #0]
 8016dc0:	2b00      	cmp	r3, #0
 8016dc2:	d021      	beq.n	8016e08 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8016dc4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016dc8:	4915      	ldr	r1, [pc, #84]	; (8016e20 <etharp_update_arp_entry+0x148>)
 8016dca:	4613      	mov	r3, r2
 8016dcc:	005b      	lsls	r3, r3, #1
 8016dce:	4413      	add	r3, r2
 8016dd0:	00db      	lsls	r3, r3, #3
 8016dd2:	440b      	add	r3, r1
 8016dd4:	681b      	ldr	r3, [r3, #0]
 8016dd6:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8016dd8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016ddc:	4910      	ldr	r1, [pc, #64]	; (8016e20 <etharp_update_arp_entry+0x148>)
 8016dde:	4613      	mov	r3, r2
 8016de0:	005b      	lsls	r3, r3, #1
 8016de2:	4413      	add	r3, r2
 8016de4:	00db      	lsls	r3, r3, #3
 8016de6:	440b      	add	r3, r1
 8016de8:	2200      	movs	r2, #0
 8016dea:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8016dec:	68fb      	ldr	r3, [r7, #12]
 8016dee:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8016df2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8016df6:	9300      	str	r3, [sp, #0]
 8016df8:	687b      	ldr	r3, [r7, #4]
 8016dfa:	6939      	ldr	r1, [r7, #16]
 8016dfc:	68f8      	ldr	r0, [r7, #12]
 8016dfe:	f001 ffbd 	bl	8018d7c <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8016e02:	6938      	ldr	r0, [r7, #16]
 8016e04:	f7f9 fe66 	bl	8010ad4 <pbuf_free>
  }
  return ERR_OK;
 8016e08:	2300      	movs	r3, #0
}
 8016e0a:	4618      	mov	r0, r3
 8016e0c:	3718      	adds	r7, #24
 8016e0e:	46bd      	mov	sp, r7
 8016e10:	bd80      	pop	{r7, pc}
 8016e12:	bf00      	nop
 8016e14:	0801e44c 	.word	0x0801e44c
 8016e18:	0801e544 	.word	0x0801e544
 8016e1c:	0801e4c4 	.word	0x0801e4c4
 8016e20:	200070ec 	.word	0x200070ec

08016e24 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8016e24:	b580      	push	{r7, lr}
 8016e26:	b084      	sub	sp, #16
 8016e28:	af00      	add	r7, sp, #0
 8016e2a:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016e2c:	2300      	movs	r3, #0
 8016e2e:	60fb      	str	r3, [r7, #12]
 8016e30:	e01e      	b.n	8016e70 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8016e32:	4913      	ldr	r1, [pc, #76]	; (8016e80 <etharp_cleanup_netif+0x5c>)
 8016e34:	68fa      	ldr	r2, [r7, #12]
 8016e36:	4613      	mov	r3, r2
 8016e38:	005b      	lsls	r3, r3, #1
 8016e3a:	4413      	add	r3, r2
 8016e3c:	00db      	lsls	r3, r3, #3
 8016e3e:	440b      	add	r3, r1
 8016e40:	3314      	adds	r3, #20
 8016e42:	781b      	ldrb	r3, [r3, #0]
 8016e44:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8016e46:	7afb      	ldrb	r3, [r7, #11]
 8016e48:	2b00      	cmp	r3, #0
 8016e4a:	d00e      	beq.n	8016e6a <etharp_cleanup_netif+0x46>
 8016e4c:	490c      	ldr	r1, [pc, #48]	; (8016e80 <etharp_cleanup_netif+0x5c>)
 8016e4e:	68fa      	ldr	r2, [r7, #12]
 8016e50:	4613      	mov	r3, r2
 8016e52:	005b      	lsls	r3, r3, #1
 8016e54:	4413      	add	r3, r2
 8016e56:	00db      	lsls	r3, r3, #3
 8016e58:	440b      	add	r3, r1
 8016e5a:	3308      	adds	r3, #8
 8016e5c:	681b      	ldr	r3, [r3, #0]
 8016e5e:	687a      	ldr	r2, [r7, #4]
 8016e60:	429a      	cmp	r2, r3
 8016e62:	d102      	bne.n	8016e6a <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8016e64:	68f8      	ldr	r0, [r7, #12]
 8016e66:	f7ff fce5 	bl	8016834 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016e6a:	68fb      	ldr	r3, [r7, #12]
 8016e6c:	3301      	adds	r3, #1
 8016e6e:	60fb      	str	r3, [r7, #12]
 8016e70:	68fb      	ldr	r3, [r7, #12]
 8016e72:	2b09      	cmp	r3, #9
 8016e74:	dddd      	ble.n	8016e32 <etharp_cleanup_netif+0xe>
    }
  }
}
 8016e76:	bf00      	nop
 8016e78:	bf00      	nop
 8016e7a:	3710      	adds	r7, #16
 8016e7c:	46bd      	mov	sp, r7
 8016e7e:	bd80      	pop	{r7, pc}
 8016e80:	200070ec 	.word	0x200070ec

08016e84 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8016e84:	b5b0      	push	{r4, r5, r7, lr}
 8016e86:	b08a      	sub	sp, #40	; 0x28
 8016e88:	af04      	add	r7, sp, #16
 8016e8a:	6078      	str	r0, [r7, #4]
 8016e8c:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8016e8e:	683b      	ldr	r3, [r7, #0]
 8016e90:	2b00      	cmp	r3, #0
 8016e92:	d107      	bne.n	8016ea4 <etharp_input+0x20>
 8016e94:	4b3d      	ldr	r3, [pc, #244]	; (8016f8c <etharp_input+0x108>)
 8016e96:	f240 228a 	movw	r2, #650	; 0x28a
 8016e9a:	493d      	ldr	r1, [pc, #244]	; (8016f90 <etharp_input+0x10c>)
 8016e9c:	483d      	ldr	r0, [pc, #244]	; (8016f94 <etharp_input+0x110>)
 8016e9e:	f002 fcef 	bl	8019880 <iprintf>
 8016ea2:	e06f      	b.n	8016f84 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8016ea4:	687b      	ldr	r3, [r7, #4]
 8016ea6:	685b      	ldr	r3, [r3, #4]
 8016ea8:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8016eaa:	693b      	ldr	r3, [r7, #16]
 8016eac:	881b      	ldrh	r3, [r3, #0]
 8016eae:	b29b      	uxth	r3, r3
 8016eb0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8016eb4:	d10c      	bne.n	8016ed0 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8016eb6:	693b      	ldr	r3, [r7, #16]
 8016eb8:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8016eba:	2b06      	cmp	r3, #6
 8016ebc:	d108      	bne.n	8016ed0 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8016ebe:	693b      	ldr	r3, [r7, #16]
 8016ec0:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8016ec2:	2b04      	cmp	r3, #4
 8016ec4:	d104      	bne.n	8016ed0 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8016ec6:	693b      	ldr	r3, [r7, #16]
 8016ec8:	885b      	ldrh	r3, [r3, #2]
 8016eca:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8016ecc:	2b08      	cmp	r3, #8
 8016ece:	d003      	beq.n	8016ed8 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8016ed0:	6878      	ldr	r0, [r7, #4]
 8016ed2:	f7f9 fdff 	bl	8010ad4 <pbuf_free>
    return;
 8016ed6:	e055      	b.n	8016f84 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8016ed8:	693b      	ldr	r3, [r7, #16]
 8016eda:	330e      	adds	r3, #14
 8016edc:	681b      	ldr	r3, [r3, #0]
 8016ede:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8016ee0:	693b      	ldr	r3, [r7, #16]
 8016ee2:	3318      	adds	r3, #24
 8016ee4:	681b      	ldr	r3, [r3, #0]
 8016ee6:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8016ee8:	683b      	ldr	r3, [r7, #0]
 8016eea:	3304      	adds	r3, #4
 8016eec:	681b      	ldr	r3, [r3, #0]
 8016eee:	2b00      	cmp	r3, #0
 8016ef0:	d102      	bne.n	8016ef8 <etharp_input+0x74>
    for_us = 0;
 8016ef2:	2300      	movs	r3, #0
 8016ef4:	75fb      	strb	r3, [r7, #23]
 8016ef6:	e009      	b.n	8016f0c <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8016ef8:	68ba      	ldr	r2, [r7, #8]
 8016efa:	683b      	ldr	r3, [r7, #0]
 8016efc:	3304      	adds	r3, #4
 8016efe:	681b      	ldr	r3, [r3, #0]
 8016f00:	429a      	cmp	r2, r3
 8016f02:	bf0c      	ite	eq
 8016f04:	2301      	moveq	r3, #1
 8016f06:	2300      	movne	r3, #0
 8016f08:	b2db      	uxtb	r3, r3
 8016f0a:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8016f0c:	693b      	ldr	r3, [r7, #16]
 8016f0e:	f103 0208 	add.w	r2, r3, #8
 8016f12:	7dfb      	ldrb	r3, [r7, #23]
 8016f14:	2b00      	cmp	r3, #0
 8016f16:	d001      	beq.n	8016f1c <etharp_input+0x98>
 8016f18:	2301      	movs	r3, #1
 8016f1a:	e000      	b.n	8016f1e <etharp_input+0x9a>
 8016f1c:	2302      	movs	r3, #2
 8016f1e:	f107 010c 	add.w	r1, r7, #12
 8016f22:	6838      	ldr	r0, [r7, #0]
 8016f24:	f7ff fed8 	bl	8016cd8 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8016f28:	693b      	ldr	r3, [r7, #16]
 8016f2a:	88db      	ldrh	r3, [r3, #6]
 8016f2c:	b29b      	uxth	r3, r3
 8016f2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8016f32:	d003      	beq.n	8016f3c <etharp_input+0xb8>
 8016f34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016f38:	d01e      	beq.n	8016f78 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8016f3a:	e020      	b.n	8016f7e <etharp_input+0xfa>
      if (for_us) {
 8016f3c:	7dfb      	ldrb	r3, [r7, #23]
 8016f3e:	2b00      	cmp	r3, #0
 8016f40:	d01c      	beq.n	8016f7c <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8016f42:	683b      	ldr	r3, [r7, #0]
 8016f44:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8016f48:	693b      	ldr	r3, [r7, #16]
 8016f4a:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8016f4e:	683b      	ldr	r3, [r7, #0]
 8016f50:	f103 0526 	add.w	r5, r3, #38	; 0x26
 8016f54:	683b      	ldr	r3, [r7, #0]
 8016f56:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8016f58:	693a      	ldr	r2, [r7, #16]
 8016f5a:	3208      	adds	r2, #8
        etharp_raw(netif,
 8016f5c:	2102      	movs	r1, #2
 8016f5e:	9103      	str	r1, [sp, #12]
 8016f60:	f107 010c 	add.w	r1, r7, #12
 8016f64:	9102      	str	r1, [sp, #8]
 8016f66:	9201      	str	r2, [sp, #4]
 8016f68:	9300      	str	r3, [sp, #0]
 8016f6a:	462b      	mov	r3, r5
 8016f6c:	4622      	mov	r2, r4
 8016f6e:	4601      	mov	r1, r0
 8016f70:	6838      	ldr	r0, [r7, #0]
 8016f72:	f000 faeb 	bl	801754c <etharp_raw>
      break;
 8016f76:	e001      	b.n	8016f7c <etharp_input+0xf8>
      break;
 8016f78:	bf00      	nop
 8016f7a:	e000      	b.n	8016f7e <etharp_input+0xfa>
      break;
 8016f7c:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8016f7e:	6878      	ldr	r0, [r7, #4]
 8016f80:	f7f9 fda8 	bl	8010ad4 <pbuf_free>
}
 8016f84:	3718      	adds	r7, #24
 8016f86:	46bd      	mov	sp, r7
 8016f88:	bdb0      	pop	{r4, r5, r7, pc}
 8016f8a:	bf00      	nop
 8016f8c:	0801e44c 	.word	0x0801e44c
 8016f90:	0801e59c 	.word	0x0801e59c
 8016f94:	0801e4c4 	.word	0x0801e4c4

08016f98 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8016f98:	b580      	push	{r7, lr}
 8016f9a:	b086      	sub	sp, #24
 8016f9c:	af02      	add	r7, sp, #8
 8016f9e:	60f8      	str	r0, [r7, #12]
 8016fa0:	60b9      	str	r1, [r7, #8]
 8016fa2:	4613      	mov	r3, r2
 8016fa4:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8016fa6:	79fa      	ldrb	r2, [r7, #7]
 8016fa8:	4944      	ldr	r1, [pc, #272]	; (80170bc <etharp_output_to_arp_index+0x124>)
 8016faa:	4613      	mov	r3, r2
 8016fac:	005b      	lsls	r3, r3, #1
 8016fae:	4413      	add	r3, r2
 8016fb0:	00db      	lsls	r3, r3, #3
 8016fb2:	440b      	add	r3, r1
 8016fb4:	3314      	adds	r3, #20
 8016fb6:	781b      	ldrb	r3, [r3, #0]
 8016fb8:	2b01      	cmp	r3, #1
 8016fba:	d806      	bhi.n	8016fca <etharp_output_to_arp_index+0x32>
 8016fbc:	4b40      	ldr	r3, [pc, #256]	; (80170c0 <etharp_output_to_arp_index+0x128>)
 8016fbe:	f240 22ee 	movw	r2, #750	; 0x2ee
 8016fc2:	4940      	ldr	r1, [pc, #256]	; (80170c4 <etharp_output_to_arp_index+0x12c>)
 8016fc4:	4840      	ldr	r0, [pc, #256]	; (80170c8 <etharp_output_to_arp_index+0x130>)
 8016fc6:	f002 fc5b 	bl	8019880 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8016fca:	79fa      	ldrb	r2, [r7, #7]
 8016fcc:	493b      	ldr	r1, [pc, #236]	; (80170bc <etharp_output_to_arp_index+0x124>)
 8016fce:	4613      	mov	r3, r2
 8016fd0:	005b      	lsls	r3, r3, #1
 8016fd2:	4413      	add	r3, r2
 8016fd4:	00db      	lsls	r3, r3, #3
 8016fd6:	440b      	add	r3, r1
 8016fd8:	3314      	adds	r3, #20
 8016fda:	781b      	ldrb	r3, [r3, #0]
 8016fdc:	2b02      	cmp	r3, #2
 8016fde:	d153      	bne.n	8017088 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8016fe0:	79fa      	ldrb	r2, [r7, #7]
 8016fe2:	4936      	ldr	r1, [pc, #216]	; (80170bc <etharp_output_to_arp_index+0x124>)
 8016fe4:	4613      	mov	r3, r2
 8016fe6:	005b      	lsls	r3, r3, #1
 8016fe8:	4413      	add	r3, r2
 8016fea:	00db      	lsls	r3, r3, #3
 8016fec:	440b      	add	r3, r1
 8016fee:	3312      	adds	r3, #18
 8016ff0:	881b      	ldrh	r3, [r3, #0]
 8016ff2:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8016ff6:	d919      	bls.n	801702c <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8016ff8:	79fa      	ldrb	r2, [r7, #7]
 8016ffa:	4613      	mov	r3, r2
 8016ffc:	005b      	lsls	r3, r3, #1
 8016ffe:	4413      	add	r3, r2
 8017000:	00db      	lsls	r3, r3, #3
 8017002:	4a2e      	ldr	r2, [pc, #184]	; (80170bc <etharp_output_to_arp_index+0x124>)
 8017004:	4413      	add	r3, r2
 8017006:	3304      	adds	r3, #4
 8017008:	4619      	mov	r1, r3
 801700a:	68f8      	ldr	r0, [r7, #12]
 801700c:	f000 fb4c 	bl	80176a8 <etharp_request>
 8017010:	4603      	mov	r3, r0
 8017012:	2b00      	cmp	r3, #0
 8017014:	d138      	bne.n	8017088 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8017016:	79fa      	ldrb	r2, [r7, #7]
 8017018:	4928      	ldr	r1, [pc, #160]	; (80170bc <etharp_output_to_arp_index+0x124>)
 801701a:	4613      	mov	r3, r2
 801701c:	005b      	lsls	r3, r3, #1
 801701e:	4413      	add	r3, r2
 8017020:	00db      	lsls	r3, r3, #3
 8017022:	440b      	add	r3, r1
 8017024:	3314      	adds	r3, #20
 8017026:	2203      	movs	r2, #3
 8017028:	701a      	strb	r2, [r3, #0]
 801702a:	e02d      	b.n	8017088 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 801702c:	79fa      	ldrb	r2, [r7, #7]
 801702e:	4923      	ldr	r1, [pc, #140]	; (80170bc <etharp_output_to_arp_index+0x124>)
 8017030:	4613      	mov	r3, r2
 8017032:	005b      	lsls	r3, r3, #1
 8017034:	4413      	add	r3, r2
 8017036:	00db      	lsls	r3, r3, #3
 8017038:	440b      	add	r3, r1
 801703a:	3312      	adds	r3, #18
 801703c:	881b      	ldrh	r3, [r3, #0]
 801703e:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8017042:	d321      	bcc.n	8017088 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8017044:	79fa      	ldrb	r2, [r7, #7]
 8017046:	4613      	mov	r3, r2
 8017048:	005b      	lsls	r3, r3, #1
 801704a:	4413      	add	r3, r2
 801704c:	00db      	lsls	r3, r3, #3
 801704e:	4a1b      	ldr	r2, [pc, #108]	; (80170bc <etharp_output_to_arp_index+0x124>)
 8017050:	4413      	add	r3, r2
 8017052:	1d19      	adds	r1, r3, #4
 8017054:	79fa      	ldrb	r2, [r7, #7]
 8017056:	4613      	mov	r3, r2
 8017058:	005b      	lsls	r3, r3, #1
 801705a:	4413      	add	r3, r2
 801705c:	00db      	lsls	r3, r3, #3
 801705e:	3308      	adds	r3, #8
 8017060:	4a16      	ldr	r2, [pc, #88]	; (80170bc <etharp_output_to_arp_index+0x124>)
 8017062:	4413      	add	r3, r2
 8017064:	3304      	adds	r3, #4
 8017066:	461a      	mov	r2, r3
 8017068:	68f8      	ldr	r0, [r7, #12]
 801706a:	f000 fafb 	bl	8017664 <etharp_request_dst>
 801706e:	4603      	mov	r3, r0
 8017070:	2b00      	cmp	r3, #0
 8017072:	d109      	bne.n	8017088 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8017074:	79fa      	ldrb	r2, [r7, #7]
 8017076:	4911      	ldr	r1, [pc, #68]	; (80170bc <etharp_output_to_arp_index+0x124>)
 8017078:	4613      	mov	r3, r2
 801707a:	005b      	lsls	r3, r3, #1
 801707c:	4413      	add	r3, r2
 801707e:	00db      	lsls	r3, r3, #3
 8017080:	440b      	add	r3, r1
 8017082:	3314      	adds	r3, #20
 8017084:	2203      	movs	r2, #3
 8017086:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8017088:	68fb      	ldr	r3, [r7, #12]
 801708a:	f103 0126 	add.w	r1, r3, #38	; 0x26
 801708e:	79fa      	ldrb	r2, [r7, #7]
 8017090:	4613      	mov	r3, r2
 8017092:	005b      	lsls	r3, r3, #1
 8017094:	4413      	add	r3, r2
 8017096:	00db      	lsls	r3, r3, #3
 8017098:	3308      	adds	r3, #8
 801709a:	4a08      	ldr	r2, [pc, #32]	; (80170bc <etharp_output_to_arp_index+0x124>)
 801709c:	4413      	add	r3, r2
 801709e:	3304      	adds	r3, #4
 80170a0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80170a4:	9200      	str	r2, [sp, #0]
 80170a6:	460a      	mov	r2, r1
 80170a8:	68b9      	ldr	r1, [r7, #8]
 80170aa:	68f8      	ldr	r0, [r7, #12]
 80170ac:	f001 fe66 	bl	8018d7c <ethernet_output>
 80170b0:	4603      	mov	r3, r0
}
 80170b2:	4618      	mov	r0, r3
 80170b4:	3710      	adds	r7, #16
 80170b6:	46bd      	mov	sp, r7
 80170b8:	bd80      	pop	{r7, pc}
 80170ba:	bf00      	nop
 80170bc:	200070ec 	.word	0x200070ec
 80170c0:	0801e44c 	.word	0x0801e44c
 80170c4:	0801e5bc 	.word	0x0801e5bc
 80170c8:	0801e4c4 	.word	0x0801e4c4

080170cc <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 80170cc:	b580      	push	{r7, lr}
 80170ce:	b08a      	sub	sp, #40	; 0x28
 80170d0:	af02      	add	r7, sp, #8
 80170d2:	60f8      	str	r0, [r7, #12]
 80170d4:	60b9      	str	r1, [r7, #8]
 80170d6:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 80170d8:	687b      	ldr	r3, [r7, #4]
 80170da:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 80170dc:	68fb      	ldr	r3, [r7, #12]
 80170de:	2b00      	cmp	r3, #0
 80170e0:	d106      	bne.n	80170f0 <etharp_output+0x24>
 80170e2:	4b73      	ldr	r3, [pc, #460]	; (80172b0 <etharp_output+0x1e4>)
 80170e4:	f240 321e 	movw	r2, #798	; 0x31e
 80170e8:	4972      	ldr	r1, [pc, #456]	; (80172b4 <etharp_output+0x1e8>)
 80170ea:	4873      	ldr	r0, [pc, #460]	; (80172b8 <etharp_output+0x1ec>)
 80170ec:	f002 fbc8 	bl	8019880 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 80170f0:	68bb      	ldr	r3, [r7, #8]
 80170f2:	2b00      	cmp	r3, #0
 80170f4:	d106      	bne.n	8017104 <etharp_output+0x38>
 80170f6:	4b6e      	ldr	r3, [pc, #440]	; (80172b0 <etharp_output+0x1e4>)
 80170f8:	f240 321f 	movw	r2, #799	; 0x31f
 80170fc:	496f      	ldr	r1, [pc, #444]	; (80172bc <etharp_output+0x1f0>)
 80170fe:	486e      	ldr	r0, [pc, #440]	; (80172b8 <etharp_output+0x1ec>)
 8017100:	f002 fbbe 	bl	8019880 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8017104:	687b      	ldr	r3, [r7, #4]
 8017106:	2b00      	cmp	r3, #0
 8017108:	d106      	bne.n	8017118 <etharp_output+0x4c>
 801710a:	4b69      	ldr	r3, [pc, #420]	; (80172b0 <etharp_output+0x1e4>)
 801710c:	f44f 7248 	mov.w	r2, #800	; 0x320
 8017110:	496b      	ldr	r1, [pc, #428]	; (80172c0 <etharp_output+0x1f4>)
 8017112:	4869      	ldr	r0, [pc, #420]	; (80172b8 <etharp_output+0x1ec>)
 8017114:	f002 fbb4 	bl	8019880 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8017118:	687b      	ldr	r3, [r7, #4]
 801711a:	681b      	ldr	r3, [r3, #0]
 801711c:	68f9      	ldr	r1, [r7, #12]
 801711e:	4618      	mov	r0, r3
 8017120:	f000 ff1e 	bl	8017f60 <ip4_addr_isbroadcast_u32>
 8017124:	4603      	mov	r3, r0
 8017126:	2b00      	cmp	r3, #0
 8017128:	d002      	beq.n	8017130 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801712a:	4b66      	ldr	r3, [pc, #408]	; (80172c4 <etharp_output+0x1f8>)
 801712c:	61fb      	str	r3, [r7, #28]
 801712e:	e0af      	b.n	8017290 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8017130:	687b      	ldr	r3, [r7, #4]
 8017132:	681b      	ldr	r3, [r3, #0]
 8017134:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8017138:	2be0      	cmp	r3, #224	; 0xe0
 801713a:	d118      	bne.n	801716e <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 801713c:	2301      	movs	r3, #1
 801713e:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8017140:	2300      	movs	r3, #0
 8017142:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8017144:	235e      	movs	r3, #94	; 0x5e
 8017146:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8017148:	687b      	ldr	r3, [r7, #4]
 801714a:	3301      	adds	r3, #1
 801714c:	781b      	ldrb	r3, [r3, #0]
 801714e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8017152:	b2db      	uxtb	r3, r3
 8017154:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8017156:	687b      	ldr	r3, [r7, #4]
 8017158:	3302      	adds	r3, #2
 801715a:	781b      	ldrb	r3, [r3, #0]
 801715c:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801715e:	687b      	ldr	r3, [r7, #4]
 8017160:	3303      	adds	r3, #3
 8017162:	781b      	ldrb	r3, [r3, #0]
 8017164:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8017166:	f107 0310 	add.w	r3, r7, #16
 801716a:	61fb      	str	r3, [r7, #28]
 801716c:	e090      	b.n	8017290 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801716e:	687b      	ldr	r3, [r7, #4]
 8017170:	681a      	ldr	r2, [r3, #0]
 8017172:	68fb      	ldr	r3, [r7, #12]
 8017174:	3304      	adds	r3, #4
 8017176:	681b      	ldr	r3, [r3, #0]
 8017178:	405a      	eors	r2, r3
 801717a:	68fb      	ldr	r3, [r7, #12]
 801717c:	3308      	adds	r3, #8
 801717e:	681b      	ldr	r3, [r3, #0]
 8017180:	4013      	ands	r3, r2
 8017182:	2b00      	cmp	r3, #0
 8017184:	d012      	beq.n	80171ac <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8017186:	687b      	ldr	r3, [r7, #4]
 8017188:	681b      	ldr	r3, [r3, #0]
 801718a:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801718c:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8017190:	4293      	cmp	r3, r2
 8017192:	d00b      	beq.n	80171ac <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8017194:	68fb      	ldr	r3, [r7, #12]
 8017196:	330c      	adds	r3, #12
 8017198:	681b      	ldr	r3, [r3, #0]
 801719a:	2b00      	cmp	r3, #0
 801719c:	d003      	beq.n	80171a6 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 801719e:	68fb      	ldr	r3, [r7, #12]
 80171a0:	330c      	adds	r3, #12
 80171a2:	61bb      	str	r3, [r7, #24]
 80171a4:	e002      	b.n	80171ac <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 80171a6:	f06f 0303 	mvn.w	r3, #3
 80171aa:	e07d      	b.n	80172a8 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80171ac:	4b46      	ldr	r3, [pc, #280]	; (80172c8 <etharp_output+0x1fc>)
 80171ae:	781b      	ldrb	r3, [r3, #0]
 80171b0:	4619      	mov	r1, r3
 80171b2:	4a46      	ldr	r2, [pc, #280]	; (80172cc <etharp_output+0x200>)
 80171b4:	460b      	mov	r3, r1
 80171b6:	005b      	lsls	r3, r3, #1
 80171b8:	440b      	add	r3, r1
 80171ba:	00db      	lsls	r3, r3, #3
 80171bc:	4413      	add	r3, r2
 80171be:	3314      	adds	r3, #20
 80171c0:	781b      	ldrb	r3, [r3, #0]
 80171c2:	2b01      	cmp	r3, #1
 80171c4:	d925      	bls.n	8017212 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 80171c6:	4b40      	ldr	r3, [pc, #256]	; (80172c8 <etharp_output+0x1fc>)
 80171c8:	781b      	ldrb	r3, [r3, #0]
 80171ca:	4619      	mov	r1, r3
 80171cc:	4a3f      	ldr	r2, [pc, #252]	; (80172cc <etharp_output+0x200>)
 80171ce:	460b      	mov	r3, r1
 80171d0:	005b      	lsls	r3, r3, #1
 80171d2:	440b      	add	r3, r1
 80171d4:	00db      	lsls	r3, r3, #3
 80171d6:	4413      	add	r3, r2
 80171d8:	3308      	adds	r3, #8
 80171da:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80171dc:	68fa      	ldr	r2, [r7, #12]
 80171de:	429a      	cmp	r2, r3
 80171e0:	d117      	bne.n	8017212 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 80171e2:	69bb      	ldr	r3, [r7, #24]
 80171e4:	681a      	ldr	r2, [r3, #0]
 80171e6:	4b38      	ldr	r3, [pc, #224]	; (80172c8 <etharp_output+0x1fc>)
 80171e8:	781b      	ldrb	r3, [r3, #0]
 80171ea:	4618      	mov	r0, r3
 80171ec:	4937      	ldr	r1, [pc, #220]	; (80172cc <etharp_output+0x200>)
 80171ee:	4603      	mov	r3, r0
 80171f0:	005b      	lsls	r3, r3, #1
 80171f2:	4403      	add	r3, r0
 80171f4:	00db      	lsls	r3, r3, #3
 80171f6:	440b      	add	r3, r1
 80171f8:	3304      	adds	r3, #4
 80171fa:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 80171fc:	429a      	cmp	r2, r3
 80171fe:	d108      	bne.n	8017212 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8017200:	4b31      	ldr	r3, [pc, #196]	; (80172c8 <etharp_output+0x1fc>)
 8017202:	781b      	ldrb	r3, [r3, #0]
 8017204:	461a      	mov	r2, r3
 8017206:	68b9      	ldr	r1, [r7, #8]
 8017208:	68f8      	ldr	r0, [r7, #12]
 801720a:	f7ff fec5 	bl	8016f98 <etharp_output_to_arp_index>
 801720e:	4603      	mov	r3, r0
 8017210:	e04a      	b.n	80172a8 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8017212:	2300      	movs	r3, #0
 8017214:	75fb      	strb	r3, [r7, #23]
 8017216:	e031      	b.n	801727c <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8017218:	7dfa      	ldrb	r2, [r7, #23]
 801721a:	492c      	ldr	r1, [pc, #176]	; (80172cc <etharp_output+0x200>)
 801721c:	4613      	mov	r3, r2
 801721e:	005b      	lsls	r3, r3, #1
 8017220:	4413      	add	r3, r2
 8017222:	00db      	lsls	r3, r3, #3
 8017224:	440b      	add	r3, r1
 8017226:	3314      	adds	r3, #20
 8017228:	781b      	ldrb	r3, [r3, #0]
 801722a:	2b01      	cmp	r3, #1
 801722c:	d923      	bls.n	8017276 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 801722e:	7dfa      	ldrb	r2, [r7, #23]
 8017230:	4926      	ldr	r1, [pc, #152]	; (80172cc <etharp_output+0x200>)
 8017232:	4613      	mov	r3, r2
 8017234:	005b      	lsls	r3, r3, #1
 8017236:	4413      	add	r3, r2
 8017238:	00db      	lsls	r3, r3, #3
 801723a:	440b      	add	r3, r1
 801723c:	3308      	adds	r3, #8
 801723e:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8017240:	68fa      	ldr	r2, [r7, #12]
 8017242:	429a      	cmp	r2, r3
 8017244:	d117      	bne.n	8017276 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8017246:	69bb      	ldr	r3, [r7, #24]
 8017248:	6819      	ldr	r1, [r3, #0]
 801724a:	7dfa      	ldrb	r2, [r7, #23]
 801724c:	481f      	ldr	r0, [pc, #124]	; (80172cc <etharp_output+0x200>)
 801724e:	4613      	mov	r3, r2
 8017250:	005b      	lsls	r3, r3, #1
 8017252:	4413      	add	r3, r2
 8017254:	00db      	lsls	r3, r3, #3
 8017256:	4403      	add	r3, r0
 8017258:	3304      	adds	r3, #4
 801725a:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 801725c:	4299      	cmp	r1, r3
 801725e:	d10a      	bne.n	8017276 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8017260:	4a19      	ldr	r2, [pc, #100]	; (80172c8 <etharp_output+0x1fc>)
 8017262:	7dfb      	ldrb	r3, [r7, #23]
 8017264:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8017266:	7dfb      	ldrb	r3, [r7, #23]
 8017268:	461a      	mov	r2, r3
 801726a:	68b9      	ldr	r1, [r7, #8]
 801726c:	68f8      	ldr	r0, [r7, #12]
 801726e:	f7ff fe93 	bl	8016f98 <etharp_output_to_arp_index>
 8017272:	4603      	mov	r3, r0
 8017274:	e018      	b.n	80172a8 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8017276:	7dfb      	ldrb	r3, [r7, #23]
 8017278:	3301      	adds	r3, #1
 801727a:	75fb      	strb	r3, [r7, #23]
 801727c:	7dfb      	ldrb	r3, [r7, #23]
 801727e:	2b09      	cmp	r3, #9
 8017280:	d9ca      	bls.n	8017218 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8017282:	68ba      	ldr	r2, [r7, #8]
 8017284:	69b9      	ldr	r1, [r7, #24]
 8017286:	68f8      	ldr	r0, [r7, #12]
 8017288:	f000 f822 	bl	80172d0 <etharp_query>
 801728c:	4603      	mov	r3, r0
 801728e:	e00b      	b.n	80172a8 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8017290:	68fb      	ldr	r3, [r7, #12]
 8017292:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8017296:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801729a:	9300      	str	r3, [sp, #0]
 801729c:	69fb      	ldr	r3, [r7, #28]
 801729e:	68b9      	ldr	r1, [r7, #8]
 80172a0:	68f8      	ldr	r0, [r7, #12]
 80172a2:	f001 fd6b 	bl	8018d7c <ethernet_output>
 80172a6:	4603      	mov	r3, r0
}
 80172a8:	4618      	mov	r0, r3
 80172aa:	3720      	adds	r7, #32
 80172ac:	46bd      	mov	sp, r7
 80172ae:	bd80      	pop	{r7, pc}
 80172b0:	0801e44c 	.word	0x0801e44c
 80172b4:	0801e59c 	.word	0x0801e59c
 80172b8:	0801e4c4 	.word	0x0801e4c4
 80172bc:	0801e5ec 	.word	0x0801e5ec
 80172c0:	0801e58c 	.word	0x0801e58c
 80172c4:	0801ec48 	.word	0x0801ec48
 80172c8:	200071dc 	.word	0x200071dc
 80172cc:	200070ec 	.word	0x200070ec

080172d0 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 80172d0:	b580      	push	{r7, lr}
 80172d2:	b08c      	sub	sp, #48	; 0x30
 80172d4:	af02      	add	r7, sp, #8
 80172d6:	60f8      	str	r0, [r7, #12]
 80172d8:	60b9      	str	r1, [r7, #8]
 80172da:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 80172dc:	68fb      	ldr	r3, [r7, #12]
 80172de:	3326      	adds	r3, #38	; 0x26
 80172e0:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 80172e2:	23ff      	movs	r3, #255	; 0xff
 80172e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 80172e8:	2300      	movs	r3, #0
 80172ea:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80172ec:	68bb      	ldr	r3, [r7, #8]
 80172ee:	681b      	ldr	r3, [r3, #0]
 80172f0:	68f9      	ldr	r1, [r7, #12]
 80172f2:	4618      	mov	r0, r3
 80172f4:	f000 fe34 	bl	8017f60 <ip4_addr_isbroadcast_u32>
 80172f8:	4603      	mov	r3, r0
 80172fa:	2b00      	cmp	r3, #0
 80172fc:	d10c      	bne.n	8017318 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80172fe:	68bb      	ldr	r3, [r7, #8]
 8017300:	681b      	ldr	r3, [r3, #0]
 8017302:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8017306:	2be0      	cmp	r3, #224	; 0xe0
 8017308:	d006      	beq.n	8017318 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801730a:	68bb      	ldr	r3, [r7, #8]
 801730c:	2b00      	cmp	r3, #0
 801730e:	d003      	beq.n	8017318 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8017310:	68bb      	ldr	r3, [r7, #8]
 8017312:	681b      	ldr	r3, [r3, #0]
 8017314:	2b00      	cmp	r3, #0
 8017316:	d102      	bne.n	801731e <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8017318:	f06f 030f 	mvn.w	r3, #15
 801731c:	e101      	b.n	8017522 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 801731e:	68fa      	ldr	r2, [r7, #12]
 8017320:	2101      	movs	r1, #1
 8017322:	68b8      	ldr	r0, [r7, #8]
 8017324:	f7ff fb60 	bl	80169e8 <etharp_find_entry>
 8017328:	4603      	mov	r3, r0
 801732a:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 801732c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8017330:	2b00      	cmp	r3, #0
 8017332:	da02      	bge.n	801733a <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8017334:	8a7b      	ldrh	r3, [r7, #18]
 8017336:	b25b      	sxtb	r3, r3
 8017338:	e0f3      	b.n	8017522 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 801733a:	8a7b      	ldrh	r3, [r7, #18]
 801733c:	2b7e      	cmp	r3, #126	; 0x7e
 801733e:	d906      	bls.n	801734e <etharp_query+0x7e>
 8017340:	4b7a      	ldr	r3, [pc, #488]	; (801752c <etharp_query+0x25c>)
 8017342:	f240 32c1 	movw	r2, #961	; 0x3c1
 8017346:	497a      	ldr	r1, [pc, #488]	; (8017530 <etharp_query+0x260>)
 8017348:	487a      	ldr	r0, [pc, #488]	; (8017534 <etharp_query+0x264>)
 801734a:	f002 fa99 	bl	8019880 <iprintf>
  i = (netif_addr_idx_t)i_err;
 801734e:	8a7b      	ldrh	r3, [r7, #18]
 8017350:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8017352:	7c7a      	ldrb	r2, [r7, #17]
 8017354:	4978      	ldr	r1, [pc, #480]	; (8017538 <etharp_query+0x268>)
 8017356:	4613      	mov	r3, r2
 8017358:	005b      	lsls	r3, r3, #1
 801735a:	4413      	add	r3, r2
 801735c:	00db      	lsls	r3, r3, #3
 801735e:	440b      	add	r3, r1
 8017360:	3314      	adds	r3, #20
 8017362:	781b      	ldrb	r3, [r3, #0]
 8017364:	2b00      	cmp	r3, #0
 8017366:	d115      	bne.n	8017394 <etharp_query+0xc4>
    is_new_entry = 1;
 8017368:	2301      	movs	r3, #1
 801736a:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 801736c:	7c7a      	ldrb	r2, [r7, #17]
 801736e:	4972      	ldr	r1, [pc, #456]	; (8017538 <etharp_query+0x268>)
 8017370:	4613      	mov	r3, r2
 8017372:	005b      	lsls	r3, r3, #1
 8017374:	4413      	add	r3, r2
 8017376:	00db      	lsls	r3, r3, #3
 8017378:	440b      	add	r3, r1
 801737a:	3314      	adds	r3, #20
 801737c:	2201      	movs	r2, #1
 801737e:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8017380:	7c7a      	ldrb	r2, [r7, #17]
 8017382:	496d      	ldr	r1, [pc, #436]	; (8017538 <etharp_query+0x268>)
 8017384:	4613      	mov	r3, r2
 8017386:	005b      	lsls	r3, r3, #1
 8017388:	4413      	add	r3, r2
 801738a:	00db      	lsls	r3, r3, #3
 801738c:	440b      	add	r3, r1
 801738e:	3308      	adds	r3, #8
 8017390:	68fa      	ldr	r2, [r7, #12]
 8017392:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8017394:	7c7a      	ldrb	r2, [r7, #17]
 8017396:	4968      	ldr	r1, [pc, #416]	; (8017538 <etharp_query+0x268>)
 8017398:	4613      	mov	r3, r2
 801739a:	005b      	lsls	r3, r3, #1
 801739c:	4413      	add	r3, r2
 801739e:	00db      	lsls	r3, r3, #3
 80173a0:	440b      	add	r3, r1
 80173a2:	3314      	adds	r3, #20
 80173a4:	781b      	ldrb	r3, [r3, #0]
 80173a6:	2b01      	cmp	r3, #1
 80173a8:	d011      	beq.n	80173ce <etharp_query+0xfe>
 80173aa:	7c7a      	ldrb	r2, [r7, #17]
 80173ac:	4962      	ldr	r1, [pc, #392]	; (8017538 <etharp_query+0x268>)
 80173ae:	4613      	mov	r3, r2
 80173b0:	005b      	lsls	r3, r3, #1
 80173b2:	4413      	add	r3, r2
 80173b4:	00db      	lsls	r3, r3, #3
 80173b6:	440b      	add	r3, r1
 80173b8:	3314      	adds	r3, #20
 80173ba:	781b      	ldrb	r3, [r3, #0]
 80173bc:	2b01      	cmp	r3, #1
 80173be:	d806      	bhi.n	80173ce <etharp_query+0xfe>
 80173c0:	4b5a      	ldr	r3, [pc, #360]	; (801752c <etharp_query+0x25c>)
 80173c2:	f240 32cd 	movw	r2, #973	; 0x3cd
 80173c6:	495d      	ldr	r1, [pc, #372]	; (801753c <etharp_query+0x26c>)
 80173c8:	485a      	ldr	r0, [pc, #360]	; (8017534 <etharp_query+0x264>)
 80173ca:	f002 fa59 	bl	8019880 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 80173ce:	6a3b      	ldr	r3, [r7, #32]
 80173d0:	2b00      	cmp	r3, #0
 80173d2:	d102      	bne.n	80173da <etharp_query+0x10a>
 80173d4:	687b      	ldr	r3, [r7, #4]
 80173d6:	2b00      	cmp	r3, #0
 80173d8:	d10c      	bne.n	80173f4 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 80173da:	68b9      	ldr	r1, [r7, #8]
 80173dc:	68f8      	ldr	r0, [r7, #12]
 80173de:	f000 f963 	bl	80176a8 <etharp_request>
 80173e2:	4603      	mov	r3, r0
 80173e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 80173e8:	687b      	ldr	r3, [r7, #4]
 80173ea:	2b00      	cmp	r3, #0
 80173ec:	d102      	bne.n	80173f4 <etharp_query+0x124>
      return result;
 80173ee:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80173f2:	e096      	b.n	8017522 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 80173f4:	687b      	ldr	r3, [r7, #4]
 80173f6:	2b00      	cmp	r3, #0
 80173f8:	d106      	bne.n	8017408 <etharp_query+0x138>
 80173fa:	4b4c      	ldr	r3, [pc, #304]	; (801752c <etharp_query+0x25c>)
 80173fc:	f240 32e1 	movw	r2, #993	; 0x3e1
 8017400:	494f      	ldr	r1, [pc, #316]	; (8017540 <etharp_query+0x270>)
 8017402:	484c      	ldr	r0, [pc, #304]	; (8017534 <etharp_query+0x264>)
 8017404:	f002 fa3c 	bl	8019880 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8017408:	7c7a      	ldrb	r2, [r7, #17]
 801740a:	494b      	ldr	r1, [pc, #300]	; (8017538 <etharp_query+0x268>)
 801740c:	4613      	mov	r3, r2
 801740e:	005b      	lsls	r3, r3, #1
 8017410:	4413      	add	r3, r2
 8017412:	00db      	lsls	r3, r3, #3
 8017414:	440b      	add	r3, r1
 8017416:	3314      	adds	r3, #20
 8017418:	781b      	ldrb	r3, [r3, #0]
 801741a:	2b01      	cmp	r3, #1
 801741c:	d917      	bls.n	801744e <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 801741e:	4a49      	ldr	r2, [pc, #292]	; (8017544 <etharp_query+0x274>)
 8017420:	7c7b      	ldrb	r3, [r7, #17]
 8017422:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8017424:	7c7a      	ldrb	r2, [r7, #17]
 8017426:	4613      	mov	r3, r2
 8017428:	005b      	lsls	r3, r3, #1
 801742a:	4413      	add	r3, r2
 801742c:	00db      	lsls	r3, r3, #3
 801742e:	3308      	adds	r3, #8
 8017430:	4a41      	ldr	r2, [pc, #260]	; (8017538 <etharp_query+0x268>)
 8017432:	4413      	add	r3, r2
 8017434:	3304      	adds	r3, #4
 8017436:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801743a:	9200      	str	r2, [sp, #0]
 801743c:	697a      	ldr	r2, [r7, #20]
 801743e:	6879      	ldr	r1, [r7, #4]
 8017440:	68f8      	ldr	r0, [r7, #12]
 8017442:	f001 fc9b 	bl	8018d7c <ethernet_output>
 8017446:	4603      	mov	r3, r0
 8017448:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801744c:	e067      	b.n	801751e <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801744e:	7c7a      	ldrb	r2, [r7, #17]
 8017450:	4939      	ldr	r1, [pc, #228]	; (8017538 <etharp_query+0x268>)
 8017452:	4613      	mov	r3, r2
 8017454:	005b      	lsls	r3, r3, #1
 8017456:	4413      	add	r3, r2
 8017458:	00db      	lsls	r3, r3, #3
 801745a:	440b      	add	r3, r1
 801745c:	3314      	adds	r3, #20
 801745e:	781b      	ldrb	r3, [r3, #0]
 8017460:	2b01      	cmp	r3, #1
 8017462:	d15c      	bne.n	801751e <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8017464:	2300      	movs	r3, #0
 8017466:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8017468:	687b      	ldr	r3, [r7, #4]
 801746a:	61fb      	str	r3, [r7, #28]
    while (p) {
 801746c:	e01c      	b.n	80174a8 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 801746e:	69fb      	ldr	r3, [r7, #28]
 8017470:	895a      	ldrh	r2, [r3, #10]
 8017472:	69fb      	ldr	r3, [r7, #28]
 8017474:	891b      	ldrh	r3, [r3, #8]
 8017476:	429a      	cmp	r2, r3
 8017478:	d10a      	bne.n	8017490 <etharp_query+0x1c0>
 801747a:	69fb      	ldr	r3, [r7, #28]
 801747c:	681b      	ldr	r3, [r3, #0]
 801747e:	2b00      	cmp	r3, #0
 8017480:	d006      	beq.n	8017490 <etharp_query+0x1c0>
 8017482:	4b2a      	ldr	r3, [pc, #168]	; (801752c <etharp_query+0x25c>)
 8017484:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8017488:	492f      	ldr	r1, [pc, #188]	; (8017548 <etharp_query+0x278>)
 801748a:	482a      	ldr	r0, [pc, #168]	; (8017534 <etharp_query+0x264>)
 801748c:	f002 f9f8 	bl	8019880 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8017490:	69fb      	ldr	r3, [r7, #28]
 8017492:	7b1b      	ldrb	r3, [r3, #12]
 8017494:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8017498:	2b00      	cmp	r3, #0
 801749a:	d002      	beq.n	80174a2 <etharp_query+0x1d2>
        copy_needed = 1;
 801749c:	2301      	movs	r3, #1
 801749e:	61bb      	str	r3, [r7, #24]
        break;
 80174a0:	e005      	b.n	80174ae <etharp_query+0x1de>
      }
      p = p->next;
 80174a2:	69fb      	ldr	r3, [r7, #28]
 80174a4:	681b      	ldr	r3, [r3, #0]
 80174a6:	61fb      	str	r3, [r7, #28]
    while (p) {
 80174a8:	69fb      	ldr	r3, [r7, #28]
 80174aa:	2b00      	cmp	r3, #0
 80174ac:	d1df      	bne.n	801746e <etharp_query+0x19e>
    }
    if (copy_needed) {
 80174ae:	69bb      	ldr	r3, [r7, #24]
 80174b0:	2b00      	cmp	r3, #0
 80174b2:	d007      	beq.n	80174c4 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 80174b4:	687a      	ldr	r2, [r7, #4]
 80174b6:	f44f 7120 	mov.w	r1, #640	; 0x280
 80174ba:	200e      	movs	r0, #14
 80174bc:	f7f9 fd66 	bl	8010f8c <pbuf_clone>
 80174c0:	61f8      	str	r0, [r7, #28]
 80174c2:	e004      	b.n	80174ce <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 80174c4:	687b      	ldr	r3, [r7, #4]
 80174c6:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 80174c8:	69f8      	ldr	r0, [r7, #28]
 80174ca:	f7f9 fba3 	bl	8010c14 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 80174ce:	69fb      	ldr	r3, [r7, #28]
 80174d0:	2b00      	cmp	r3, #0
 80174d2:	d021      	beq.n	8017518 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 80174d4:	7c7a      	ldrb	r2, [r7, #17]
 80174d6:	4918      	ldr	r1, [pc, #96]	; (8017538 <etharp_query+0x268>)
 80174d8:	4613      	mov	r3, r2
 80174da:	005b      	lsls	r3, r3, #1
 80174dc:	4413      	add	r3, r2
 80174de:	00db      	lsls	r3, r3, #3
 80174e0:	440b      	add	r3, r1
 80174e2:	681b      	ldr	r3, [r3, #0]
 80174e4:	2b00      	cmp	r3, #0
 80174e6:	d00a      	beq.n	80174fe <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 80174e8:	7c7a      	ldrb	r2, [r7, #17]
 80174ea:	4913      	ldr	r1, [pc, #76]	; (8017538 <etharp_query+0x268>)
 80174ec:	4613      	mov	r3, r2
 80174ee:	005b      	lsls	r3, r3, #1
 80174f0:	4413      	add	r3, r2
 80174f2:	00db      	lsls	r3, r3, #3
 80174f4:	440b      	add	r3, r1
 80174f6:	681b      	ldr	r3, [r3, #0]
 80174f8:	4618      	mov	r0, r3
 80174fa:	f7f9 faeb 	bl	8010ad4 <pbuf_free>
      }
      arp_table[i].q = p;
 80174fe:	7c7a      	ldrb	r2, [r7, #17]
 8017500:	490d      	ldr	r1, [pc, #52]	; (8017538 <etharp_query+0x268>)
 8017502:	4613      	mov	r3, r2
 8017504:	005b      	lsls	r3, r3, #1
 8017506:	4413      	add	r3, r2
 8017508:	00db      	lsls	r3, r3, #3
 801750a:	440b      	add	r3, r1
 801750c:	69fa      	ldr	r2, [r7, #28]
 801750e:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8017510:	2300      	movs	r3, #0
 8017512:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8017516:	e002      	b.n	801751e <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8017518:	23ff      	movs	r3, #255	; 0xff
 801751a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 801751e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8017522:	4618      	mov	r0, r3
 8017524:	3728      	adds	r7, #40	; 0x28
 8017526:	46bd      	mov	sp, r7
 8017528:	bd80      	pop	{r7, pc}
 801752a:	bf00      	nop
 801752c:	0801e44c 	.word	0x0801e44c
 8017530:	0801e5f8 	.word	0x0801e5f8
 8017534:	0801e4c4 	.word	0x0801e4c4
 8017538:	200070ec 	.word	0x200070ec
 801753c:	0801e608 	.word	0x0801e608
 8017540:	0801e5ec 	.word	0x0801e5ec
 8017544:	200071dc 	.word	0x200071dc
 8017548:	0801e630 	.word	0x0801e630

0801754c <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 801754c:	b580      	push	{r7, lr}
 801754e:	b08a      	sub	sp, #40	; 0x28
 8017550:	af02      	add	r7, sp, #8
 8017552:	60f8      	str	r0, [r7, #12]
 8017554:	60b9      	str	r1, [r7, #8]
 8017556:	607a      	str	r2, [r7, #4]
 8017558:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 801755a:	2300      	movs	r3, #0
 801755c:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 801755e:	68fb      	ldr	r3, [r7, #12]
 8017560:	2b00      	cmp	r3, #0
 8017562:	d106      	bne.n	8017572 <etharp_raw+0x26>
 8017564:	4b3a      	ldr	r3, [pc, #232]	; (8017650 <etharp_raw+0x104>)
 8017566:	f240 4257 	movw	r2, #1111	; 0x457
 801756a:	493a      	ldr	r1, [pc, #232]	; (8017654 <etharp_raw+0x108>)
 801756c:	483a      	ldr	r0, [pc, #232]	; (8017658 <etharp_raw+0x10c>)
 801756e:	f002 f987 	bl	8019880 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8017572:	f44f 7220 	mov.w	r2, #640	; 0x280
 8017576:	211c      	movs	r1, #28
 8017578:	200e      	movs	r0, #14
 801757a:	f7f8 ffc7 	bl	801050c <pbuf_alloc>
 801757e:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8017580:	69bb      	ldr	r3, [r7, #24]
 8017582:	2b00      	cmp	r3, #0
 8017584:	d102      	bne.n	801758c <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8017586:	f04f 33ff 	mov.w	r3, #4294967295
 801758a:	e05d      	b.n	8017648 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 801758c:	69bb      	ldr	r3, [r7, #24]
 801758e:	895b      	ldrh	r3, [r3, #10]
 8017590:	2b1b      	cmp	r3, #27
 8017592:	d806      	bhi.n	80175a2 <etharp_raw+0x56>
 8017594:	4b2e      	ldr	r3, [pc, #184]	; (8017650 <etharp_raw+0x104>)
 8017596:	f240 4262 	movw	r2, #1122	; 0x462
 801759a:	4930      	ldr	r1, [pc, #192]	; (801765c <etharp_raw+0x110>)
 801759c:	482e      	ldr	r0, [pc, #184]	; (8017658 <etharp_raw+0x10c>)
 801759e:	f002 f96f 	bl	8019880 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 80175a2:	69bb      	ldr	r3, [r7, #24]
 80175a4:	685b      	ldr	r3, [r3, #4]
 80175a6:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 80175a8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80175aa:	4618      	mov	r0, r3
 80175ac:	f7f7 feae 	bl	800f30c <lwip_htons>
 80175b0:	4603      	mov	r3, r0
 80175b2:	461a      	mov	r2, r3
 80175b4:	697b      	ldr	r3, [r7, #20]
 80175b6:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 80175b8:	68fb      	ldr	r3, [r7, #12]
 80175ba:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80175be:	2b06      	cmp	r3, #6
 80175c0:	d006      	beq.n	80175d0 <etharp_raw+0x84>
 80175c2:	4b23      	ldr	r3, [pc, #140]	; (8017650 <etharp_raw+0x104>)
 80175c4:	f240 4269 	movw	r2, #1129	; 0x469
 80175c8:	4925      	ldr	r1, [pc, #148]	; (8017660 <etharp_raw+0x114>)
 80175ca:	4823      	ldr	r0, [pc, #140]	; (8017658 <etharp_raw+0x10c>)
 80175cc:	f002 f958 	bl	8019880 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 80175d0:	697b      	ldr	r3, [r7, #20]
 80175d2:	3308      	adds	r3, #8
 80175d4:	2206      	movs	r2, #6
 80175d6:	6839      	ldr	r1, [r7, #0]
 80175d8:	4618      	mov	r0, r3
 80175da:	f002 fb20 	bl	8019c1e <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 80175de:	697b      	ldr	r3, [r7, #20]
 80175e0:	3312      	adds	r3, #18
 80175e2:	2206      	movs	r2, #6
 80175e4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80175e6:	4618      	mov	r0, r3
 80175e8:	f002 fb19 	bl	8019c1e <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 80175ec:	697b      	ldr	r3, [r7, #20]
 80175ee:	330e      	adds	r3, #14
 80175f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80175f2:	6812      	ldr	r2, [r2, #0]
 80175f4:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 80175f6:	697b      	ldr	r3, [r7, #20]
 80175f8:	3318      	adds	r3, #24
 80175fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80175fc:	6812      	ldr	r2, [r2, #0]
 80175fe:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8017600:	697b      	ldr	r3, [r7, #20]
 8017602:	2200      	movs	r2, #0
 8017604:	701a      	strb	r2, [r3, #0]
 8017606:	2200      	movs	r2, #0
 8017608:	f042 0201 	orr.w	r2, r2, #1
 801760c:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801760e:	697b      	ldr	r3, [r7, #20]
 8017610:	2200      	movs	r2, #0
 8017612:	f042 0208 	orr.w	r2, r2, #8
 8017616:	709a      	strb	r2, [r3, #2]
 8017618:	2200      	movs	r2, #0
 801761a:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 801761c:	697b      	ldr	r3, [r7, #20]
 801761e:	2206      	movs	r2, #6
 8017620:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8017622:	697b      	ldr	r3, [r7, #20]
 8017624:	2204      	movs	r2, #4
 8017626:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8017628:	f640 0306 	movw	r3, #2054	; 0x806
 801762c:	9300      	str	r3, [sp, #0]
 801762e:	687b      	ldr	r3, [r7, #4]
 8017630:	68ba      	ldr	r2, [r7, #8]
 8017632:	69b9      	ldr	r1, [r7, #24]
 8017634:	68f8      	ldr	r0, [r7, #12]
 8017636:	f001 fba1 	bl	8018d7c <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 801763a:	69b8      	ldr	r0, [r7, #24]
 801763c:	f7f9 fa4a 	bl	8010ad4 <pbuf_free>
  p = NULL;
 8017640:	2300      	movs	r3, #0
 8017642:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8017644:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8017648:	4618      	mov	r0, r3
 801764a:	3720      	adds	r7, #32
 801764c:	46bd      	mov	sp, r7
 801764e:	bd80      	pop	{r7, pc}
 8017650:	0801e44c 	.word	0x0801e44c
 8017654:	0801e59c 	.word	0x0801e59c
 8017658:	0801e4c4 	.word	0x0801e4c4
 801765c:	0801e64c 	.word	0x0801e64c
 8017660:	0801e680 	.word	0x0801e680

08017664 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8017664:	b580      	push	{r7, lr}
 8017666:	b088      	sub	sp, #32
 8017668:	af04      	add	r7, sp, #16
 801766a:	60f8      	str	r0, [r7, #12]
 801766c:	60b9      	str	r1, [r7, #8]
 801766e:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8017670:	68fb      	ldr	r3, [r7, #12]
 8017672:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8017676:	68fb      	ldr	r3, [r7, #12]
 8017678:	f103 0026 	add.w	r0, r3, #38	; 0x26
 801767c:	68fb      	ldr	r3, [r7, #12]
 801767e:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8017680:	2201      	movs	r2, #1
 8017682:	9203      	str	r2, [sp, #12]
 8017684:	68ba      	ldr	r2, [r7, #8]
 8017686:	9202      	str	r2, [sp, #8]
 8017688:	4a06      	ldr	r2, [pc, #24]	; (80176a4 <etharp_request_dst+0x40>)
 801768a:	9201      	str	r2, [sp, #4]
 801768c:	9300      	str	r3, [sp, #0]
 801768e:	4603      	mov	r3, r0
 8017690:	687a      	ldr	r2, [r7, #4]
 8017692:	68f8      	ldr	r0, [r7, #12]
 8017694:	f7ff ff5a 	bl	801754c <etharp_raw>
 8017698:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801769a:	4618      	mov	r0, r3
 801769c:	3710      	adds	r7, #16
 801769e:	46bd      	mov	sp, r7
 80176a0:	bd80      	pop	{r7, pc}
 80176a2:	bf00      	nop
 80176a4:	0801ec50 	.word	0x0801ec50

080176a8 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 80176a8:	b580      	push	{r7, lr}
 80176aa:	b082      	sub	sp, #8
 80176ac:	af00      	add	r7, sp, #0
 80176ae:	6078      	str	r0, [r7, #4]
 80176b0:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 80176b2:	4a05      	ldr	r2, [pc, #20]	; (80176c8 <etharp_request+0x20>)
 80176b4:	6839      	ldr	r1, [r7, #0]
 80176b6:	6878      	ldr	r0, [r7, #4]
 80176b8:	f7ff ffd4 	bl	8017664 <etharp_request_dst>
 80176bc:	4603      	mov	r3, r0
}
 80176be:	4618      	mov	r0, r3
 80176c0:	3708      	adds	r7, #8
 80176c2:	46bd      	mov	sp, r7
 80176c4:	bd80      	pop	{r7, pc}
 80176c6:	bf00      	nop
 80176c8:	0801ec48 	.word	0x0801ec48

080176cc <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 80176cc:	b580      	push	{r7, lr}
 80176ce:	b08e      	sub	sp, #56	; 0x38
 80176d0:	af04      	add	r7, sp, #16
 80176d2:	6078      	str	r0, [r7, #4]
 80176d4:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 80176d6:	4b87      	ldr	r3, [pc, #540]	; (80178f4 <icmp_input+0x228>)
 80176d8:	689b      	ldr	r3, [r3, #8]
 80176da:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 80176dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80176de:	781b      	ldrb	r3, [r3, #0]
 80176e0:	f003 030f 	and.w	r3, r3, #15
 80176e4:	b2db      	uxtb	r3, r3
 80176e6:	009b      	lsls	r3, r3, #2
 80176e8:	b2db      	uxtb	r3, r3
 80176ea:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 80176ec:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80176ee:	2b13      	cmp	r3, #19
 80176f0:	f240 80e8 	bls.w	80178c4 <icmp_input+0x1f8>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 80176f4:	687b      	ldr	r3, [r7, #4]
 80176f6:	895b      	ldrh	r3, [r3, #10]
 80176f8:	2b03      	cmp	r3, #3
 80176fa:	f240 80e5 	bls.w	80178c8 <icmp_input+0x1fc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 80176fe:	687b      	ldr	r3, [r7, #4]
 8017700:	685b      	ldr	r3, [r3, #4]
 8017702:	781b      	ldrb	r3, [r3, #0]
 8017704:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8017708:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 801770c:	2b00      	cmp	r3, #0
 801770e:	f000 80d2 	beq.w	80178b6 <icmp_input+0x1ea>
 8017712:	2b08      	cmp	r3, #8
 8017714:	f040 80d2 	bne.w	80178bc <icmp_input+0x1f0>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8017718:	4b77      	ldr	r3, [pc, #476]	; (80178f8 <icmp_input+0x22c>)
 801771a:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801771c:	4b75      	ldr	r3, [pc, #468]	; (80178f4 <icmp_input+0x228>)
 801771e:	695b      	ldr	r3, [r3, #20]
 8017720:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8017724:	2be0      	cmp	r3, #224	; 0xe0
 8017726:	f000 80d6 	beq.w	80178d6 <icmp_input+0x20a>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801772a:	4b72      	ldr	r3, [pc, #456]	; (80178f4 <icmp_input+0x228>)
 801772c:	695b      	ldr	r3, [r3, #20]
 801772e:	4a71      	ldr	r2, [pc, #452]	; (80178f4 <icmp_input+0x228>)
 8017730:	6812      	ldr	r2, [r2, #0]
 8017732:	4611      	mov	r1, r2
 8017734:	4618      	mov	r0, r3
 8017736:	f000 fc13 	bl	8017f60 <ip4_addr_isbroadcast_u32>
 801773a:	4603      	mov	r3, r0
 801773c:	2b00      	cmp	r3, #0
 801773e:	f040 80cc 	bne.w	80178da <icmp_input+0x20e>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8017742:	687b      	ldr	r3, [r7, #4]
 8017744:	891b      	ldrh	r3, [r3, #8]
 8017746:	2b07      	cmp	r3, #7
 8017748:	f240 80c0 	bls.w	80178cc <icmp_input+0x200>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 801774c:	6878      	ldr	r0, [r7, #4]
 801774e:	f7f7 fe7a 	bl	800f446 <inet_chksum_pbuf>
 8017752:	4603      	mov	r3, r0
 8017754:	2b00      	cmp	r3, #0
 8017756:	d003      	beq.n	8017760 <icmp_input+0x94>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
 8017758:	6878      	ldr	r0, [r7, #4]
 801775a:	f7f9 f9bb 	bl	8010ad4 <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 801775e:	e0c5      	b.n	80178ec <icmp_input+0x220>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8017760:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017762:	330e      	adds	r3, #14
 8017764:	4619      	mov	r1, r3
 8017766:	6878      	ldr	r0, [r7, #4]
 8017768:	f7f9 f91e 	bl	80109a8 <pbuf_add_header>
 801776c:	4603      	mov	r3, r0
 801776e:	2b00      	cmp	r3, #0
 8017770:	d04b      	beq.n	801780a <icmp_input+0x13e>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8017772:	687b      	ldr	r3, [r7, #4]
 8017774:	891a      	ldrh	r2, [r3, #8]
 8017776:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017778:	4413      	add	r3, r2
 801777a:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 801777c:	687b      	ldr	r3, [r7, #4]
 801777e:	891b      	ldrh	r3, [r3, #8]
 8017780:	8b7a      	ldrh	r2, [r7, #26]
 8017782:	429a      	cmp	r2, r3
 8017784:	f0c0 80ab 	bcc.w	80178de <icmp_input+0x212>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8017788:	8b7b      	ldrh	r3, [r7, #26]
 801778a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801778e:	4619      	mov	r1, r3
 8017790:	200e      	movs	r0, #14
 8017792:	f7f8 febb 	bl	801050c <pbuf_alloc>
 8017796:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8017798:	697b      	ldr	r3, [r7, #20]
 801779a:	2b00      	cmp	r3, #0
 801779c:	f000 80a1 	beq.w	80178e2 <icmp_input+0x216>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 80177a0:	697b      	ldr	r3, [r7, #20]
 80177a2:	895b      	ldrh	r3, [r3, #10]
 80177a4:	461a      	mov	r2, r3
 80177a6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80177a8:	3308      	adds	r3, #8
 80177aa:	429a      	cmp	r2, r3
 80177ac:	d203      	bcs.n	80177b6 <icmp_input+0xea>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 80177ae:	6978      	ldr	r0, [r7, #20]
 80177b0:	f7f9 f990 	bl	8010ad4 <pbuf_free>
          goto icmperr;
 80177b4:	e096      	b.n	80178e4 <icmp_input+0x218>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 80177b6:	697b      	ldr	r3, [r7, #20]
 80177b8:	685b      	ldr	r3, [r3, #4]
 80177ba:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80177bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80177be:	4618      	mov	r0, r3
 80177c0:	f002 fa2d 	bl	8019c1e <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 80177c4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80177c6:	4619      	mov	r1, r3
 80177c8:	6978      	ldr	r0, [r7, #20]
 80177ca:	f7f9 f8fd 	bl	80109c8 <pbuf_remove_header>
 80177ce:	4603      	mov	r3, r0
 80177d0:	2b00      	cmp	r3, #0
 80177d2:	d009      	beq.n	80177e8 <icmp_input+0x11c>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 80177d4:	4b49      	ldr	r3, [pc, #292]	; (80178fc <icmp_input+0x230>)
 80177d6:	22b6      	movs	r2, #182	; 0xb6
 80177d8:	4949      	ldr	r1, [pc, #292]	; (8017900 <icmp_input+0x234>)
 80177da:	484a      	ldr	r0, [pc, #296]	; (8017904 <icmp_input+0x238>)
 80177dc:	f002 f850 	bl	8019880 <iprintf>
          pbuf_free(r);
 80177e0:	6978      	ldr	r0, [r7, #20]
 80177e2:	f7f9 f977 	bl	8010ad4 <pbuf_free>
          goto icmperr;
 80177e6:	e07d      	b.n	80178e4 <icmp_input+0x218>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 80177e8:	6879      	ldr	r1, [r7, #4]
 80177ea:	6978      	ldr	r0, [r7, #20]
 80177ec:	f7f9 fa8a 	bl	8010d04 <pbuf_copy>
 80177f0:	4603      	mov	r3, r0
 80177f2:	2b00      	cmp	r3, #0
 80177f4:	d003      	beq.n	80177fe <icmp_input+0x132>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 80177f6:	6978      	ldr	r0, [r7, #20]
 80177f8:	f7f9 f96c 	bl	8010ad4 <pbuf_free>
          goto icmperr;
 80177fc:	e072      	b.n	80178e4 <icmp_input+0x218>
        }
        /* free the original p */
        pbuf_free(p);
 80177fe:	6878      	ldr	r0, [r7, #4]
 8017800:	f7f9 f968 	bl	8010ad4 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8017804:	697b      	ldr	r3, [r7, #20]
 8017806:	607b      	str	r3, [r7, #4]
 8017808:	e00f      	b.n	801782a <icmp_input+0x15e>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801780a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801780c:	330e      	adds	r3, #14
 801780e:	4619      	mov	r1, r3
 8017810:	6878      	ldr	r0, [r7, #4]
 8017812:	f7f9 f8d9 	bl	80109c8 <pbuf_remove_header>
 8017816:	4603      	mov	r3, r0
 8017818:	2b00      	cmp	r3, #0
 801781a:	d006      	beq.n	801782a <icmp_input+0x15e>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 801781c:	4b37      	ldr	r3, [pc, #220]	; (80178fc <icmp_input+0x230>)
 801781e:	22c7      	movs	r2, #199	; 0xc7
 8017820:	4939      	ldr	r1, [pc, #228]	; (8017908 <icmp_input+0x23c>)
 8017822:	4838      	ldr	r0, [pc, #224]	; (8017904 <icmp_input+0x238>)
 8017824:	f002 f82c 	bl	8019880 <iprintf>
          goto icmperr;
 8017828:	e05c      	b.n	80178e4 <icmp_input+0x218>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 801782a:	687b      	ldr	r3, [r7, #4]
 801782c:	685b      	ldr	r3, [r3, #4]
 801782e:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8017830:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017832:	4619      	mov	r1, r3
 8017834:	6878      	ldr	r0, [r7, #4]
 8017836:	f7f9 f8b7 	bl	80109a8 <pbuf_add_header>
 801783a:	4603      	mov	r3, r0
 801783c:	2b00      	cmp	r3, #0
 801783e:	d13c      	bne.n	80178ba <icmp_input+0x1ee>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8017840:	687b      	ldr	r3, [r7, #4]
 8017842:	685b      	ldr	r3, [r3, #4]
 8017844:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8017846:	69fb      	ldr	r3, [r7, #28]
 8017848:	681a      	ldr	r2, [r3, #0]
 801784a:	68fb      	ldr	r3, [r7, #12]
 801784c:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801784e:	4b29      	ldr	r3, [pc, #164]	; (80178f4 <icmp_input+0x228>)
 8017850:	691a      	ldr	r2, [r3, #16]
 8017852:	68fb      	ldr	r3, [r7, #12]
 8017854:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8017856:	693b      	ldr	r3, [r7, #16]
 8017858:	2200      	movs	r2, #0
 801785a:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 801785c:	693b      	ldr	r3, [r7, #16]
 801785e:	885b      	ldrh	r3, [r3, #2]
 8017860:	b29b      	uxth	r3, r3
 8017862:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8017866:	4293      	cmp	r3, r2
 8017868:	d907      	bls.n	801787a <icmp_input+0x1ae>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 801786a:	693b      	ldr	r3, [r7, #16]
 801786c:	885b      	ldrh	r3, [r3, #2]
 801786e:	b29b      	uxth	r3, r3
 8017870:	3309      	adds	r3, #9
 8017872:	b29a      	uxth	r2, r3
 8017874:	693b      	ldr	r3, [r7, #16]
 8017876:	805a      	strh	r2, [r3, #2]
 8017878:	e006      	b.n	8017888 <icmp_input+0x1bc>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 801787a:	693b      	ldr	r3, [r7, #16]
 801787c:	885b      	ldrh	r3, [r3, #2]
 801787e:	b29b      	uxth	r3, r3
 8017880:	3308      	adds	r3, #8
 8017882:	b29a      	uxth	r2, r3
 8017884:	693b      	ldr	r3, [r7, #16]
 8017886:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8017888:	68fb      	ldr	r3, [r7, #12]
 801788a:	22ff      	movs	r2, #255	; 0xff
 801788c:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 801788e:	68fb      	ldr	r3, [r7, #12]
 8017890:	2200      	movs	r2, #0
 8017892:	729a      	strb	r2, [r3, #10]
 8017894:	2200      	movs	r2, #0
 8017896:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8017898:	683b      	ldr	r3, [r7, #0]
 801789a:	9302      	str	r3, [sp, #8]
 801789c:	2301      	movs	r3, #1
 801789e:	9301      	str	r3, [sp, #4]
 80178a0:	2300      	movs	r3, #0
 80178a2:	9300      	str	r3, [sp, #0]
 80178a4:	23ff      	movs	r3, #255	; 0xff
 80178a6:	2200      	movs	r2, #0
 80178a8:	69f9      	ldr	r1, [r7, #28]
 80178aa:	6878      	ldr	r0, [r7, #4]
 80178ac:	f000 fa80 	bl	8017db0 <ip4_output_if>
 80178b0:	4603      	mov	r3, r0
 80178b2:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 80178b4:	e001      	b.n	80178ba <icmp_input+0x1ee>
      break;
 80178b6:	bf00      	nop
 80178b8:	e000      	b.n	80178bc <icmp_input+0x1f0>
      break;
 80178ba:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 80178bc:	6878      	ldr	r0, [r7, #4]
 80178be:	f7f9 f909 	bl	8010ad4 <pbuf_free>
  return;
 80178c2:	e013      	b.n	80178ec <icmp_input+0x220>
    goto lenerr;
 80178c4:	bf00      	nop
 80178c6:	e002      	b.n	80178ce <icmp_input+0x202>
    goto lenerr;
 80178c8:	bf00      	nop
 80178ca:	e000      	b.n	80178ce <icmp_input+0x202>
        goto lenerr;
 80178cc:	bf00      	nop
lenerr:
  pbuf_free(p);
 80178ce:	6878      	ldr	r0, [r7, #4]
 80178d0:	f7f9 f900 	bl	8010ad4 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80178d4:	e00a      	b.n	80178ec <icmp_input+0x220>
        goto icmperr;
 80178d6:	bf00      	nop
 80178d8:	e004      	b.n	80178e4 <icmp_input+0x218>
        goto icmperr;
 80178da:	bf00      	nop
 80178dc:	e002      	b.n	80178e4 <icmp_input+0x218>
          goto icmperr;
 80178de:	bf00      	nop
 80178e0:	e000      	b.n	80178e4 <icmp_input+0x218>
          goto icmperr;
 80178e2:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 80178e4:	6878      	ldr	r0, [r7, #4]
 80178e6:	f7f9 f8f5 	bl	8010ad4 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80178ea:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 80178ec:	3728      	adds	r7, #40	; 0x28
 80178ee:	46bd      	mov	sp, r7
 80178f0:	bd80      	pop	{r7, pc}
 80178f2:	bf00      	nop
 80178f4:	200007b0 	.word	0x200007b0
 80178f8:	200007c4 	.word	0x200007c4
 80178fc:	0801e6c4 	.word	0x0801e6c4
 8017900:	0801e6fc 	.word	0x0801e6fc
 8017904:	0801e734 	.word	0x0801e734
 8017908:	0801e75c 	.word	0x0801e75c

0801790c <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 801790c:	b580      	push	{r7, lr}
 801790e:	b082      	sub	sp, #8
 8017910:	af00      	add	r7, sp, #0
 8017912:	6078      	str	r0, [r7, #4]
 8017914:	460b      	mov	r3, r1
 8017916:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8017918:	78fb      	ldrb	r3, [r7, #3]
 801791a:	461a      	mov	r2, r3
 801791c:	2103      	movs	r1, #3
 801791e:	6878      	ldr	r0, [r7, #4]
 8017920:	f000 f814 	bl	801794c <icmp_send_response>
}
 8017924:	bf00      	nop
 8017926:	3708      	adds	r7, #8
 8017928:	46bd      	mov	sp, r7
 801792a:	bd80      	pop	{r7, pc}

0801792c <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 801792c:	b580      	push	{r7, lr}
 801792e:	b082      	sub	sp, #8
 8017930:	af00      	add	r7, sp, #0
 8017932:	6078      	str	r0, [r7, #4]
 8017934:	460b      	mov	r3, r1
 8017936:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8017938:	78fb      	ldrb	r3, [r7, #3]
 801793a:	461a      	mov	r2, r3
 801793c:	210b      	movs	r1, #11
 801793e:	6878      	ldr	r0, [r7, #4]
 8017940:	f000 f804 	bl	801794c <icmp_send_response>
}
 8017944:	bf00      	nop
 8017946:	3708      	adds	r7, #8
 8017948:	46bd      	mov	sp, r7
 801794a:	bd80      	pop	{r7, pc}

0801794c <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 801794c:	b580      	push	{r7, lr}
 801794e:	b08c      	sub	sp, #48	; 0x30
 8017950:	af04      	add	r7, sp, #16
 8017952:	6078      	str	r0, [r7, #4]
 8017954:	460b      	mov	r3, r1
 8017956:	70fb      	strb	r3, [r7, #3]
 8017958:	4613      	mov	r3, r2
 801795a:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 801795c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8017960:	2124      	movs	r1, #36	; 0x24
 8017962:	2022      	movs	r0, #34	; 0x22
 8017964:	f7f8 fdd2 	bl	801050c <pbuf_alloc>
 8017968:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801796a:	69fb      	ldr	r3, [r7, #28]
 801796c:	2b00      	cmp	r3, #0
 801796e:	d056      	beq.n	8017a1e <icmp_send_response+0xd2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8017970:	69fb      	ldr	r3, [r7, #28]
 8017972:	895b      	ldrh	r3, [r3, #10]
 8017974:	2b23      	cmp	r3, #35	; 0x23
 8017976:	d806      	bhi.n	8017986 <icmp_send_response+0x3a>
 8017978:	4b2b      	ldr	r3, [pc, #172]	; (8017a28 <icmp_send_response+0xdc>)
 801797a:	f44f 72b4 	mov.w	r2, #360	; 0x168
 801797e:	492b      	ldr	r1, [pc, #172]	; (8017a2c <icmp_send_response+0xe0>)
 8017980:	482b      	ldr	r0, [pc, #172]	; (8017a30 <icmp_send_response+0xe4>)
 8017982:	f001 ff7d 	bl	8019880 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8017986:	687b      	ldr	r3, [r7, #4]
 8017988:	685b      	ldr	r3, [r3, #4]
 801798a:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 801798c:	69fb      	ldr	r3, [r7, #28]
 801798e:	685b      	ldr	r3, [r3, #4]
 8017990:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8017992:	697b      	ldr	r3, [r7, #20]
 8017994:	78fa      	ldrb	r2, [r7, #3]
 8017996:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8017998:	697b      	ldr	r3, [r7, #20]
 801799a:	78ba      	ldrb	r2, [r7, #2]
 801799c:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801799e:	697b      	ldr	r3, [r7, #20]
 80179a0:	2200      	movs	r2, #0
 80179a2:	711a      	strb	r2, [r3, #4]
 80179a4:	2200      	movs	r2, #0
 80179a6:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 80179a8:	697b      	ldr	r3, [r7, #20]
 80179aa:	2200      	movs	r2, #0
 80179ac:	719a      	strb	r2, [r3, #6]
 80179ae:	2200      	movs	r2, #0
 80179b0:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 80179b2:	69fb      	ldr	r3, [r7, #28]
 80179b4:	685b      	ldr	r3, [r3, #4]
 80179b6:	f103 0008 	add.w	r0, r3, #8
 80179ba:	687b      	ldr	r3, [r7, #4]
 80179bc:	685b      	ldr	r3, [r3, #4]
 80179be:	221c      	movs	r2, #28
 80179c0:	4619      	mov	r1, r3
 80179c2:	f002 f92c 	bl	8019c1e <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 80179c6:	69bb      	ldr	r3, [r7, #24]
 80179c8:	68db      	ldr	r3, [r3, #12]
 80179ca:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 80179cc:	f107 030c 	add.w	r3, r7, #12
 80179d0:	4618      	mov	r0, r3
 80179d2:	f000 f82f 	bl	8017a34 <ip4_route>
 80179d6:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 80179d8:	693b      	ldr	r3, [r7, #16]
 80179da:	2b00      	cmp	r3, #0
 80179dc:	d01b      	beq.n	8017a16 <icmp_send_response+0xca>
    /* calculate checksum */
    icmphdr->chksum = 0;
 80179de:	697b      	ldr	r3, [r7, #20]
 80179e0:	2200      	movs	r2, #0
 80179e2:	709a      	strb	r2, [r3, #2]
 80179e4:	2200      	movs	r2, #0
 80179e6:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 80179e8:	69fb      	ldr	r3, [r7, #28]
 80179ea:	895b      	ldrh	r3, [r3, #10]
 80179ec:	4619      	mov	r1, r3
 80179ee:	6978      	ldr	r0, [r7, #20]
 80179f0:	f7f7 fd17 	bl	800f422 <inet_chksum>
 80179f4:	4603      	mov	r3, r0
 80179f6:	461a      	mov	r2, r3
 80179f8:	697b      	ldr	r3, [r7, #20]
 80179fa:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 80179fc:	f107 020c 	add.w	r2, r7, #12
 8017a00:	693b      	ldr	r3, [r7, #16]
 8017a02:	9302      	str	r3, [sp, #8]
 8017a04:	2301      	movs	r3, #1
 8017a06:	9301      	str	r3, [sp, #4]
 8017a08:	2300      	movs	r3, #0
 8017a0a:	9300      	str	r3, [sp, #0]
 8017a0c:	23ff      	movs	r3, #255	; 0xff
 8017a0e:	2100      	movs	r1, #0
 8017a10:	69f8      	ldr	r0, [r7, #28]
 8017a12:	f000 f9cd 	bl	8017db0 <ip4_output_if>
  }
  pbuf_free(q);
 8017a16:	69f8      	ldr	r0, [r7, #28]
 8017a18:	f7f9 f85c 	bl	8010ad4 <pbuf_free>
 8017a1c:	e000      	b.n	8017a20 <icmp_send_response+0xd4>
    return;
 8017a1e:	bf00      	nop
}
 8017a20:	3720      	adds	r7, #32
 8017a22:	46bd      	mov	sp, r7
 8017a24:	bd80      	pop	{r7, pc}
 8017a26:	bf00      	nop
 8017a28:	0801e6c4 	.word	0x0801e6c4
 8017a2c:	0801e790 	.word	0x0801e790
 8017a30:	0801e734 	.word	0x0801e734

08017a34 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8017a34:	b480      	push	{r7}
 8017a36:	b085      	sub	sp, #20
 8017a38:	af00      	add	r7, sp, #0
 8017a3a:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8017a3c:	4b33      	ldr	r3, [pc, #204]	; (8017b0c <ip4_route+0xd8>)
 8017a3e:	681b      	ldr	r3, [r3, #0]
 8017a40:	60fb      	str	r3, [r7, #12]
 8017a42:	e036      	b.n	8017ab2 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8017a44:	68fb      	ldr	r3, [r7, #12]
 8017a46:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8017a4a:	f003 0301 	and.w	r3, r3, #1
 8017a4e:	b2db      	uxtb	r3, r3
 8017a50:	2b00      	cmp	r3, #0
 8017a52:	d02b      	beq.n	8017aac <ip4_route+0x78>
 8017a54:	68fb      	ldr	r3, [r7, #12]
 8017a56:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8017a5a:	089b      	lsrs	r3, r3, #2
 8017a5c:	f003 0301 	and.w	r3, r3, #1
 8017a60:	b2db      	uxtb	r3, r3
 8017a62:	2b00      	cmp	r3, #0
 8017a64:	d022      	beq.n	8017aac <ip4_route+0x78>
 8017a66:	68fb      	ldr	r3, [r7, #12]
 8017a68:	3304      	adds	r3, #4
 8017a6a:	681b      	ldr	r3, [r3, #0]
 8017a6c:	2b00      	cmp	r3, #0
 8017a6e:	d01d      	beq.n	8017aac <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8017a70:	687b      	ldr	r3, [r7, #4]
 8017a72:	681a      	ldr	r2, [r3, #0]
 8017a74:	68fb      	ldr	r3, [r7, #12]
 8017a76:	3304      	adds	r3, #4
 8017a78:	681b      	ldr	r3, [r3, #0]
 8017a7a:	405a      	eors	r2, r3
 8017a7c:	68fb      	ldr	r3, [r7, #12]
 8017a7e:	3308      	adds	r3, #8
 8017a80:	681b      	ldr	r3, [r3, #0]
 8017a82:	4013      	ands	r3, r2
 8017a84:	2b00      	cmp	r3, #0
 8017a86:	d101      	bne.n	8017a8c <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8017a88:	68fb      	ldr	r3, [r7, #12]
 8017a8a:	e038      	b.n	8017afe <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8017a8c:	68fb      	ldr	r3, [r7, #12]
 8017a8e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8017a92:	f003 0302 	and.w	r3, r3, #2
 8017a96:	2b00      	cmp	r3, #0
 8017a98:	d108      	bne.n	8017aac <ip4_route+0x78>
 8017a9a:	687b      	ldr	r3, [r7, #4]
 8017a9c:	681a      	ldr	r2, [r3, #0]
 8017a9e:	68fb      	ldr	r3, [r7, #12]
 8017aa0:	330c      	adds	r3, #12
 8017aa2:	681b      	ldr	r3, [r3, #0]
 8017aa4:	429a      	cmp	r2, r3
 8017aa6:	d101      	bne.n	8017aac <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8017aa8:	68fb      	ldr	r3, [r7, #12]
 8017aaa:	e028      	b.n	8017afe <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8017aac:	68fb      	ldr	r3, [r7, #12]
 8017aae:	681b      	ldr	r3, [r3, #0]
 8017ab0:	60fb      	str	r3, [r7, #12]
 8017ab2:	68fb      	ldr	r3, [r7, #12]
 8017ab4:	2b00      	cmp	r3, #0
 8017ab6:	d1c5      	bne.n	8017a44 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8017ab8:	4b15      	ldr	r3, [pc, #84]	; (8017b10 <ip4_route+0xdc>)
 8017aba:	681b      	ldr	r3, [r3, #0]
 8017abc:	2b00      	cmp	r3, #0
 8017abe:	d01a      	beq.n	8017af6 <ip4_route+0xc2>
 8017ac0:	4b13      	ldr	r3, [pc, #76]	; (8017b10 <ip4_route+0xdc>)
 8017ac2:	681b      	ldr	r3, [r3, #0]
 8017ac4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8017ac8:	f003 0301 	and.w	r3, r3, #1
 8017acc:	2b00      	cmp	r3, #0
 8017ace:	d012      	beq.n	8017af6 <ip4_route+0xc2>
 8017ad0:	4b0f      	ldr	r3, [pc, #60]	; (8017b10 <ip4_route+0xdc>)
 8017ad2:	681b      	ldr	r3, [r3, #0]
 8017ad4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8017ad8:	f003 0304 	and.w	r3, r3, #4
 8017adc:	2b00      	cmp	r3, #0
 8017ade:	d00a      	beq.n	8017af6 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8017ae0:	4b0b      	ldr	r3, [pc, #44]	; (8017b10 <ip4_route+0xdc>)
 8017ae2:	681b      	ldr	r3, [r3, #0]
 8017ae4:	3304      	adds	r3, #4
 8017ae6:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8017ae8:	2b00      	cmp	r3, #0
 8017aea:	d004      	beq.n	8017af6 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8017aec:	687b      	ldr	r3, [r7, #4]
 8017aee:	681b      	ldr	r3, [r3, #0]
 8017af0:	b2db      	uxtb	r3, r3
 8017af2:	2b7f      	cmp	r3, #127	; 0x7f
 8017af4:	d101      	bne.n	8017afa <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8017af6:	2300      	movs	r3, #0
 8017af8:	e001      	b.n	8017afe <ip4_route+0xca>
  }

  return netif_default;
 8017afa:	4b05      	ldr	r3, [pc, #20]	; (8017b10 <ip4_route+0xdc>)
 8017afc:	681b      	ldr	r3, [r3, #0]
}
 8017afe:	4618      	mov	r0, r3
 8017b00:	3714      	adds	r7, #20
 8017b02:	46bd      	mov	sp, r7
 8017b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b08:	4770      	bx	lr
 8017b0a:	bf00      	nop
 8017b0c:	20007080 	.word	0x20007080
 8017b10:	20007084 	.word	0x20007084

08017b14 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8017b14:	b580      	push	{r7, lr}
 8017b16:	b082      	sub	sp, #8
 8017b18:	af00      	add	r7, sp, #0
 8017b1a:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8017b1c:	687b      	ldr	r3, [r7, #4]
 8017b1e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8017b22:	f003 0301 	and.w	r3, r3, #1
 8017b26:	b2db      	uxtb	r3, r3
 8017b28:	2b00      	cmp	r3, #0
 8017b2a:	d016      	beq.n	8017b5a <ip4_input_accept+0x46>
 8017b2c:	687b      	ldr	r3, [r7, #4]
 8017b2e:	3304      	adds	r3, #4
 8017b30:	681b      	ldr	r3, [r3, #0]
 8017b32:	2b00      	cmp	r3, #0
 8017b34:	d011      	beq.n	8017b5a <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8017b36:	4b0b      	ldr	r3, [pc, #44]	; (8017b64 <ip4_input_accept+0x50>)
 8017b38:	695a      	ldr	r2, [r3, #20]
 8017b3a:	687b      	ldr	r3, [r7, #4]
 8017b3c:	3304      	adds	r3, #4
 8017b3e:	681b      	ldr	r3, [r3, #0]
 8017b40:	429a      	cmp	r2, r3
 8017b42:	d008      	beq.n	8017b56 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8017b44:	4b07      	ldr	r3, [pc, #28]	; (8017b64 <ip4_input_accept+0x50>)
 8017b46:	695b      	ldr	r3, [r3, #20]
 8017b48:	6879      	ldr	r1, [r7, #4]
 8017b4a:	4618      	mov	r0, r3
 8017b4c:	f000 fa08 	bl	8017f60 <ip4_addr_isbroadcast_u32>
 8017b50:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8017b52:	2b00      	cmp	r3, #0
 8017b54:	d001      	beq.n	8017b5a <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8017b56:	2301      	movs	r3, #1
 8017b58:	e000      	b.n	8017b5c <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8017b5a:	2300      	movs	r3, #0
}
 8017b5c:	4618      	mov	r0, r3
 8017b5e:	3708      	adds	r7, #8
 8017b60:	46bd      	mov	sp, r7
 8017b62:	bd80      	pop	{r7, pc}
 8017b64:	200007b0 	.word	0x200007b0

08017b68 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8017b68:	b580      	push	{r7, lr}
 8017b6a:	b086      	sub	sp, #24
 8017b6c:	af00      	add	r7, sp, #0
 8017b6e:	6078      	str	r0, [r7, #4]
 8017b70:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8017b72:	687b      	ldr	r3, [r7, #4]
 8017b74:	685b      	ldr	r3, [r3, #4]
 8017b76:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8017b78:	697b      	ldr	r3, [r7, #20]
 8017b7a:	781b      	ldrb	r3, [r3, #0]
 8017b7c:	091b      	lsrs	r3, r3, #4
 8017b7e:	b2db      	uxtb	r3, r3
 8017b80:	2b04      	cmp	r3, #4
 8017b82:	d004      	beq.n	8017b8e <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8017b84:	6878      	ldr	r0, [r7, #4]
 8017b86:	f7f8 ffa5 	bl	8010ad4 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8017b8a:	2300      	movs	r3, #0
 8017b8c:	e107      	b.n	8017d9e <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8017b8e:	697b      	ldr	r3, [r7, #20]
 8017b90:	781b      	ldrb	r3, [r3, #0]
 8017b92:	f003 030f 	and.w	r3, r3, #15
 8017b96:	b2db      	uxtb	r3, r3
 8017b98:	009b      	lsls	r3, r3, #2
 8017b9a:	b2db      	uxtb	r3, r3
 8017b9c:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8017b9e:	697b      	ldr	r3, [r7, #20]
 8017ba0:	885b      	ldrh	r3, [r3, #2]
 8017ba2:	b29b      	uxth	r3, r3
 8017ba4:	4618      	mov	r0, r3
 8017ba6:	f7f7 fbb1 	bl	800f30c <lwip_htons>
 8017baa:	4603      	mov	r3, r0
 8017bac:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8017bae:	687b      	ldr	r3, [r7, #4]
 8017bb0:	891b      	ldrh	r3, [r3, #8]
 8017bb2:	89ba      	ldrh	r2, [r7, #12]
 8017bb4:	429a      	cmp	r2, r3
 8017bb6:	d204      	bcs.n	8017bc2 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8017bb8:	89bb      	ldrh	r3, [r7, #12]
 8017bba:	4619      	mov	r1, r3
 8017bbc:	6878      	ldr	r0, [r7, #4]
 8017bbe:	f7f8 fe05 	bl	80107cc <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8017bc2:	687b      	ldr	r3, [r7, #4]
 8017bc4:	895b      	ldrh	r3, [r3, #10]
 8017bc6:	89fa      	ldrh	r2, [r7, #14]
 8017bc8:	429a      	cmp	r2, r3
 8017bca:	d807      	bhi.n	8017bdc <ip4_input+0x74>
 8017bcc:	687b      	ldr	r3, [r7, #4]
 8017bce:	891b      	ldrh	r3, [r3, #8]
 8017bd0:	89ba      	ldrh	r2, [r7, #12]
 8017bd2:	429a      	cmp	r2, r3
 8017bd4:	d802      	bhi.n	8017bdc <ip4_input+0x74>
 8017bd6:	89fb      	ldrh	r3, [r7, #14]
 8017bd8:	2b13      	cmp	r3, #19
 8017bda:	d804      	bhi.n	8017be6 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8017bdc:	6878      	ldr	r0, [r7, #4]
 8017bde:	f7f8 ff79 	bl	8010ad4 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8017be2:	2300      	movs	r3, #0
 8017be4:	e0db      	b.n	8017d9e <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8017be6:	697b      	ldr	r3, [r7, #20]
 8017be8:	691b      	ldr	r3, [r3, #16]
 8017bea:	4a6f      	ldr	r2, [pc, #444]	; (8017da8 <ip4_input+0x240>)
 8017bec:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8017bee:	697b      	ldr	r3, [r7, #20]
 8017bf0:	68db      	ldr	r3, [r3, #12]
 8017bf2:	4a6d      	ldr	r2, [pc, #436]	; (8017da8 <ip4_input+0x240>)
 8017bf4:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8017bf6:	4b6c      	ldr	r3, [pc, #432]	; (8017da8 <ip4_input+0x240>)
 8017bf8:	695b      	ldr	r3, [r3, #20]
 8017bfa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8017bfe:	2be0      	cmp	r3, #224	; 0xe0
 8017c00:	d112      	bne.n	8017c28 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8017c02:	683b      	ldr	r3, [r7, #0]
 8017c04:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8017c08:	f003 0301 	and.w	r3, r3, #1
 8017c0c:	b2db      	uxtb	r3, r3
 8017c0e:	2b00      	cmp	r3, #0
 8017c10:	d007      	beq.n	8017c22 <ip4_input+0xba>
 8017c12:	683b      	ldr	r3, [r7, #0]
 8017c14:	3304      	adds	r3, #4
 8017c16:	681b      	ldr	r3, [r3, #0]
 8017c18:	2b00      	cmp	r3, #0
 8017c1a:	d002      	beq.n	8017c22 <ip4_input+0xba>
      netif = inp;
 8017c1c:	683b      	ldr	r3, [r7, #0]
 8017c1e:	613b      	str	r3, [r7, #16]
 8017c20:	e02a      	b.n	8017c78 <ip4_input+0x110>
    } else {
      netif = NULL;
 8017c22:	2300      	movs	r3, #0
 8017c24:	613b      	str	r3, [r7, #16]
 8017c26:	e027      	b.n	8017c78 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8017c28:	6838      	ldr	r0, [r7, #0]
 8017c2a:	f7ff ff73 	bl	8017b14 <ip4_input_accept>
 8017c2e:	4603      	mov	r3, r0
 8017c30:	2b00      	cmp	r3, #0
 8017c32:	d002      	beq.n	8017c3a <ip4_input+0xd2>
      netif = inp;
 8017c34:	683b      	ldr	r3, [r7, #0]
 8017c36:	613b      	str	r3, [r7, #16]
 8017c38:	e01e      	b.n	8017c78 <ip4_input+0x110>
    } else {
      netif = NULL;
 8017c3a:	2300      	movs	r3, #0
 8017c3c:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8017c3e:	4b5a      	ldr	r3, [pc, #360]	; (8017da8 <ip4_input+0x240>)
 8017c40:	695b      	ldr	r3, [r3, #20]
 8017c42:	b2db      	uxtb	r3, r3
 8017c44:	2b7f      	cmp	r3, #127	; 0x7f
 8017c46:	d017      	beq.n	8017c78 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8017c48:	4b58      	ldr	r3, [pc, #352]	; (8017dac <ip4_input+0x244>)
 8017c4a:	681b      	ldr	r3, [r3, #0]
 8017c4c:	613b      	str	r3, [r7, #16]
 8017c4e:	e00e      	b.n	8017c6e <ip4_input+0x106>
          if (netif == inp) {
 8017c50:	693a      	ldr	r2, [r7, #16]
 8017c52:	683b      	ldr	r3, [r7, #0]
 8017c54:	429a      	cmp	r2, r3
 8017c56:	d006      	beq.n	8017c66 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8017c58:	6938      	ldr	r0, [r7, #16]
 8017c5a:	f7ff ff5b 	bl	8017b14 <ip4_input_accept>
 8017c5e:	4603      	mov	r3, r0
 8017c60:	2b00      	cmp	r3, #0
 8017c62:	d108      	bne.n	8017c76 <ip4_input+0x10e>
 8017c64:	e000      	b.n	8017c68 <ip4_input+0x100>
            continue;
 8017c66:	bf00      	nop
        NETIF_FOREACH(netif) {
 8017c68:	693b      	ldr	r3, [r7, #16]
 8017c6a:	681b      	ldr	r3, [r3, #0]
 8017c6c:	613b      	str	r3, [r7, #16]
 8017c6e:	693b      	ldr	r3, [r7, #16]
 8017c70:	2b00      	cmp	r3, #0
 8017c72:	d1ed      	bne.n	8017c50 <ip4_input+0xe8>
 8017c74:	e000      	b.n	8017c78 <ip4_input+0x110>
            break;
 8017c76:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8017c78:	4b4b      	ldr	r3, [pc, #300]	; (8017da8 <ip4_input+0x240>)
 8017c7a:	691b      	ldr	r3, [r3, #16]
 8017c7c:	6839      	ldr	r1, [r7, #0]
 8017c7e:	4618      	mov	r0, r3
 8017c80:	f000 f96e 	bl	8017f60 <ip4_addr_isbroadcast_u32>
 8017c84:	4603      	mov	r3, r0
 8017c86:	2b00      	cmp	r3, #0
 8017c88:	d105      	bne.n	8017c96 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8017c8a:	4b47      	ldr	r3, [pc, #284]	; (8017da8 <ip4_input+0x240>)
 8017c8c:	691b      	ldr	r3, [r3, #16]
 8017c8e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8017c92:	2be0      	cmp	r3, #224	; 0xe0
 8017c94:	d104      	bne.n	8017ca0 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8017c96:	6878      	ldr	r0, [r7, #4]
 8017c98:	f7f8 ff1c 	bl	8010ad4 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8017c9c:	2300      	movs	r3, #0
 8017c9e:	e07e      	b.n	8017d9e <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8017ca0:	693b      	ldr	r3, [r7, #16]
 8017ca2:	2b00      	cmp	r3, #0
 8017ca4:	d104      	bne.n	8017cb0 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8017ca6:	6878      	ldr	r0, [r7, #4]
 8017ca8:	f7f8 ff14 	bl	8010ad4 <pbuf_free>
    return ERR_OK;
 8017cac:	2300      	movs	r3, #0
 8017cae:	e076      	b.n	8017d9e <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8017cb0:	697b      	ldr	r3, [r7, #20]
 8017cb2:	88db      	ldrh	r3, [r3, #6]
 8017cb4:	b29b      	uxth	r3, r3
 8017cb6:	461a      	mov	r2, r3
 8017cb8:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8017cbc:	4013      	ands	r3, r2
 8017cbe:	2b00      	cmp	r3, #0
 8017cc0:	d00b      	beq.n	8017cda <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8017cc2:	6878      	ldr	r0, [r7, #4]
 8017cc4:	f000 fc92 	bl	80185ec <ip4_reass>
 8017cc8:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8017cca:	687b      	ldr	r3, [r7, #4]
 8017ccc:	2b00      	cmp	r3, #0
 8017cce:	d101      	bne.n	8017cd4 <ip4_input+0x16c>
      return ERR_OK;
 8017cd0:	2300      	movs	r3, #0
 8017cd2:	e064      	b.n	8017d9e <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8017cd4:	687b      	ldr	r3, [r7, #4]
 8017cd6:	685b      	ldr	r3, [r3, #4]
 8017cd8:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8017cda:	4a33      	ldr	r2, [pc, #204]	; (8017da8 <ip4_input+0x240>)
 8017cdc:	693b      	ldr	r3, [r7, #16]
 8017cde:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8017ce0:	4a31      	ldr	r2, [pc, #196]	; (8017da8 <ip4_input+0x240>)
 8017ce2:	683b      	ldr	r3, [r7, #0]
 8017ce4:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8017ce6:	4a30      	ldr	r2, [pc, #192]	; (8017da8 <ip4_input+0x240>)
 8017ce8:	697b      	ldr	r3, [r7, #20]
 8017cea:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8017cec:	697b      	ldr	r3, [r7, #20]
 8017cee:	781b      	ldrb	r3, [r3, #0]
 8017cf0:	f003 030f 	and.w	r3, r3, #15
 8017cf4:	b2db      	uxtb	r3, r3
 8017cf6:	009b      	lsls	r3, r3, #2
 8017cf8:	b2db      	uxtb	r3, r3
 8017cfa:	b29a      	uxth	r2, r3
 8017cfc:	4b2a      	ldr	r3, [pc, #168]	; (8017da8 <ip4_input+0x240>)
 8017cfe:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8017d00:	89fb      	ldrh	r3, [r7, #14]
 8017d02:	4619      	mov	r1, r3
 8017d04:	6878      	ldr	r0, [r7, #4]
 8017d06:	f7f8 fe5f 	bl	80109c8 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8017d0a:	697b      	ldr	r3, [r7, #20]
 8017d0c:	7a5b      	ldrb	r3, [r3, #9]
 8017d0e:	2b11      	cmp	r3, #17
 8017d10:	d006      	beq.n	8017d20 <ip4_input+0x1b8>
 8017d12:	2b11      	cmp	r3, #17
 8017d14:	dc13      	bgt.n	8017d3e <ip4_input+0x1d6>
 8017d16:	2b01      	cmp	r3, #1
 8017d18:	d00c      	beq.n	8017d34 <ip4_input+0x1cc>
 8017d1a:	2b06      	cmp	r3, #6
 8017d1c:	d005      	beq.n	8017d2a <ip4_input+0x1c2>
 8017d1e:	e00e      	b.n	8017d3e <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8017d20:	6839      	ldr	r1, [r7, #0]
 8017d22:	6878      	ldr	r0, [r7, #4]
 8017d24:	f7fe fc42 	bl	80165ac <udp_input>
        break;
 8017d28:	e026      	b.n	8017d78 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8017d2a:	6839      	ldr	r1, [r7, #0]
 8017d2c:	6878      	ldr	r0, [r7, #4]
 8017d2e:	f7fa fcfd 	bl	801272c <tcp_input>
        break;
 8017d32:	e021      	b.n	8017d78 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8017d34:	6839      	ldr	r1, [r7, #0]
 8017d36:	6878      	ldr	r0, [r7, #4]
 8017d38:	f7ff fcc8 	bl	80176cc <icmp_input>
        break;
 8017d3c:	e01c      	b.n	8017d78 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8017d3e:	4b1a      	ldr	r3, [pc, #104]	; (8017da8 <ip4_input+0x240>)
 8017d40:	695b      	ldr	r3, [r3, #20]
 8017d42:	6939      	ldr	r1, [r7, #16]
 8017d44:	4618      	mov	r0, r3
 8017d46:	f000 f90b 	bl	8017f60 <ip4_addr_isbroadcast_u32>
 8017d4a:	4603      	mov	r3, r0
 8017d4c:	2b00      	cmp	r3, #0
 8017d4e:	d10f      	bne.n	8017d70 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8017d50:	4b15      	ldr	r3, [pc, #84]	; (8017da8 <ip4_input+0x240>)
 8017d52:	695b      	ldr	r3, [r3, #20]
 8017d54:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8017d58:	2be0      	cmp	r3, #224	; 0xe0
 8017d5a:	d009      	beq.n	8017d70 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8017d5c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8017d60:	4619      	mov	r1, r3
 8017d62:	6878      	ldr	r0, [r7, #4]
 8017d64:	f7f8 fea3 	bl	8010aae <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8017d68:	2102      	movs	r1, #2
 8017d6a:	6878      	ldr	r0, [r7, #4]
 8017d6c:	f7ff fdce 	bl	801790c <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8017d70:	6878      	ldr	r0, [r7, #4]
 8017d72:	f7f8 feaf 	bl	8010ad4 <pbuf_free>
        break;
 8017d76:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8017d78:	4b0b      	ldr	r3, [pc, #44]	; (8017da8 <ip4_input+0x240>)
 8017d7a:	2200      	movs	r2, #0
 8017d7c:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8017d7e:	4b0a      	ldr	r3, [pc, #40]	; (8017da8 <ip4_input+0x240>)
 8017d80:	2200      	movs	r2, #0
 8017d82:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8017d84:	4b08      	ldr	r3, [pc, #32]	; (8017da8 <ip4_input+0x240>)
 8017d86:	2200      	movs	r2, #0
 8017d88:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8017d8a:	4b07      	ldr	r3, [pc, #28]	; (8017da8 <ip4_input+0x240>)
 8017d8c:	2200      	movs	r2, #0
 8017d8e:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8017d90:	4b05      	ldr	r3, [pc, #20]	; (8017da8 <ip4_input+0x240>)
 8017d92:	2200      	movs	r2, #0
 8017d94:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8017d96:	4b04      	ldr	r3, [pc, #16]	; (8017da8 <ip4_input+0x240>)
 8017d98:	2200      	movs	r2, #0
 8017d9a:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8017d9c:	2300      	movs	r3, #0
}
 8017d9e:	4618      	mov	r0, r3
 8017da0:	3718      	adds	r7, #24
 8017da2:	46bd      	mov	sp, r7
 8017da4:	bd80      	pop	{r7, pc}
 8017da6:	bf00      	nop
 8017da8:	200007b0 	.word	0x200007b0
 8017dac:	20007080 	.word	0x20007080

08017db0 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8017db0:	b580      	push	{r7, lr}
 8017db2:	b08a      	sub	sp, #40	; 0x28
 8017db4:	af04      	add	r7, sp, #16
 8017db6:	60f8      	str	r0, [r7, #12]
 8017db8:	60b9      	str	r1, [r7, #8]
 8017dba:	607a      	str	r2, [r7, #4]
 8017dbc:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8017dbe:	68bb      	ldr	r3, [r7, #8]
 8017dc0:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8017dc2:	687b      	ldr	r3, [r7, #4]
 8017dc4:	2b00      	cmp	r3, #0
 8017dc6:	d009      	beq.n	8017ddc <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8017dc8:	68bb      	ldr	r3, [r7, #8]
 8017dca:	2b00      	cmp	r3, #0
 8017dcc:	d003      	beq.n	8017dd6 <ip4_output_if+0x26>
 8017dce:	68bb      	ldr	r3, [r7, #8]
 8017dd0:	681b      	ldr	r3, [r3, #0]
 8017dd2:	2b00      	cmp	r3, #0
 8017dd4:	d102      	bne.n	8017ddc <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8017dd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017dd8:	3304      	adds	r3, #4
 8017dda:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8017ddc:	78fa      	ldrb	r2, [r7, #3]
 8017dde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017de0:	9302      	str	r3, [sp, #8]
 8017de2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8017de6:	9301      	str	r3, [sp, #4]
 8017de8:	f897 3020 	ldrb.w	r3, [r7, #32]
 8017dec:	9300      	str	r3, [sp, #0]
 8017dee:	4613      	mov	r3, r2
 8017df0:	687a      	ldr	r2, [r7, #4]
 8017df2:	6979      	ldr	r1, [r7, #20]
 8017df4:	68f8      	ldr	r0, [r7, #12]
 8017df6:	f000 f805 	bl	8017e04 <ip4_output_if_src>
 8017dfa:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8017dfc:	4618      	mov	r0, r3
 8017dfe:	3718      	adds	r7, #24
 8017e00:	46bd      	mov	sp, r7
 8017e02:	bd80      	pop	{r7, pc}

08017e04 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8017e04:	b580      	push	{r7, lr}
 8017e06:	b088      	sub	sp, #32
 8017e08:	af00      	add	r7, sp, #0
 8017e0a:	60f8      	str	r0, [r7, #12]
 8017e0c:	60b9      	str	r1, [r7, #8]
 8017e0e:	607a      	str	r2, [r7, #4]
 8017e10:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8017e12:	68fb      	ldr	r3, [r7, #12]
 8017e14:	7b9b      	ldrb	r3, [r3, #14]
 8017e16:	2b01      	cmp	r3, #1
 8017e18:	d006      	beq.n	8017e28 <ip4_output_if_src+0x24>
 8017e1a:	4b4b      	ldr	r3, [pc, #300]	; (8017f48 <ip4_output_if_src+0x144>)
 8017e1c:	f44f 7255 	mov.w	r2, #852	; 0x354
 8017e20:	494a      	ldr	r1, [pc, #296]	; (8017f4c <ip4_output_if_src+0x148>)
 8017e22:	484b      	ldr	r0, [pc, #300]	; (8017f50 <ip4_output_if_src+0x14c>)
 8017e24:	f001 fd2c 	bl	8019880 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8017e28:	687b      	ldr	r3, [r7, #4]
 8017e2a:	2b00      	cmp	r3, #0
 8017e2c:	d060      	beq.n	8017ef0 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8017e2e:	2314      	movs	r3, #20
 8017e30:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8017e32:	2114      	movs	r1, #20
 8017e34:	68f8      	ldr	r0, [r7, #12]
 8017e36:	f7f8 fdb7 	bl	80109a8 <pbuf_add_header>
 8017e3a:	4603      	mov	r3, r0
 8017e3c:	2b00      	cmp	r3, #0
 8017e3e:	d002      	beq.n	8017e46 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8017e40:	f06f 0301 	mvn.w	r3, #1
 8017e44:	e07c      	b.n	8017f40 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8017e46:	68fb      	ldr	r3, [r7, #12]
 8017e48:	685b      	ldr	r3, [r3, #4]
 8017e4a:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8017e4c:	68fb      	ldr	r3, [r7, #12]
 8017e4e:	895b      	ldrh	r3, [r3, #10]
 8017e50:	2b13      	cmp	r3, #19
 8017e52:	d806      	bhi.n	8017e62 <ip4_output_if_src+0x5e>
 8017e54:	4b3c      	ldr	r3, [pc, #240]	; (8017f48 <ip4_output_if_src+0x144>)
 8017e56:	f44f 7262 	mov.w	r2, #904	; 0x388
 8017e5a:	493e      	ldr	r1, [pc, #248]	; (8017f54 <ip4_output_if_src+0x150>)
 8017e5c:	483c      	ldr	r0, [pc, #240]	; (8017f50 <ip4_output_if_src+0x14c>)
 8017e5e:	f001 fd0f 	bl	8019880 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8017e62:	69fb      	ldr	r3, [r7, #28]
 8017e64:	78fa      	ldrb	r2, [r7, #3]
 8017e66:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8017e68:	69fb      	ldr	r3, [r7, #28]
 8017e6a:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8017e6e:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8017e70:	687b      	ldr	r3, [r7, #4]
 8017e72:	681a      	ldr	r2, [r3, #0]
 8017e74:	69fb      	ldr	r3, [r7, #28]
 8017e76:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8017e78:	8b7b      	ldrh	r3, [r7, #26]
 8017e7a:	089b      	lsrs	r3, r3, #2
 8017e7c:	b29b      	uxth	r3, r3
 8017e7e:	b2db      	uxtb	r3, r3
 8017e80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017e84:	b2da      	uxtb	r2, r3
 8017e86:	69fb      	ldr	r3, [r7, #28]
 8017e88:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8017e8a:	69fb      	ldr	r3, [r7, #28]
 8017e8c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8017e90:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8017e92:	68fb      	ldr	r3, [r7, #12]
 8017e94:	891b      	ldrh	r3, [r3, #8]
 8017e96:	4618      	mov	r0, r3
 8017e98:	f7f7 fa38 	bl	800f30c <lwip_htons>
 8017e9c:	4603      	mov	r3, r0
 8017e9e:	461a      	mov	r2, r3
 8017ea0:	69fb      	ldr	r3, [r7, #28]
 8017ea2:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8017ea4:	69fb      	ldr	r3, [r7, #28]
 8017ea6:	2200      	movs	r2, #0
 8017ea8:	719a      	strb	r2, [r3, #6]
 8017eaa:	2200      	movs	r2, #0
 8017eac:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8017eae:	4b2a      	ldr	r3, [pc, #168]	; (8017f58 <ip4_output_if_src+0x154>)
 8017eb0:	881b      	ldrh	r3, [r3, #0]
 8017eb2:	4618      	mov	r0, r3
 8017eb4:	f7f7 fa2a 	bl	800f30c <lwip_htons>
 8017eb8:	4603      	mov	r3, r0
 8017eba:	461a      	mov	r2, r3
 8017ebc:	69fb      	ldr	r3, [r7, #28]
 8017ebe:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8017ec0:	4b25      	ldr	r3, [pc, #148]	; (8017f58 <ip4_output_if_src+0x154>)
 8017ec2:	881b      	ldrh	r3, [r3, #0]
 8017ec4:	3301      	adds	r3, #1
 8017ec6:	b29a      	uxth	r2, r3
 8017ec8:	4b23      	ldr	r3, [pc, #140]	; (8017f58 <ip4_output_if_src+0x154>)
 8017eca:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8017ecc:	68bb      	ldr	r3, [r7, #8]
 8017ece:	2b00      	cmp	r3, #0
 8017ed0:	d104      	bne.n	8017edc <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8017ed2:	4b22      	ldr	r3, [pc, #136]	; (8017f5c <ip4_output_if_src+0x158>)
 8017ed4:	681a      	ldr	r2, [r3, #0]
 8017ed6:	69fb      	ldr	r3, [r7, #28]
 8017ed8:	60da      	str	r2, [r3, #12]
 8017eda:	e003      	b.n	8017ee4 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8017edc:	68bb      	ldr	r3, [r7, #8]
 8017ede:	681a      	ldr	r2, [r3, #0]
 8017ee0:	69fb      	ldr	r3, [r7, #28]
 8017ee2:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8017ee4:	69fb      	ldr	r3, [r7, #28]
 8017ee6:	2200      	movs	r2, #0
 8017ee8:	729a      	strb	r2, [r3, #10]
 8017eea:	2200      	movs	r2, #0
 8017eec:	72da      	strb	r2, [r3, #11]
 8017eee:	e00f      	b.n	8017f10 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8017ef0:	68fb      	ldr	r3, [r7, #12]
 8017ef2:	895b      	ldrh	r3, [r3, #10]
 8017ef4:	2b13      	cmp	r3, #19
 8017ef6:	d802      	bhi.n	8017efe <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8017ef8:	f06f 0301 	mvn.w	r3, #1
 8017efc:	e020      	b.n	8017f40 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8017efe:	68fb      	ldr	r3, [r7, #12]
 8017f00:	685b      	ldr	r3, [r3, #4]
 8017f02:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8017f04:	69fb      	ldr	r3, [r7, #28]
 8017f06:	691b      	ldr	r3, [r3, #16]
 8017f08:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8017f0a:	f107 0314 	add.w	r3, r7, #20
 8017f0e:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8017f10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f12:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8017f14:	2b00      	cmp	r3, #0
 8017f16:	d00c      	beq.n	8017f32 <ip4_output_if_src+0x12e>
 8017f18:	68fb      	ldr	r3, [r7, #12]
 8017f1a:	891a      	ldrh	r2, [r3, #8]
 8017f1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f1e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8017f20:	429a      	cmp	r2, r3
 8017f22:	d906      	bls.n	8017f32 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8017f24:	687a      	ldr	r2, [r7, #4]
 8017f26:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8017f28:	68f8      	ldr	r0, [r7, #12]
 8017f2a:	f000 fd53 	bl	80189d4 <ip4_frag>
 8017f2e:	4603      	mov	r3, r0
 8017f30:	e006      	b.n	8017f40 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8017f32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f34:	695b      	ldr	r3, [r3, #20]
 8017f36:	687a      	ldr	r2, [r7, #4]
 8017f38:	68f9      	ldr	r1, [r7, #12]
 8017f3a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017f3c:	4798      	blx	r3
 8017f3e:	4603      	mov	r3, r0
}
 8017f40:	4618      	mov	r0, r3
 8017f42:	3720      	adds	r7, #32
 8017f44:	46bd      	mov	sp, r7
 8017f46:	bd80      	pop	{r7, pc}
 8017f48:	0801e7bc 	.word	0x0801e7bc
 8017f4c:	0801e7f0 	.word	0x0801e7f0
 8017f50:	0801e7fc 	.word	0x0801e7fc
 8017f54:	0801e824 	.word	0x0801e824
 8017f58:	200071de 	.word	0x200071de
 8017f5c:	0801ec44 	.word	0x0801ec44

08017f60 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8017f60:	b480      	push	{r7}
 8017f62:	b085      	sub	sp, #20
 8017f64:	af00      	add	r7, sp, #0
 8017f66:	6078      	str	r0, [r7, #4]
 8017f68:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8017f6a:	687b      	ldr	r3, [r7, #4]
 8017f6c:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8017f6e:	687b      	ldr	r3, [r7, #4]
 8017f70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017f74:	d002      	beq.n	8017f7c <ip4_addr_isbroadcast_u32+0x1c>
 8017f76:	687b      	ldr	r3, [r7, #4]
 8017f78:	2b00      	cmp	r3, #0
 8017f7a:	d101      	bne.n	8017f80 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8017f7c:	2301      	movs	r3, #1
 8017f7e:	e02a      	b.n	8017fd6 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8017f80:	683b      	ldr	r3, [r7, #0]
 8017f82:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8017f86:	f003 0302 	and.w	r3, r3, #2
 8017f8a:	2b00      	cmp	r3, #0
 8017f8c:	d101      	bne.n	8017f92 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8017f8e:	2300      	movs	r3, #0
 8017f90:	e021      	b.n	8017fd6 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8017f92:	683b      	ldr	r3, [r7, #0]
 8017f94:	3304      	adds	r3, #4
 8017f96:	681b      	ldr	r3, [r3, #0]
 8017f98:	687a      	ldr	r2, [r7, #4]
 8017f9a:	429a      	cmp	r2, r3
 8017f9c:	d101      	bne.n	8017fa2 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8017f9e:	2300      	movs	r3, #0
 8017fa0:	e019      	b.n	8017fd6 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8017fa2:	68fa      	ldr	r2, [r7, #12]
 8017fa4:	683b      	ldr	r3, [r7, #0]
 8017fa6:	3304      	adds	r3, #4
 8017fa8:	681b      	ldr	r3, [r3, #0]
 8017faa:	405a      	eors	r2, r3
 8017fac:	683b      	ldr	r3, [r7, #0]
 8017fae:	3308      	adds	r3, #8
 8017fb0:	681b      	ldr	r3, [r3, #0]
 8017fb2:	4013      	ands	r3, r2
 8017fb4:	2b00      	cmp	r3, #0
 8017fb6:	d10d      	bne.n	8017fd4 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8017fb8:	683b      	ldr	r3, [r7, #0]
 8017fba:	3308      	adds	r3, #8
 8017fbc:	681b      	ldr	r3, [r3, #0]
 8017fbe:	43da      	mvns	r2, r3
 8017fc0:	687b      	ldr	r3, [r7, #4]
 8017fc2:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8017fc4:	683b      	ldr	r3, [r7, #0]
 8017fc6:	3308      	adds	r3, #8
 8017fc8:	681b      	ldr	r3, [r3, #0]
 8017fca:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8017fcc:	429a      	cmp	r2, r3
 8017fce:	d101      	bne.n	8017fd4 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8017fd0:	2301      	movs	r3, #1
 8017fd2:	e000      	b.n	8017fd6 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8017fd4:	2300      	movs	r3, #0
  }
}
 8017fd6:	4618      	mov	r0, r3
 8017fd8:	3714      	adds	r7, #20
 8017fda:	46bd      	mov	sp, r7
 8017fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017fe0:	4770      	bx	lr
	...

08017fe4 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8017fe4:	b580      	push	{r7, lr}
 8017fe6:	b084      	sub	sp, #16
 8017fe8:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8017fea:	2300      	movs	r3, #0
 8017fec:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8017fee:	4b12      	ldr	r3, [pc, #72]	; (8018038 <ip_reass_tmr+0x54>)
 8017ff0:	681b      	ldr	r3, [r3, #0]
 8017ff2:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8017ff4:	e018      	b.n	8018028 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8017ff6:	68fb      	ldr	r3, [r7, #12]
 8017ff8:	7fdb      	ldrb	r3, [r3, #31]
 8017ffa:	2b00      	cmp	r3, #0
 8017ffc:	d00b      	beq.n	8018016 <ip_reass_tmr+0x32>
      r->timer--;
 8017ffe:	68fb      	ldr	r3, [r7, #12]
 8018000:	7fdb      	ldrb	r3, [r3, #31]
 8018002:	3b01      	subs	r3, #1
 8018004:	b2da      	uxtb	r2, r3
 8018006:	68fb      	ldr	r3, [r7, #12]
 8018008:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 801800a:	68fb      	ldr	r3, [r7, #12]
 801800c:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801800e:	68fb      	ldr	r3, [r7, #12]
 8018010:	681b      	ldr	r3, [r3, #0]
 8018012:	60fb      	str	r3, [r7, #12]
 8018014:	e008      	b.n	8018028 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8018016:	68fb      	ldr	r3, [r7, #12]
 8018018:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801801a:	68fb      	ldr	r3, [r7, #12]
 801801c:	681b      	ldr	r3, [r3, #0]
 801801e:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8018020:	68b9      	ldr	r1, [r7, #8]
 8018022:	6878      	ldr	r0, [r7, #4]
 8018024:	f000 f80a 	bl	801803c <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8018028:	68fb      	ldr	r3, [r7, #12]
 801802a:	2b00      	cmp	r3, #0
 801802c:	d1e3      	bne.n	8017ff6 <ip_reass_tmr+0x12>
    }
  }
}
 801802e:	bf00      	nop
 8018030:	bf00      	nop
 8018032:	3710      	adds	r7, #16
 8018034:	46bd      	mov	sp, r7
 8018036:	bd80      	pop	{r7, pc}
 8018038:	200071e0 	.word	0x200071e0

0801803c <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801803c:	b580      	push	{r7, lr}
 801803e:	b088      	sub	sp, #32
 8018040:	af00      	add	r7, sp, #0
 8018042:	6078      	str	r0, [r7, #4]
 8018044:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8018046:	2300      	movs	r3, #0
 8018048:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801804a:	683a      	ldr	r2, [r7, #0]
 801804c:	687b      	ldr	r3, [r7, #4]
 801804e:	429a      	cmp	r2, r3
 8018050:	d105      	bne.n	801805e <ip_reass_free_complete_datagram+0x22>
 8018052:	4b45      	ldr	r3, [pc, #276]	; (8018168 <ip_reass_free_complete_datagram+0x12c>)
 8018054:	22ab      	movs	r2, #171	; 0xab
 8018056:	4945      	ldr	r1, [pc, #276]	; (801816c <ip_reass_free_complete_datagram+0x130>)
 8018058:	4845      	ldr	r0, [pc, #276]	; (8018170 <ip_reass_free_complete_datagram+0x134>)
 801805a:	f001 fc11 	bl	8019880 <iprintf>
  if (prev != NULL) {
 801805e:	683b      	ldr	r3, [r7, #0]
 8018060:	2b00      	cmp	r3, #0
 8018062:	d00a      	beq.n	801807a <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8018064:	683b      	ldr	r3, [r7, #0]
 8018066:	681b      	ldr	r3, [r3, #0]
 8018068:	687a      	ldr	r2, [r7, #4]
 801806a:	429a      	cmp	r2, r3
 801806c:	d005      	beq.n	801807a <ip_reass_free_complete_datagram+0x3e>
 801806e:	4b3e      	ldr	r3, [pc, #248]	; (8018168 <ip_reass_free_complete_datagram+0x12c>)
 8018070:	22ad      	movs	r2, #173	; 0xad
 8018072:	4940      	ldr	r1, [pc, #256]	; (8018174 <ip_reass_free_complete_datagram+0x138>)
 8018074:	483e      	ldr	r0, [pc, #248]	; (8018170 <ip_reass_free_complete_datagram+0x134>)
 8018076:	f001 fc03 	bl	8019880 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801807a:	687b      	ldr	r3, [r7, #4]
 801807c:	685b      	ldr	r3, [r3, #4]
 801807e:	685b      	ldr	r3, [r3, #4]
 8018080:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8018082:	697b      	ldr	r3, [r7, #20]
 8018084:	889b      	ldrh	r3, [r3, #4]
 8018086:	b29b      	uxth	r3, r3
 8018088:	2b00      	cmp	r3, #0
 801808a:	d12a      	bne.n	80180e2 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 801808c:	687b      	ldr	r3, [r7, #4]
 801808e:	685b      	ldr	r3, [r3, #4]
 8018090:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8018092:	697b      	ldr	r3, [r7, #20]
 8018094:	681a      	ldr	r2, [r3, #0]
 8018096:	687b      	ldr	r3, [r7, #4]
 8018098:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801809a:	69bb      	ldr	r3, [r7, #24]
 801809c:	6858      	ldr	r0, [r3, #4]
 801809e:	687b      	ldr	r3, [r7, #4]
 80180a0:	3308      	adds	r3, #8
 80180a2:	2214      	movs	r2, #20
 80180a4:	4619      	mov	r1, r3
 80180a6:	f001 fdba 	bl	8019c1e <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 80180aa:	2101      	movs	r1, #1
 80180ac:	69b8      	ldr	r0, [r7, #24]
 80180ae:	f7ff fc3d 	bl	801792c <icmp_time_exceeded>
    clen = pbuf_clen(p);
 80180b2:	69b8      	ldr	r0, [r7, #24]
 80180b4:	f7f8 fd96 	bl	8010be4 <pbuf_clen>
 80180b8:	4603      	mov	r3, r0
 80180ba:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80180bc:	8bfa      	ldrh	r2, [r7, #30]
 80180be:	8a7b      	ldrh	r3, [r7, #18]
 80180c0:	4413      	add	r3, r2
 80180c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80180c6:	db05      	blt.n	80180d4 <ip_reass_free_complete_datagram+0x98>
 80180c8:	4b27      	ldr	r3, [pc, #156]	; (8018168 <ip_reass_free_complete_datagram+0x12c>)
 80180ca:	22bc      	movs	r2, #188	; 0xbc
 80180cc:	492a      	ldr	r1, [pc, #168]	; (8018178 <ip_reass_free_complete_datagram+0x13c>)
 80180ce:	4828      	ldr	r0, [pc, #160]	; (8018170 <ip_reass_free_complete_datagram+0x134>)
 80180d0:	f001 fbd6 	bl	8019880 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80180d4:	8bfa      	ldrh	r2, [r7, #30]
 80180d6:	8a7b      	ldrh	r3, [r7, #18]
 80180d8:	4413      	add	r3, r2
 80180da:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 80180dc:	69b8      	ldr	r0, [r7, #24]
 80180de:	f7f8 fcf9 	bl	8010ad4 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 80180e2:	687b      	ldr	r3, [r7, #4]
 80180e4:	685b      	ldr	r3, [r3, #4]
 80180e6:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 80180e8:	e01f      	b.n	801812a <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 80180ea:	69bb      	ldr	r3, [r7, #24]
 80180ec:	685b      	ldr	r3, [r3, #4]
 80180ee:	617b      	str	r3, [r7, #20]
    pcur = p;
 80180f0:	69bb      	ldr	r3, [r7, #24]
 80180f2:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 80180f4:	697b      	ldr	r3, [r7, #20]
 80180f6:	681b      	ldr	r3, [r3, #0]
 80180f8:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 80180fa:	68f8      	ldr	r0, [r7, #12]
 80180fc:	f7f8 fd72 	bl	8010be4 <pbuf_clen>
 8018100:	4603      	mov	r3, r0
 8018102:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8018104:	8bfa      	ldrh	r2, [r7, #30]
 8018106:	8a7b      	ldrh	r3, [r7, #18]
 8018108:	4413      	add	r3, r2
 801810a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801810e:	db05      	blt.n	801811c <ip_reass_free_complete_datagram+0xe0>
 8018110:	4b15      	ldr	r3, [pc, #84]	; (8018168 <ip_reass_free_complete_datagram+0x12c>)
 8018112:	22cc      	movs	r2, #204	; 0xcc
 8018114:	4918      	ldr	r1, [pc, #96]	; (8018178 <ip_reass_free_complete_datagram+0x13c>)
 8018116:	4816      	ldr	r0, [pc, #88]	; (8018170 <ip_reass_free_complete_datagram+0x134>)
 8018118:	f001 fbb2 	bl	8019880 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801811c:	8bfa      	ldrh	r2, [r7, #30]
 801811e:	8a7b      	ldrh	r3, [r7, #18]
 8018120:	4413      	add	r3, r2
 8018122:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8018124:	68f8      	ldr	r0, [r7, #12]
 8018126:	f7f8 fcd5 	bl	8010ad4 <pbuf_free>
  while (p != NULL) {
 801812a:	69bb      	ldr	r3, [r7, #24]
 801812c:	2b00      	cmp	r3, #0
 801812e:	d1dc      	bne.n	80180ea <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8018130:	6839      	ldr	r1, [r7, #0]
 8018132:	6878      	ldr	r0, [r7, #4]
 8018134:	f000 f8c2 	bl	80182bc <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8018138:	4b10      	ldr	r3, [pc, #64]	; (801817c <ip_reass_free_complete_datagram+0x140>)
 801813a:	881b      	ldrh	r3, [r3, #0]
 801813c:	8bfa      	ldrh	r2, [r7, #30]
 801813e:	429a      	cmp	r2, r3
 8018140:	d905      	bls.n	801814e <ip_reass_free_complete_datagram+0x112>
 8018142:	4b09      	ldr	r3, [pc, #36]	; (8018168 <ip_reass_free_complete_datagram+0x12c>)
 8018144:	22d2      	movs	r2, #210	; 0xd2
 8018146:	490e      	ldr	r1, [pc, #56]	; (8018180 <ip_reass_free_complete_datagram+0x144>)
 8018148:	4809      	ldr	r0, [pc, #36]	; (8018170 <ip_reass_free_complete_datagram+0x134>)
 801814a:	f001 fb99 	bl	8019880 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801814e:	4b0b      	ldr	r3, [pc, #44]	; (801817c <ip_reass_free_complete_datagram+0x140>)
 8018150:	881a      	ldrh	r2, [r3, #0]
 8018152:	8bfb      	ldrh	r3, [r7, #30]
 8018154:	1ad3      	subs	r3, r2, r3
 8018156:	b29a      	uxth	r2, r3
 8018158:	4b08      	ldr	r3, [pc, #32]	; (801817c <ip_reass_free_complete_datagram+0x140>)
 801815a:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 801815c:	8bfb      	ldrh	r3, [r7, #30]
}
 801815e:	4618      	mov	r0, r3
 8018160:	3720      	adds	r7, #32
 8018162:	46bd      	mov	sp, r7
 8018164:	bd80      	pop	{r7, pc}
 8018166:	bf00      	nop
 8018168:	0801e854 	.word	0x0801e854
 801816c:	0801e890 	.word	0x0801e890
 8018170:	0801e89c 	.word	0x0801e89c
 8018174:	0801e8c4 	.word	0x0801e8c4
 8018178:	0801e8d8 	.word	0x0801e8d8
 801817c:	200071e4 	.word	0x200071e4
 8018180:	0801e8f8 	.word	0x0801e8f8

08018184 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8018184:	b580      	push	{r7, lr}
 8018186:	b08a      	sub	sp, #40	; 0x28
 8018188:	af00      	add	r7, sp, #0
 801818a:	6078      	str	r0, [r7, #4]
 801818c:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801818e:	2300      	movs	r3, #0
 8018190:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8018192:	2300      	movs	r3, #0
 8018194:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8018196:	2300      	movs	r3, #0
 8018198:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801819a:	2300      	movs	r3, #0
 801819c:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801819e:	2300      	movs	r3, #0
 80181a0:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 80181a2:	4b28      	ldr	r3, [pc, #160]	; (8018244 <ip_reass_remove_oldest_datagram+0xc0>)
 80181a4:	681b      	ldr	r3, [r3, #0]
 80181a6:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80181a8:	e030      	b.n	801820c <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 80181aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80181ac:	695a      	ldr	r2, [r3, #20]
 80181ae:	687b      	ldr	r3, [r7, #4]
 80181b0:	68db      	ldr	r3, [r3, #12]
 80181b2:	429a      	cmp	r2, r3
 80181b4:	d10c      	bne.n	80181d0 <ip_reass_remove_oldest_datagram+0x4c>
 80181b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80181b8:	699a      	ldr	r2, [r3, #24]
 80181ba:	687b      	ldr	r3, [r7, #4]
 80181bc:	691b      	ldr	r3, [r3, #16]
 80181be:	429a      	cmp	r2, r3
 80181c0:	d106      	bne.n	80181d0 <ip_reass_remove_oldest_datagram+0x4c>
 80181c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80181c4:	899a      	ldrh	r2, [r3, #12]
 80181c6:	687b      	ldr	r3, [r7, #4]
 80181c8:	889b      	ldrh	r3, [r3, #4]
 80181ca:	b29b      	uxth	r3, r3
 80181cc:	429a      	cmp	r2, r3
 80181ce:	d014      	beq.n	80181fa <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 80181d0:	693b      	ldr	r3, [r7, #16]
 80181d2:	3301      	adds	r3, #1
 80181d4:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 80181d6:	6a3b      	ldr	r3, [r7, #32]
 80181d8:	2b00      	cmp	r3, #0
 80181da:	d104      	bne.n	80181e6 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 80181dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80181de:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80181e0:	69fb      	ldr	r3, [r7, #28]
 80181e2:	61bb      	str	r3, [r7, #24]
 80181e4:	e009      	b.n	80181fa <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 80181e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80181e8:	7fda      	ldrb	r2, [r3, #31]
 80181ea:	6a3b      	ldr	r3, [r7, #32]
 80181ec:	7fdb      	ldrb	r3, [r3, #31]
 80181ee:	429a      	cmp	r2, r3
 80181f0:	d803      	bhi.n	80181fa <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 80181f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80181f4:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80181f6:	69fb      	ldr	r3, [r7, #28]
 80181f8:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 80181fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80181fc:	681b      	ldr	r3, [r3, #0]
 80181fe:	2b00      	cmp	r3, #0
 8018200:	d001      	beq.n	8018206 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8018202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018204:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8018206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018208:	681b      	ldr	r3, [r3, #0]
 801820a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801820c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801820e:	2b00      	cmp	r3, #0
 8018210:	d1cb      	bne.n	80181aa <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8018212:	6a3b      	ldr	r3, [r7, #32]
 8018214:	2b00      	cmp	r3, #0
 8018216:	d008      	beq.n	801822a <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8018218:	69b9      	ldr	r1, [r7, #24]
 801821a:	6a38      	ldr	r0, [r7, #32]
 801821c:	f7ff ff0e 	bl	801803c <ip_reass_free_complete_datagram>
 8018220:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8018222:	697a      	ldr	r2, [r7, #20]
 8018224:	68fb      	ldr	r3, [r7, #12]
 8018226:	4413      	add	r3, r2
 8018228:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801822a:	697a      	ldr	r2, [r7, #20]
 801822c:	683b      	ldr	r3, [r7, #0]
 801822e:	429a      	cmp	r2, r3
 8018230:	da02      	bge.n	8018238 <ip_reass_remove_oldest_datagram+0xb4>
 8018232:	693b      	ldr	r3, [r7, #16]
 8018234:	2b01      	cmp	r3, #1
 8018236:	dcac      	bgt.n	8018192 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8018238:	697b      	ldr	r3, [r7, #20]
}
 801823a:	4618      	mov	r0, r3
 801823c:	3728      	adds	r7, #40	; 0x28
 801823e:	46bd      	mov	sp, r7
 8018240:	bd80      	pop	{r7, pc}
 8018242:	bf00      	nop
 8018244:	200071e0 	.word	0x200071e0

08018248 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8018248:	b580      	push	{r7, lr}
 801824a:	b084      	sub	sp, #16
 801824c:	af00      	add	r7, sp, #0
 801824e:	6078      	str	r0, [r7, #4]
 8018250:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8018252:	2004      	movs	r0, #4
 8018254:	f7f7 fd78 	bl	800fd48 <memp_malloc>
 8018258:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801825a:	68fb      	ldr	r3, [r7, #12]
 801825c:	2b00      	cmp	r3, #0
 801825e:	d110      	bne.n	8018282 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8018260:	6839      	ldr	r1, [r7, #0]
 8018262:	6878      	ldr	r0, [r7, #4]
 8018264:	f7ff ff8e 	bl	8018184 <ip_reass_remove_oldest_datagram>
 8018268:	4602      	mov	r2, r0
 801826a:	683b      	ldr	r3, [r7, #0]
 801826c:	4293      	cmp	r3, r2
 801826e:	dc03      	bgt.n	8018278 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8018270:	2004      	movs	r0, #4
 8018272:	f7f7 fd69 	bl	800fd48 <memp_malloc>
 8018276:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8018278:	68fb      	ldr	r3, [r7, #12]
 801827a:	2b00      	cmp	r3, #0
 801827c:	d101      	bne.n	8018282 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 801827e:	2300      	movs	r3, #0
 8018280:	e016      	b.n	80182b0 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8018282:	2220      	movs	r2, #32
 8018284:	2100      	movs	r1, #0
 8018286:	68f8      	ldr	r0, [r7, #12]
 8018288:	f001 fc50 	bl	8019b2c <memset>
  ipr->timer = IP_REASS_MAXAGE;
 801828c:	68fb      	ldr	r3, [r7, #12]
 801828e:	220f      	movs	r2, #15
 8018290:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8018292:	4b09      	ldr	r3, [pc, #36]	; (80182b8 <ip_reass_enqueue_new_datagram+0x70>)
 8018294:	681a      	ldr	r2, [r3, #0]
 8018296:	68fb      	ldr	r3, [r7, #12]
 8018298:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801829a:	4a07      	ldr	r2, [pc, #28]	; (80182b8 <ip_reass_enqueue_new_datagram+0x70>)
 801829c:	68fb      	ldr	r3, [r7, #12]
 801829e:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 80182a0:	68fb      	ldr	r3, [r7, #12]
 80182a2:	3308      	adds	r3, #8
 80182a4:	2214      	movs	r2, #20
 80182a6:	6879      	ldr	r1, [r7, #4]
 80182a8:	4618      	mov	r0, r3
 80182aa:	f001 fcb8 	bl	8019c1e <memcpy>
  return ipr;
 80182ae:	68fb      	ldr	r3, [r7, #12]
}
 80182b0:	4618      	mov	r0, r3
 80182b2:	3710      	adds	r7, #16
 80182b4:	46bd      	mov	sp, r7
 80182b6:	bd80      	pop	{r7, pc}
 80182b8:	200071e0 	.word	0x200071e0

080182bc <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80182bc:	b580      	push	{r7, lr}
 80182be:	b082      	sub	sp, #8
 80182c0:	af00      	add	r7, sp, #0
 80182c2:	6078      	str	r0, [r7, #4]
 80182c4:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 80182c6:	4b10      	ldr	r3, [pc, #64]	; (8018308 <ip_reass_dequeue_datagram+0x4c>)
 80182c8:	681b      	ldr	r3, [r3, #0]
 80182ca:	687a      	ldr	r2, [r7, #4]
 80182cc:	429a      	cmp	r2, r3
 80182ce:	d104      	bne.n	80182da <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 80182d0:	687b      	ldr	r3, [r7, #4]
 80182d2:	681b      	ldr	r3, [r3, #0]
 80182d4:	4a0c      	ldr	r2, [pc, #48]	; (8018308 <ip_reass_dequeue_datagram+0x4c>)
 80182d6:	6013      	str	r3, [r2, #0]
 80182d8:	e00d      	b.n	80182f6 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 80182da:	683b      	ldr	r3, [r7, #0]
 80182dc:	2b00      	cmp	r3, #0
 80182de:	d106      	bne.n	80182ee <ip_reass_dequeue_datagram+0x32>
 80182e0:	4b0a      	ldr	r3, [pc, #40]	; (801830c <ip_reass_dequeue_datagram+0x50>)
 80182e2:	f240 1245 	movw	r2, #325	; 0x145
 80182e6:	490a      	ldr	r1, [pc, #40]	; (8018310 <ip_reass_dequeue_datagram+0x54>)
 80182e8:	480a      	ldr	r0, [pc, #40]	; (8018314 <ip_reass_dequeue_datagram+0x58>)
 80182ea:	f001 fac9 	bl	8019880 <iprintf>
    prev->next = ipr->next;
 80182ee:	687b      	ldr	r3, [r7, #4]
 80182f0:	681a      	ldr	r2, [r3, #0]
 80182f2:	683b      	ldr	r3, [r7, #0]
 80182f4:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 80182f6:	6879      	ldr	r1, [r7, #4]
 80182f8:	2004      	movs	r0, #4
 80182fa:	f7f7 fd95 	bl	800fe28 <memp_free>
}
 80182fe:	bf00      	nop
 8018300:	3708      	adds	r7, #8
 8018302:	46bd      	mov	sp, r7
 8018304:	bd80      	pop	{r7, pc}
 8018306:	bf00      	nop
 8018308:	200071e0 	.word	0x200071e0
 801830c:	0801e854 	.word	0x0801e854
 8018310:	0801e91c 	.word	0x0801e91c
 8018314:	0801e89c 	.word	0x0801e89c

08018318 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8018318:	b580      	push	{r7, lr}
 801831a:	b08c      	sub	sp, #48	; 0x30
 801831c:	af00      	add	r7, sp, #0
 801831e:	60f8      	str	r0, [r7, #12]
 8018320:	60b9      	str	r1, [r7, #8]
 8018322:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8018324:	2300      	movs	r3, #0
 8018326:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8018328:	2301      	movs	r3, #1
 801832a:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 801832c:	68bb      	ldr	r3, [r7, #8]
 801832e:	685b      	ldr	r3, [r3, #4]
 8018330:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8018332:	69fb      	ldr	r3, [r7, #28]
 8018334:	885b      	ldrh	r3, [r3, #2]
 8018336:	b29b      	uxth	r3, r3
 8018338:	4618      	mov	r0, r3
 801833a:	f7f6 ffe7 	bl	800f30c <lwip_htons>
 801833e:	4603      	mov	r3, r0
 8018340:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8018342:	69fb      	ldr	r3, [r7, #28]
 8018344:	781b      	ldrb	r3, [r3, #0]
 8018346:	f003 030f 	and.w	r3, r3, #15
 801834a:	b2db      	uxtb	r3, r3
 801834c:	009b      	lsls	r3, r3, #2
 801834e:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8018350:	7e7b      	ldrb	r3, [r7, #25]
 8018352:	b29b      	uxth	r3, r3
 8018354:	8b7a      	ldrh	r2, [r7, #26]
 8018356:	429a      	cmp	r2, r3
 8018358:	d202      	bcs.n	8018360 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801835a:	f04f 33ff 	mov.w	r3, #4294967295
 801835e:	e135      	b.n	80185cc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8018360:	7e7b      	ldrb	r3, [r7, #25]
 8018362:	b29b      	uxth	r3, r3
 8018364:	8b7a      	ldrh	r2, [r7, #26]
 8018366:	1ad3      	subs	r3, r2, r3
 8018368:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801836a:	69fb      	ldr	r3, [r7, #28]
 801836c:	88db      	ldrh	r3, [r3, #6]
 801836e:	b29b      	uxth	r3, r3
 8018370:	4618      	mov	r0, r3
 8018372:	f7f6 ffcb 	bl	800f30c <lwip_htons>
 8018376:	4603      	mov	r3, r0
 8018378:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801837c:	b29b      	uxth	r3, r3
 801837e:	00db      	lsls	r3, r3, #3
 8018380:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8018382:	68bb      	ldr	r3, [r7, #8]
 8018384:	685b      	ldr	r3, [r3, #4]
 8018386:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8018388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801838a:	2200      	movs	r2, #0
 801838c:	701a      	strb	r2, [r3, #0]
 801838e:	2200      	movs	r2, #0
 8018390:	705a      	strb	r2, [r3, #1]
 8018392:	2200      	movs	r2, #0
 8018394:	709a      	strb	r2, [r3, #2]
 8018396:	2200      	movs	r2, #0
 8018398:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801839a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801839c:	8afa      	ldrh	r2, [r7, #22]
 801839e:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 80183a0:	8afa      	ldrh	r2, [r7, #22]
 80183a2:	8b7b      	ldrh	r3, [r7, #26]
 80183a4:	4413      	add	r3, r2
 80183a6:	b29a      	uxth	r2, r3
 80183a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80183aa:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 80183ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80183ae:	88db      	ldrh	r3, [r3, #6]
 80183b0:	b29b      	uxth	r3, r3
 80183b2:	8afa      	ldrh	r2, [r7, #22]
 80183b4:	429a      	cmp	r2, r3
 80183b6:	d902      	bls.n	80183be <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80183b8:	f04f 33ff 	mov.w	r3, #4294967295
 80183bc:	e106      	b.n	80185cc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 80183be:	68fb      	ldr	r3, [r7, #12]
 80183c0:	685b      	ldr	r3, [r3, #4]
 80183c2:	627b      	str	r3, [r7, #36]	; 0x24
 80183c4:	e068      	b.n	8018498 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 80183c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80183c8:	685b      	ldr	r3, [r3, #4]
 80183ca:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 80183cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80183ce:	889b      	ldrh	r3, [r3, #4]
 80183d0:	b29a      	uxth	r2, r3
 80183d2:	693b      	ldr	r3, [r7, #16]
 80183d4:	889b      	ldrh	r3, [r3, #4]
 80183d6:	b29b      	uxth	r3, r3
 80183d8:	429a      	cmp	r2, r3
 80183da:	d235      	bcs.n	8018448 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 80183dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80183de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80183e0:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 80183e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80183e4:	2b00      	cmp	r3, #0
 80183e6:	d020      	beq.n	801842a <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 80183e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80183ea:	889b      	ldrh	r3, [r3, #4]
 80183ec:	b29a      	uxth	r2, r3
 80183ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80183f0:	88db      	ldrh	r3, [r3, #6]
 80183f2:	b29b      	uxth	r3, r3
 80183f4:	429a      	cmp	r2, r3
 80183f6:	d307      	bcc.n	8018408 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 80183f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80183fa:	88db      	ldrh	r3, [r3, #6]
 80183fc:	b29a      	uxth	r2, r3
 80183fe:	693b      	ldr	r3, [r7, #16]
 8018400:	889b      	ldrh	r3, [r3, #4]
 8018402:	b29b      	uxth	r3, r3
 8018404:	429a      	cmp	r2, r3
 8018406:	d902      	bls.n	801840e <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8018408:	f04f 33ff 	mov.w	r3, #4294967295
 801840c:	e0de      	b.n	80185cc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 801840e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018410:	68ba      	ldr	r2, [r7, #8]
 8018412:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8018414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018416:	88db      	ldrh	r3, [r3, #6]
 8018418:	b29a      	uxth	r2, r3
 801841a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801841c:	889b      	ldrh	r3, [r3, #4]
 801841e:	b29b      	uxth	r3, r3
 8018420:	429a      	cmp	r2, r3
 8018422:	d03d      	beq.n	80184a0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8018424:	2300      	movs	r3, #0
 8018426:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8018428:	e03a      	b.n	80184a0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801842a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801842c:	88db      	ldrh	r3, [r3, #6]
 801842e:	b29a      	uxth	r2, r3
 8018430:	693b      	ldr	r3, [r7, #16]
 8018432:	889b      	ldrh	r3, [r3, #4]
 8018434:	b29b      	uxth	r3, r3
 8018436:	429a      	cmp	r2, r3
 8018438:	d902      	bls.n	8018440 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801843a:	f04f 33ff 	mov.w	r3, #4294967295
 801843e:	e0c5      	b.n	80185cc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8018440:	68fb      	ldr	r3, [r7, #12]
 8018442:	68ba      	ldr	r2, [r7, #8]
 8018444:	605a      	str	r2, [r3, #4]
      break;
 8018446:	e02b      	b.n	80184a0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8018448:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801844a:	889b      	ldrh	r3, [r3, #4]
 801844c:	b29a      	uxth	r2, r3
 801844e:	693b      	ldr	r3, [r7, #16]
 8018450:	889b      	ldrh	r3, [r3, #4]
 8018452:	b29b      	uxth	r3, r3
 8018454:	429a      	cmp	r2, r3
 8018456:	d102      	bne.n	801845e <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8018458:	f04f 33ff 	mov.w	r3, #4294967295
 801845c:	e0b6      	b.n	80185cc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801845e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018460:	889b      	ldrh	r3, [r3, #4]
 8018462:	b29a      	uxth	r2, r3
 8018464:	693b      	ldr	r3, [r7, #16]
 8018466:	88db      	ldrh	r3, [r3, #6]
 8018468:	b29b      	uxth	r3, r3
 801846a:	429a      	cmp	r2, r3
 801846c:	d202      	bcs.n	8018474 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801846e:	f04f 33ff 	mov.w	r3, #4294967295
 8018472:	e0ab      	b.n	80185cc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8018474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018476:	2b00      	cmp	r3, #0
 8018478:	d009      	beq.n	801848e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801847a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801847c:	88db      	ldrh	r3, [r3, #6]
 801847e:	b29a      	uxth	r2, r3
 8018480:	693b      	ldr	r3, [r7, #16]
 8018482:	889b      	ldrh	r3, [r3, #4]
 8018484:	b29b      	uxth	r3, r3
 8018486:	429a      	cmp	r2, r3
 8018488:	d001      	beq.n	801848e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801848a:	2300      	movs	r3, #0
 801848c:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801848e:	693b      	ldr	r3, [r7, #16]
 8018490:	681b      	ldr	r3, [r3, #0]
 8018492:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8018494:	693b      	ldr	r3, [r7, #16]
 8018496:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8018498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801849a:	2b00      	cmp	r3, #0
 801849c:	d193      	bne.n	80183c6 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801849e:	e000      	b.n	80184a2 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 80184a0:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 80184a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80184a4:	2b00      	cmp	r3, #0
 80184a6:	d12d      	bne.n	8018504 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 80184a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80184aa:	2b00      	cmp	r3, #0
 80184ac:	d01c      	beq.n	80184e8 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 80184ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80184b0:	88db      	ldrh	r3, [r3, #6]
 80184b2:	b29a      	uxth	r2, r3
 80184b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80184b6:	889b      	ldrh	r3, [r3, #4]
 80184b8:	b29b      	uxth	r3, r3
 80184ba:	429a      	cmp	r2, r3
 80184bc:	d906      	bls.n	80184cc <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 80184be:	4b45      	ldr	r3, [pc, #276]	; (80185d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80184c0:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 80184c4:	4944      	ldr	r1, [pc, #272]	; (80185d8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 80184c6:	4845      	ldr	r0, [pc, #276]	; (80185dc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80184c8:	f001 f9da 	bl	8019880 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 80184cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80184ce:	68ba      	ldr	r2, [r7, #8]
 80184d0:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 80184d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80184d4:	88db      	ldrh	r3, [r3, #6]
 80184d6:	b29a      	uxth	r2, r3
 80184d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80184da:	889b      	ldrh	r3, [r3, #4]
 80184dc:	b29b      	uxth	r3, r3
 80184de:	429a      	cmp	r2, r3
 80184e0:	d010      	beq.n	8018504 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 80184e2:	2300      	movs	r3, #0
 80184e4:	623b      	str	r3, [r7, #32]
 80184e6:	e00d      	b.n	8018504 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 80184e8:	68fb      	ldr	r3, [r7, #12]
 80184ea:	685b      	ldr	r3, [r3, #4]
 80184ec:	2b00      	cmp	r3, #0
 80184ee:	d006      	beq.n	80184fe <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 80184f0:	4b38      	ldr	r3, [pc, #224]	; (80185d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80184f2:	f44f 72df 	mov.w	r2, #446	; 0x1be
 80184f6:	493a      	ldr	r1, [pc, #232]	; (80185e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 80184f8:	4838      	ldr	r0, [pc, #224]	; (80185dc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80184fa:	f001 f9c1 	bl	8019880 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 80184fe:	68fb      	ldr	r3, [r7, #12]
 8018500:	68ba      	ldr	r2, [r7, #8]
 8018502:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8018504:	687b      	ldr	r3, [r7, #4]
 8018506:	2b00      	cmp	r3, #0
 8018508:	d105      	bne.n	8018516 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801850a:	68fb      	ldr	r3, [r7, #12]
 801850c:	7f9b      	ldrb	r3, [r3, #30]
 801850e:	f003 0301 	and.w	r3, r3, #1
 8018512:	2b00      	cmp	r3, #0
 8018514:	d059      	beq.n	80185ca <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8018516:	6a3b      	ldr	r3, [r7, #32]
 8018518:	2b00      	cmp	r3, #0
 801851a:	d04f      	beq.n	80185bc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 801851c:	68fb      	ldr	r3, [r7, #12]
 801851e:	685b      	ldr	r3, [r3, #4]
 8018520:	2b00      	cmp	r3, #0
 8018522:	d006      	beq.n	8018532 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8018524:	68fb      	ldr	r3, [r7, #12]
 8018526:	685b      	ldr	r3, [r3, #4]
 8018528:	685b      	ldr	r3, [r3, #4]
 801852a:	889b      	ldrh	r3, [r3, #4]
 801852c:	b29b      	uxth	r3, r3
 801852e:	2b00      	cmp	r3, #0
 8018530:	d002      	beq.n	8018538 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8018532:	2300      	movs	r3, #0
 8018534:	623b      	str	r3, [r7, #32]
 8018536:	e041      	b.n	80185bc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8018538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801853a:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 801853c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801853e:	681b      	ldr	r3, [r3, #0]
 8018540:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8018542:	e012      	b.n	801856a <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8018544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018546:	685b      	ldr	r3, [r3, #4]
 8018548:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 801854a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801854c:	88db      	ldrh	r3, [r3, #6]
 801854e:	b29a      	uxth	r2, r3
 8018550:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018552:	889b      	ldrh	r3, [r3, #4]
 8018554:	b29b      	uxth	r3, r3
 8018556:	429a      	cmp	r2, r3
 8018558:	d002      	beq.n	8018560 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801855a:	2300      	movs	r3, #0
 801855c:	623b      	str	r3, [r7, #32]
            break;
 801855e:	e007      	b.n	8018570 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8018560:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018562:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8018564:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018566:	681b      	ldr	r3, [r3, #0]
 8018568:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801856a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801856c:	2b00      	cmp	r3, #0
 801856e:	d1e9      	bne.n	8018544 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8018570:	6a3b      	ldr	r3, [r7, #32]
 8018572:	2b00      	cmp	r3, #0
 8018574:	d022      	beq.n	80185bc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8018576:	68fb      	ldr	r3, [r7, #12]
 8018578:	685b      	ldr	r3, [r3, #4]
 801857a:	2b00      	cmp	r3, #0
 801857c:	d106      	bne.n	801858c <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801857e:	4b15      	ldr	r3, [pc, #84]	; (80185d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8018580:	f240 12df 	movw	r2, #479	; 0x1df
 8018584:	4917      	ldr	r1, [pc, #92]	; (80185e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8018586:	4815      	ldr	r0, [pc, #84]	; (80185dc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8018588:	f001 f97a 	bl	8019880 <iprintf>
          LWIP_ASSERT("sanity check",
 801858c:	68fb      	ldr	r3, [r7, #12]
 801858e:	685b      	ldr	r3, [r3, #4]
 8018590:	685b      	ldr	r3, [r3, #4]
 8018592:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018594:	429a      	cmp	r2, r3
 8018596:	d106      	bne.n	80185a6 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8018598:	4b0e      	ldr	r3, [pc, #56]	; (80185d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801859a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 801859e:	4911      	ldr	r1, [pc, #68]	; (80185e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80185a0:	480e      	ldr	r0, [pc, #56]	; (80185dc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80185a2:	f001 f96d 	bl	8019880 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 80185a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80185a8:	681b      	ldr	r3, [r3, #0]
 80185aa:	2b00      	cmp	r3, #0
 80185ac:	d006      	beq.n	80185bc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 80185ae:	4b09      	ldr	r3, [pc, #36]	; (80185d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80185b0:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 80185b4:	490c      	ldr	r1, [pc, #48]	; (80185e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 80185b6:	4809      	ldr	r0, [pc, #36]	; (80185dc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80185b8:	f001 f962 	bl	8019880 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 80185bc:	6a3b      	ldr	r3, [r7, #32]
 80185be:	2b00      	cmp	r3, #0
 80185c0:	bf14      	ite	ne
 80185c2:	2301      	movne	r3, #1
 80185c4:	2300      	moveq	r3, #0
 80185c6:	b2db      	uxtb	r3, r3
 80185c8:	e000      	b.n	80185cc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 80185ca:	2300      	movs	r3, #0
}
 80185cc:	4618      	mov	r0, r3
 80185ce:	3730      	adds	r7, #48	; 0x30
 80185d0:	46bd      	mov	sp, r7
 80185d2:	bd80      	pop	{r7, pc}
 80185d4:	0801e854 	.word	0x0801e854
 80185d8:	0801e938 	.word	0x0801e938
 80185dc:	0801e89c 	.word	0x0801e89c
 80185e0:	0801e958 	.word	0x0801e958
 80185e4:	0801e990 	.word	0x0801e990
 80185e8:	0801e9a0 	.word	0x0801e9a0

080185ec <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 80185ec:	b580      	push	{r7, lr}
 80185ee:	b08e      	sub	sp, #56	; 0x38
 80185f0:	af00      	add	r7, sp, #0
 80185f2:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 80185f4:	687b      	ldr	r3, [r7, #4]
 80185f6:	685b      	ldr	r3, [r3, #4]
 80185f8:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 80185fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80185fc:	781b      	ldrb	r3, [r3, #0]
 80185fe:	f003 030f 	and.w	r3, r3, #15
 8018602:	b2db      	uxtb	r3, r3
 8018604:	009b      	lsls	r3, r3, #2
 8018606:	b2db      	uxtb	r3, r3
 8018608:	2b14      	cmp	r3, #20
 801860a:	f040 8171 	bne.w	80188f0 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801860e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018610:	88db      	ldrh	r3, [r3, #6]
 8018612:	b29b      	uxth	r3, r3
 8018614:	4618      	mov	r0, r3
 8018616:	f7f6 fe79 	bl	800f30c <lwip_htons>
 801861a:	4603      	mov	r3, r0
 801861c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8018620:	b29b      	uxth	r3, r3
 8018622:	00db      	lsls	r3, r3, #3
 8018624:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8018626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018628:	885b      	ldrh	r3, [r3, #2]
 801862a:	b29b      	uxth	r3, r3
 801862c:	4618      	mov	r0, r3
 801862e:	f7f6 fe6d 	bl	800f30c <lwip_htons>
 8018632:	4603      	mov	r3, r0
 8018634:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8018636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018638:	781b      	ldrb	r3, [r3, #0]
 801863a:	f003 030f 	and.w	r3, r3, #15
 801863e:	b2db      	uxtb	r3, r3
 8018640:	009b      	lsls	r3, r3, #2
 8018642:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8018646:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801864a:	b29b      	uxth	r3, r3
 801864c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801864e:	429a      	cmp	r2, r3
 8018650:	f0c0 8150 	bcc.w	80188f4 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8018654:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8018658:	b29b      	uxth	r3, r3
 801865a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801865c:	1ad3      	subs	r3, r2, r3
 801865e:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8018660:	6878      	ldr	r0, [r7, #4]
 8018662:	f7f8 fabf 	bl	8010be4 <pbuf_clen>
 8018666:	4603      	mov	r3, r0
 8018668:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801866a:	4b8c      	ldr	r3, [pc, #560]	; (801889c <ip4_reass+0x2b0>)
 801866c:	881b      	ldrh	r3, [r3, #0]
 801866e:	461a      	mov	r2, r3
 8018670:	8c3b      	ldrh	r3, [r7, #32]
 8018672:	4413      	add	r3, r2
 8018674:	2b0a      	cmp	r3, #10
 8018676:	dd10      	ble.n	801869a <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8018678:	8c3b      	ldrh	r3, [r7, #32]
 801867a:	4619      	mov	r1, r3
 801867c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801867e:	f7ff fd81 	bl	8018184 <ip_reass_remove_oldest_datagram>
 8018682:	4603      	mov	r3, r0
 8018684:	2b00      	cmp	r3, #0
 8018686:	f000 8137 	beq.w	80188f8 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801868a:	4b84      	ldr	r3, [pc, #528]	; (801889c <ip4_reass+0x2b0>)
 801868c:	881b      	ldrh	r3, [r3, #0]
 801868e:	461a      	mov	r2, r3
 8018690:	8c3b      	ldrh	r3, [r7, #32]
 8018692:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8018694:	2b0a      	cmp	r3, #10
 8018696:	f300 812f 	bgt.w	80188f8 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801869a:	4b81      	ldr	r3, [pc, #516]	; (80188a0 <ip4_reass+0x2b4>)
 801869c:	681b      	ldr	r3, [r3, #0]
 801869e:	633b      	str	r3, [r7, #48]	; 0x30
 80186a0:	e015      	b.n	80186ce <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 80186a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80186a4:	695a      	ldr	r2, [r3, #20]
 80186a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80186a8:	68db      	ldr	r3, [r3, #12]
 80186aa:	429a      	cmp	r2, r3
 80186ac:	d10c      	bne.n	80186c8 <ip4_reass+0xdc>
 80186ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80186b0:	699a      	ldr	r2, [r3, #24]
 80186b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80186b4:	691b      	ldr	r3, [r3, #16]
 80186b6:	429a      	cmp	r2, r3
 80186b8:	d106      	bne.n	80186c8 <ip4_reass+0xdc>
 80186ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80186bc:	899a      	ldrh	r2, [r3, #12]
 80186be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80186c0:	889b      	ldrh	r3, [r3, #4]
 80186c2:	b29b      	uxth	r3, r3
 80186c4:	429a      	cmp	r2, r3
 80186c6:	d006      	beq.n	80186d6 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80186c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80186ca:	681b      	ldr	r3, [r3, #0]
 80186cc:	633b      	str	r3, [r7, #48]	; 0x30
 80186ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80186d0:	2b00      	cmp	r3, #0
 80186d2:	d1e6      	bne.n	80186a2 <ip4_reass+0xb6>
 80186d4:	e000      	b.n	80186d8 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 80186d6:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 80186d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80186da:	2b00      	cmp	r3, #0
 80186dc:	d109      	bne.n	80186f2 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 80186de:	8c3b      	ldrh	r3, [r7, #32]
 80186e0:	4619      	mov	r1, r3
 80186e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80186e4:	f7ff fdb0 	bl	8018248 <ip_reass_enqueue_new_datagram>
 80186e8:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 80186ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80186ec:	2b00      	cmp	r3, #0
 80186ee:	d11c      	bne.n	801872a <ip4_reass+0x13e>
      goto nullreturn;
 80186f0:	e105      	b.n	80188fe <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80186f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80186f4:	88db      	ldrh	r3, [r3, #6]
 80186f6:	b29b      	uxth	r3, r3
 80186f8:	4618      	mov	r0, r3
 80186fa:	f7f6 fe07 	bl	800f30c <lwip_htons>
 80186fe:	4603      	mov	r3, r0
 8018700:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8018704:	2b00      	cmp	r3, #0
 8018706:	d110      	bne.n	801872a <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8018708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801870a:	89db      	ldrh	r3, [r3, #14]
 801870c:	4618      	mov	r0, r3
 801870e:	f7f6 fdfd 	bl	800f30c <lwip_htons>
 8018712:	4603      	mov	r3, r0
 8018714:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8018718:	2b00      	cmp	r3, #0
 801871a:	d006      	beq.n	801872a <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 801871c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801871e:	3308      	adds	r3, #8
 8018720:	2214      	movs	r2, #20
 8018722:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8018724:	4618      	mov	r0, r3
 8018726:	f001 fa7a 	bl	8019c1e <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801872a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801872c:	88db      	ldrh	r3, [r3, #6]
 801872e:	b29b      	uxth	r3, r3
 8018730:	f003 0320 	and.w	r3, r3, #32
 8018734:	2b00      	cmp	r3, #0
 8018736:	bf0c      	ite	eq
 8018738:	2301      	moveq	r3, #1
 801873a:	2300      	movne	r3, #0
 801873c:	b2db      	uxtb	r3, r3
 801873e:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8018740:	69fb      	ldr	r3, [r7, #28]
 8018742:	2b00      	cmp	r3, #0
 8018744:	d00e      	beq.n	8018764 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8018746:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8018748:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801874a:	4413      	add	r3, r2
 801874c:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801874e:	8b7a      	ldrh	r2, [r7, #26]
 8018750:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8018752:	429a      	cmp	r2, r3
 8018754:	f0c0 80a0 	bcc.w	8018898 <ip4_reass+0x2ac>
 8018758:	8b7b      	ldrh	r3, [r7, #26]
 801875a:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 801875e:	4293      	cmp	r3, r2
 8018760:	f200 809a 	bhi.w	8018898 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8018764:	69fa      	ldr	r2, [r7, #28]
 8018766:	6879      	ldr	r1, [r7, #4]
 8018768:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801876a:	f7ff fdd5 	bl	8018318 <ip_reass_chain_frag_into_datagram_and_validate>
 801876e:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8018770:	697b      	ldr	r3, [r7, #20]
 8018772:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018776:	f000 809b 	beq.w	80188b0 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801877a:	4b48      	ldr	r3, [pc, #288]	; (801889c <ip4_reass+0x2b0>)
 801877c:	881a      	ldrh	r2, [r3, #0]
 801877e:	8c3b      	ldrh	r3, [r7, #32]
 8018780:	4413      	add	r3, r2
 8018782:	b29a      	uxth	r2, r3
 8018784:	4b45      	ldr	r3, [pc, #276]	; (801889c <ip4_reass+0x2b0>)
 8018786:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8018788:	69fb      	ldr	r3, [r7, #28]
 801878a:	2b00      	cmp	r3, #0
 801878c:	d00d      	beq.n	80187aa <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801878e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8018790:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018792:	4413      	add	r3, r2
 8018794:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8018796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018798:	8a7a      	ldrh	r2, [r7, #18]
 801879a:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801879c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801879e:	7f9b      	ldrb	r3, [r3, #30]
 80187a0:	f043 0301 	orr.w	r3, r3, #1
 80187a4:	b2da      	uxtb	r2, r3
 80187a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80187a8:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 80187aa:	697b      	ldr	r3, [r7, #20]
 80187ac:	2b01      	cmp	r3, #1
 80187ae:	d171      	bne.n	8018894 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 80187b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80187b2:	8b9b      	ldrh	r3, [r3, #28]
 80187b4:	3314      	adds	r3, #20
 80187b6:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 80187b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80187ba:	685b      	ldr	r3, [r3, #4]
 80187bc:	685b      	ldr	r3, [r3, #4]
 80187be:	681b      	ldr	r3, [r3, #0]
 80187c0:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 80187c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80187c4:	685b      	ldr	r3, [r3, #4]
 80187c6:	685b      	ldr	r3, [r3, #4]
 80187c8:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80187ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80187cc:	3308      	adds	r3, #8
 80187ce:	2214      	movs	r2, #20
 80187d0:	4619      	mov	r1, r3
 80187d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80187d4:	f001 fa23 	bl	8019c1e <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 80187d8:	8a3b      	ldrh	r3, [r7, #16]
 80187da:	4618      	mov	r0, r3
 80187dc:	f7f6 fd96 	bl	800f30c <lwip_htons>
 80187e0:	4603      	mov	r3, r0
 80187e2:	461a      	mov	r2, r3
 80187e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80187e6:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 80187e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80187ea:	2200      	movs	r2, #0
 80187ec:	719a      	strb	r2, [r3, #6]
 80187ee:	2200      	movs	r2, #0
 80187f0:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 80187f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80187f4:	2200      	movs	r2, #0
 80187f6:	729a      	strb	r2, [r3, #10]
 80187f8:	2200      	movs	r2, #0
 80187fa:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 80187fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80187fe:	685b      	ldr	r3, [r3, #4]
 8018800:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8018802:	e00d      	b.n	8018820 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8018804:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018806:	685b      	ldr	r3, [r3, #4]
 8018808:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801880a:	2114      	movs	r1, #20
 801880c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801880e:	f7f8 f8db 	bl	80109c8 <pbuf_remove_header>
      pbuf_cat(p, r);
 8018812:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8018814:	6878      	ldr	r0, [r7, #4]
 8018816:	f7f8 fa1f 	bl	8010c58 <pbuf_cat>
      r = iprh->next_pbuf;
 801881a:	68fb      	ldr	r3, [r7, #12]
 801881c:	681b      	ldr	r3, [r3, #0]
 801881e:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8018820:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018822:	2b00      	cmp	r3, #0
 8018824:	d1ee      	bne.n	8018804 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8018826:	4b1e      	ldr	r3, [pc, #120]	; (80188a0 <ip4_reass+0x2b4>)
 8018828:	681b      	ldr	r3, [r3, #0]
 801882a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801882c:	429a      	cmp	r2, r3
 801882e:	d102      	bne.n	8018836 <ip4_reass+0x24a>
      ipr_prev = NULL;
 8018830:	2300      	movs	r3, #0
 8018832:	62fb      	str	r3, [r7, #44]	; 0x2c
 8018834:	e010      	b.n	8018858 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8018836:	4b1a      	ldr	r3, [pc, #104]	; (80188a0 <ip4_reass+0x2b4>)
 8018838:	681b      	ldr	r3, [r3, #0]
 801883a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801883c:	e007      	b.n	801884e <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 801883e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018840:	681b      	ldr	r3, [r3, #0]
 8018842:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018844:	429a      	cmp	r2, r3
 8018846:	d006      	beq.n	8018856 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8018848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801884a:	681b      	ldr	r3, [r3, #0]
 801884c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801884e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018850:	2b00      	cmp	r3, #0
 8018852:	d1f4      	bne.n	801883e <ip4_reass+0x252>
 8018854:	e000      	b.n	8018858 <ip4_reass+0x26c>
          break;
 8018856:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8018858:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801885a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801885c:	f7ff fd2e 	bl	80182bc <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8018860:	6878      	ldr	r0, [r7, #4]
 8018862:	f7f8 f9bf 	bl	8010be4 <pbuf_clen>
 8018866:	4603      	mov	r3, r0
 8018868:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801886a:	4b0c      	ldr	r3, [pc, #48]	; (801889c <ip4_reass+0x2b0>)
 801886c:	881b      	ldrh	r3, [r3, #0]
 801886e:	8c3a      	ldrh	r2, [r7, #32]
 8018870:	429a      	cmp	r2, r3
 8018872:	d906      	bls.n	8018882 <ip4_reass+0x296>
 8018874:	4b0b      	ldr	r3, [pc, #44]	; (80188a4 <ip4_reass+0x2b8>)
 8018876:	f240 229b 	movw	r2, #667	; 0x29b
 801887a:	490b      	ldr	r1, [pc, #44]	; (80188a8 <ip4_reass+0x2bc>)
 801887c:	480b      	ldr	r0, [pc, #44]	; (80188ac <ip4_reass+0x2c0>)
 801887e:	f000 ffff 	bl	8019880 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8018882:	4b06      	ldr	r3, [pc, #24]	; (801889c <ip4_reass+0x2b0>)
 8018884:	881a      	ldrh	r2, [r3, #0]
 8018886:	8c3b      	ldrh	r3, [r7, #32]
 8018888:	1ad3      	subs	r3, r2, r3
 801888a:	b29a      	uxth	r2, r3
 801888c:	4b03      	ldr	r3, [pc, #12]	; (801889c <ip4_reass+0x2b0>)
 801888e:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8018890:	687b      	ldr	r3, [r7, #4]
 8018892:	e038      	b.n	8018906 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8018894:	2300      	movs	r3, #0
 8018896:	e036      	b.n	8018906 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8018898:	bf00      	nop
 801889a:	e00a      	b.n	80188b2 <ip4_reass+0x2c6>
 801889c:	200071e4 	.word	0x200071e4
 80188a0:	200071e0 	.word	0x200071e0
 80188a4:	0801e854 	.word	0x0801e854
 80188a8:	0801e9c4 	.word	0x0801e9c4
 80188ac:	0801e89c 	.word	0x0801e89c
    goto nullreturn_ipr;
 80188b0:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 80188b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80188b4:	2b00      	cmp	r3, #0
 80188b6:	d106      	bne.n	80188c6 <ip4_reass+0x2da>
 80188b8:	4b15      	ldr	r3, [pc, #84]	; (8018910 <ip4_reass+0x324>)
 80188ba:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 80188be:	4915      	ldr	r1, [pc, #84]	; (8018914 <ip4_reass+0x328>)
 80188c0:	4815      	ldr	r0, [pc, #84]	; (8018918 <ip4_reass+0x32c>)
 80188c2:	f000 ffdd 	bl	8019880 <iprintf>
  if (ipr->p == NULL) {
 80188c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80188c8:	685b      	ldr	r3, [r3, #4]
 80188ca:	2b00      	cmp	r3, #0
 80188cc:	d116      	bne.n	80188fc <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 80188ce:	4b13      	ldr	r3, [pc, #76]	; (801891c <ip4_reass+0x330>)
 80188d0:	681b      	ldr	r3, [r3, #0]
 80188d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80188d4:	429a      	cmp	r2, r3
 80188d6:	d006      	beq.n	80188e6 <ip4_reass+0x2fa>
 80188d8:	4b0d      	ldr	r3, [pc, #52]	; (8018910 <ip4_reass+0x324>)
 80188da:	f240 22ab 	movw	r2, #683	; 0x2ab
 80188de:	4910      	ldr	r1, [pc, #64]	; (8018920 <ip4_reass+0x334>)
 80188e0:	480d      	ldr	r0, [pc, #52]	; (8018918 <ip4_reass+0x32c>)
 80188e2:	f000 ffcd 	bl	8019880 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 80188e6:	2100      	movs	r1, #0
 80188e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80188ea:	f7ff fce7 	bl	80182bc <ip_reass_dequeue_datagram>
 80188ee:	e006      	b.n	80188fe <ip4_reass+0x312>
    goto nullreturn;
 80188f0:	bf00      	nop
 80188f2:	e004      	b.n	80188fe <ip4_reass+0x312>
    goto nullreturn;
 80188f4:	bf00      	nop
 80188f6:	e002      	b.n	80188fe <ip4_reass+0x312>
      goto nullreturn;
 80188f8:	bf00      	nop
 80188fa:	e000      	b.n	80188fe <ip4_reass+0x312>
  }

nullreturn:
 80188fc:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 80188fe:	6878      	ldr	r0, [r7, #4]
 8018900:	f7f8 f8e8 	bl	8010ad4 <pbuf_free>
  return NULL;
 8018904:	2300      	movs	r3, #0
}
 8018906:	4618      	mov	r0, r3
 8018908:	3738      	adds	r7, #56	; 0x38
 801890a:	46bd      	mov	sp, r7
 801890c:	bd80      	pop	{r7, pc}
 801890e:	bf00      	nop
 8018910:	0801e854 	.word	0x0801e854
 8018914:	0801e9e0 	.word	0x0801e9e0
 8018918:	0801e89c 	.word	0x0801e89c
 801891c:	200071e0 	.word	0x200071e0
 8018920:	0801e9ec 	.word	0x0801e9ec

08018924 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8018924:	b580      	push	{r7, lr}
 8018926:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8018928:	2005      	movs	r0, #5
 801892a:	f7f7 fa0d 	bl	800fd48 <memp_malloc>
 801892e:	4603      	mov	r3, r0
}
 8018930:	4618      	mov	r0, r3
 8018932:	bd80      	pop	{r7, pc}

08018934 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8018934:	b580      	push	{r7, lr}
 8018936:	b082      	sub	sp, #8
 8018938:	af00      	add	r7, sp, #0
 801893a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 801893c:	687b      	ldr	r3, [r7, #4]
 801893e:	2b00      	cmp	r3, #0
 8018940:	d106      	bne.n	8018950 <ip_frag_free_pbuf_custom_ref+0x1c>
 8018942:	4b07      	ldr	r3, [pc, #28]	; (8018960 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8018944:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8018948:	4906      	ldr	r1, [pc, #24]	; (8018964 <ip_frag_free_pbuf_custom_ref+0x30>)
 801894a:	4807      	ldr	r0, [pc, #28]	; (8018968 <ip_frag_free_pbuf_custom_ref+0x34>)
 801894c:	f000 ff98 	bl	8019880 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8018950:	6879      	ldr	r1, [r7, #4]
 8018952:	2005      	movs	r0, #5
 8018954:	f7f7 fa68 	bl	800fe28 <memp_free>
}
 8018958:	bf00      	nop
 801895a:	3708      	adds	r7, #8
 801895c:	46bd      	mov	sp, r7
 801895e:	bd80      	pop	{r7, pc}
 8018960:	0801e854 	.word	0x0801e854
 8018964:	0801ea0c 	.word	0x0801ea0c
 8018968:	0801e89c 	.word	0x0801e89c

0801896c <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 801896c:	b580      	push	{r7, lr}
 801896e:	b084      	sub	sp, #16
 8018970:	af00      	add	r7, sp, #0
 8018972:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8018974:	687b      	ldr	r3, [r7, #4]
 8018976:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8018978:	68fb      	ldr	r3, [r7, #12]
 801897a:	2b00      	cmp	r3, #0
 801897c:	d106      	bne.n	801898c <ipfrag_free_pbuf_custom+0x20>
 801897e:	4b11      	ldr	r3, [pc, #68]	; (80189c4 <ipfrag_free_pbuf_custom+0x58>)
 8018980:	f240 22ce 	movw	r2, #718	; 0x2ce
 8018984:	4910      	ldr	r1, [pc, #64]	; (80189c8 <ipfrag_free_pbuf_custom+0x5c>)
 8018986:	4811      	ldr	r0, [pc, #68]	; (80189cc <ipfrag_free_pbuf_custom+0x60>)
 8018988:	f000 ff7a 	bl	8019880 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 801898c:	68fa      	ldr	r2, [r7, #12]
 801898e:	687b      	ldr	r3, [r7, #4]
 8018990:	429a      	cmp	r2, r3
 8018992:	d006      	beq.n	80189a2 <ipfrag_free_pbuf_custom+0x36>
 8018994:	4b0b      	ldr	r3, [pc, #44]	; (80189c4 <ipfrag_free_pbuf_custom+0x58>)
 8018996:	f240 22cf 	movw	r2, #719	; 0x2cf
 801899a:	490d      	ldr	r1, [pc, #52]	; (80189d0 <ipfrag_free_pbuf_custom+0x64>)
 801899c:	480b      	ldr	r0, [pc, #44]	; (80189cc <ipfrag_free_pbuf_custom+0x60>)
 801899e:	f000 ff6f 	bl	8019880 <iprintf>
  if (pcr->original != NULL) {
 80189a2:	68fb      	ldr	r3, [r7, #12]
 80189a4:	695b      	ldr	r3, [r3, #20]
 80189a6:	2b00      	cmp	r3, #0
 80189a8:	d004      	beq.n	80189b4 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 80189aa:	68fb      	ldr	r3, [r7, #12]
 80189ac:	695b      	ldr	r3, [r3, #20]
 80189ae:	4618      	mov	r0, r3
 80189b0:	f7f8 f890 	bl	8010ad4 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 80189b4:	68f8      	ldr	r0, [r7, #12]
 80189b6:	f7ff ffbd 	bl	8018934 <ip_frag_free_pbuf_custom_ref>
}
 80189ba:	bf00      	nop
 80189bc:	3710      	adds	r7, #16
 80189be:	46bd      	mov	sp, r7
 80189c0:	bd80      	pop	{r7, pc}
 80189c2:	bf00      	nop
 80189c4:	0801e854 	.word	0x0801e854
 80189c8:	0801ea18 	.word	0x0801ea18
 80189cc:	0801e89c 	.word	0x0801e89c
 80189d0:	0801ea24 	.word	0x0801ea24

080189d4 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 80189d4:	b580      	push	{r7, lr}
 80189d6:	b094      	sub	sp, #80	; 0x50
 80189d8:	af02      	add	r7, sp, #8
 80189da:	60f8      	str	r0, [r7, #12]
 80189dc:	60b9      	str	r1, [r7, #8]
 80189de:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 80189e0:	2300      	movs	r3, #0
 80189e2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 80189e6:	68bb      	ldr	r3, [r7, #8]
 80189e8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80189ea:	3b14      	subs	r3, #20
 80189ec:	2b00      	cmp	r3, #0
 80189ee:	da00      	bge.n	80189f2 <ip4_frag+0x1e>
 80189f0:	3307      	adds	r3, #7
 80189f2:	10db      	asrs	r3, r3, #3
 80189f4:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 80189f6:	2314      	movs	r3, #20
 80189f8:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 80189fa:	68fb      	ldr	r3, [r7, #12]
 80189fc:	685b      	ldr	r3, [r3, #4]
 80189fe:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8018a00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018a02:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8018a04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018a06:	781b      	ldrb	r3, [r3, #0]
 8018a08:	f003 030f 	and.w	r3, r3, #15
 8018a0c:	b2db      	uxtb	r3, r3
 8018a0e:	009b      	lsls	r3, r3, #2
 8018a10:	b2db      	uxtb	r3, r3
 8018a12:	2b14      	cmp	r3, #20
 8018a14:	d002      	beq.n	8018a1c <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8018a16:	f06f 0305 	mvn.w	r3, #5
 8018a1a:	e110      	b.n	8018c3e <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8018a1c:	68fb      	ldr	r3, [r7, #12]
 8018a1e:	895b      	ldrh	r3, [r3, #10]
 8018a20:	2b13      	cmp	r3, #19
 8018a22:	d809      	bhi.n	8018a38 <ip4_frag+0x64>
 8018a24:	4b88      	ldr	r3, [pc, #544]	; (8018c48 <ip4_frag+0x274>)
 8018a26:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8018a2a:	4988      	ldr	r1, [pc, #544]	; (8018c4c <ip4_frag+0x278>)
 8018a2c:	4888      	ldr	r0, [pc, #544]	; (8018c50 <ip4_frag+0x27c>)
 8018a2e:	f000 ff27 	bl	8019880 <iprintf>
 8018a32:	f06f 0305 	mvn.w	r3, #5
 8018a36:	e102      	b.n	8018c3e <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8018a38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018a3a:	88db      	ldrh	r3, [r3, #6]
 8018a3c:	b29b      	uxth	r3, r3
 8018a3e:	4618      	mov	r0, r3
 8018a40:	f7f6 fc64 	bl	800f30c <lwip_htons>
 8018a44:	4603      	mov	r3, r0
 8018a46:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8018a48:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8018a4a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8018a4e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8018a52:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8018a54:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8018a58:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8018a5a:	68fb      	ldr	r3, [r7, #12]
 8018a5c:	891b      	ldrh	r3, [r3, #8]
 8018a5e:	3b14      	subs	r3, #20
 8018a60:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8018a64:	e0e1      	b.n	8018c2a <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8018a66:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8018a68:	00db      	lsls	r3, r3, #3
 8018a6a:	b29b      	uxth	r3, r3
 8018a6c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8018a70:	4293      	cmp	r3, r2
 8018a72:	bf28      	it	cs
 8018a74:	4613      	movcs	r3, r2
 8018a76:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8018a78:	f44f 7220 	mov.w	r2, #640	; 0x280
 8018a7c:	2114      	movs	r1, #20
 8018a7e:	200e      	movs	r0, #14
 8018a80:	f7f7 fd44 	bl	801050c <pbuf_alloc>
 8018a84:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8018a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018a88:	2b00      	cmp	r3, #0
 8018a8a:	f000 80d5 	beq.w	8018c38 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8018a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018a90:	895b      	ldrh	r3, [r3, #10]
 8018a92:	2b13      	cmp	r3, #19
 8018a94:	d806      	bhi.n	8018aa4 <ip4_frag+0xd0>
 8018a96:	4b6c      	ldr	r3, [pc, #432]	; (8018c48 <ip4_frag+0x274>)
 8018a98:	f44f 7249 	mov.w	r2, #804	; 0x324
 8018a9c:	496d      	ldr	r1, [pc, #436]	; (8018c54 <ip4_frag+0x280>)
 8018a9e:	486c      	ldr	r0, [pc, #432]	; (8018c50 <ip4_frag+0x27c>)
 8018aa0:	f000 feee 	bl	8019880 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8018aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018aa6:	685b      	ldr	r3, [r3, #4]
 8018aa8:	2214      	movs	r2, #20
 8018aaa:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8018aac:	4618      	mov	r0, r3
 8018aae:	f001 f8b6 	bl	8019c1e <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8018ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018ab4:	685b      	ldr	r3, [r3, #4]
 8018ab6:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8018ab8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8018aba:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8018abe:	e064      	b.n	8018b8a <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8018ac0:	68fb      	ldr	r3, [r7, #12]
 8018ac2:	895a      	ldrh	r2, [r3, #10]
 8018ac4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8018ac6:	1ad3      	subs	r3, r2, r3
 8018ac8:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8018aca:	68fb      	ldr	r3, [r7, #12]
 8018acc:	895b      	ldrh	r3, [r3, #10]
 8018ace:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8018ad0:	429a      	cmp	r2, r3
 8018ad2:	d906      	bls.n	8018ae2 <ip4_frag+0x10e>
 8018ad4:	4b5c      	ldr	r3, [pc, #368]	; (8018c48 <ip4_frag+0x274>)
 8018ad6:	f240 322d 	movw	r2, #813	; 0x32d
 8018ada:	495f      	ldr	r1, [pc, #380]	; (8018c58 <ip4_frag+0x284>)
 8018adc:	485c      	ldr	r0, [pc, #368]	; (8018c50 <ip4_frag+0x27c>)
 8018ade:	f000 fecf 	bl	8019880 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8018ae2:	8bfa      	ldrh	r2, [r7, #30]
 8018ae4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8018ae8:	4293      	cmp	r3, r2
 8018aea:	bf28      	it	cs
 8018aec:	4613      	movcs	r3, r2
 8018aee:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8018af2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8018af6:	2b00      	cmp	r3, #0
 8018af8:	d105      	bne.n	8018b06 <ip4_frag+0x132>
        poff = 0;
 8018afa:	2300      	movs	r3, #0
 8018afc:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8018afe:	68fb      	ldr	r3, [r7, #12]
 8018b00:	681b      	ldr	r3, [r3, #0]
 8018b02:	60fb      	str	r3, [r7, #12]
        continue;
 8018b04:	e041      	b.n	8018b8a <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8018b06:	f7ff ff0d 	bl	8018924 <ip_frag_alloc_pbuf_custom_ref>
 8018b0a:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8018b0c:	69bb      	ldr	r3, [r7, #24]
 8018b0e:	2b00      	cmp	r3, #0
 8018b10:	d103      	bne.n	8018b1a <ip4_frag+0x146>
        pbuf_free(rambuf);
 8018b12:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018b14:	f7f7 ffde 	bl	8010ad4 <pbuf_free>
        goto memerr;
 8018b18:	e08f      	b.n	8018c3a <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8018b1a:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8018b1c:	68fb      	ldr	r3, [r7, #12]
 8018b1e:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8018b20:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8018b22:	4413      	add	r3, r2
 8018b24:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8018b28:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8018b2c:	9201      	str	r2, [sp, #4]
 8018b2e:	9300      	str	r3, [sp, #0]
 8018b30:	4603      	mov	r3, r0
 8018b32:	2241      	movs	r2, #65	; 0x41
 8018b34:	2000      	movs	r0, #0
 8018b36:	f7f7 fe15 	bl	8010764 <pbuf_alloced_custom>
 8018b3a:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8018b3c:	697b      	ldr	r3, [r7, #20]
 8018b3e:	2b00      	cmp	r3, #0
 8018b40:	d106      	bne.n	8018b50 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8018b42:	69b8      	ldr	r0, [r7, #24]
 8018b44:	f7ff fef6 	bl	8018934 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8018b48:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018b4a:	f7f7 ffc3 	bl	8010ad4 <pbuf_free>
        goto memerr;
 8018b4e:	e074      	b.n	8018c3a <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8018b50:	68f8      	ldr	r0, [r7, #12]
 8018b52:	f7f8 f85f 	bl	8010c14 <pbuf_ref>
      pcr->original = p;
 8018b56:	69bb      	ldr	r3, [r7, #24]
 8018b58:	68fa      	ldr	r2, [r7, #12]
 8018b5a:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8018b5c:	69bb      	ldr	r3, [r7, #24]
 8018b5e:	4a3f      	ldr	r2, [pc, #252]	; (8018c5c <ip4_frag+0x288>)
 8018b60:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8018b62:	6979      	ldr	r1, [r7, #20]
 8018b64:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018b66:	f7f8 f877 	bl	8010c58 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8018b6a:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8018b6e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8018b72:	1ad3      	subs	r3, r2, r3
 8018b74:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8018b78:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8018b7c:	2b00      	cmp	r3, #0
 8018b7e:	d004      	beq.n	8018b8a <ip4_frag+0x1b6>
        poff = 0;
 8018b80:	2300      	movs	r3, #0
 8018b82:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8018b84:	68fb      	ldr	r3, [r7, #12]
 8018b86:	681b      	ldr	r3, [r3, #0]
 8018b88:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8018b8a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8018b8e:	2b00      	cmp	r3, #0
 8018b90:	d196      	bne.n	8018ac0 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8018b92:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8018b94:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8018b98:	4413      	add	r3, r2
 8018b9a:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8018b9c:	68bb      	ldr	r3, [r7, #8]
 8018b9e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8018ba0:	f1a3 0213 	sub.w	r2, r3, #19
 8018ba4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8018ba8:	429a      	cmp	r2, r3
 8018baa:	bfcc      	ite	gt
 8018bac:	2301      	movgt	r3, #1
 8018bae:	2300      	movle	r3, #0
 8018bb0:	b2db      	uxtb	r3, r3
 8018bb2:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8018bb4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8018bb8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8018bbc:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8018bbe:	6a3b      	ldr	r3, [r7, #32]
 8018bc0:	2b00      	cmp	r3, #0
 8018bc2:	d002      	beq.n	8018bca <ip4_frag+0x1f6>
 8018bc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018bc6:	2b00      	cmp	r3, #0
 8018bc8:	d003      	beq.n	8018bd2 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8018bca:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8018bcc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8018bd0:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8018bd2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8018bd4:	4618      	mov	r0, r3
 8018bd6:	f7f6 fb99 	bl	800f30c <lwip_htons>
 8018bda:	4603      	mov	r3, r0
 8018bdc:	461a      	mov	r2, r3
 8018bde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018be0:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8018be2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8018be4:	3314      	adds	r3, #20
 8018be6:	b29b      	uxth	r3, r3
 8018be8:	4618      	mov	r0, r3
 8018bea:	f7f6 fb8f 	bl	800f30c <lwip_htons>
 8018bee:	4603      	mov	r3, r0
 8018bf0:	461a      	mov	r2, r3
 8018bf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018bf4:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8018bf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018bf8:	2200      	movs	r2, #0
 8018bfa:	729a      	strb	r2, [r3, #10]
 8018bfc:	2200      	movs	r2, #0
 8018bfe:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8018c00:	68bb      	ldr	r3, [r7, #8]
 8018c02:	695b      	ldr	r3, [r3, #20]
 8018c04:	687a      	ldr	r2, [r7, #4]
 8018c06:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8018c08:	68b8      	ldr	r0, [r7, #8]
 8018c0a:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8018c0c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018c0e:	f7f7 ff61 	bl	8010ad4 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8018c12:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8018c16:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8018c18:	1ad3      	subs	r3, r2, r3
 8018c1a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8018c1e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8018c22:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8018c24:	4413      	add	r3, r2
 8018c26:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8018c2a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8018c2e:	2b00      	cmp	r3, #0
 8018c30:	f47f af19 	bne.w	8018a66 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8018c34:	2300      	movs	r3, #0
 8018c36:	e002      	b.n	8018c3e <ip4_frag+0x26a>
      goto memerr;
 8018c38:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8018c3a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8018c3e:	4618      	mov	r0, r3
 8018c40:	3748      	adds	r7, #72	; 0x48
 8018c42:	46bd      	mov	sp, r7
 8018c44:	bd80      	pop	{r7, pc}
 8018c46:	bf00      	nop
 8018c48:	0801e854 	.word	0x0801e854
 8018c4c:	0801ea30 	.word	0x0801ea30
 8018c50:	0801e89c 	.word	0x0801e89c
 8018c54:	0801ea4c 	.word	0x0801ea4c
 8018c58:	0801ea6c 	.word	0x0801ea6c
 8018c5c:	0801896d 	.word	0x0801896d

08018c60 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8018c60:	b580      	push	{r7, lr}
 8018c62:	b086      	sub	sp, #24
 8018c64:	af00      	add	r7, sp, #0
 8018c66:	6078      	str	r0, [r7, #4]
 8018c68:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8018c6a:	230e      	movs	r3, #14
 8018c6c:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8018c6e:	687b      	ldr	r3, [r7, #4]
 8018c70:	895b      	ldrh	r3, [r3, #10]
 8018c72:	2b0e      	cmp	r3, #14
 8018c74:	d96e      	bls.n	8018d54 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8018c76:	687b      	ldr	r3, [r7, #4]
 8018c78:	7bdb      	ldrb	r3, [r3, #15]
 8018c7a:	2b00      	cmp	r3, #0
 8018c7c:	d106      	bne.n	8018c8c <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8018c7e:	683b      	ldr	r3, [r7, #0]
 8018c80:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8018c84:	3301      	adds	r3, #1
 8018c86:	b2da      	uxtb	r2, r3
 8018c88:	687b      	ldr	r3, [r7, #4]
 8018c8a:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8018c8c:	687b      	ldr	r3, [r7, #4]
 8018c8e:	685b      	ldr	r3, [r3, #4]
 8018c90:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8018c92:	693b      	ldr	r3, [r7, #16]
 8018c94:	7b1a      	ldrb	r2, [r3, #12]
 8018c96:	7b5b      	ldrb	r3, [r3, #13]
 8018c98:	021b      	lsls	r3, r3, #8
 8018c9a:	4313      	orrs	r3, r2
 8018c9c:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8018c9e:	693b      	ldr	r3, [r7, #16]
 8018ca0:	781b      	ldrb	r3, [r3, #0]
 8018ca2:	f003 0301 	and.w	r3, r3, #1
 8018ca6:	2b00      	cmp	r3, #0
 8018ca8:	d023      	beq.n	8018cf2 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8018caa:	693b      	ldr	r3, [r7, #16]
 8018cac:	781b      	ldrb	r3, [r3, #0]
 8018cae:	2b01      	cmp	r3, #1
 8018cb0:	d10f      	bne.n	8018cd2 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8018cb2:	693b      	ldr	r3, [r7, #16]
 8018cb4:	785b      	ldrb	r3, [r3, #1]
 8018cb6:	2b00      	cmp	r3, #0
 8018cb8:	d11b      	bne.n	8018cf2 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8018cba:	693b      	ldr	r3, [r7, #16]
 8018cbc:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8018cbe:	2b5e      	cmp	r3, #94	; 0x5e
 8018cc0:	d117      	bne.n	8018cf2 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8018cc2:	687b      	ldr	r3, [r7, #4]
 8018cc4:	7b5b      	ldrb	r3, [r3, #13]
 8018cc6:	f043 0310 	orr.w	r3, r3, #16
 8018cca:	b2da      	uxtb	r2, r3
 8018ccc:	687b      	ldr	r3, [r7, #4]
 8018cce:	735a      	strb	r2, [r3, #13]
 8018cd0:	e00f      	b.n	8018cf2 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8018cd2:	693b      	ldr	r3, [r7, #16]
 8018cd4:	2206      	movs	r2, #6
 8018cd6:	4928      	ldr	r1, [pc, #160]	; (8018d78 <ethernet_input+0x118>)
 8018cd8:	4618      	mov	r0, r3
 8018cda:	f000 ff17 	bl	8019b0c <memcmp>
 8018cde:	4603      	mov	r3, r0
 8018ce0:	2b00      	cmp	r3, #0
 8018ce2:	d106      	bne.n	8018cf2 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8018ce4:	687b      	ldr	r3, [r7, #4]
 8018ce6:	7b5b      	ldrb	r3, [r3, #13]
 8018ce8:	f043 0308 	orr.w	r3, r3, #8
 8018cec:	b2da      	uxtb	r2, r3
 8018cee:	687b      	ldr	r3, [r7, #4]
 8018cf0:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8018cf2:	89fb      	ldrh	r3, [r7, #14]
 8018cf4:	2b08      	cmp	r3, #8
 8018cf6:	d003      	beq.n	8018d00 <ethernet_input+0xa0>
 8018cf8:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8018cfc:	d014      	beq.n	8018d28 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8018cfe:	e032      	b.n	8018d66 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8018d00:	683b      	ldr	r3, [r7, #0]
 8018d02:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8018d06:	f003 0308 	and.w	r3, r3, #8
 8018d0a:	2b00      	cmp	r3, #0
 8018d0c:	d024      	beq.n	8018d58 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8018d0e:	8afb      	ldrh	r3, [r7, #22]
 8018d10:	4619      	mov	r1, r3
 8018d12:	6878      	ldr	r0, [r7, #4]
 8018d14:	f7f7 fe58 	bl	80109c8 <pbuf_remove_header>
 8018d18:	4603      	mov	r3, r0
 8018d1a:	2b00      	cmp	r3, #0
 8018d1c:	d11e      	bne.n	8018d5c <ethernet_input+0xfc>
        ip4_input(p, netif);
 8018d1e:	6839      	ldr	r1, [r7, #0]
 8018d20:	6878      	ldr	r0, [r7, #4]
 8018d22:	f7fe ff21 	bl	8017b68 <ip4_input>
      break;
 8018d26:	e013      	b.n	8018d50 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8018d28:	683b      	ldr	r3, [r7, #0]
 8018d2a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8018d2e:	f003 0308 	and.w	r3, r3, #8
 8018d32:	2b00      	cmp	r3, #0
 8018d34:	d014      	beq.n	8018d60 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8018d36:	8afb      	ldrh	r3, [r7, #22]
 8018d38:	4619      	mov	r1, r3
 8018d3a:	6878      	ldr	r0, [r7, #4]
 8018d3c:	f7f7 fe44 	bl	80109c8 <pbuf_remove_header>
 8018d40:	4603      	mov	r3, r0
 8018d42:	2b00      	cmp	r3, #0
 8018d44:	d10e      	bne.n	8018d64 <ethernet_input+0x104>
        etharp_input(p, netif);
 8018d46:	6839      	ldr	r1, [r7, #0]
 8018d48:	6878      	ldr	r0, [r7, #4]
 8018d4a:	f7fe f89b 	bl	8016e84 <etharp_input>
      break;
 8018d4e:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8018d50:	2300      	movs	r3, #0
 8018d52:	e00c      	b.n	8018d6e <ethernet_input+0x10e>
    goto free_and_return;
 8018d54:	bf00      	nop
 8018d56:	e006      	b.n	8018d66 <ethernet_input+0x106>
        goto free_and_return;
 8018d58:	bf00      	nop
 8018d5a:	e004      	b.n	8018d66 <ethernet_input+0x106>
        goto free_and_return;
 8018d5c:	bf00      	nop
 8018d5e:	e002      	b.n	8018d66 <ethernet_input+0x106>
        goto free_and_return;
 8018d60:	bf00      	nop
 8018d62:	e000      	b.n	8018d66 <ethernet_input+0x106>
        goto free_and_return;
 8018d64:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8018d66:	6878      	ldr	r0, [r7, #4]
 8018d68:	f7f7 feb4 	bl	8010ad4 <pbuf_free>
  return ERR_OK;
 8018d6c:	2300      	movs	r3, #0
}
 8018d6e:	4618      	mov	r0, r3
 8018d70:	3718      	adds	r7, #24
 8018d72:	46bd      	mov	sp, r7
 8018d74:	bd80      	pop	{r7, pc}
 8018d76:	bf00      	nop
 8018d78:	0801ec48 	.word	0x0801ec48

08018d7c <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8018d7c:	b580      	push	{r7, lr}
 8018d7e:	b086      	sub	sp, #24
 8018d80:	af00      	add	r7, sp, #0
 8018d82:	60f8      	str	r0, [r7, #12]
 8018d84:	60b9      	str	r1, [r7, #8]
 8018d86:	607a      	str	r2, [r7, #4]
 8018d88:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8018d8a:	8c3b      	ldrh	r3, [r7, #32]
 8018d8c:	4618      	mov	r0, r3
 8018d8e:	f7f6 fabd 	bl	800f30c <lwip_htons>
 8018d92:	4603      	mov	r3, r0
 8018d94:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8018d96:	210e      	movs	r1, #14
 8018d98:	68b8      	ldr	r0, [r7, #8]
 8018d9a:	f7f7 fe05 	bl	80109a8 <pbuf_add_header>
 8018d9e:	4603      	mov	r3, r0
 8018da0:	2b00      	cmp	r3, #0
 8018da2:	d125      	bne.n	8018df0 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8018da4:	68bb      	ldr	r3, [r7, #8]
 8018da6:	685b      	ldr	r3, [r3, #4]
 8018da8:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8018daa:	693b      	ldr	r3, [r7, #16]
 8018dac:	8afa      	ldrh	r2, [r7, #22]
 8018dae:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8018db0:	693b      	ldr	r3, [r7, #16]
 8018db2:	2206      	movs	r2, #6
 8018db4:	6839      	ldr	r1, [r7, #0]
 8018db6:	4618      	mov	r0, r3
 8018db8:	f000 ff31 	bl	8019c1e <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8018dbc:	693b      	ldr	r3, [r7, #16]
 8018dbe:	3306      	adds	r3, #6
 8018dc0:	2206      	movs	r2, #6
 8018dc2:	6879      	ldr	r1, [r7, #4]
 8018dc4:	4618      	mov	r0, r3
 8018dc6:	f000 ff2a 	bl	8019c1e <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8018dca:	68fb      	ldr	r3, [r7, #12]
 8018dcc:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8018dd0:	2b06      	cmp	r3, #6
 8018dd2:	d006      	beq.n	8018de2 <ethernet_output+0x66>
 8018dd4:	4b0a      	ldr	r3, [pc, #40]	; (8018e00 <ethernet_output+0x84>)
 8018dd6:	f44f 7299 	mov.w	r2, #306	; 0x132
 8018dda:	490a      	ldr	r1, [pc, #40]	; (8018e04 <ethernet_output+0x88>)
 8018ddc:	480a      	ldr	r0, [pc, #40]	; (8018e08 <ethernet_output+0x8c>)
 8018dde:	f000 fd4f 	bl	8019880 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8018de2:	68fb      	ldr	r3, [r7, #12]
 8018de4:	699b      	ldr	r3, [r3, #24]
 8018de6:	68b9      	ldr	r1, [r7, #8]
 8018de8:	68f8      	ldr	r0, [r7, #12]
 8018dea:	4798      	blx	r3
 8018dec:	4603      	mov	r3, r0
 8018dee:	e002      	b.n	8018df6 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8018df0:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8018df2:	f06f 0301 	mvn.w	r3, #1
}
 8018df6:	4618      	mov	r0, r3
 8018df8:	3718      	adds	r7, #24
 8018dfa:	46bd      	mov	sp, r7
 8018dfc:	bd80      	pop	{r7, pc}
 8018dfe:	bf00      	nop
 8018e00:	0801ea7c 	.word	0x0801ea7c
 8018e04:	0801eab4 	.word	0x0801eab4
 8018e08:	0801eae8 	.word	0x0801eae8

08018e0c <rand>:
 8018e0c:	4b16      	ldr	r3, [pc, #88]	; (8018e68 <rand+0x5c>)
 8018e0e:	b510      	push	{r4, lr}
 8018e10:	681c      	ldr	r4, [r3, #0]
 8018e12:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8018e14:	b9b3      	cbnz	r3, 8018e44 <rand+0x38>
 8018e16:	2018      	movs	r0, #24
 8018e18:	f001 fd6e 	bl	801a8f8 <malloc>
 8018e1c:	4602      	mov	r2, r0
 8018e1e:	6320      	str	r0, [r4, #48]	; 0x30
 8018e20:	b920      	cbnz	r0, 8018e2c <rand+0x20>
 8018e22:	4b12      	ldr	r3, [pc, #72]	; (8018e6c <rand+0x60>)
 8018e24:	4812      	ldr	r0, [pc, #72]	; (8018e70 <rand+0x64>)
 8018e26:	2152      	movs	r1, #82	; 0x52
 8018e28:	f000 ff08 	bl	8019c3c <__assert_func>
 8018e2c:	4911      	ldr	r1, [pc, #68]	; (8018e74 <rand+0x68>)
 8018e2e:	4b12      	ldr	r3, [pc, #72]	; (8018e78 <rand+0x6c>)
 8018e30:	e9c0 1300 	strd	r1, r3, [r0]
 8018e34:	4b11      	ldr	r3, [pc, #68]	; (8018e7c <rand+0x70>)
 8018e36:	6083      	str	r3, [r0, #8]
 8018e38:	230b      	movs	r3, #11
 8018e3a:	8183      	strh	r3, [r0, #12]
 8018e3c:	2100      	movs	r1, #0
 8018e3e:	2001      	movs	r0, #1
 8018e40:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8018e44:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8018e46:	480e      	ldr	r0, [pc, #56]	; (8018e80 <rand+0x74>)
 8018e48:	690b      	ldr	r3, [r1, #16]
 8018e4a:	694c      	ldr	r4, [r1, #20]
 8018e4c:	4a0d      	ldr	r2, [pc, #52]	; (8018e84 <rand+0x78>)
 8018e4e:	4358      	muls	r0, r3
 8018e50:	fb02 0004 	mla	r0, r2, r4, r0
 8018e54:	fba3 3202 	umull	r3, r2, r3, r2
 8018e58:	3301      	adds	r3, #1
 8018e5a:	eb40 0002 	adc.w	r0, r0, r2
 8018e5e:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8018e62:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8018e66:	bd10      	pop	{r4, pc}
 8018e68:	200000bc 	.word	0x200000bc
 8018e6c:	0801ec56 	.word	0x0801ec56
 8018e70:	0801ec6d 	.word	0x0801ec6d
 8018e74:	abcd330e 	.word	0xabcd330e
 8018e78:	e66d1234 	.word	0xe66d1234
 8018e7c:	0005deec 	.word	0x0005deec
 8018e80:	5851f42d 	.word	0x5851f42d
 8018e84:	4c957f2d 	.word	0x4c957f2d

08018e88 <__cvt>:
 8018e88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018e8a:	ed2d 8b02 	vpush	{d8}
 8018e8e:	eeb0 8b40 	vmov.f64	d8, d0
 8018e92:	b085      	sub	sp, #20
 8018e94:	4617      	mov	r7, r2
 8018e96:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8018e98:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8018e9a:	ee18 2a90 	vmov	r2, s17
 8018e9e:	f025 0520 	bic.w	r5, r5, #32
 8018ea2:	2a00      	cmp	r2, #0
 8018ea4:	bfb6      	itet	lt
 8018ea6:	222d      	movlt	r2, #45	; 0x2d
 8018ea8:	2200      	movge	r2, #0
 8018eaa:	eeb1 8b40 	vneglt.f64	d8, d0
 8018eae:	2d46      	cmp	r5, #70	; 0x46
 8018eb0:	460c      	mov	r4, r1
 8018eb2:	701a      	strb	r2, [r3, #0]
 8018eb4:	d004      	beq.n	8018ec0 <__cvt+0x38>
 8018eb6:	2d45      	cmp	r5, #69	; 0x45
 8018eb8:	d100      	bne.n	8018ebc <__cvt+0x34>
 8018eba:	3401      	adds	r4, #1
 8018ebc:	2102      	movs	r1, #2
 8018ebe:	e000      	b.n	8018ec2 <__cvt+0x3a>
 8018ec0:	2103      	movs	r1, #3
 8018ec2:	ab03      	add	r3, sp, #12
 8018ec4:	9301      	str	r3, [sp, #4]
 8018ec6:	ab02      	add	r3, sp, #8
 8018ec8:	9300      	str	r3, [sp, #0]
 8018eca:	4622      	mov	r2, r4
 8018ecc:	4633      	mov	r3, r6
 8018ece:	eeb0 0b48 	vmov.f64	d0, d8
 8018ed2:	f000 ff59 	bl	8019d88 <_dtoa_r>
 8018ed6:	2d47      	cmp	r5, #71	; 0x47
 8018ed8:	d101      	bne.n	8018ede <__cvt+0x56>
 8018eda:	07fb      	lsls	r3, r7, #31
 8018edc:	d51a      	bpl.n	8018f14 <__cvt+0x8c>
 8018ede:	2d46      	cmp	r5, #70	; 0x46
 8018ee0:	eb00 0204 	add.w	r2, r0, r4
 8018ee4:	d10c      	bne.n	8018f00 <__cvt+0x78>
 8018ee6:	7803      	ldrb	r3, [r0, #0]
 8018ee8:	2b30      	cmp	r3, #48	; 0x30
 8018eea:	d107      	bne.n	8018efc <__cvt+0x74>
 8018eec:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8018ef0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018ef4:	bf1c      	itt	ne
 8018ef6:	f1c4 0401 	rsbne	r4, r4, #1
 8018efa:	6034      	strne	r4, [r6, #0]
 8018efc:	6833      	ldr	r3, [r6, #0]
 8018efe:	441a      	add	r2, r3
 8018f00:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8018f04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018f08:	bf08      	it	eq
 8018f0a:	9203      	streq	r2, [sp, #12]
 8018f0c:	2130      	movs	r1, #48	; 0x30
 8018f0e:	9b03      	ldr	r3, [sp, #12]
 8018f10:	4293      	cmp	r3, r2
 8018f12:	d307      	bcc.n	8018f24 <__cvt+0x9c>
 8018f14:	9b03      	ldr	r3, [sp, #12]
 8018f16:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8018f18:	1a1b      	subs	r3, r3, r0
 8018f1a:	6013      	str	r3, [r2, #0]
 8018f1c:	b005      	add	sp, #20
 8018f1e:	ecbd 8b02 	vpop	{d8}
 8018f22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018f24:	1c5c      	adds	r4, r3, #1
 8018f26:	9403      	str	r4, [sp, #12]
 8018f28:	7019      	strb	r1, [r3, #0]
 8018f2a:	e7f0      	b.n	8018f0e <__cvt+0x86>

08018f2c <__exponent>:
 8018f2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8018f2e:	4603      	mov	r3, r0
 8018f30:	2900      	cmp	r1, #0
 8018f32:	bfb8      	it	lt
 8018f34:	4249      	neglt	r1, r1
 8018f36:	f803 2b02 	strb.w	r2, [r3], #2
 8018f3a:	bfb4      	ite	lt
 8018f3c:	222d      	movlt	r2, #45	; 0x2d
 8018f3e:	222b      	movge	r2, #43	; 0x2b
 8018f40:	2909      	cmp	r1, #9
 8018f42:	7042      	strb	r2, [r0, #1]
 8018f44:	dd2a      	ble.n	8018f9c <__exponent+0x70>
 8018f46:	f10d 0207 	add.w	r2, sp, #7
 8018f4a:	4617      	mov	r7, r2
 8018f4c:	260a      	movs	r6, #10
 8018f4e:	4694      	mov	ip, r2
 8018f50:	fb91 f5f6 	sdiv	r5, r1, r6
 8018f54:	fb06 1415 	mls	r4, r6, r5, r1
 8018f58:	3430      	adds	r4, #48	; 0x30
 8018f5a:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8018f5e:	460c      	mov	r4, r1
 8018f60:	2c63      	cmp	r4, #99	; 0x63
 8018f62:	f102 32ff 	add.w	r2, r2, #4294967295
 8018f66:	4629      	mov	r1, r5
 8018f68:	dcf1      	bgt.n	8018f4e <__exponent+0x22>
 8018f6a:	3130      	adds	r1, #48	; 0x30
 8018f6c:	f1ac 0402 	sub.w	r4, ip, #2
 8018f70:	f802 1c01 	strb.w	r1, [r2, #-1]
 8018f74:	1c41      	adds	r1, r0, #1
 8018f76:	4622      	mov	r2, r4
 8018f78:	42ba      	cmp	r2, r7
 8018f7a:	d30a      	bcc.n	8018f92 <__exponent+0x66>
 8018f7c:	f10d 0209 	add.w	r2, sp, #9
 8018f80:	eba2 020c 	sub.w	r2, r2, ip
 8018f84:	42bc      	cmp	r4, r7
 8018f86:	bf88      	it	hi
 8018f88:	2200      	movhi	r2, #0
 8018f8a:	4413      	add	r3, r2
 8018f8c:	1a18      	subs	r0, r3, r0
 8018f8e:	b003      	add	sp, #12
 8018f90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018f92:	f812 5b01 	ldrb.w	r5, [r2], #1
 8018f96:	f801 5f01 	strb.w	r5, [r1, #1]!
 8018f9a:	e7ed      	b.n	8018f78 <__exponent+0x4c>
 8018f9c:	2330      	movs	r3, #48	; 0x30
 8018f9e:	3130      	adds	r1, #48	; 0x30
 8018fa0:	7083      	strb	r3, [r0, #2]
 8018fa2:	70c1      	strb	r1, [r0, #3]
 8018fa4:	1d03      	adds	r3, r0, #4
 8018fa6:	e7f1      	b.n	8018f8c <__exponent+0x60>

08018fa8 <_printf_float>:
 8018fa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018fac:	b08b      	sub	sp, #44	; 0x2c
 8018fae:	460c      	mov	r4, r1
 8018fb0:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8018fb4:	4616      	mov	r6, r2
 8018fb6:	461f      	mov	r7, r3
 8018fb8:	4605      	mov	r5, r0
 8018fba:	f000 fdbf 	bl	8019b3c <_localeconv_r>
 8018fbe:	f8d0 b000 	ldr.w	fp, [r0]
 8018fc2:	4658      	mov	r0, fp
 8018fc4:	f7e8 fc8c 	bl	80018e0 <strlen>
 8018fc8:	2300      	movs	r3, #0
 8018fca:	9308      	str	r3, [sp, #32]
 8018fcc:	f8d8 3000 	ldr.w	r3, [r8]
 8018fd0:	f894 9018 	ldrb.w	r9, [r4, #24]
 8018fd4:	6822      	ldr	r2, [r4, #0]
 8018fd6:	3307      	adds	r3, #7
 8018fd8:	f023 0307 	bic.w	r3, r3, #7
 8018fdc:	f103 0108 	add.w	r1, r3, #8
 8018fe0:	f8c8 1000 	str.w	r1, [r8]
 8018fe4:	ed93 0b00 	vldr	d0, [r3]
 8018fe8:	ed9f 6b97 	vldr	d6, [pc, #604]	; 8019248 <_printf_float+0x2a0>
 8018fec:	eeb0 7bc0 	vabs.f64	d7, d0
 8018ff0:	eeb4 7b46 	vcmp.f64	d7, d6
 8018ff4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018ff8:	ed84 0b12 	vstr	d0, [r4, #72]	; 0x48
 8018ffc:	4682      	mov	sl, r0
 8018ffe:	dd24      	ble.n	801904a <_printf_float+0xa2>
 8019000:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8019004:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019008:	d502      	bpl.n	8019010 <_printf_float+0x68>
 801900a:	232d      	movs	r3, #45	; 0x2d
 801900c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8019010:	498f      	ldr	r1, [pc, #572]	; (8019250 <_printf_float+0x2a8>)
 8019012:	4b90      	ldr	r3, [pc, #576]	; (8019254 <_printf_float+0x2ac>)
 8019014:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8019018:	bf94      	ite	ls
 801901a:	4688      	movls	r8, r1
 801901c:	4698      	movhi	r8, r3
 801901e:	2303      	movs	r3, #3
 8019020:	6123      	str	r3, [r4, #16]
 8019022:	f022 0204 	bic.w	r2, r2, #4
 8019026:	2300      	movs	r3, #0
 8019028:	6022      	str	r2, [r4, #0]
 801902a:	9304      	str	r3, [sp, #16]
 801902c:	9700      	str	r7, [sp, #0]
 801902e:	4633      	mov	r3, r6
 8019030:	aa09      	add	r2, sp, #36	; 0x24
 8019032:	4621      	mov	r1, r4
 8019034:	4628      	mov	r0, r5
 8019036:	f000 f9d1 	bl	80193dc <_printf_common>
 801903a:	3001      	adds	r0, #1
 801903c:	f040 808a 	bne.w	8019154 <_printf_float+0x1ac>
 8019040:	f04f 30ff 	mov.w	r0, #4294967295
 8019044:	b00b      	add	sp, #44	; 0x2c
 8019046:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801904a:	eeb4 0b40 	vcmp.f64	d0, d0
 801904e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019052:	d709      	bvc.n	8019068 <_printf_float+0xc0>
 8019054:	ee10 3a90 	vmov	r3, s1
 8019058:	2b00      	cmp	r3, #0
 801905a:	bfbc      	itt	lt
 801905c:	232d      	movlt	r3, #45	; 0x2d
 801905e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8019062:	497d      	ldr	r1, [pc, #500]	; (8019258 <_printf_float+0x2b0>)
 8019064:	4b7d      	ldr	r3, [pc, #500]	; (801925c <_printf_float+0x2b4>)
 8019066:	e7d5      	b.n	8019014 <_printf_float+0x6c>
 8019068:	6863      	ldr	r3, [r4, #4]
 801906a:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 801906e:	9104      	str	r1, [sp, #16]
 8019070:	1c59      	adds	r1, r3, #1
 8019072:	d13c      	bne.n	80190ee <_printf_float+0x146>
 8019074:	2306      	movs	r3, #6
 8019076:	6063      	str	r3, [r4, #4]
 8019078:	2300      	movs	r3, #0
 801907a:	9303      	str	r3, [sp, #12]
 801907c:	ab08      	add	r3, sp, #32
 801907e:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8019082:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8019086:	ab07      	add	r3, sp, #28
 8019088:	6861      	ldr	r1, [r4, #4]
 801908a:	9300      	str	r3, [sp, #0]
 801908c:	6022      	str	r2, [r4, #0]
 801908e:	f10d 031b 	add.w	r3, sp, #27
 8019092:	4628      	mov	r0, r5
 8019094:	f7ff fef8 	bl	8018e88 <__cvt>
 8019098:	9b04      	ldr	r3, [sp, #16]
 801909a:	9907      	ldr	r1, [sp, #28]
 801909c:	2b47      	cmp	r3, #71	; 0x47
 801909e:	4680      	mov	r8, r0
 80190a0:	d108      	bne.n	80190b4 <_printf_float+0x10c>
 80190a2:	1cc8      	adds	r0, r1, #3
 80190a4:	db02      	blt.n	80190ac <_printf_float+0x104>
 80190a6:	6863      	ldr	r3, [r4, #4]
 80190a8:	4299      	cmp	r1, r3
 80190aa:	dd41      	ble.n	8019130 <_printf_float+0x188>
 80190ac:	f1a9 0902 	sub.w	r9, r9, #2
 80190b0:	fa5f f989 	uxtb.w	r9, r9
 80190b4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80190b8:	d820      	bhi.n	80190fc <_printf_float+0x154>
 80190ba:	3901      	subs	r1, #1
 80190bc:	464a      	mov	r2, r9
 80190be:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80190c2:	9107      	str	r1, [sp, #28]
 80190c4:	f7ff ff32 	bl	8018f2c <__exponent>
 80190c8:	9a08      	ldr	r2, [sp, #32]
 80190ca:	9004      	str	r0, [sp, #16]
 80190cc:	1813      	adds	r3, r2, r0
 80190ce:	2a01      	cmp	r2, #1
 80190d0:	6123      	str	r3, [r4, #16]
 80190d2:	dc02      	bgt.n	80190da <_printf_float+0x132>
 80190d4:	6822      	ldr	r2, [r4, #0]
 80190d6:	07d2      	lsls	r2, r2, #31
 80190d8:	d501      	bpl.n	80190de <_printf_float+0x136>
 80190da:	3301      	adds	r3, #1
 80190dc:	6123      	str	r3, [r4, #16]
 80190de:	f89d 301b 	ldrb.w	r3, [sp, #27]
 80190e2:	2b00      	cmp	r3, #0
 80190e4:	d0a2      	beq.n	801902c <_printf_float+0x84>
 80190e6:	232d      	movs	r3, #45	; 0x2d
 80190e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80190ec:	e79e      	b.n	801902c <_printf_float+0x84>
 80190ee:	9904      	ldr	r1, [sp, #16]
 80190f0:	2947      	cmp	r1, #71	; 0x47
 80190f2:	d1c1      	bne.n	8019078 <_printf_float+0xd0>
 80190f4:	2b00      	cmp	r3, #0
 80190f6:	d1bf      	bne.n	8019078 <_printf_float+0xd0>
 80190f8:	2301      	movs	r3, #1
 80190fa:	e7bc      	b.n	8019076 <_printf_float+0xce>
 80190fc:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8019100:	d118      	bne.n	8019134 <_printf_float+0x18c>
 8019102:	2900      	cmp	r1, #0
 8019104:	6863      	ldr	r3, [r4, #4]
 8019106:	dd0b      	ble.n	8019120 <_printf_float+0x178>
 8019108:	6121      	str	r1, [r4, #16]
 801910a:	b913      	cbnz	r3, 8019112 <_printf_float+0x16a>
 801910c:	6822      	ldr	r2, [r4, #0]
 801910e:	07d0      	lsls	r0, r2, #31
 8019110:	d502      	bpl.n	8019118 <_printf_float+0x170>
 8019112:	3301      	adds	r3, #1
 8019114:	440b      	add	r3, r1
 8019116:	6123      	str	r3, [r4, #16]
 8019118:	2300      	movs	r3, #0
 801911a:	65a1      	str	r1, [r4, #88]	; 0x58
 801911c:	9304      	str	r3, [sp, #16]
 801911e:	e7de      	b.n	80190de <_printf_float+0x136>
 8019120:	b913      	cbnz	r3, 8019128 <_printf_float+0x180>
 8019122:	6822      	ldr	r2, [r4, #0]
 8019124:	07d2      	lsls	r2, r2, #31
 8019126:	d501      	bpl.n	801912c <_printf_float+0x184>
 8019128:	3302      	adds	r3, #2
 801912a:	e7f4      	b.n	8019116 <_printf_float+0x16e>
 801912c:	2301      	movs	r3, #1
 801912e:	e7f2      	b.n	8019116 <_printf_float+0x16e>
 8019130:	f04f 0967 	mov.w	r9, #103	; 0x67
 8019134:	9b08      	ldr	r3, [sp, #32]
 8019136:	4299      	cmp	r1, r3
 8019138:	db05      	blt.n	8019146 <_printf_float+0x19e>
 801913a:	6823      	ldr	r3, [r4, #0]
 801913c:	6121      	str	r1, [r4, #16]
 801913e:	07d8      	lsls	r0, r3, #31
 8019140:	d5ea      	bpl.n	8019118 <_printf_float+0x170>
 8019142:	1c4b      	adds	r3, r1, #1
 8019144:	e7e7      	b.n	8019116 <_printf_float+0x16e>
 8019146:	2900      	cmp	r1, #0
 8019148:	bfd4      	ite	le
 801914a:	f1c1 0202 	rsble	r2, r1, #2
 801914e:	2201      	movgt	r2, #1
 8019150:	4413      	add	r3, r2
 8019152:	e7e0      	b.n	8019116 <_printf_float+0x16e>
 8019154:	6823      	ldr	r3, [r4, #0]
 8019156:	055a      	lsls	r2, r3, #21
 8019158:	d407      	bmi.n	801916a <_printf_float+0x1c2>
 801915a:	6923      	ldr	r3, [r4, #16]
 801915c:	4642      	mov	r2, r8
 801915e:	4631      	mov	r1, r6
 8019160:	4628      	mov	r0, r5
 8019162:	47b8      	blx	r7
 8019164:	3001      	adds	r0, #1
 8019166:	d12a      	bne.n	80191be <_printf_float+0x216>
 8019168:	e76a      	b.n	8019040 <_printf_float+0x98>
 801916a:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 801916e:	f240 80e0 	bls.w	8019332 <_printf_float+0x38a>
 8019172:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8019176:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801917a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801917e:	d133      	bne.n	80191e8 <_printf_float+0x240>
 8019180:	4a37      	ldr	r2, [pc, #220]	; (8019260 <_printf_float+0x2b8>)
 8019182:	2301      	movs	r3, #1
 8019184:	4631      	mov	r1, r6
 8019186:	4628      	mov	r0, r5
 8019188:	47b8      	blx	r7
 801918a:	3001      	adds	r0, #1
 801918c:	f43f af58 	beq.w	8019040 <_printf_float+0x98>
 8019190:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8019194:	429a      	cmp	r2, r3
 8019196:	db02      	blt.n	801919e <_printf_float+0x1f6>
 8019198:	6823      	ldr	r3, [r4, #0]
 801919a:	07d8      	lsls	r0, r3, #31
 801919c:	d50f      	bpl.n	80191be <_printf_float+0x216>
 801919e:	4653      	mov	r3, sl
 80191a0:	465a      	mov	r2, fp
 80191a2:	4631      	mov	r1, r6
 80191a4:	4628      	mov	r0, r5
 80191a6:	47b8      	blx	r7
 80191a8:	3001      	adds	r0, #1
 80191aa:	f43f af49 	beq.w	8019040 <_printf_float+0x98>
 80191ae:	f04f 0800 	mov.w	r8, #0
 80191b2:	f104 091a 	add.w	r9, r4, #26
 80191b6:	9b08      	ldr	r3, [sp, #32]
 80191b8:	3b01      	subs	r3, #1
 80191ba:	4543      	cmp	r3, r8
 80191bc:	dc09      	bgt.n	80191d2 <_printf_float+0x22a>
 80191be:	6823      	ldr	r3, [r4, #0]
 80191c0:	079b      	lsls	r3, r3, #30
 80191c2:	f100 8106 	bmi.w	80193d2 <_printf_float+0x42a>
 80191c6:	68e0      	ldr	r0, [r4, #12]
 80191c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80191ca:	4298      	cmp	r0, r3
 80191cc:	bfb8      	it	lt
 80191ce:	4618      	movlt	r0, r3
 80191d0:	e738      	b.n	8019044 <_printf_float+0x9c>
 80191d2:	2301      	movs	r3, #1
 80191d4:	464a      	mov	r2, r9
 80191d6:	4631      	mov	r1, r6
 80191d8:	4628      	mov	r0, r5
 80191da:	47b8      	blx	r7
 80191dc:	3001      	adds	r0, #1
 80191de:	f43f af2f 	beq.w	8019040 <_printf_float+0x98>
 80191e2:	f108 0801 	add.w	r8, r8, #1
 80191e6:	e7e6      	b.n	80191b6 <_printf_float+0x20e>
 80191e8:	9b07      	ldr	r3, [sp, #28]
 80191ea:	2b00      	cmp	r3, #0
 80191ec:	dc3a      	bgt.n	8019264 <_printf_float+0x2bc>
 80191ee:	4a1c      	ldr	r2, [pc, #112]	; (8019260 <_printf_float+0x2b8>)
 80191f0:	2301      	movs	r3, #1
 80191f2:	4631      	mov	r1, r6
 80191f4:	4628      	mov	r0, r5
 80191f6:	47b8      	blx	r7
 80191f8:	3001      	adds	r0, #1
 80191fa:	f43f af21 	beq.w	8019040 <_printf_float+0x98>
 80191fe:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 8019202:	4313      	orrs	r3, r2
 8019204:	d102      	bne.n	801920c <_printf_float+0x264>
 8019206:	6823      	ldr	r3, [r4, #0]
 8019208:	07d9      	lsls	r1, r3, #31
 801920a:	d5d8      	bpl.n	80191be <_printf_float+0x216>
 801920c:	4653      	mov	r3, sl
 801920e:	465a      	mov	r2, fp
 8019210:	4631      	mov	r1, r6
 8019212:	4628      	mov	r0, r5
 8019214:	47b8      	blx	r7
 8019216:	3001      	adds	r0, #1
 8019218:	f43f af12 	beq.w	8019040 <_printf_float+0x98>
 801921c:	f04f 0900 	mov.w	r9, #0
 8019220:	f104 0a1a 	add.w	sl, r4, #26
 8019224:	9b07      	ldr	r3, [sp, #28]
 8019226:	425b      	negs	r3, r3
 8019228:	454b      	cmp	r3, r9
 801922a:	dc01      	bgt.n	8019230 <_printf_float+0x288>
 801922c:	9b08      	ldr	r3, [sp, #32]
 801922e:	e795      	b.n	801915c <_printf_float+0x1b4>
 8019230:	2301      	movs	r3, #1
 8019232:	4652      	mov	r2, sl
 8019234:	4631      	mov	r1, r6
 8019236:	4628      	mov	r0, r5
 8019238:	47b8      	blx	r7
 801923a:	3001      	adds	r0, #1
 801923c:	f43f af00 	beq.w	8019040 <_printf_float+0x98>
 8019240:	f109 0901 	add.w	r9, r9, #1
 8019244:	e7ee      	b.n	8019224 <_printf_float+0x27c>
 8019246:	bf00      	nop
 8019248:	ffffffff 	.word	0xffffffff
 801924c:	7fefffff 	.word	0x7fefffff
 8019250:	0801edc6 	.word	0x0801edc6
 8019254:	0801edca 	.word	0x0801edca
 8019258:	0801edce 	.word	0x0801edce
 801925c:	0801edd2 	.word	0x0801edd2
 8019260:	0801edd6 	.word	0x0801edd6
 8019264:	9a08      	ldr	r2, [sp, #32]
 8019266:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8019268:	429a      	cmp	r2, r3
 801926a:	bfa8      	it	ge
 801926c:	461a      	movge	r2, r3
 801926e:	2a00      	cmp	r2, #0
 8019270:	4691      	mov	r9, r2
 8019272:	dc38      	bgt.n	80192e6 <_printf_float+0x33e>
 8019274:	2300      	movs	r3, #0
 8019276:	9305      	str	r3, [sp, #20]
 8019278:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801927c:	f104 021a 	add.w	r2, r4, #26
 8019280:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8019282:	9905      	ldr	r1, [sp, #20]
 8019284:	9304      	str	r3, [sp, #16]
 8019286:	eba3 0309 	sub.w	r3, r3, r9
 801928a:	428b      	cmp	r3, r1
 801928c:	dc33      	bgt.n	80192f6 <_printf_float+0x34e>
 801928e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8019292:	429a      	cmp	r2, r3
 8019294:	db3c      	blt.n	8019310 <_printf_float+0x368>
 8019296:	6823      	ldr	r3, [r4, #0]
 8019298:	07da      	lsls	r2, r3, #31
 801929a:	d439      	bmi.n	8019310 <_printf_float+0x368>
 801929c:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 80192a0:	eba2 0903 	sub.w	r9, r2, r3
 80192a4:	9b04      	ldr	r3, [sp, #16]
 80192a6:	1ad2      	subs	r2, r2, r3
 80192a8:	4591      	cmp	r9, r2
 80192aa:	bfa8      	it	ge
 80192ac:	4691      	movge	r9, r2
 80192ae:	f1b9 0f00 	cmp.w	r9, #0
 80192b2:	dc35      	bgt.n	8019320 <_printf_float+0x378>
 80192b4:	f04f 0800 	mov.w	r8, #0
 80192b8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80192bc:	f104 0a1a 	add.w	sl, r4, #26
 80192c0:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80192c4:	1a9b      	subs	r3, r3, r2
 80192c6:	eba3 0309 	sub.w	r3, r3, r9
 80192ca:	4543      	cmp	r3, r8
 80192cc:	f77f af77 	ble.w	80191be <_printf_float+0x216>
 80192d0:	2301      	movs	r3, #1
 80192d2:	4652      	mov	r2, sl
 80192d4:	4631      	mov	r1, r6
 80192d6:	4628      	mov	r0, r5
 80192d8:	47b8      	blx	r7
 80192da:	3001      	adds	r0, #1
 80192dc:	f43f aeb0 	beq.w	8019040 <_printf_float+0x98>
 80192e0:	f108 0801 	add.w	r8, r8, #1
 80192e4:	e7ec      	b.n	80192c0 <_printf_float+0x318>
 80192e6:	4613      	mov	r3, r2
 80192e8:	4631      	mov	r1, r6
 80192ea:	4642      	mov	r2, r8
 80192ec:	4628      	mov	r0, r5
 80192ee:	47b8      	blx	r7
 80192f0:	3001      	adds	r0, #1
 80192f2:	d1bf      	bne.n	8019274 <_printf_float+0x2cc>
 80192f4:	e6a4      	b.n	8019040 <_printf_float+0x98>
 80192f6:	2301      	movs	r3, #1
 80192f8:	4631      	mov	r1, r6
 80192fa:	4628      	mov	r0, r5
 80192fc:	9204      	str	r2, [sp, #16]
 80192fe:	47b8      	blx	r7
 8019300:	3001      	adds	r0, #1
 8019302:	f43f ae9d 	beq.w	8019040 <_printf_float+0x98>
 8019306:	9b05      	ldr	r3, [sp, #20]
 8019308:	9a04      	ldr	r2, [sp, #16]
 801930a:	3301      	adds	r3, #1
 801930c:	9305      	str	r3, [sp, #20]
 801930e:	e7b7      	b.n	8019280 <_printf_float+0x2d8>
 8019310:	4653      	mov	r3, sl
 8019312:	465a      	mov	r2, fp
 8019314:	4631      	mov	r1, r6
 8019316:	4628      	mov	r0, r5
 8019318:	47b8      	blx	r7
 801931a:	3001      	adds	r0, #1
 801931c:	d1be      	bne.n	801929c <_printf_float+0x2f4>
 801931e:	e68f      	b.n	8019040 <_printf_float+0x98>
 8019320:	9a04      	ldr	r2, [sp, #16]
 8019322:	464b      	mov	r3, r9
 8019324:	4442      	add	r2, r8
 8019326:	4631      	mov	r1, r6
 8019328:	4628      	mov	r0, r5
 801932a:	47b8      	blx	r7
 801932c:	3001      	adds	r0, #1
 801932e:	d1c1      	bne.n	80192b4 <_printf_float+0x30c>
 8019330:	e686      	b.n	8019040 <_printf_float+0x98>
 8019332:	9a08      	ldr	r2, [sp, #32]
 8019334:	2a01      	cmp	r2, #1
 8019336:	dc01      	bgt.n	801933c <_printf_float+0x394>
 8019338:	07db      	lsls	r3, r3, #31
 801933a:	d537      	bpl.n	80193ac <_printf_float+0x404>
 801933c:	2301      	movs	r3, #1
 801933e:	4642      	mov	r2, r8
 8019340:	4631      	mov	r1, r6
 8019342:	4628      	mov	r0, r5
 8019344:	47b8      	blx	r7
 8019346:	3001      	adds	r0, #1
 8019348:	f43f ae7a 	beq.w	8019040 <_printf_float+0x98>
 801934c:	4653      	mov	r3, sl
 801934e:	465a      	mov	r2, fp
 8019350:	4631      	mov	r1, r6
 8019352:	4628      	mov	r0, r5
 8019354:	47b8      	blx	r7
 8019356:	3001      	adds	r0, #1
 8019358:	f43f ae72 	beq.w	8019040 <_printf_float+0x98>
 801935c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8019360:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8019364:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019368:	9b08      	ldr	r3, [sp, #32]
 801936a:	d01a      	beq.n	80193a2 <_printf_float+0x3fa>
 801936c:	3b01      	subs	r3, #1
 801936e:	f108 0201 	add.w	r2, r8, #1
 8019372:	4631      	mov	r1, r6
 8019374:	4628      	mov	r0, r5
 8019376:	47b8      	blx	r7
 8019378:	3001      	adds	r0, #1
 801937a:	d10e      	bne.n	801939a <_printf_float+0x3f2>
 801937c:	e660      	b.n	8019040 <_printf_float+0x98>
 801937e:	2301      	movs	r3, #1
 8019380:	464a      	mov	r2, r9
 8019382:	4631      	mov	r1, r6
 8019384:	4628      	mov	r0, r5
 8019386:	47b8      	blx	r7
 8019388:	3001      	adds	r0, #1
 801938a:	f43f ae59 	beq.w	8019040 <_printf_float+0x98>
 801938e:	f108 0801 	add.w	r8, r8, #1
 8019392:	9b08      	ldr	r3, [sp, #32]
 8019394:	3b01      	subs	r3, #1
 8019396:	4543      	cmp	r3, r8
 8019398:	dcf1      	bgt.n	801937e <_printf_float+0x3d6>
 801939a:	9b04      	ldr	r3, [sp, #16]
 801939c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80193a0:	e6dd      	b.n	801915e <_printf_float+0x1b6>
 80193a2:	f04f 0800 	mov.w	r8, #0
 80193a6:	f104 091a 	add.w	r9, r4, #26
 80193aa:	e7f2      	b.n	8019392 <_printf_float+0x3ea>
 80193ac:	2301      	movs	r3, #1
 80193ae:	4642      	mov	r2, r8
 80193b0:	e7df      	b.n	8019372 <_printf_float+0x3ca>
 80193b2:	2301      	movs	r3, #1
 80193b4:	464a      	mov	r2, r9
 80193b6:	4631      	mov	r1, r6
 80193b8:	4628      	mov	r0, r5
 80193ba:	47b8      	blx	r7
 80193bc:	3001      	adds	r0, #1
 80193be:	f43f ae3f 	beq.w	8019040 <_printf_float+0x98>
 80193c2:	f108 0801 	add.w	r8, r8, #1
 80193c6:	68e3      	ldr	r3, [r4, #12]
 80193c8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80193ca:	1a5b      	subs	r3, r3, r1
 80193cc:	4543      	cmp	r3, r8
 80193ce:	dcf0      	bgt.n	80193b2 <_printf_float+0x40a>
 80193d0:	e6f9      	b.n	80191c6 <_printf_float+0x21e>
 80193d2:	f04f 0800 	mov.w	r8, #0
 80193d6:	f104 0919 	add.w	r9, r4, #25
 80193da:	e7f4      	b.n	80193c6 <_printf_float+0x41e>

080193dc <_printf_common>:
 80193dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80193e0:	4616      	mov	r6, r2
 80193e2:	4699      	mov	r9, r3
 80193e4:	688a      	ldr	r2, [r1, #8]
 80193e6:	690b      	ldr	r3, [r1, #16]
 80193e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80193ec:	4293      	cmp	r3, r2
 80193ee:	bfb8      	it	lt
 80193f0:	4613      	movlt	r3, r2
 80193f2:	6033      	str	r3, [r6, #0]
 80193f4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80193f8:	4607      	mov	r7, r0
 80193fa:	460c      	mov	r4, r1
 80193fc:	b10a      	cbz	r2, 8019402 <_printf_common+0x26>
 80193fe:	3301      	adds	r3, #1
 8019400:	6033      	str	r3, [r6, #0]
 8019402:	6823      	ldr	r3, [r4, #0]
 8019404:	0699      	lsls	r1, r3, #26
 8019406:	bf42      	ittt	mi
 8019408:	6833      	ldrmi	r3, [r6, #0]
 801940a:	3302      	addmi	r3, #2
 801940c:	6033      	strmi	r3, [r6, #0]
 801940e:	6825      	ldr	r5, [r4, #0]
 8019410:	f015 0506 	ands.w	r5, r5, #6
 8019414:	d106      	bne.n	8019424 <_printf_common+0x48>
 8019416:	f104 0a19 	add.w	sl, r4, #25
 801941a:	68e3      	ldr	r3, [r4, #12]
 801941c:	6832      	ldr	r2, [r6, #0]
 801941e:	1a9b      	subs	r3, r3, r2
 8019420:	42ab      	cmp	r3, r5
 8019422:	dc26      	bgt.n	8019472 <_printf_common+0x96>
 8019424:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8019428:	1e13      	subs	r3, r2, #0
 801942a:	6822      	ldr	r2, [r4, #0]
 801942c:	bf18      	it	ne
 801942e:	2301      	movne	r3, #1
 8019430:	0692      	lsls	r2, r2, #26
 8019432:	d42b      	bmi.n	801948c <_printf_common+0xb0>
 8019434:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8019438:	4649      	mov	r1, r9
 801943a:	4638      	mov	r0, r7
 801943c:	47c0      	blx	r8
 801943e:	3001      	adds	r0, #1
 8019440:	d01e      	beq.n	8019480 <_printf_common+0xa4>
 8019442:	6823      	ldr	r3, [r4, #0]
 8019444:	6922      	ldr	r2, [r4, #16]
 8019446:	f003 0306 	and.w	r3, r3, #6
 801944a:	2b04      	cmp	r3, #4
 801944c:	bf02      	ittt	eq
 801944e:	68e5      	ldreq	r5, [r4, #12]
 8019450:	6833      	ldreq	r3, [r6, #0]
 8019452:	1aed      	subeq	r5, r5, r3
 8019454:	68a3      	ldr	r3, [r4, #8]
 8019456:	bf0c      	ite	eq
 8019458:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801945c:	2500      	movne	r5, #0
 801945e:	4293      	cmp	r3, r2
 8019460:	bfc4      	itt	gt
 8019462:	1a9b      	subgt	r3, r3, r2
 8019464:	18ed      	addgt	r5, r5, r3
 8019466:	2600      	movs	r6, #0
 8019468:	341a      	adds	r4, #26
 801946a:	42b5      	cmp	r5, r6
 801946c:	d11a      	bne.n	80194a4 <_printf_common+0xc8>
 801946e:	2000      	movs	r0, #0
 8019470:	e008      	b.n	8019484 <_printf_common+0xa8>
 8019472:	2301      	movs	r3, #1
 8019474:	4652      	mov	r2, sl
 8019476:	4649      	mov	r1, r9
 8019478:	4638      	mov	r0, r7
 801947a:	47c0      	blx	r8
 801947c:	3001      	adds	r0, #1
 801947e:	d103      	bne.n	8019488 <_printf_common+0xac>
 8019480:	f04f 30ff 	mov.w	r0, #4294967295
 8019484:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019488:	3501      	adds	r5, #1
 801948a:	e7c6      	b.n	801941a <_printf_common+0x3e>
 801948c:	18e1      	adds	r1, r4, r3
 801948e:	1c5a      	adds	r2, r3, #1
 8019490:	2030      	movs	r0, #48	; 0x30
 8019492:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8019496:	4422      	add	r2, r4
 8019498:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801949c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80194a0:	3302      	adds	r3, #2
 80194a2:	e7c7      	b.n	8019434 <_printf_common+0x58>
 80194a4:	2301      	movs	r3, #1
 80194a6:	4622      	mov	r2, r4
 80194a8:	4649      	mov	r1, r9
 80194aa:	4638      	mov	r0, r7
 80194ac:	47c0      	blx	r8
 80194ae:	3001      	adds	r0, #1
 80194b0:	d0e6      	beq.n	8019480 <_printf_common+0xa4>
 80194b2:	3601      	adds	r6, #1
 80194b4:	e7d9      	b.n	801946a <_printf_common+0x8e>
	...

080194b8 <_printf_i>:
 80194b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80194bc:	7e0f      	ldrb	r7, [r1, #24]
 80194be:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80194c0:	2f78      	cmp	r7, #120	; 0x78
 80194c2:	4691      	mov	r9, r2
 80194c4:	4680      	mov	r8, r0
 80194c6:	460c      	mov	r4, r1
 80194c8:	469a      	mov	sl, r3
 80194ca:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80194ce:	d807      	bhi.n	80194e0 <_printf_i+0x28>
 80194d0:	2f62      	cmp	r7, #98	; 0x62
 80194d2:	d80a      	bhi.n	80194ea <_printf_i+0x32>
 80194d4:	2f00      	cmp	r7, #0
 80194d6:	f000 80d4 	beq.w	8019682 <_printf_i+0x1ca>
 80194da:	2f58      	cmp	r7, #88	; 0x58
 80194dc:	f000 80c0 	beq.w	8019660 <_printf_i+0x1a8>
 80194e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80194e4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80194e8:	e03a      	b.n	8019560 <_printf_i+0xa8>
 80194ea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80194ee:	2b15      	cmp	r3, #21
 80194f0:	d8f6      	bhi.n	80194e0 <_printf_i+0x28>
 80194f2:	a101      	add	r1, pc, #4	; (adr r1, 80194f8 <_printf_i+0x40>)
 80194f4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80194f8:	08019551 	.word	0x08019551
 80194fc:	08019565 	.word	0x08019565
 8019500:	080194e1 	.word	0x080194e1
 8019504:	080194e1 	.word	0x080194e1
 8019508:	080194e1 	.word	0x080194e1
 801950c:	080194e1 	.word	0x080194e1
 8019510:	08019565 	.word	0x08019565
 8019514:	080194e1 	.word	0x080194e1
 8019518:	080194e1 	.word	0x080194e1
 801951c:	080194e1 	.word	0x080194e1
 8019520:	080194e1 	.word	0x080194e1
 8019524:	08019669 	.word	0x08019669
 8019528:	08019591 	.word	0x08019591
 801952c:	08019623 	.word	0x08019623
 8019530:	080194e1 	.word	0x080194e1
 8019534:	080194e1 	.word	0x080194e1
 8019538:	0801968b 	.word	0x0801968b
 801953c:	080194e1 	.word	0x080194e1
 8019540:	08019591 	.word	0x08019591
 8019544:	080194e1 	.word	0x080194e1
 8019548:	080194e1 	.word	0x080194e1
 801954c:	0801962b 	.word	0x0801962b
 8019550:	682b      	ldr	r3, [r5, #0]
 8019552:	1d1a      	adds	r2, r3, #4
 8019554:	681b      	ldr	r3, [r3, #0]
 8019556:	602a      	str	r2, [r5, #0]
 8019558:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801955c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8019560:	2301      	movs	r3, #1
 8019562:	e09f      	b.n	80196a4 <_printf_i+0x1ec>
 8019564:	6820      	ldr	r0, [r4, #0]
 8019566:	682b      	ldr	r3, [r5, #0]
 8019568:	0607      	lsls	r7, r0, #24
 801956a:	f103 0104 	add.w	r1, r3, #4
 801956e:	6029      	str	r1, [r5, #0]
 8019570:	d501      	bpl.n	8019576 <_printf_i+0xbe>
 8019572:	681e      	ldr	r6, [r3, #0]
 8019574:	e003      	b.n	801957e <_printf_i+0xc6>
 8019576:	0646      	lsls	r6, r0, #25
 8019578:	d5fb      	bpl.n	8019572 <_printf_i+0xba>
 801957a:	f9b3 6000 	ldrsh.w	r6, [r3]
 801957e:	2e00      	cmp	r6, #0
 8019580:	da03      	bge.n	801958a <_printf_i+0xd2>
 8019582:	232d      	movs	r3, #45	; 0x2d
 8019584:	4276      	negs	r6, r6
 8019586:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801958a:	485a      	ldr	r0, [pc, #360]	; (80196f4 <_printf_i+0x23c>)
 801958c:	230a      	movs	r3, #10
 801958e:	e012      	b.n	80195b6 <_printf_i+0xfe>
 8019590:	682b      	ldr	r3, [r5, #0]
 8019592:	6820      	ldr	r0, [r4, #0]
 8019594:	1d19      	adds	r1, r3, #4
 8019596:	6029      	str	r1, [r5, #0]
 8019598:	0605      	lsls	r5, r0, #24
 801959a:	d501      	bpl.n	80195a0 <_printf_i+0xe8>
 801959c:	681e      	ldr	r6, [r3, #0]
 801959e:	e002      	b.n	80195a6 <_printf_i+0xee>
 80195a0:	0641      	lsls	r1, r0, #25
 80195a2:	d5fb      	bpl.n	801959c <_printf_i+0xe4>
 80195a4:	881e      	ldrh	r6, [r3, #0]
 80195a6:	4853      	ldr	r0, [pc, #332]	; (80196f4 <_printf_i+0x23c>)
 80195a8:	2f6f      	cmp	r7, #111	; 0x6f
 80195aa:	bf0c      	ite	eq
 80195ac:	2308      	moveq	r3, #8
 80195ae:	230a      	movne	r3, #10
 80195b0:	2100      	movs	r1, #0
 80195b2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80195b6:	6865      	ldr	r5, [r4, #4]
 80195b8:	60a5      	str	r5, [r4, #8]
 80195ba:	2d00      	cmp	r5, #0
 80195bc:	bfa2      	ittt	ge
 80195be:	6821      	ldrge	r1, [r4, #0]
 80195c0:	f021 0104 	bicge.w	r1, r1, #4
 80195c4:	6021      	strge	r1, [r4, #0]
 80195c6:	b90e      	cbnz	r6, 80195cc <_printf_i+0x114>
 80195c8:	2d00      	cmp	r5, #0
 80195ca:	d04b      	beq.n	8019664 <_printf_i+0x1ac>
 80195cc:	4615      	mov	r5, r2
 80195ce:	fbb6 f1f3 	udiv	r1, r6, r3
 80195d2:	fb03 6711 	mls	r7, r3, r1, r6
 80195d6:	5dc7      	ldrb	r7, [r0, r7]
 80195d8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80195dc:	4637      	mov	r7, r6
 80195de:	42bb      	cmp	r3, r7
 80195e0:	460e      	mov	r6, r1
 80195e2:	d9f4      	bls.n	80195ce <_printf_i+0x116>
 80195e4:	2b08      	cmp	r3, #8
 80195e6:	d10b      	bne.n	8019600 <_printf_i+0x148>
 80195e8:	6823      	ldr	r3, [r4, #0]
 80195ea:	07de      	lsls	r6, r3, #31
 80195ec:	d508      	bpl.n	8019600 <_printf_i+0x148>
 80195ee:	6923      	ldr	r3, [r4, #16]
 80195f0:	6861      	ldr	r1, [r4, #4]
 80195f2:	4299      	cmp	r1, r3
 80195f4:	bfde      	ittt	le
 80195f6:	2330      	movle	r3, #48	; 0x30
 80195f8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80195fc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8019600:	1b52      	subs	r2, r2, r5
 8019602:	6122      	str	r2, [r4, #16]
 8019604:	f8cd a000 	str.w	sl, [sp]
 8019608:	464b      	mov	r3, r9
 801960a:	aa03      	add	r2, sp, #12
 801960c:	4621      	mov	r1, r4
 801960e:	4640      	mov	r0, r8
 8019610:	f7ff fee4 	bl	80193dc <_printf_common>
 8019614:	3001      	adds	r0, #1
 8019616:	d14a      	bne.n	80196ae <_printf_i+0x1f6>
 8019618:	f04f 30ff 	mov.w	r0, #4294967295
 801961c:	b004      	add	sp, #16
 801961e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019622:	6823      	ldr	r3, [r4, #0]
 8019624:	f043 0320 	orr.w	r3, r3, #32
 8019628:	6023      	str	r3, [r4, #0]
 801962a:	4833      	ldr	r0, [pc, #204]	; (80196f8 <_printf_i+0x240>)
 801962c:	2778      	movs	r7, #120	; 0x78
 801962e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8019632:	6823      	ldr	r3, [r4, #0]
 8019634:	6829      	ldr	r1, [r5, #0]
 8019636:	061f      	lsls	r7, r3, #24
 8019638:	f851 6b04 	ldr.w	r6, [r1], #4
 801963c:	d402      	bmi.n	8019644 <_printf_i+0x18c>
 801963e:	065f      	lsls	r7, r3, #25
 8019640:	bf48      	it	mi
 8019642:	b2b6      	uxthmi	r6, r6
 8019644:	07df      	lsls	r7, r3, #31
 8019646:	bf48      	it	mi
 8019648:	f043 0320 	orrmi.w	r3, r3, #32
 801964c:	6029      	str	r1, [r5, #0]
 801964e:	bf48      	it	mi
 8019650:	6023      	strmi	r3, [r4, #0]
 8019652:	b91e      	cbnz	r6, 801965c <_printf_i+0x1a4>
 8019654:	6823      	ldr	r3, [r4, #0]
 8019656:	f023 0320 	bic.w	r3, r3, #32
 801965a:	6023      	str	r3, [r4, #0]
 801965c:	2310      	movs	r3, #16
 801965e:	e7a7      	b.n	80195b0 <_printf_i+0xf8>
 8019660:	4824      	ldr	r0, [pc, #144]	; (80196f4 <_printf_i+0x23c>)
 8019662:	e7e4      	b.n	801962e <_printf_i+0x176>
 8019664:	4615      	mov	r5, r2
 8019666:	e7bd      	b.n	80195e4 <_printf_i+0x12c>
 8019668:	682b      	ldr	r3, [r5, #0]
 801966a:	6826      	ldr	r6, [r4, #0]
 801966c:	6961      	ldr	r1, [r4, #20]
 801966e:	1d18      	adds	r0, r3, #4
 8019670:	6028      	str	r0, [r5, #0]
 8019672:	0635      	lsls	r5, r6, #24
 8019674:	681b      	ldr	r3, [r3, #0]
 8019676:	d501      	bpl.n	801967c <_printf_i+0x1c4>
 8019678:	6019      	str	r1, [r3, #0]
 801967a:	e002      	b.n	8019682 <_printf_i+0x1ca>
 801967c:	0670      	lsls	r0, r6, #25
 801967e:	d5fb      	bpl.n	8019678 <_printf_i+0x1c0>
 8019680:	8019      	strh	r1, [r3, #0]
 8019682:	2300      	movs	r3, #0
 8019684:	6123      	str	r3, [r4, #16]
 8019686:	4615      	mov	r5, r2
 8019688:	e7bc      	b.n	8019604 <_printf_i+0x14c>
 801968a:	682b      	ldr	r3, [r5, #0]
 801968c:	1d1a      	adds	r2, r3, #4
 801968e:	602a      	str	r2, [r5, #0]
 8019690:	681d      	ldr	r5, [r3, #0]
 8019692:	6862      	ldr	r2, [r4, #4]
 8019694:	2100      	movs	r1, #0
 8019696:	4628      	mov	r0, r5
 8019698:	f7e8 f8d2 	bl	8001840 <memchr>
 801969c:	b108      	cbz	r0, 80196a2 <_printf_i+0x1ea>
 801969e:	1b40      	subs	r0, r0, r5
 80196a0:	6060      	str	r0, [r4, #4]
 80196a2:	6863      	ldr	r3, [r4, #4]
 80196a4:	6123      	str	r3, [r4, #16]
 80196a6:	2300      	movs	r3, #0
 80196a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80196ac:	e7aa      	b.n	8019604 <_printf_i+0x14c>
 80196ae:	6923      	ldr	r3, [r4, #16]
 80196b0:	462a      	mov	r2, r5
 80196b2:	4649      	mov	r1, r9
 80196b4:	4640      	mov	r0, r8
 80196b6:	47d0      	blx	sl
 80196b8:	3001      	adds	r0, #1
 80196ba:	d0ad      	beq.n	8019618 <_printf_i+0x160>
 80196bc:	6823      	ldr	r3, [r4, #0]
 80196be:	079b      	lsls	r3, r3, #30
 80196c0:	d413      	bmi.n	80196ea <_printf_i+0x232>
 80196c2:	68e0      	ldr	r0, [r4, #12]
 80196c4:	9b03      	ldr	r3, [sp, #12]
 80196c6:	4298      	cmp	r0, r3
 80196c8:	bfb8      	it	lt
 80196ca:	4618      	movlt	r0, r3
 80196cc:	e7a6      	b.n	801961c <_printf_i+0x164>
 80196ce:	2301      	movs	r3, #1
 80196d0:	4632      	mov	r2, r6
 80196d2:	4649      	mov	r1, r9
 80196d4:	4640      	mov	r0, r8
 80196d6:	47d0      	blx	sl
 80196d8:	3001      	adds	r0, #1
 80196da:	d09d      	beq.n	8019618 <_printf_i+0x160>
 80196dc:	3501      	adds	r5, #1
 80196de:	68e3      	ldr	r3, [r4, #12]
 80196e0:	9903      	ldr	r1, [sp, #12]
 80196e2:	1a5b      	subs	r3, r3, r1
 80196e4:	42ab      	cmp	r3, r5
 80196e6:	dcf2      	bgt.n	80196ce <_printf_i+0x216>
 80196e8:	e7eb      	b.n	80196c2 <_printf_i+0x20a>
 80196ea:	2500      	movs	r5, #0
 80196ec:	f104 0619 	add.w	r6, r4, #25
 80196f0:	e7f5      	b.n	80196de <_printf_i+0x226>
 80196f2:	bf00      	nop
 80196f4:	0801edd8 	.word	0x0801edd8
 80196f8:	0801ede9 	.word	0x0801ede9

080196fc <std>:
 80196fc:	2300      	movs	r3, #0
 80196fe:	b510      	push	{r4, lr}
 8019700:	4604      	mov	r4, r0
 8019702:	e9c0 3300 	strd	r3, r3, [r0]
 8019706:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801970a:	6083      	str	r3, [r0, #8]
 801970c:	8181      	strh	r1, [r0, #12]
 801970e:	6643      	str	r3, [r0, #100]	; 0x64
 8019710:	81c2      	strh	r2, [r0, #14]
 8019712:	6183      	str	r3, [r0, #24]
 8019714:	4619      	mov	r1, r3
 8019716:	2208      	movs	r2, #8
 8019718:	305c      	adds	r0, #92	; 0x5c
 801971a:	f000 fa07 	bl	8019b2c <memset>
 801971e:	4b0d      	ldr	r3, [pc, #52]	; (8019754 <std+0x58>)
 8019720:	6263      	str	r3, [r4, #36]	; 0x24
 8019722:	4b0d      	ldr	r3, [pc, #52]	; (8019758 <std+0x5c>)
 8019724:	62a3      	str	r3, [r4, #40]	; 0x28
 8019726:	4b0d      	ldr	r3, [pc, #52]	; (801975c <std+0x60>)
 8019728:	62e3      	str	r3, [r4, #44]	; 0x2c
 801972a:	4b0d      	ldr	r3, [pc, #52]	; (8019760 <std+0x64>)
 801972c:	6323      	str	r3, [r4, #48]	; 0x30
 801972e:	4b0d      	ldr	r3, [pc, #52]	; (8019764 <std+0x68>)
 8019730:	6224      	str	r4, [r4, #32]
 8019732:	429c      	cmp	r4, r3
 8019734:	d006      	beq.n	8019744 <std+0x48>
 8019736:	f103 0268 	add.w	r2, r3, #104	; 0x68
 801973a:	4294      	cmp	r4, r2
 801973c:	d002      	beq.n	8019744 <std+0x48>
 801973e:	33d0      	adds	r3, #208	; 0xd0
 8019740:	429c      	cmp	r4, r3
 8019742:	d105      	bne.n	8019750 <std+0x54>
 8019744:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8019748:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801974c:	f000 ba64 	b.w	8019c18 <__retarget_lock_init_recursive>
 8019750:	bd10      	pop	{r4, pc}
 8019752:	bf00      	nop
 8019754:	0801995d 	.word	0x0801995d
 8019758:	0801997f 	.word	0x0801997f
 801975c:	080199b7 	.word	0x080199b7
 8019760:	080199db 	.word	0x080199db
 8019764:	200071e8 	.word	0x200071e8

08019768 <stdio_exit_handler>:
 8019768:	4a02      	ldr	r2, [pc, #8]	; (8019774 <stdio_exit_handler+0xc>)
 801976a:	4903      	ldr	r1, [pc, #12]	; (8019778 <stdio_exit_handler+0x10>)
 801976c:	4803      	ldr	r0, [pc, #12]	; (801977c <stdio_exit_handler+0x14>)
 801976e:	f000 b869 	b.w	8019844 <_fwalk_sglue>
 8019772:	bf00      	nop
 8019774:	20000064 	.word	0x20000064
 8019778:	0801b4ed 	.word	0x0801b4ed
 801977c:	20000070 	.word	0x20000070

08019780 <cleanup_stdio>:
 8019780:	6841      	ldr	r1, [r0, #4]
 8019782:	4b0c      	ldr	r3, [pc, #48]	; (80197b4 <cleanup_stdio+0x34>)
 8019784:	4299      	cmp	r1, r3
 8019786:	b510      	push	{r4, lr}
 8019788:	4604      	mov	r4, r0
 801978a:	d001      	beq.n	8019790 <cleanup_stdio+0x10>
 801978c:	f001 feae 	bl	801b4ec <_fflush_r>
 8019790:	68a1      	ldr	r1, [r4, #8]
 8019792:	4b09      	ldr	r3, [pc, #36]	; (80197b8 <cleanup_stdio+0x38>)
 8019794:	4299      	cmp	r1, r3
 8019796:	d002      	beq.n	801979e <cleanup_stdio+0x1e>
 8019798:	4620      	mov	r0, r4
 801979a:	f001 fea7 	bl	801b4ec <_fflush_r>
 801979e:	68e1      	ldr	r1, [r4, #12]
 80197a0:	4b06      	ldr	r3, [pc, #24]	; (80197bc <cleanup_stdio+0x3c>)
 80197a2:	4299      	cmp	r1, r3
 80197a4:	d004      	beq.n	80197b0 <cleanup_stdio+0x30>
 80197a6:	4620      	mov	r0, r4
 80197a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80197ac:	f001 be9e 	b.w	801b4ec <_fflush_r>
 80197b0:	bd10      	pop	{r4, pc}
 80197b2:	bf00      	nop
 80197b4:	200071e8 	.word	0x200071e8
 80197b8:	20007250 	.word	0x20007250
 80197bc:	200072b8 	.word	0x200072b8

080197c0 <global_stdio_init.part.0>:
 80197c0:	b510      	push	{r4, lr}
 80197c2:	4b0b      	ldr	r3, [pc, #44]	; (80197f0 <global_stdio_init.part.0+0x30>)
 80197c4:	4c0b      	ldr	r4, [pc, #44]	; (80197f4 <global_stdio_init.part.0+0x34>)
 80197c6:	4a0c      	ldr	r2, [pc, #48]	; (80197f8 <global_stdio_init.part.0+0x38>)
 80197c8:	601a      	str	r2, [r3, #0]
 80197ca:	4620      	mov	r0, r4
 80197cc:	2200      	movs	r2, #0
 80197ce:	2104      	movs	r1, #4
 80197d0:	f7ff ff94 	bl	80196fc <std>
 80197d4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80197d8:	2201      	movs	r2, #1
 80197da:	2109      	movs	r1, #9
 80197dc:	f7ff ff8e 	bl	80196fc <std>
 80197e0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80197e4:	2202      	movs	r2, #2
 80197e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80197ea:	2112      	movs	r1, #18
 80197ec:	f7ff bf86 	b.w	80196fc <std>
 80197f0:	20007320 	.word	0x20007320
 80197f4:	200071e8 	.word	0x200071e8
 80197f8:	08019769 	.word	0x08019769

080197fc <__sfp_lock_acquire>:
 80197fc:	4801      	ldr	r0, [pc, #4]	; (8019804 <__sfp_lock_acquire+0x8>)
 80197fe:	f000 ba0c 	b.w	8019c1a <__retarget_lock_acquire_recursive>
 8019802:	bf00      	nop
 8019804:	20007329 	.word	0x20007329

08019808 <__sfp_lock_release>:
 8019808:	4801      	ldr	r0, [pc, #4]	; (8019810 <__sfp_lock_release+0x8>)
 801980a:	f000 ba07 	b.w	8019c1c <__retarget_lock_release_recursive>
 801980e:	bf00      	nop
 8019810:	20007329 	.word	0x20007329

08019814 <__sinit>:
 8019814:	b510      	push	{r4, lr}
 8019816:	4604      	mov	r4, r0
 8019818:	f7ff fff0 	bl	80197fc <__sfp_lock_acquire>
 801981c:	6a23      	ldr	r3, [r4, #32]
 801981e:	b11b      	cbz	r3, 8019828 <__sinit+0x14>
 8019820:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019824:	f7ff bff0 	b.w	8019808 <__sfp_lock_release>
 8019828:	4b04      	ldr	r3, [pc, #16]	; (801983c <__sinit+0x28>)
 801982a:	6223      	str	r3, [r4, #32]
 801982c:	4b04      	ldr	r3, [pc, #16]	; (8019840 <__sinit+0x2c>)
 801982e:	681b      	ldr	r3, [r3, #0]
 8019830:	2b00      	cmp	r3, #0
 8019832:	d1f5      	bne.n	8019820 <__sinit+0xc>
 8019834:	f7ff ffc4 	bl	80197c0 <global_stdio_init.part.0>
 8019838:	e7f2      	b.n	8019820 <__sinit+0xc>
 801983a:	bf00      	nop
 801983c:	08019781 	.word	0x08019781
 8019840:	20007320 	.word	0x20007320

08019844 <_fwalk_sglue>:
 8019844:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019848:	4607      	mov	r7, r0
 801984a:	4688      	mov	r8, r1
 801984c:	4614      	mov	r4, r2
 801984e:	2600      	movs	r6, #0
 8019850:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8019854:	f1b9 0901 	subs.w	r9, r9, #1
 8019858:	d505      	bpl.n	8019866 <_fwalk_sglue+0x22>
 801985a:	6824      	ldr	r4, [r4, #0]
 801985c:	2c00      	cmp	r4, #0
 801985e:	d1f7      	bne.n	8019850 <_fwalk_sglue+0xc>
 8019860:	4630      	mov	r0, r6
 8019862:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019866:	89ab      	ldrh	r3, [r5, #12]
 8019868:	2b01      	cmp	r3, #1
 801986a:	d907      	bls.n	801987c <_fwalk_sglue+0x38>
 801986c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8019870:	3301      	adds	r3, #1
 8019872:	d003      	beq.n	801987c <_fwalk_sglue+0x38>
 8019874:	4629      	mov	r1, r5
 8019876:	4638      	mov	r0, r7
 8019878:	47c0      	blx	r8
 801987a:	4306      	orrs	r6, r0
 801987c:	3568      	adds	r5, #104	; 0x68
 801987e:	e7e9      	b.n	8019854 <_fwalk_sglue+0x10>

08019880 <iprintf>:
 8019880:	b40f      	push	{r0, r1, r2, r3}
 8019882:	b507      	push	{r0, r1, r2, lr}
 8019884:	4906      	ldr	r1, [pc, #24]	; (80198a0 <iprintf+0x20>)
 8019886:	ab04      	add	r3, sp, #16
 8019888:	6808      	ldr	r0, [r1, #0]
 801988a:	f853 2b04 	ldr.w	r2, [r3], #4
 801988e:	6881      	ldr	r1, [r0, #8]
 8019890:	9301      	str	r3, [sp, #4]
 8019892:	f001 fc8b 	bl	801b1ac <_vfiprintf_r>
 8019896:	b003      	add	sp, #12
 8019898:	f85d eb04 	ldr.w	lr, [sp], #4
 801989c:	b004      	add	sp, #16
 801989e:	4770      	bx	lr
 80198a0:	200000bc 	.word	0x200000bc

080198a4 <_puts_r>:
 80198a4:	6a03      	ldr	r3, [r0, #32]
 80198a6:	b570      	push	{r4, r5, r6, lr}
 80198a8:	6884      	ldr	r4, [r0, #8]
 80198aa:	4605      	mov	r5, r0
 80198ac:	460e      	mov	r6, r1
 80198ae:	b90b      	cbnz	r3, 80198b4 <_puts_r+0x10>
 80198b0:	f7ff ffb0 	bl	8019814 <__sinit>
 80198b4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80198b6:	07db      	lsls	r3, r3, #31
 80198b8:	d405      	bmi.n	80198c6 <_puts_r+0x22>
 80198ba:	89a3      	ldrh	r3, [r4, #12]
 80198bc:	0598      	lsls	r0, r3, #22
 80198be:	d402      	bmi.n	80198c6 <_puts_r+0x22>
 80198c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80198c2:	f000 f9aa 	bl	8019c1a <__retarget_lock_acquire_recursive>
 80198c6:	89a3      	ldrh	r3, [r4, #12]
 80198c8:	0719      	lsls	r1, r3, #28
 80198ca:	d513      	bpl.n	80198f4 <_puts_r+0x50>
 80198cc:	6923      	ldr	r3, [r4, #16]
 80198ce:	b18b      	cbz	r3, 80198f4 <_puts_r+0x50>
 80198d0:	3e01      	subs	r6, #1
 80198d2:	68a3      	ldr	r3, [r4, #8]
 80198d4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80198d8:	3b01      	subs	r3, #1
 80198da:	60a3      	str	r3, [r4, #8]
 80198dc:	b9e9      	cbnz	r1, 801991a <_puts_r+0x76>
 80198de:	2b00      	cmp	r3, #0
 80198e0:	da2e      	bge.n	8019940 <_puts_r+0x9c>
 80198e2:	4622      	mov	r2, r4
 80198e4:	210a      	movs	r1, #10
 80198e6:	4628      	mov	r0, r5
 80198e8:	f000 f87b 	bl	80199e2 <__swbuf_r>
 80198ec:	3001      	adds	r0, #1
 80198ee:	d007      	beq.n	8019900 <_puts_r+0x5c>
 80198f0:	250a      	movs	r5, #10
 80198f2:	e007      	b.n	8019904 <_puts_r+0x60>
 80198f4:	4621      	mov	r1, r4
 80198f6:	4628      	mov	r0, r5
 80198f8:	f000 f8b0 	bl	8019a5c <__swsetup_r>
 80198fc:	2800      	cmp	r0, #0
 80198fe:	d0e7      	beq.n	80198d0 <_puts_r+0x2c>
 8019900:	f04f 35ff 	mov.w	r5, #4294967295
 8019904:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8019906:	07da      	lsls	r2, r3, #31
 8019908:	d405      	bmi.n	8019916 <_puts_r+0x72>
 801990a:	89a3      	ldrh	r3, [r4, #12]
 801990c:	059b      	lsls	r3, r3, #22
 801990e:	d402      	bmi.n	8019916 <_puts_r+0x72>
 8019910:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019912:	f000 f983 	bl	8019c1c <__retarget_lock_release_recursive>
 8019916:	4628      	mov	r0, r5
 8019918:	bd70      	pop	{r4, r5, r6, pc}
 801991a:	2b00      	cmp	r3, #0
 801991c:	da04      	bge.n	8019928 <_puts_r+0x84>
 801991e:	69a2      	ldr	r2, [r4, #24]
 8019920:	429a      	cmp	r2, r3
 8019922:	dc06      	bgt.n	8019932 <_puts_r+0x8e>
 8019924:	290a      	cmp	r1, #10
 8019926:	d004      	beq.n	8019932 <_puts_r+0x8e>
 8019928:	6823      	ldr	r3, [r4, #0]
 801992a:	1c5a      	adds	r2, r3, #1
 801992c:	6022      	str	r2, [r4, #0]
 801992e:	7019      	strb	r1, [r3, #0]
 8019930:	e7cf      	b.n	80198d2 <_puts_r+0x2e>
 8019932:	4622      	mov	r2, r4
 8019934:	4628      	mov	r0, r5
 8019936:	f000 f854 	bl	80199e2 <__swbuf_r>
 801993a:	3001      	adds	r0, #1
 801993c:	d1c9      	bne.n	80198d2 <_puts_r+0x2e>
 801993e:	e7df      	b.n	8019900 <_puts_r+0x5c>
 8019940:	6823      	ldr	r3, [r4, #0]
 8019942:	250a      	movs	r5, #10
 8019944:	1c5a      	adds	r2, r3, #1
 8019946:	6022      	str	r2, [r4, #0]
 8019948:	701d      	strb	r5, [r3, #0]
 801994a:	e7db      	b.n	8019904 <_puts_r+0x60>

0801994c <puts>:
 801994c:	4b02      	ldr	r3, [pc, #8]	; (8019958 <puts+0xc>)
 801994e:	4601      	mov	r1, r0
 8019950:	6818      	ldr	r0, [r3, #0]
 8019952:	f7ff bfa7 	b.w	80198a4 <_puts_r>
 8019956:	bf00      	nop
 8019958:	200000bc 	.word	0x200000bc

0801995c <__sread>:
 801995c:	b510      	push	{r4, lr}
 801995e:	460c      	mov	r4, r1
 8019960:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019964:	f000 f910 	bl	8019b88 <_read_r>
 8019968:	2800      	cmp	r0, #0
 801996a:	bfab      	itete	ge
 801996c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801996e:	89a3      	ldrhlt	r3, [r4, #12]
 8019970:	181b      	addge	r3, r3, r0
 8019972:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8019976:	bfac      	ite	ge
 8019978:	6563      	strge	r3, [r4, #84]	; 0x54
 801997a:	81a3      	strhlt	r3, [r4, #12]
 801997c:	bd10      	pop	{r4, pc}

0801997e <__swrite>:
 801997e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019982:	461f      	mov	r7, r3
 8019984:	898b      	ldrh	r3, [r1, #12]
 8019986:	05db      	lsls	r3, r3, #23
 8019988:	4605      	mov	r5, r0
 801998a:	460c      	mov	r4, r1
 801998c:	4616      	mov	r6, r2
 801998e:	d505      	bpl.n	801999c <__swrite+0x1e>
 8019990:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019994:	2302      	movs	r3, #2
 8019996:	2200      	movs	r2, #0
 8019998:	f000 f8e4 	bl	8019b64 <_lseek_r>
 801999c:	89a3      	ldrh	r3, [r4, #12]
 801999e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80199a2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80199a6:	81a3      	strh	r3, [r4, #12]
 80199a8:	4632      	mov	r2, r6
 80199aa:	463b      	mov	r3, r7
 80199ac:	4628      	mov	r0, r5
 80199ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80199b2:	f000 b8fb 	b.w	8019bac <_write_r>

080199b6 <__sseek>:
 80199b6:	b510      	push	{r4, lr}
 80199b8:	460c      	mov	r4, r1
 80199ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80199be:	f000 f8d1 	bl	8019b64 <_lseek_r>
 80199c2:	1c43      	adds	r3, r0, #1
 80199c4:	89a3      	ldrh	r3, [r4, #12]
 80199c6:	bf15      	itete	ne
 80199c8:	6560      	strne	r0, [r4, #84]	; 0x54
 80199ca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80199ce:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80199d2:	81a3      	strheq	r3, [r4, #12]
 80199d4:	bf18      	it	ne
 80199d6:	81a3      	strhne	r3, [r4, #12]
 80199d8:	bd10      	pop	{r4, pc}

080199da <__sclose>:
 80199da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80199de:	f000 b8b1 	b.w	8019b44 <_close_r>

080199e2 <__swbuf_r>:
 80199e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80199e4:	460e      	mov	r6, r1
 80199e6:	4614      	mov	r4, r2
 80199e8:	4605      	mov	r5, r0
 80199ea:	b118      	cbz	r0, 80199f4 <__swbuf_r+0x12>
 80199ec:	6a03      	ldr	r3, [r0, #32]
 80199ee:	b90b      	cbnz	r3, 80199f4 <__swbuf_r+0x12>
 80199f0:	f7ff ff10 	bl	8019814 <__sinit>
 80199f4:	69a3      	ldr	r3, [r4, #24]
 80199f6:	60a3      	str	r3, [r4, #8]
 80199f8:	89a3      	ldrh	r3, [r4, #12]
 80199fa:	071a      	lsls	r2, r3, #28
 80199fc:	d525      	bpl.n	8019a4a <__swbuf_r+0x68>
 80199fe:	6923      	ldr	r3, [r4, #16]
 8019a00:	b31b      	cbz	r3, 8019a4a <__swbuf_r+0x68>
 8019a02:	6823      	ldr	r3, [r4, #0]
 8019a04:	6922      	ldr	r2, [r4, #16]
 8019a06:	1a98      	subs	r0, r3, r2
 8019a08:	6963      	ldr	r3, [r4, #20]
 8019a0a:	b2f6      	uxtb	r6, r6
 8019a0c:	4283      	cmp	r3, r0
 8019a0e:	4637      	mov	r7, r6
 8019a10:	dc04      	bgt.n	8019a1c <__swbuf_r+0x3a>
 8019a12:	4621      	mov	r1, r4
 8019a14:	4628      	mov	r0, r5
 8019a16:	f001 fd69 	bl	801b4ec <_fflush_r>
 8019a1a:	b9e0      	cbnz	r0, 8019a56 <__swbuf_r+0x74>
 8019a1c:	68a3      	ldr	r3, [r4, #8]
 8019a1e:	3b01      	subs	r3, #1
 8019a20:	60a3      	str	r3, [r4, #8]
 8019a22:	6823      	ldr	r3, [r4, #0]
 8019a24:	1c5a      	adds	r2, r3, #1
 8019a26:	6022      	str	r2, [r4, #0]
 8019a28:	701e      	strb	r6, [r3, #0]
 8019a2a:	6962      	ldr	r2, [r4, #20]
 8019a2c:	1c43      	adds	r3, r0, #1
 8019a2e:	429a      	cmp	r2, r3
 8019a30:	d004      	beq.n	8019a3c <__swbuf_r+0x5a>
 8019a32:	89a3      	ldrh	r3, [r4, #12]
 8019a34:	07db      	lsls	r3, r3, #31
 8019a36:	d506      	bpl.n	8019a46 <__swbuf_r+0x64>
 8019a38:	2e0a      	cmp	r6, #10
 8019a3a:	d104      	bne.n	8019a46 <__swbuf_r+0x64>
 8019a3c:	4621      	mov	r1, r4
 8019a3e:	4628      	mov	r0, r5
 8019a40:	f001 fd54 	bl	801b4ec <_fflush_r>
 8019a44:	b938      	cbnz	r0, 8019a56 <__swbuf_r+0x74>
 8019a46:	4638      	mov	r0, r7
 8019a48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019a4a:	4621      	mov	r1, r4
 8019a4c:	4628      	mov	r0, r5
 8019a4e:	f000 f805 	bl	8019a5c <__swsetup_r>
 8019a52:	2800      	cmp	r0, #0
 8019a54:	d0d5      	beq.n	8019a02 <__swbuf_r+0x20>
 8019a56:	f04f 37ff 	mov.w	r7, #4294967295
 8019a5a:	e7f4      	b.n	8019a46 <__swbuf_r+0x64>

08019a5c <__swsetup_r>:
 8019a5c:	b538      	push	{r3, r4, r5, lr}
 8019a5e:	4b2a      	ldr	r3, [pc, #168]	; (8019b08 <__swsetup_r+0xac>)
 8019a60:	4605      	mov	r5, r0
 8019a62:	6818      	ldr	r0, [r3, #0]
 8019a64:	460c      	mov	r4, r1
 8019a66:	b118      	cbz	r0, 8019a70 <__swsetup_r+0x14>
 8019a68:	6a03      	ldr	r3, [r0, #32]
 8019a6a:	b90b      	cbnz	r3, 8019a70 <__swsetup_r+0x14>
 8019a6c:	f7ff fed2 	bl	8019814 <__sinit>
 8019a70:	89a3      	ldrh	r3, [r4, #12]
 8019a72:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8019a76:	0718      	lsls	r0, r3, #28
 8019a78:	d422      	bmi.n	8019ac0 <__swsetup_r+0x64>
 8019a7a:	06d9      	lsls	r1, r3, #27
 8019a7c:	d407      	bmi.n	8019a8e <__swsetup_r+0x32>
 8019a7e:	2309      	movs	r3, #9
 8019a80:	602b      	str	r3, [r5, #0]
 8019a82:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8019a86:	81a3      	strh	r3, [r4, #12]
 8019a88:	f04f 30ff 	mov.w	r0, #4294967295
 8019a8c:	e034      	b.n	8019af8 <__swsetup_r+0x9c>
 8019a8e:	0758      	lsls	r0, r3, #29
 8019a90:	d512      	bpl.n	8019ab8 <__swsetup_r+0x5c>
 8019a92:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8019a94:	b141      	cbz	r1, 8019aa8 <__swsetup_r+0x4c>
 8019a96:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019a9a:	4299      	cmp	r1, r3
 8019a9c:	d002      	beq.n	8019aa4 <__swsetup_r+0x48>
 8019a9e:	4628      	mov	r0, r5
 8019aa0:	f000 fede 	bl	801a860 <_free_r>
 8019aa4:	2300      	movs	r3, #0
 8019aa6:	6363      	str	r3, [r4, #52]	; 0x34
 8019aa8:	89a3      	ldrh	r3, [r4, #12]
 8019aaa:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8019aae:	81a3      	strh	r3, [r4, #12]
 8019ab0:	2300      	movs	r3, #0
 8019ab2:	6063      	str	r3, [r4, #4]
 8019ab4:	6923      	ldr	r3, [r4, #16]
 8019ab6:	6023      	str	r3, [r4, #0]
 8019ab8:	89a3      	ldrh	r3, [r4, #12]
 8019aba:	f043 0308 	orr.w	r3, r3, #8
 8019abe:	81a3      	strh	r3, [r4, #12]
 8019ac0:	6923      	ldr	r3, [r4, #16]
 8019ac2:	b94b      	cbnz	r3, 8019ad8 <__swsetup_r+0x7c>
 8019ac4:	89a3      	ldrh	r3, [r4, #12]
 8019ac6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8019aca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8019ace:	d003      	beq.n	8019ad8 <__swsetup_r+0x7c>
 8019ad0:	4621      	mov	r1, r4
 8019ad2:	4628      	mov	r0, r5
 8019ad4:	f001 fd6a 	bl	801b5ac <__smakebuf_r>
 8019ad8:	89a0      	ldrh	r0, [r4, #12]
 8019ada:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8019ade:	f010 0301 	ands.w	r3, r0, #1
 8019ae2:	d00a      	beq.n	8019afa <__swsetup_r+0x9e>
 8019ae4:	2300      	movs	r3, #0
 8019ae6:	60a3      	str	r3, [r4, #8]
 8019ae8:	6963      	ldr	r3, [r4, #20]
 8019aea:	425b      	negs	r3, r3
 8019aec:	61a3      	str	r3, [r4, #24]
 8019aee:	6923      	ldr	r3, [r4, #16]
 8019af0:	b943      	cbnz	r3, 8019b04 <__swsetup_r+0xa8>
 8019af2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8019af6:	d1c4      	bne.n	8019a82 <__swsetup_r+0x26>
 8019af8:	bd38      	pop	{r3, r4, r5, pc}
 8019afa:	0781      	lsls	r1, r0, #30
 8019afc:	bf58      	it	pl
 8019afe:	6963      	ldrpl	r3, [r4, #20]
 8019b00:	60a3      	str	r3, [r4, #8]
 8019b02:	e7f4      	b.n	8019aee <__swsetup_r+0x92>
 8019b04:	2000      	movs	r0, #0
 8019b06:	e7f7      	b.n	8019af8 <__swsetup_r+0x9c>
 8019b08:	200000bc 	.word	0x200000bc

08019b0c <memcmp>:
 8019b0c:	b510      	push	{r4, lr}
 8019b0e:	3901      	subs	r1, #1
 8019b10:	4402      	add	r2, r0
 8019b12:	4290      	cmp	r0, r2
 8019b14:	d101      	bne.n	8019b1a <memcmp+0xe>
 8019b16:	2000      	movs	r0, #0
 8019b18:	e005      	b.n	8019b26 <memcmp+0x1a>
 8019b1a:	7803      	ldrb	r3, [r0, #0]
 8019b1c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8019b20:	42a3      	cmp	r3, r4
 8019b22:	d001      	beq.n	8019b28 <memcmp+0x1c>
 8019b24:	1b18      	subs	r0, r3, r4
 8019b26:	bd10      	pop	{r4, pc}
 8019b28:	3001      	adds	r0, #1
 8019b2a:	e7f2      	b.n	8019b12 <memcmp+0x6>

08019b2c <memset>:
 8019b2c:	4402      	add	r2, r0
 8019b2e:	4603      	mov	r3, r0
 8019b30:	4293      	cmp	r3, r2
 8019b32:	d100      	bne.n	8019b36 <memset+0xa>
 8019b34:	4770      	bx	lr
 8019b36:	f803 1b01 	strb.w	r1, [r3], #1
 8019b3a:	e7f9      	b.n	8019b30 <memset+0x4>

08019b3c <_localeconv_r>:
 8019b3c:	4800      	ldr	r0, [pc, #0]	; (8019b40 <_localeconv_r+0x4>)
 8019b3e:	4770      	bx	lr
 8019b40:	200001b0 	.word	0x200001b0

08019b44 <_close_r>:
 8019b44:	b538      	push	{r3, r4, r5, lr}
 8019b46:	4d06      	ldr	r5, [pc, #24]	; (8019b60 <_close_r+0x1c>)
 8019b48:	2300      	movs	r3, #0
 8019b4a:	4604      	mov	r4, r0
 8019b4c:	4608      	mov	r0, r1
 8019b4e:	602b      	str	r3, [r5, #0]
 8019b50:	f7e9 fc41 	bl	80033d6 <_close>
 8019b54:	1c43      	adds	r3, r0, #1
 8019b56:	d102      	bne.n	8019b5e <_close_r+0x1a>
 8019b58:	682b      	ldr	r3, [r5, #0]
 8019b5a:	b103      	cbz	r3, 8019b5e <_close_r+0x1a>
 8019b5c:	6023      	str	r3, [r4, #0]
 8019b5e:	bd38      	pop	{r3, r4, r5, pc}
 8019b60:	20007324 	.word	0x20007324

08019b64 <_lseek_r>:
 8019b64:	b538      	push	{r3, r4, r5, lr}
 8019b66:	4d07      	ldr	r5, [pc, #28]	; (8019b84 <_lseek_r+0x20>)
 8019b68:	4604      	mov	r4, r0
 8019b6a:	4608      	mov	r0, r1
 8019b6c:	4611      	mov	r1, r2
 8019b6e:	2200      	movs	r2, #0
 8019b70:	602a      	str	r2, [r5, #0]
 8019b72:	461a      	mov	r2, r3
 8019b74:	f7e9 fc56 	bl	8003424 <_lseek>
 8019b78:	1c43      	adds	r3, r0, #1
 8019b7a:	d102      	bne.n	8019b82 <_lseek_r+0x1e>
 8019b7c:	682b      	ldr	r3, [r5, #0]
 8019b7e:	b103      	cbz	r3, 8019b82 <_lseek_r+0x1e>
 8019b80:	6023      	str	r3, [r4, #0]
 8019b82:	bd38      	pop	{r3, r4, r5, pc}
 8019b84:	20007324 	.word	0x20007324

08019b88 <_read_r>:
 8019b88:	b538      	push	{r3, r4, r5, lr}
 8019b8a:	4d07      	ldr	r5, [pc, #28]	; (8019ba8 <_read_r+0x20>)
 8019b8c:	4604      	mov	r4, r0
 8019b8e:	4608      	mov	r0, r1
 8019b90:	4611      	mov	r1, r2
 8019b92:	2200      	movs	r2, #0
 8019b94:	602a      	str	r2, [r5, #0]
 8019b96:	461a      	mov	r2, r3
 8019b98:	f7e9 fbe4 	bl	8003364 <_read>
 8019b9c:	1c43      	adds	r3, r0, #1
 8019b9e:	d102      	bne.n	8019ba6 <_read_r+0x1e>
 8019ba0:	682b      	ldr	r3, [r5, #0]
 8019ba2:	b103      	cbz	r3, 8019ba6 <_read_r+0x1e>
 8019ba4:	6023      	str	r3, [r4, #0]
 8019ba6:	bd38      	pop	{r3, r4, r5, pc}
 8019ba8:	20007324 	.word	0x20007324

08019bac <_write_r>:
 8019bac:	b538      	push	{r3, r4, r5, lr}
 8019bae:	4d07      	ldr	r5, [pc, #28]	; (8019bcc <_write_r+0x20>)
 8019bb0:	4604      	mov	r4, r0
 8019bb2:	4608      	mov	r0, r1
 8019bb4:	4611      	mov	r1, r2
 8019bb6:	2200      	movs	r2, #0
 8019bb8:	602a      	str	r2, [r5, #0]
 8019bba:	461a      	mov	r2, r3
 8019bbc:	f7e9 fbef 	bl	800339e <_write>
 8019bc0:	1c43      	adds	r3, r0, #1
 8019bc2:	d102      	bne.n	8019bca <_write_r+0x1e>
 8019bc4:	682b      	ldr	r3, [r5, #0]
 8019bc6:	b103      	cbz	r3, 8019bca <_write_r+0x1e>
 8019bc8:	6023      	str	r3, [r4, #0]
 8019bca:	bd38      	pop	{r3, r4, r5, pc}
 8019bcc:	20007324 	.word	0x20007324

08019bd0 <__libc_init_array>:
 8019bd0:	b570      	push	{r4, r5, r6, lr}
 8019bd2:	4d0d      	ldr	r5, [pc, #52]	; (8019c08 <__libc_init_array+0x38>)
 8019bd4:	4c0d      	ldr	r4, [pc, #52]	; (8019c0c <__libc_init_array+0x3c>)
 8019bd6:	1b64      	subs	r4, r4, r5
 8019bd8:	10a4      	asrs	r4, r4, #2
 8019bda:	2600      	movs	r6, #0
 8019bdc:	42a6      	cmp	r6, r4
 8019bde:	d109      	bne.n	8019bf4 <__libc_init_array+0x24>
 8019be0:	4d0b      	ldr	r5, [pc, #44]	; (8019c10 <__libc_init_array+0x40>)
 8019be2:	4c0c      	ldr	r4, [pc, #48]	; (8019c14 <__libc_init_array+0x44>)
 8019be4:	f001 fdd0 	bl	801b788 <_init>
 8019be8:	1b64      	subs	r4, r4, r5
 8019bea:	10a4      	asrs	r4, r4, #2
 8019bec:	2600      	movs	r6, #0
 8019bee:	42a6      	cmp	r6, r4
 8019bf0:	d105      	bne.n	8019bfe <__libc_init_array+0x2e>
 8019bf2:	bd70      	pop	{r4, r5, r6, pc}
 8019bf4:	f855 3b04 	ldr.w	r3, [r5], #4
 8019bf8:	4798      	blx	r3
 8019bfa:	3601      	adds	r6, #1
 8019bfc:	e7ee      	b.n	8019bdc <__libc_init_array+0xc>
 8019bfe:	f855 3b04 	ldr.w	r3, [r5], #4
 8019c02:	4798      	blx	r3
 8019c04:	3601      	adds	r6, #1
 8019c06:	e7f2      	b.n	8019bee <__libc_init_array+0x1e>
 8019c08:	0801f028 	.word	0x0801f028
 8019c0c:	0801f028 	.word	0x0801f028
 8019c10:	0801f028 	.word	0x0801f028
 8019c14:	0801f02c 	.word	0x0801f02c

08019c18 <__retarget_lock_init_recursive>:
 8019c18:	4770      	bx	lr

08019c1a <__retarget_lock_acquire_recursive>:
 8019c1a:	4770      	bx	lr

08019c1c <__retarget_lock_release_recursive>:
 8019c1c:	4770      	bx	lr

08019c1e <memcpy>:
 8019c1e:	440a      	add	r2, r1
 8019c20:	4291      	cmp	r1, r2
 8019c22:	f100 33ff 	add.w	r3, r0, #4294967295
 8019c26:	d100      	bne.n	8019c2a <memcpy+0xc>
 8019c28:	4770      	bx	lr
 8019c2a:	b510      	push	{r4, lr}
 8019c2c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8019c30:	f803 4f01 	strb.w	r4, [r3, #1]!
 8019c34:	4291      	cmp	r1, r2
 8019c36:	d1f9      	bne.n	8019c2c <memcpy+0xe>
 8019c38:	bd10      	pop	{r4, pc}
	...

08019c3c <__assert_func>:
 8019c3c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8019c3e:	4614      	mov	r4, r2
 8019c40:	461a      	mov	r2, r3
 8019c42:	4b09      	ldr	r3, [pc, #36]	; (8019c68 <__assert_func+0x2c>)
 8019c44:	681b      	ldr	r3, [r3, #0]
 8019c46:	4605      	mov	r5, r0
 8019c48:	68d8      	ldr	r0, [r3, #12]
 8019c4a:	b14c      	cbz	r4, 8019c60 <__assert_func+0x24>
 8019c4c:	4b07      	ldr	r3, [pc, #28]	; (8019c6c <__assert_func+0x30>)
 8019c4e:	9100      	str	r1, [sp, #0]
 8019c50:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8019c54:	4906      	ldr	r1, [pc, #24]	; (8019c70 <__assert_func+0x34>)
 8019c56:	462b      	mov	r3, r5
 8019c58:	f001 fc70 	bl	801b53c <fiprintf>
 8019c5c:	f001 fd14 	bl	801b688 <abort>
 8019c60:	4b04      	ldr	r3, [pc, #16]	; (8019c74 <__assert_func+0x38>)
 8019c62:	461c      	mov	r4, r3
 8019c64:	e7f3      	b.n	8019c4e <__assert_func+0x12>
 8019c66:	bf00      	nop
 8019c68:	200000bc 	.word	0x200000bc
 8019c6c:	0801edfa 	.word	0x0801edfa
 8019c70:	0801ee07 	.word	0x0801ee07
 8019c74:	0801ee35 	.word	0x0801ee35

08019c78 <quorem>:
 8019c78:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019c7c:	6903      	ldr	r3, [r0, #16]
 8019c7e:	690c      	ldr	r4, [r1, #16]
 8019c80:	42a3      	cmp	r3, r4
 8019c82:	4607      	mov	r7, r0
 8019c84:	db7e      	blt.n	8019d84 <quorem+0x10c>
 8019c86:	3c01      	subs	r4, #1
 8019c88:	f101 0814 	add.w	r8, r1, #20
 8019c8c:	f100 0514 	add.w	r5, r0, #20
 8019c90:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8019c94:	9301      	str	r3, [sp, #4]
 8019c96:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8019c9a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8019c9e:	3301      	adds	r3, #1
 8019ca0:	429a      	cmp	r2, r3
 8019ca2:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8019ca6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8019caa:	fbb2 f6f3 	udiv	r6, r2, r3
 8019cae:	d331      	bcc.n	8019d14 <quorem+0x9c>
 8019cb0:	f04f 0e00 	mov.w	lr, #0
 8019cb4:	4640      	mov	r0, r8
 8019cb6:	46ac      	mov	ip, r5
 8019cb8:	46f2      	mov	sl, lr
 8019cba:	f850 2b04 	ldr.w	r2, [r0], #4
 8019cbe:	b293      	uxth	r3, r2
 8019cc0:	fb06 e303 	mla	r3, r6, r3, lr
 8019cc4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8019cc8:	0c1a      	lsrs	r2, r3, #16
 8019cca:	b29b      	uxth	r3, r3
 8019ccc:	ebaa 0303 	sub.w	r3, sl, r3
 8019cd0:	f8dc a000 	ldr.w	sl, [ip]
 8019cd4:	fa13 f38a 	uxtah	r3, r3, sl
 8019cd8:	fb06 220e 	mla	r2, r6, lr, r2
 8019cdc:	9300      	str	r3, [sp, #0]
 8019cde:	9b00      	ldr	r3, [sp, #0]
 8019ce0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8019ce4:	b292      	uxth	r2, r2
 8019ce6:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8019cea:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8019cee:	f8bd 3000 	ldrh.w	r3, [sp]
 8019cf2:	4581      	cmp	r9, r0
 8019cf4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8019cf8:	f84c 3b04 	str.w	r3, [ip], #4
 8019cfc:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8019d00:	d2db      	bcs.n	8019cba <quorem+0x42>
 8019d02:	f855 300b 	ldr.w	r3, [r5, fp]
 8019d06:	b92b      	cbnz	r3, 8019d14 <quorem+0x9c>
 8019d08:	9b01      	ldr	r3, [sp, #4]
 8019d0a:	3b04      	subs	r3, #4
 8019d0c:	429d      	cmp	r5, r3
 8019d0e:	461a      	mov	r2, r3
 8019d10:	d32c      	bcc.n	8019d6c <quorem+0xf4>
 8019d12:	613c      	str	r4, [r7, #16]
 8019d14:	4638      	mov	r0, r7
 8019d16:	f001 f91f 	bl	801af58 <__mcmp>
 8019d1a:	2800      	cmp	r0, #0
 8019d1c:	db22      	blt.n	8019d64 <quorem+0xec>
 8019d1e:	3601      	adds	r6, #1
 8019d20:	4629      	mov	r1, r5
 8019d22:	2000      	movs	r0, #0
 8019d24:	f858 2b04 	ldr.w	r2, [r8], #4
 8019d28:	f8d1 c000 	ldr.w	ip, [r1]
 8019d2c:	b293      	uxth	r3, r2
 8019d2e:	1ac3      	subs	r3, r0, r3
 8019d30:	0c12      	lsrs	r2, r2, #16
 8019d32:	fa13 f38c 	uxtah	r3, r3, ip
 8019d36:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8019d3a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8019d3e:	b29b      	uxth	r3, r3
 8019d40:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8019d44:	45c1      	cmp	r9, r8
 8019d46:	f841 3b04 	str.w	r3, [r1], #4
 8019d4a:	ea4f 4022 	mov.w	r0, r2, asr #16
 8019d4e:	d2e9      	bcs.n	8019d24 <quorem+0xac>
 8019d50:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8019d54:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8019d58:	b922      	cbnz	r2, 8019d64 <quorem+0xec>
 8019d5a:	3b04      	subs	r3, #4
 8019d5c:	429d      	cmp	r5, r3
 8019d5e:	461a      	mov	r2, r3
 8019d60:	d30a      	bcc.n	8019d78 <quorem+0x100>
 8019d62:	613c      	str	r4, [r7, #16]
 8019d64:	4630      	mov	r0, r6
 8019d66:	b003      	add	sp, #12
 8019d68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019d6c:	6812      	ldr	r2, [r2, #0]
 8019d6e:	3b04      	subs	r3, #4
 8019d70:	2a00      	cmp	r2, #0
 8019d72:	d1ce      	bne.n	8019d12 <quorem+0x9a>
 8019d74:	3c01      	subs	r4, #1
 8019d76:	e7c9      	b.n	8019d0c <quorem+0x94>
 8019d78:	6812      	ldr	r2, [r2, #0]
 8019d7a:	3b04      	subs	r3, #4
 8019d7c:	2a00      	cmp	r2, #0
 8019d7e:	d1f0      	bne.n	8019d62 <quorem+0xea>
 8019d80:	3c01      	subs	r4, #1
 8019d82:	e7eb      	b.n	8019d5c <quorem+0xe4>
 8019d84:	2000      	movs	r0, #0
 8019d86:	e7ee      	b.n	8019d66 <quorem+0xee>

08019d88 <_dtoa_r>:
 8019d88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019d8c:	ed2d 8b02 	vpush	{d8}
 8019d90:	69c5      	ldr	r5, [r0, #28]
 8019d92:	b091      	sub	sp, #68	; 0x44
 8019d94:	ed8d 0b02 	vstr	d0, [sp, #8]
 8019d98:	ec59 8b10 	vmov	r8, r9, d0
 8019d9c:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8019d9e:	9106      	str	r1, [sp, #24]
 8019da0:	4606      	mov	r6, r0
 8019da2:	9208      	str	r2, [sp, #32]
 8019da4:	930c      	str	r3, [sp, #48]	; 0x30
 8019da6:	b975      	cbnz	r5, 8019dc6 <_dtoa_r+0x3e>
 8019da8:	2010      	movs	r0, #16
 8019daa:	f000 fda5 	bl	801a8f8 <malloc>
 8019dae:	4602      	mov	r2, r0
 8019db0:	61f0      	str	r0, [r6, #28]
 8019db2:	b920      	cbnz	r0, 8019dbe <_dtoa_r+0x36>
 8019db4:	4ba6      	ldr	r3, [pc, #664]	; (801a050 <_dtoa_r+0x2c8>)
 8019db6:	21ef      	movs	r1, #239	; 0xef
 8019db8:	48a6      	ldr	r0, [pc, #664]	; (801a054 <_dtoa_r+0x2cc>)
 8019dba:	f7ff ff3f 	bl	8019c3c <__assert_func>
 8019dbe:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8019dc2:	6005      	str	r5, [r0, #0]
 8019dc4:	60c5      	str	r5, [r0, #12]
 8019dc6:	69f3      	ldr	r3, [r6, #28]
 8019dc8:	6819      	ldr	r1, [r3, #0]
 8019dca:	b151      	cbz	r1, 8019de2 <_dtoa_r+0x5a>
 8019dcc:	685a      	ldr	r2, [r3, #4]
 8019dce:	604a      	str	r2, [r1, #4]
 8019dd0:	2301      	movs	r3, #1
 8019dd2:	4093      	lsls	r3, r2
 8019dd4:	608b      	str	r3, [r1, #8]
 8019dd6:	4630      	mov	r0, r6
 8019dd8:	f000 fe82 	bl	801aae0 <_Bfree>
 8019ddc:	69f3      	ldr	r3, [r6, #28]
 8019dde:	2200      	movs	r2, #0
 8019de0:	601a      	str	r2, [r3, #0]
 8019de2:	f1b9 0300 	subs.w	r3, r9, #0
 8019de6:	bfbb      	ittet	lt
 8019de8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8019dec:	9303      	strlt	r3, [sp, #12]
 8019dee:	2300      	movge	r3, #0
 8019df0:	2201      	movlt	r2, #1
 8019df2:	bfac      	ite	ge
 8019df4:	6023      	strge	r3, [r4, #0]
 8019df6:	6022      	strlt	r2, [r4, #0]
 8019df8:	4b97      	ldr	r3, [pc, #604]	; (801a058 <_dtoa_r+0x2d0>)
 8019dfa:	9c03      	ldr	r4, [sp, #12]
 8019dfc:	43a3      	bics	r3, r4
 8019dfe:	d11c      	bne.n	8019e3a <_dtoa_r+0xb2>
 8019e00:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8019e02:	f242 730f 	movw	r3, #9999	; 0x270f
 8019e06:	6013      	str	r3, [r2, #0]
 8019e08:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8019e0c:	ea53 0308 	orrs.w	r3, r3, r8
 8019e10:	f000 84fb 	beq.w	801a80a <_dtoa_r+0xa82>
 8019e14:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8019e16:	b963      	cbnz	r3, 8019e32 <_dtoa_r+0xaa>
 8019e18:	4b90      	ldr	r3, [pc, #576]	; (801a05c <_dtoa_r+0x2d4>)
 8019e1a:	e020      	b.n	8019e5e <_dtoa_r+0xd6>
 8019e1c:	4b90      	ldr	r3, [pc, #576]	; (801a060 <_dtoa_r+0x2d8>)
 8019e1e:	9301      	str	r3, [sp, #4]
 8019e20:	3308      	adds	r3, #8
 8019e22:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8019e24:	6013      	str	r3, [r2, #0]
 8019e26:	9801      	ldr	r0, [sp, #4]
 8019e28:	b011      	add	sp, #68	; 0x44
 8019e2a:	ecbd 8b02 	vpop	{d8}
 8019e2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019e32:	4b8a      	ldr	r3, [pc, #552]	; (801a05c <_dtoa_r+0x2d4>)
 8019e34:	9301      	str	r3, [sp, #4]
 8019e36:	3303      	adds	r3, #3
 8019e38:	e7f3      	b.n	8019e22 <_dtoa_r+0x9a>
 8019e3a:	ed9d 8b02 	vldr	d8, [sp, #8]
 8019e3e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8019e42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019e46:	d10c      	bne.n	8019e62 <_dtoa_r+0xda>
 8019e48:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8019e4a:	2301      	movs	r3, #1
 8019e4c:	6013      	str	r3, [r2, #0]
 8019e4e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8019e50:	2b00      	cmp	r3, #0
 8019e52:	f000 84d7 	beq.w	801a804 <_dtoa_r+0xa7c>
 8019e56:	4b83      	ldr	r3, [pc, #524]	; (801a064 <_dtoa_r+0x2dc>)
 8019e58:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8019e5a:	6013      	str	r3, [r2, #0]
 8019e5c:	3b01      	subs	r3, #1
 8019e5e:	9301      	str	r3, [sp, #4]
 8019e60:	e7e1      	b.n	8019e26 <_dtoa_r+0x9e>
 8019e62:	aa0e      	add	r2, sp, #56	; 0x38
 8019e64:	a90f      	add	r1, sp, #60	; 0x3c
 8019e66:	4630      	mov	r0, r6
 8019e68:	eeb0 0b48 	vmov.f64	d0, d8
 8019e6c:	f001 f91a 	bl	801b0a4 <__d2b>
 8019e70:	f3c4 530a 	ubfx	r3, r4, #20, #11
 8019e74:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8019e76:	4605      	mov	r5, r0
 8019e78:	2b00      	cmp	r3, #0
 8019e7a:	d046      	beq.n	8019f0a <_dtoa_r+0x182>
 8019e7c:	eeb0 7b48 	vmov.f64	d7, d8
 8019e80:	ee18 1a90 	vmov	r1, s17
 8019e84:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8019e88:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 8019e8c:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8019e90:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8019e94:	2000      	movs	r0, #0
 8019e96:	ee07 1a90 	vmov	s15, r1
 8019e9a:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 8019e9e:	ed9f 5b66 	vldr	d5, [pc, #408]	; 801a038 <_dtoa_r+0x2b0>
 8019ea2:	ee37 7b46 	vsub.f64	d7, d7, d6
 8019ea6:	ed9f 6b66 	vldr	d6, [pc, #408]	; 801a040 <_dtoa_r+0x2b8>
 8019eaa:	eea7 6b05 	vfma.f64	d6, d7, d5
 8019eae:	ed9f 5b66 	vldr	d5, [pc, #408]	; 801a048 <_dtoa_r+0x2c0>
 8019eb2:	ee07 3a90 	vmov	s15, r3
 8019eb6:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8019eba:	eeb0 7b46 	vmov.f64	d7, d6
 8019ebe:	eea4 7b05 	vfma.f64	d7, d4, d5
 8019ec2:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8019ec6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8019eca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019ece:	ee16 ba90 	vmov	fp, s13
 8019ed2:	9009      	str	r0, [sp, #36]	; 0x24
 8019ed4:	d508      	bpl.n	8019ee8 <_dtoa_r+0x160>
 8019ed6:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8019eda:	eeb4 6b47 	vcmp.f64	d6, d7
 8019ede:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019ee2:	bf18      	it	ne
 8019ee4:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8019ee8:	f1bb 0f16 	cmp.w	fp, #22
 8019eec:	d82b      	bhi.n	8019f46 <_dtoa_r+0x1be>
 8019eee:	495e      	ldr	r1, [pc, #376]	; (801a068 <_dtoa_r+0x2e0>)
 8019ef0:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 8019ef4:	ed91 7b00 	vldr	d7, [r1]
 8019ef8:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8019efc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019f00:	d501      	bpl.n	8019f06 <_dtoa_r+0x17e>
 8019f02:	f10b 3bff 	add.w	fp, fp, #4294967295
 8019f06:	2100      	movs	r1, #0
 8019f08:	e01e      	b.n	8019f48 <_dtoa_r+0x1c0>
 8019f0a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8019f0c:	4413      	add	r3, r2
 8019f0e:	f203 4132 	addw	r1, r3, #1074	; 0x432
 8019f12:	2920      	cmp	r1, #32
 8019f14:	bfc1      	itttt	gt
 8019f16:	f1c1 0140 	rsbgt	r1, r1, #64	; 0x40
 8019f1a:	408c      	lslgt	r4, r1
 8019f1c:	f203 4112 	addwgt	r1, r3, #1042	; 0x412
 8019f20:	fa28 f101 	lsrgt.w	r1, r8, r1
 8019f24:	bfd6      	itet	le
 8019f26:	f1c1 0120 	rsble	r1, r1, #32
 8019f2a:	4321      	orrgt	r1, r4
 8019f2c:	fa08 f101 	lslle.w	r1, r8, r1
 8019f30:	ee07 1a90 	vmov	s15, r1
 8019f34:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8019f38:	3b01      	subs	r3, #1
 8019f3a:	ee17 1a90 	vmov	r1, s15
 8019f3e:	2001      	movs	r0, #1
 8019f40:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8019f44:	e7a7      	b.n	8019e96 <_dtoa_r+0x10e>
 8019f46:	2101      	movs	r1, #1
 8019f48:	1ad2      	subs	r2, r2, r3
 8019f4a:	1e53      	subs	r3, r2, #1
 8019f4c:	9305      	str	r3, [sp, #20]
 8019f4e:	bf45      	ittet	mi
 8019f50:	f1c2 0301 	rsbmi	r3, r2, #1
 8019f54:	9304      	strmi	r3, [sp, #16]
 8019f56:	2300      	movpl	r3, #0
 8019f58:	2300      	movmi	r3, #0
 8019f5a:	bf4c      	ite	mi
 8019f5c:	9305      	strmi	r3, [sp, #20]
 8019f5e:	9304      	strpl	r3, [sp, #16]
 8019f60:	f1bb 0f00 	cmp.w	fp, #0
 8019f64:	910b      	str	r1, [sp, #44]	; 0x2c
 8019f66:	db18      	blt.n	8019f9a <_dtoa_r+0x212>
 8019f68:	9b05      	ldr	r3, [sp, #20]
 8019f6a:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8019f6e:	445b      	add	r3, fp
 8019f70:	9305      	str	r3, [sp, #20]
 8019f72:	2300      	movs	r3, #0
 8019f74:	9a06      	ldr	r2, [sp, #24]
 8019f76:	2a09      	cmp	r2, #9
 8019f78:	d848      	bhi.n	801a00c <_dtoa_r+0x284>
 8019f7a:	2a05      	cmp	r2, #5
 8019f7c:	bfc4      	itt	gt
 8019f7e:	3a04      	subgt	r2, #4
 8019f80:	9206      	strgt	r2, [sp, #24]
 8019f82:	9a06      	ldr	r2, [sp, #24]
 8019f84:	f1a2 0202 	sub.w	r2, r2, #2
 8019f88:	bfcc      	ite	gt
 8019f8a:	2400      	movgt	r4, #0
 8019f8c:	2401      	movle	r4, #1
 8019f8e:	2a03      	cmp	r2, #3
 8019f90:	d847      	bhi.n	801a022 <_dtoa_r+0x29a>
 8019f92:	e8df f002 	tbb	[pc, r2]
 8019f96:	2d0b      	.short	0x2d0b
 8019f98:	392b      	.short	0x392b
 8019f9a:	9b04      	ldr	r3, [sp, #16]
 8019f9c:	2200      	movs	r2, #0
 8019f9e:	eba3 030b 	sub.w	r3, r3, fp
 8019fa2:	9304      	str	r3, [sp, #16]
 8019fa4:	920a      	str	r2, [sp, #40]	; 0x28
 8019fa6:	f1cb 0300 	rsb	r3, fp, #0
 8019faa:	e7e3      	b.n	8019f74 <_dtoa_r+0x1ec>
 8019fac:	2200      	movs	r2, #0
 8019fae:	9207      	str	r2, [sp, #28]
 8019fb0:	9a08      	ldr	r2, [sp, #32]
 8019fb2:	2a00      	cmp	r2, #0
 8019fb4:	dc38      	bgt.n	801a028 <_dtoa_r+0x2a0>
 8019fb6:	f04f 0a01 	mov.w	sl, #1
 8019fba:	46d1      	mov	r9, sl
 8019fbc:	4652      	mov	r2, sl
 8019fbe:	f8cd a020 	str.w	sl, [sp, #32]
 8019fc2:	69f7      	ldr	r7, [r6, #28]
 8019fc4:	2100      	movs	r1, #0
 8019fc6:	2004      	movs	r0, #4
 8019fc8:	f100 0c14 	add.w	ip, r0, #20
 8019fcc:	4594      	cmp	ip, r2
 8019fce:	d930      	bls.n	801a032 <_dtoa_r+0x2aa>
 8019fd0:	6079      	str	r1, [r7, #4]
 8019fd2:	4630      	mov	r0, r6
 8019fd4:	930d      	str	r3, [sp, #52]	; 0x34
 8019fd6:	f000 fd43 	bl	801aa60 <_Balloc>
 8019fda:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019fdc:	9001      	str	r0, [sp, #4]
 8019fde:	4602      	mov	r2, r0
 8019fe0:	2800      	cmp	r0, #0
 8019fe2:	d145      	bne.n	801a070 <_dtoa_r+0x2e8>
 8019fe4:	4b21      	ldr	r3, [pc, #132]	; (801a06c <_dtoa_r+0x2e4>)
 8019fe6:	f240 11af 	movw	r1, #431	; 0x1af
 8019fea:	e6e5      	b.n	8019db8 <_dtoa_r+0x30>
 8019fec:	2201      	movs	r2, #1
 8019fee:	e7de      	b.n	8019fae <_dtoa_r+0x226>
 8019ff0:	2200      	movs	r2, #0
 8019ff2:	9207      	str	r2, [sp, #28]
 8019ff4:	9a08      	ldr	r2, [sp, #32]
 8019ff6:	eb0b 0a02 	add.w	sl, fp, r2
 8019ffa:	f10a 0901 	add.w	r9, sl, #1
 8019ffe:	464a      	mov	r2, r9
 801a000:	2a01      	cmp	r2, #1
 801a002:	bfb8      	it	lt
 801a004:	2201      	movlt	r2, #1
 801a006:	e7dc      	b.n	8019fc2 <_dtoa_r+0x23a>
 801a008:	2201      	movs	r2, #1
 801a00a:	e7f2      	b.n	8019ff2 <_dtoa_r+0x26a>
 801a00c:	2401      	movs	r4, #1
 801a00e:	2200      	movs	r2, #0
 801a010:	e9cd 2406 	strd	r2, r4, [sp, #24]
 801a014:	f04f 3aff 	mov.w	sl, #4294967295
 801a018:	2100      	movs	r1, #0
 801a01a:	46d1      	mov	r9, sl
 801a01c:	2212      	movs	r2, #18
 801a01e:	9108      	str	r1, [sp, #32]
 801a020:	e7cf      	b.n	8019fc2 <_dtoa_r+0x23a>
 801a022:	2201      	movs	r2, #1
 801a024:	9207      	str	r2, [sp, #28]
 801a026:	e7f5      	b.n	801a014 <_dtoa_r+0x28c>
 801a028:	f8dd a020 	ldr.w	sl, [sp, #32]
 801a02c:	46d1      	mov	r9, sl
 801a02e:	4652      	mov	r2, sl
 801a030:	e7c7      	b.n	8019fc2 <_dtoa_r+0x23a>
 801a032:	3101      	adds	r1, #1
 801a034:	0040      	lsls	r0, r0, #1
 801a036:	e7c7      	b.n	8019fc8 <_dtoa_r+0x240>
 801a038:	636f4361 	.word	0x636f4361
 801a03c:	3fd287a7 	.word	0x3fd287a7
 801a040:	8b60c8b3 	.word	0x8b60c8b3
 801a044:	3fc68a28 	.word	0x3fc68a28
 801a048:	509f79fb 	.word	0x509f79fb
 801a04c:	3fd34413 	.word	0x3fd34413
 801a050:	0801ec56 	.word	0x0801ec56
 801a054:	0801ee43 	.word	0x0801ee43
 801a058:	7ff00000 	.word	0x7ff00000
 801a05c:	0801ee3f 	.word	0x0801ee3f
 801a060:	0801ee36 	.word	0x0801ee36
 801a064:	0801edd7 	.word	0x0801edd7
 801a068:	0801ef30 	.word	0x0801ef30
 801a06c:	0801ee9b 	.word	0x0801ee9b
 801a070:	69f2      	ldr	r2, [r6, #28]
 801a072:	9901      	ldr	r1, [sp, #4]
 801a074:	6011      	str	r1, [r2, #0]
 801a076:	f1b9 0f0e 	cmp.w	r9, #14
 801a07a:	d86c      	bhi.n	801a156 <_dtoa_r+0x3ce>
 801a07c:	2c00      	cmp	r4, #0
 801a07e:	d06a      	beq.n	801a156 <_dtoa_r+0x3ce>
 801a080:	f1bb 0f00 	cmp.w	fp, #0
 801a084:	f340 80a0 	ble.w	801a1c8 <_dtoa_r+0x440>
 801a088:	4ac1      	ldr	r2, [pc, #772]	; (801a390 <_dtoa_r+0x608>)
 801a08a:	f00b 010f 	and.w	r1, fp, #15
 801a08e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 801a092:	f41b 7f80 	tst.w	fp, #256	; 0x100
 801a096:	ed92 7b00 	vldr	d7, [r2]
 801a09a:	ea4f 122b 	mov.w	r2, fp, asr #4
 801a09e:	f000 8087 	beq.w	801a1b0 <_dtoa_r+0x428>
 801a0a2:	49bc      	ldr	r1, [pc, #752]	; (801a394 <_dtoa_r+0x60c>)
 801a0a4:	ed91 6b08 	vldr	d6, [r1, #32]
 801a0a8:	ee88 6b06 	vdiv.f64	d6, d8, d6
 801a0ac:	ed8d 6b02 	vstr	d6, [sp, #8]
 801a0b0:	f002 020f 	and.w	r2, r2, #15
 801a0b4:	2103      	movs	r1, #3
 801a0b6:	48b7      	ldr	r0, [pc, #732]	; (801a394 <_dtoa_r+0x60c>)
 801a0b8:	2a00      	cmp	r2, #0
 801a0ba:	d17b      	bne.n	801a1b4 <_dtoa_r+0x42c>
 801a0bc:	ed9d 6b02 	vldr	d6, [sp, #8]
 801a0c0:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801a0c4:	ed8d 7b02 	vstr	d7, [sp, #8]
 801a0c8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801a0ca:	ed9d 7b02 	vldr	d7, [sp, #8]
 801a0ce:	2a00      	cmp	r2, #0
 801a0d0:	f000 80a0 	beq.w	801a214 <_dtoa_r+0x48c>
 801a0d4:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 801a0d8:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801a0dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a0e0:	f140 8098 	bpl.w	801a214 <_dtoa_r+0x48c>
 801a0e4:	f1b9 0f00 	cmp.w	r9, #0
 801a0e8:	f000 8094 	beq.w	801a214 <_dtoa_r+0x48c>
 801a0ec:	f1ba 0f00 	cmp.w	sl, #0
 801a0f0:	dd2f      	ble.n	801a152 <_dtoa_r+0x3ca>
 801a0f2:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 801a0f6:	ee27 7b06 	vmul.f64	d7, d7, d6
 801a0fa:	ed8d 7b02 	vstr	d7, [sp, #8]
 801a0fe:	f10b 32ff 	add.w	r2, fp, #4294967295
 801a102:	3101      	adds	r1, #1
 801a104:	4654      	mov	r4, sl
 801a106:	ed9d 6b02 	vldr	d6, [sp, #8]
 801a10a:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 801a10e:	ee07 1a90 	vmov	s15, r1
 801a112:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801a116:	eea7 5b06 	vfma.f64	d5, d7, d6
 801a11a:	ee15 7a90 	vmov	r7, s11
 801a11e:	ec51 0b15 	vmov	r0, r1, d5
 801a122:	f1a7 7150 	sub.w	r1, r7, #54525952	; 0x3400000
 801a126:	2c00      	cmp	r4, #0
 801a128:	d177      	bne.n	801a21a <_dtoa_r+0x492>
 801a12a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 801a12e:	ee36 6b47 	vsub.f64	d6, d6, d7
 801a132:	ec41 0b17 	vmov	d7, r0, r1
 801a136:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801a13a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a13e:	f300 826a 	bgt.w	801a616 <_dtoa_r+0x88e>
 801a142:	eeb1 7b47 	vneg.f64	d7, d7
 801a146:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801a14a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a14e:	f100 8260 	bmi.w	801a612 <_dtoa_r+0x88a>
 801a152:	ed8d 8b02 	vstr	d8, [sp, #8]
 801a156:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801a158:	2a00      	cmp	r2, #0
 801a15a:	f2c0 811d 	blt.w	801a398 <_dtoa_r+0x610>
 801a15e:	f1bb 0f0e 	cmp.w	fp, #14
 801a162:	f300 8119 	bgt.w	801a398 <_dtoa_r+0x610>
 801a166:	4b8a      	ldr	r3, [pc, #552]	; (801a390 <_dtoa_r+0x608>)
 801a168:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801a16c:	ed93 6b00 	vldr	d6, [r3]
 801a170:	9b08      	ldr	r3, [sp, #32]
 801a172:	2b00      	cmp	r3, #0
 801a174:	f280 80b7 	bge.w	801a2e6 <_dtoa_r+0x55e>
 801a178:	f1b9 0f00 	cmp.w	r9, #0
 801a17c:	f300 80b3 	bgt.w	801a2e6 <_dtoa_r+0x55e>
 801a180:	f040 8246 	bne.w	801a610 <_dtoa_r+0x888>
 801a184:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 801a188:	ee26 6b07 	vmul.f64	d6, d6, d7
 801a18c:	ed9d 7b02 	vldr	d7, [sp, #8]
 801a190:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801a194:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a198:	464c      	mov	r4, r9
 801a19a:	464f      	mov	r7, r9
 801a19c:	f280 821c 	bge.w	801a5d8 <_dtoa_r+0x850>
 801a1a0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801a1a4:	2331      	movs	r3, #49	; 0x31
 801a1a6:	f808 3b01 	strb.w	r3, [r8], #1
 801a1aa:	f10b 0b01 	add.w	fp, fp, #1
 801a1ae:	e218      	b.n	801a5e2 <_dtoa_r+0x85a>
 801a1b0:	2102      	movs	r1, #2
 801a1b2:	e780      	b.n	801a0b6 <_dtoa_r+0x32e>
 801a1b4:	07d4      	lsls	r4, r2, #31
 801a1b6:	d504      	bpl.n	801a1c2 <_dtoa_r+0x43a>
 801a1b8:	ed90 6b00 	vldr	d6, [r0]
 801a1bc:	3101      	adds	r1, #1
 801a1be:	ee27 7b06 	vmul.f64	d7, d7, d6
 801a1c2:	1052      	asrs	r2, r2, #1
 801a1c4:	3008      	adds	r0, #8
 801a1c6:	e777      	b.n	801a0b8 <_dtoa_r+0x330>
 801a1c8:	d022      	beq.n	801a210 <_dtoa_r+0x488>
 801a1ca:	f1cb 0200 	rsb	r2, fp, #0
 801a1ce:	4970      	ldr	r1, [pc, #448]	; (801a390 <_dtoa_r+0x608>)
 801a1d0:	f002 000f 	and.w	r0, r2, #15
 801a1d4:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 801a1d8:	ed91 7b00 	vldr	d7, [r1]
 801a1dc:	ee28 7b07 	vmul.f64	d7, d8, d7
 801a1e0:	ed8d 7b02 	vstr	d7, [sp, #8]
 801a1e4:	486b      	ldr	r0, [pc, #428]	; (801a394 <_dtoa_r+0x60c>)
 801a1e6:	1112      	asrs	r2, r2, #4
 801a1e8:	2400      	movs	r4, #0
 801a1ea:	2102      	movs	r1, #2
 801a1ec:	b92a      	cbnz	r2, 801a1fa <_dtoa_r+0x472>
 801a1ee:	2c00      	cmp	r4, #0
 801a1f0:	f43f af6a 	beq.w	801a0c8 <_dtoa_r+0x340>
 801a1f4:	ed8d 7b02 	vstr	d7, [sp, #8]
 801a1f8:	e766      	b.n	801a0c8 <_dtoa_r+0x340>
 801a1fa:	07d7      	lsls	r7, r2, #31
 801a1fc:	d505      	bpl.n	801a20a <_dtoa_r+0x482>
 801a1fe:	ed90 6b00 	vldr	d6, [r0]
 801a202:	3101      	adds	r1, #1
 801a204:	2401      	movs	r4, #1
 801a206:	ee27 7b06 	vmul.f64	d7, d7, d6
 801a20a:	1052      	asrs	r2, r2, #1
 801a20c:	3008      	adds	r0, #8
 801a20e:	e7ed      	b.n	801a1ec <_dtoa_r+0x464>
 801a210:	2102      	movs	r1, #2
 801a212:	e759      	b.n	801a0c8 <_dtoa_r+0x340>
 801a214:	465a      	mov	r2, fp
 801a216:	464c      	mov	r4, r9
 801a218:	e775      	b.n	801a106 <_dtoa_r+0x37e>
 801a21a:	ec41 0b17 	vmov	d7, r0, r1
 801a21e:	495c      	ldr	r1, [pc, #368]	; (801a390 <_dtoa_r+0x608>)
 801a220:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 801a224:	ed11 4b02 	vldr	d4, [r1, #-8]
 801a228:	9901      	ldr	r1, [sp, #4]
 801a22a:	440c      	add	r4, r1
 801a22c:	9907      	ldr	r1, [sp, #28]
 801a22e:	b351      	cbz	r1, 801a286 <_dtoa_r+0x4fe>
 801a230:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 801a234:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 801a238:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801a23c:	ee83 5b04 	vdiv.f64	d5, d3, d4
 801a240:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 801a244:	ee35 7b47 	vsub.f64	d7, d5, d7
 801a248:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801a24c:	ee14 1a90 	vmov	r1, s9
 801a250:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801a254:	3130      	adds	r1, #48	; 0x30
 801a256:	ee36 6b45 	vsub.f64	d6, d6, d5
 801a25a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801a25e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a262:	f808 1b01 	strb.w	r1, [r8], #1
 801a266:	d439      	bmi.n	801a2dc <_dtoa_r+0x554>
 801a268:	ee32 5b46 	vsub.f64	d5, d2, d6
 801a26c:	eeb4 5bc7 	vcmpe.f64	d5, d7
 801a270:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a274:	d472      	bmi.n	801a35c <_dtoa_r+0x5d4>
 801a276:	45a0      	cmp	r8, r4
 801a278:	f43f af6b 	beq.w	801a152 <_dtoa_r+0x3ca>
 801a27c:	ee27 7b03 	vmul.f64	d7, d7, d3
 801a280:	ee26 6b03 	vmul.f64	d6, d6, d3
 801a284:	e7e0      	b.n	801a248 <_dtoa_r+0x4c0>
 801a286:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801a28a:	ee27 7b04 	vmul.f64	d7, d7, d4
 801a28e:	4620      	mov	r0, r4
 801a290:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 801a294:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801a298:	ee14 1a90 	vmov	r1, s9
 801a29c:	3130      	adds	r1, #48	; 0x30
 801a29e:	f808 1b01 	strb.w	r1, [r8], #1
 801a2a2:	45a0      	cmp	r8, r4
 801a2a4:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801a2a8:	ee36 6b45 	vsub.f64	d6, d6, d5
 801a2ac:	d118      	bne.n	801a2e0 <_dtoa_r+0x558>
 801a2ae:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 801a2b2:	ee37 4b05 	vadd.f64	d4, d7, d5
 801a2b6:	eeb4 6bc4 	vcmpe.f64	d6, d4
 801a2ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a2be:	dc4d      	bgt.n	801a35c <_dtoa_r+0x5d4>
 801a2c0:	ee35 5b47 	vsub.f64	d5, d5, d7
 801a2c4:	eeb4 6bc5 	vcmpe.f64	d6, d5
 801a2c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a2cc:	f57f af41 	bpl.w	801a152 <_dtoa_r+0x3ca>
 801a2d0:	4680      	mov	r8, r0
 801a2d2:	3801      	subs	r0, #1
 801a2d4:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 801a2d8:	2b30      	cmp	r3, #48	; 0x30
 801a2da:	d0f9      	beq.n	801a2d0 <_dtoa_r+0x548>
 801a2dc:	4693      	mov	fp, r2
 801a2de:	e02a      	b.n	801a336 <_dtoa_r+0x5ae>
 801a2e0:	ee26 6b03 	vmul.f64	d6, d6, d3
 801a2e4:	e7d6      	b.n	801a294 <_dtoa_r+0x50c>
 801a2e6:	ed9d 7b02 	vldr	d7, [sp, #8]
 801a2ea:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 801a2ee:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801a2f2:	ee87 5b06 	vdiv.f64	d5, d7, d6
 801a2f6:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 801a2fa:	ee15 3a10 	vmov	r3, s10
 801a2fe:	3330      	adds	r3, #48	; 0x30
 801a300:	f808 3b01 	strb.w	r3, [r8], #1
 801a304:	9b01      	ldr	r3, [sp, #4]
 801a306:	eba8 0303 	sub.w	r3, r8, r3
 801a30a:	4599      	cmp	r9, r3
 801a30c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 801a310:	eea3 7b46 	vfms.f64	d7, d3, d6
 801a314:	d133      	bne.n	801a37e <_dtoa_r+0x5f6>
 801a316:	ee37 7b07 	vadd.f64	d7, d7, d7
 801a31a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801a31e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a322:	dc1a      	bgt.n	801a35a <_dtoa_r+0x5d2>
 801a324:	eeb4 7b46 	vcmp.f64	d7, d6
 801a328:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a32c:	d103      	bne.n	801a336 <_dtoa_r+0x5ae>
 801a32e:	ee15 3a10 	vmov	r3, s10
 801a332:	07d9      	lsls	r1, r3, #31
 801a334:	d411      	bmi.n	801a35a <_dtoa_r+0x5d2>
 801a336:	4629      	mov	r1, r5
 801a338:	4630      	mov	r0, r6
 801a33a:	f000 fbd1 	bl	801aae0 <_Bfree>
 801a33e:	2300      	movs	r3, #0
 801a340:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801a342:	f888 3000 	strb.w	r3, [r8]
 801a346:	f10b 0301 	add.w	r3, fp, #1
 801a34a:	6013      	str	r3, [r2, #0]
 801a34c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801a34e:	2b00      	cmp	r3, #0
 801a350:	f43f ad69 	beq.w	8019e26 <_dtoa_r+0x9e>
 801a354:	f8c3 8000 	str.w	r8, [r3]
 801a358:	e565      	b.n	8019e26 <_dtoa_r+0x9e>
 801a35a:	465a      	mov	r2, fp
 801a35c:	4643      	mov	r3, r8
 801a35e:	4698      	mov	r8, r3
 801a360:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 801a364:	2939      	cmp	r1, #57	; 0x39
 801a366:	d106      	bne.n	801a376 <_dtoa_r+0x5ee>
 801a368:	9901      	ldr	r1, [sp, #4]
 801a36a:	4299      	cmp	r1, r3
 801a36c:	d1f7      	bne.n	801a35e <_dtoa_r+0x5d6>
 801a36e:	9801      	ldr	r0, [sp, #4]
 801a370:	2130      	movs	r1, #48	; 0x30
 801a372:	3201      	adds	r2, #1
 801a374:	7001      	strb	r1, [r0, #0]
 801a376:	7819      	ldrb	r1, [r3, #0]
 801a378:	3101      	adds	r1, #1
 801a37a:	7019      	strb	r1, [r3, #0]
 801a37c:	e7ae      	b.n	801a2dc <_dtoa_r+0x554>
 801a37e:	ee27 7b04 	vmul.f64	d7, d7, d4
 801a382:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801a386:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a38a:	d1b2      	bne.n	801a2f2 <_dtoa_r+0x56a>
 801a38c:	e7d3      	b.n	801a336 <_dtoa_r+0x5ae>
 801a38e:	bf00      	nop
 801a390:	0801ef30 	.word	0x0801ef30
 801a394:	0801ef08 	.word	0x0801ef08
 801a398:	9907      	ldr	r1, [sp, #28]
 801a39a:	2900      	cmp	r1, #0
 801a39c:	f000 80d0 	beq.w	801a540 <_dtoa_r+0x7b8>
 801a3a0:	9906      	ldr	r1, [sp, #24]
 801a3a2:	2901      	cmp	r1, #1
 801a3a4:	f300 80b4 	bgt.w	801a510 <_dtoa_r+0x788>
 801a3a8:	9909      	ldr	r1, [sp, #36]	; 0x24
 801a3aa:	2900      	cmp	r1, #0
 801a3ac:	f000 80ac 	beq.w	801a508 <_dtoa_r+0x780>
 801a3b0:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801a3b4:	f8dd 8010 	ldr.w	r8, [sp, #16]
 801a3b8:	461c      	mov	r4, r3
 801a3ba:	9309      	str	r3, [sp, #36]	; 0x24
 801a3bc:	9b04      	ldr	r3, [sp, #16]
 801a3be:	4413      	add	r3, r2
 801a3c0:	9304      	str	r3, [sp, #16]
 801a3c2:	9b05      	ldr	r3, [sp, #20]
 801a3c4:	2101      	movs	r1, #1
 801a3c6:	4413      	add	r3, r2
 801a3c8:	4630      	mov	r0, r6
 801a3ca:	9305      	str	r3, [sp, #20]
 801a3cc:	f000 fc3e 	bl	801ac4c <__i2b>
 801a3d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a3d2:	4607      	mov	r7, r0
 801a3d4:	f1b8 0f00 	cmp.w	r8, #0
 801a3d8:	d00d      	beq.n	801a3f6 <_dtoa_r+0x66e>
 801a3da:	9a05      	ldr	r2, [sp, #20]
 801a3dc:	2a00      	cmp	r2, #0
 801a3de:	dd0a      	ble.n	801a3f6 <_dtoa_r+0x66e>
 801a3e0:	4542      	cmp	r2, r8
 801a3e2:	9904      	ldr	r1, [sp, #16]
 801a3e4:	bfa8      	it	ge
 801a3e6:	4642      	movge	r2, r8
 801a3e8:	1a89      	subs	r1, r1, r2
 801a3ea:	9104      	str	r1, [sp, #16]
 801a3ec:	9905      	ldr	r1, [sp, #20]
 801a3ee:	eba8 0802 	sub.w	r8, r8, r2
 801a3f2:	1a8a      	subs	r2, r1, r2
 801a3f4:	9205      	str	r2, [sp, #20]
 801a3f6:	b303      	cbz	r3, 801a43a <_dtoa_r+0x6b2>
 801a3f8:	9a07      	ldr	r2, [sp, #28]
 801a3fa:	2a00      	cmp	r2, #0
 801a3fc:	f000 80a5 	beq.w	801a54a <_dtoa_r+0x7c2>
 801a400:	2c00      	cmp	r4, #0
 801a402:	dd13      	ble.n	801a42c <_dtoa_r+0x6a4>
 801a404:	4639      	mov	r1, r7
 801a406:	4622      	mov	r2, r4
 801a408:	4630      	mov	r0, r6
 801a40a:	930d      	str	r3, [sp, #52]	; 0x34
 801a40c:	f000 fcde 	bl	801adcc <__pow5mult>
 801a410:	462a      	mov	r2, r5
 801a412:	4601      	mov	r1, r0
 801a414:	4607      	mov	r7, r0
 801a416:	4630      	mov	r0, r6
 801a418:	f000 fc2e 	bl	801ac78 <__multiply>
 801a41c:	4629      	mov	r1, r5
 801a41e:	9009      	str	r0, [sp, #36]	; 0x24
 801a420:	4630      	mov	r0, r6
 801a422:	f000 fb5d 	bl	801aae0 <_Bfree>
 801a426:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a428:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a42a:	4615      	mov	r5, r2
 801a42c:	1b1a      	subs	r2, r3, r4
 801a42e:	d004      	beq.n	801a43a <_dtoa_r+0x6b2>
 801a430:	4629      	mov	r1, r5
 801a432:	4630      	mov	r0, r6
 801a434:	f000 fcca 	bl	801adcc <__pow5mult>
 801a438:	4605      	mov	r5, r0
 801a43a:	2101      	movs	r1, #1
 801a43c:	4630      	mov	r0, r6
 801a43e:	f000 fc05 	bl	801ac4c <__i2b>
 801a442:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a444:	2b00      	cmp	r3, #0
 801a446:	4604      	mov	r4, r0
 801a448:	f340 8081 	ble.w	801a54e <_dtoa_r+0x7c6>
 801a44c:	461a      	mov	r2, r3
 801a44e:	4601      	mov	r1, r0
 801a450:	4630      	mov	r0, r6
 801a452:	f000 fcbb 	bl	801adcc <__pow5mult>
 801a456:	9b06      	ldr	r3, [sp, #24]
 801a458:	2b01      	cmp	r3, #1
 801a45a:	4604      	mov	r4, r0
 801a45c:	dd7a      	ble.n	801a554 <_dtoa_r+0x7cc>
 801a45e:	2300      	movs	r3, #0
 801a460:	9309      	str	r3, [sp, #36]	; 0x24
 801a462:	6922      	ldr	r2, [r4, #16]
 801a464:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801a468:	6910      	ldr	r0, [r2, #16]
 801a46a:	f000 fba1 	bl	801abb0 <__hi0bits>
 801a46e:	f1c0 0020 	rsb	r0, r0, #32
 801a472:	9b05      	ldr	r3, [sp, #20]
 801a474:	4418      	add	r0, r3
 801a476:	f010 001f 	ands.w	r0, r0, #31
 801a47a:	f000 8093 	beq.w	801a5a4 <_dtoa_r+0x81c>
 801a47e:	f1c0 0220 	rsb	r2, r0, #32
 801a482:	2a04      	cmp	r2, #4
 801a484:	f340 8085 	ble.w	801a592 <_dtoa_r+0x80a>
 801a488:	9b04      	ldr	r3, [sp, #16]
 801a48a:	f1c0 001c 	rsb	r0, r0, #28
 801a48e:	4403      	add	r3, r0
 801a490:	9304      	str	r3, [sp, #16]
 801a492:	9b05      	ldr	r3, [sp, #20]
 801a494:	4480      	add	r8, r0
 801a496:	4403      	add	r3, r0
 801a498:	9305      	str	r3, [sp, #20]
 801a49a:	9b04      	ldr	r3, [sp, #16]
 801a49c:	2b00      	cmp	r3, #0
 801a49e:	dd05      	ble.n	801a4ac <_dtoa_r+0x724>
 801a4a0:	4629      	mov	r1, r5
 801a4a2:	461a      	mov	r2, r3
 801a4a4:	4630      	mov	r0, r6
 801a4a6:	f000 fceb 	bl	801ae80 <__lshift>
 801a4aa:	4605      	mov	r5, r0
 801a4ac:	9b05      	ldr	r3, [sp, #20]
 801a4ae:	2b00      	cmp	r3, #0
 801a4b0:	dd05      	ble.n	801a4be <_dtoa_r+0x736>
 801a4b2:	4621      	mov	r1, r4
 801a4b4:	461a      	mov	r2, r3
 801a4b6:	4630      	mov	r0, r6
 801a4b8:	f000 fce2 	bl	801ae80 <__lshift>
 801a4bc:	4604      	mov	r4, r0
 801a4be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a4c0:	2b00      	cmp	r3, #0
 801a4c2:	d071      	beq.n	801a5a8 <_dtoa_r+0x820>
 801a4c4:	4621      	mov	r1, r4
 801a4c6:	4628      	mov	r0, r5
 801a4c8:	f000 fd46 	bl	801af58 <__mcmp>
 801a4cc:	2800      	cmp	r0, #0
 801a4ce:	da6b      	bge.n	801a5a8 <_dtoa_r+0x820>
 801a4d0:	2300      	movs	r3, #0
 801a4d2:	4629      	mov	r1, r5
 801a4d4:	220a      	movs	r2, #10
 801a4d6:	4630      	mov	r0, r6
 801a4d8:	f000 fb24 	bl	801ab24 <__multadd>
 801a4dc:	9b07      	ldr	r3, [sp, #28]
 801a4de:	f10b 3bff 	add.w	fp, fp, #4294967295
 801a4e2:	4605      	mov	r5, r0
 801a4e4:	2b00      	cmp	r3, #0
 801a4e6:	f000 8197 	beq.w	801a818 <_dtoa_r+0xa90>
 801a4ea:	4639      	mov	r1, r7
 801a4ec:	2300      	movs	r3, #0
 801a4ee:	220a      	movs	r2, #10
 801a4f0:	4630      	mov	r0, r6
 801a4f2:	f000 fb17 	bl	801ab24 <__multadd>
 801a4f6:	f1ba 0f00 	cmp.w	sl, #0
 801a4fa:	4607      	mov	r7, r0
 801a4fc:	f300 8093 	bgt.w	801a626 <_dtoa_r+0x89e>
 801a500:	9b06      	ldr	r3, [sp, #24]
 801a502:	2b02      	cmp	r3, #2
 801a504:	dc57      	bgt.n	801a5b6 <_dtoa_r+0x82e>
 801a506:	e08e      	b.n	801a626 <_dtoa_r+0x89e>
 801a508:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801a50a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801a50e:	e751      	b.n	801a3b4 <_dtoa_r+0x62c>
 801a510:	f109 34ff 	add.w	r4, r9, #4294967295
 801a514:	42a3      	cmp	r3, r4
 801a516:	bfbf      	itttt	lt
 801a518:	1ae2      	sublt	r2, r4, r3
 801a51a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 801a51c:	189b      	addlt	r3, r3, r2
 801a51e:	930a      	strlt	r3, [sp, #40]	; 0x28
 801a520:	bfae      	itee	ge
 801a522:	1b1c      	subge	r4, r3, r4
 801a524:	4623      	movlt	r3, r4
 801a526:	2400      	movlt	r4, #0
 801a528:	f1b9 0f00 	cmp.w	r9, #0
 801a52c:	bfb5      	itete	lt
 801a52e:	9a04      	ldrlt	r2, [sp, #16]
 801a530:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 801a534:	eba2 0809 	sublt.w	r8, r2, r9
 801a538:	464a      	movge	r2, r9
 801a53a:	bfb8      	it	lt
 801a53c:	2200      	movlt	r2, #0
 801a53e:	e73c      	b.n	801a3ba <_dtoa_r+0x632>
 801a540:	f8dd 8010 	ldr.w	r8, [sp, #16]
 801a544:	9f07      	ldr	r7, [sp, #28]
 801a546:	461c      	mov	r4, r3
 801a548:	e744      	b.n	801a3d4 <_dtoa_r+0x64c>
 801a54a:	461a      	mov	r2, r3
 801a54c:	e770      	b.n	801a430 <_dtoa_r+0x6a8>
 801a54e:	9b06      	ldr	r3, [sp, #24]
 801a550:	2b01      	cmp	r3, #1
 801a552:	dc18      	bgt.n	801a586 <_dtoa_r+0x7fe>
 801a554:	9b02      	ldr	r3, [sp, #8]
 801a556:	b9b3      	cbnz	r3, 801a586 <_dtoa_r+0x7fe>
 801a558:	9b03      	ldr	r3, [sp, #12]
 801a55a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 801a55e:	b9a2      	cbnz	r2, 801a58a <_dtoa_r+0x802>
 801a560:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801a564:	0d12      	lsrs	r2, r2, #20
 801a566:	0512      	lsls	r2, r2, #20
 801a568:	b18a      	cbz	r2, 801a58e <_dtoa_r+0x806>
 801a56a:	9b04      	ldr	r3, [sp, #16]
 801a56c:	3301      	adds	r3, #1
 801a56e:	9304      	str	r3, [sp, #16]
 801a570:	9b05      	ldr	r3, [sp, #20]
 801a572:	3301      	adds	r3, #1
 801a574:	9305      	str	r3, [sp, #20]
 801a576:	2301      	movs	r3, #1
 801a578:	9309      	str	r3, [sp, #36]	; 0x24
 801a57a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a57c:	2b00      	cmp	r3, #0
 801a57e:	f47f af70 	bne.w	801a462 <_dtoa_r+0x6da>
 801a582:	2001      	movs	r0, #1
 801a584:	e775      	b.n	801a472 <_dtoa_r+0x6ea>
 801a586:	2300      	movs	r3, #0
 801a588:	e7f6      	b.n	801a578 <_dtoa_r+0x7f0>
 801a58a:	9b02      	ldr	r3, [sp, #8]
 801a58c:	e7f4      	b.n	801a578 <_dtoa_r+0x7f0>
 801a58e:	9209      	str	r2, [sp, #36]	; 0x24
 801a590:	e7f3      	b.n	801a57a <_dtoa_r+0x7f2>
 801a592:	d082      	beq.n	801a49a <_dtoa_r+0x712>
 801a594:	9b04      	ldr	r3, [sp, #16]
 801a596:	321c      	adds	r2, #28
 801a598:	4413      	add	r3, r2
 801a59a:	9304      	str	r3, [sp, #16]
 801a59c:	9b05      	ldr	r3, [sp, #20]
 801a59e:	4490      	add	r8, r2
 801a5a0:	4413      	add	r3, r2
 801a5a2:	e779      	b.n	801a498 <_dtoa_r+0x710>
 801a5a4:	4602      	mov	r2, r0
 801a5a6:	e7f5      	b.n	801a594 <_dtoa_r+0x80c>
 801a5a8:	f1b9 0f00 	cmp.w	r9, #0
 801a5ac:	dc36      	bgt.n	801a61c <_dtoa_r+0x894>
 801a5ae:	9b06      	ldr	r3, [sp, #24]
 801a5b0:	2b02      	cmp	r3, #2
 801a5b2:	dd33      	ble.n	801a61c <_dtoa_r+0x894>
 801a5b4:	46ca      	mov	sl, r9
 801a5b6:	f1ba 0f00 	cmp.w	sl, #0
 801a5ba:	d10d      	bne.n	801a5d8 <_dtoa_r+0x850>
 801a5bc:	4621      	mov	r1, r4
 801a5be:	4653      	mov	r3, sl
 801a5c0:	2205      	movs	r2, #5
 801a5c2:	4630      	mov	r0, r6
 801a5c4:	f000 faae 	bl	801ab24 <__multadd>
 801a5c8:	4601      	mov	r1, r0
 801a5ca:	4604      	mov	r4, r0
 801a5cc:	4628      	mov	r0, r5
 801a5ce:	f000 fcc3 	bl	801af58 <__mcmp>
 801a5d2:	2800      	cmp	r0, #0
 801a5d4:	f73f ade4 	bgt.w	801a1a0 <_dtoa_r+0x418>
 801a5d8:	9b08      	ldr	r3, [sp, #32]
 801a5da:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801a5de:	ea6f 0b03 	mvn.w	fp, r3
 801a5e2:	f04f 0900 	mov.w	r9, #0
 801a5e6:	4621      	mov	r1, r4
 801a5e8:	4630      	mov	r0, r6
 801a5ea:	f000 fa79 	bl	801aae0 <_Bfree>
 801a5ee:	2f00      	cmp	r7, #0
 801a5f0:	f43f aea1 	beq.w	801a336 <_dtoa_r+0x5ae>
 801a5f4:	f1b9 0f00 	cmp.w	r9, #0
 801a5f8:	d005      	beq.n	801a606 <_dtoa_r+0x87e>
 801a5fa:	45b9      	cmp	r9, r7
 801a5fc:	d003      	beq.n	801a606 <_dtoa_r+0x87e>
 801a5fe:	4649      	mov	r1, r9
 801a600:	4630      	mov	r0, r6
 801a602:	f000 fa6d 	bl	801aae0 <_Bfree>
 801a606:	4639      	mov	r1, r7
 801a608:	4630      	mov	r0, r6
 801a60a:	f000 fa69 	bl	801aae0 <_Bfree>
 801a60e:	e692      	b.n	801a336 <_dtoa_r+0x5ae>
 801a610:	2400      	movs	r4, #0
 801a612:	4627      	mov	r7, r4
 801a614:	e7e0      	b.n	801a5d8 <_dtoa_r+0x850>
 801a616:	4693      	mov	fp, r2
 801a618:	4627      	mov	r7, r4
 801a61a:	e5c1      	b.n	801a1a0 <_dtoa_r+0x418>
 801a61c:	9b07      	ldr	r3, [sp, #28]
 801a61e:	46ca      	mov	sl, r9
 801a620:	2b00      	cmp	r3, #0
 801a622:	f000 8100 	beq.w	801a826 <_dtoa_r+0xa9e>
 801a626:	f1b8 0f00 	cmp.w	r8, #0
 801a62a:	dd05      	ble.n	801a638 <_dtoa_r+0x8b0>
 801a62c:	4639      	mov	r1, r7
 801a62e:	4642      	mov	r2, r8
 801a630:	4630      	mov	r0, r6
 801a632:	f000 fc25 	bl	801ae80 <__lshift>
 801a636:	4607      	mov	r7, r0
 801a638:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a63a:	2b00      	cmp	r3, #0
 801a63c:	d05d      	beq.n	801a6fa <_dtoa_r+0x972>
 801a63e:	6879      	ldr	r1, [r7, #4]
 801a640:	4630      	mov	r0, r6
 801a642:	f000 fa0d 	bl	801aa60 <_Balloc>
 801a646:	4680      	mov	r8, r0
 801a648:	b928      	cbnz	r0, 801a656 <_dtoa_r+0x8ce>
 801a64a:	4b82      	ldr	r3, [pc, #520]	; (801a854 <_dtoa_r+0xacc>)
 801a64c:	4602      	mov	r2, r0
 801a64e:	f240 21ef 	movw	r1, #751	; 0x2ef
 801a652:	f7ff bbb1 	b.w	8019db8 <_dtoa_r+0x30>
 801a656:	693a      	ldr	r2, [r7, #16]
 801a658:	3202      	adds	r2, #2
 801a65a:	0092      	lsls	r2, r2, #2
 801a65c:	f107 010c 	add.w	r1, r7, #12
 801a660:	300c      	adds	r0, #12
 801a662:	f7ff fadc 	bl	8019c1e <memcpy>
 801a666:	2201      	movs	r2, #1
 801a668:	4641      	mov	r1, r8
 801a66a:	4630      	mov	r0, r6
 801a66c:	f000 fc08 	bl	801ae80 <__lshift>
 801a670:	9b01      	ldr	r3, [sp, #4]
 801a672:	3301      	adds	r3, #1
 801a674:	9304      	str	r3, [sp, #16]
 801a676:	9b01      	ldr	r3, [sp, #4]
 801a678:	4453      	add	r3, sl
 801a67a:	9308      	str	r3, [sp, #32]
 801a67c:	9b02      	ldr	r3, [sp, #8]
 801a67e:	f003 0301 	and.w	r3, r3, #1
 801a682:	46b9      	mov	r9, r7
 801a684:	9307      	str	r3, [sp, #28]
 801a686:	4607      	mov	r7, r0
 801a688:	9b04      	ldr	r3, [sp, #16]
 801a68a:	4621      	mov	r1, r4
 801a68c:	3b01      	subs	r3, #1
 801a68e:	4628      	mov	r0, r5
 801a690:	9302      	str	r3, [sp, #8]
 801a692:	f7ff faf1 	bl	8019c78 <quorem>
 801a696:	4603      	mov	r3, r0
 801a698:	3330      	adds	r3, #48	; 0x30
 801a69a:	9005      	str	r0, [sp, #20]
 801a69c:	4649      	mov	r1, r9
 801a69e:	4628      	mov	r0, r5
 801a6a0:	9309      	str	r3, [sp, #36]	; 0x24
 801a6a2:	f000 fc59 	bl	801af58 <__mcmp>
 801a6a6:	463a      	mov	r2, r7
 801a6a8:	4682      	mov	sl, r0
 801a6aa:	4621      	mov	r1, r4
 801a6ac:	4630      	mov	r0, r6
 801a6ae:	f000 fc6f 	bl	801af90 <__mdiff>
 801a6b2:	68c2      	ldr	r2, [r0, #12]
 801a6b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a6b6:	4680      	mov	r8, r0
 801a6b8:	bb0a      	cbnz	r2, 801a6fe <_dtoa_r+0x976>
 801a6ba:	4601      	mov	r1, r0
 801a6bc:	4628      	mov	r0, r5
 801a6be:	f000 fc4b 	bl	801af58 <__mcmp>
 801a6c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a6c4:	4602      	mov	r2, r0
 801a6c6:	4641      	mov	r1, r8
 801a6c8:	4630      	mov	r0, r6
 801a6ca:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 801a6ce:	f000 fa07 	bl	801aae0 <_Bfree>
 801a6d2:	9b06      	ldr	r3, [sp, #24]
 801a6d4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801a6d6:	f8dd 8010 	ldr.w	r8, [sp, #16]
 801a6da:	ea43 0102 	orr.w	r1, r3, r2
 801a6de:	9b07      	ldr	r3, [sp, #28]
 801a6e0:	4319      	orrs	r1, r3
 801a6e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a6e4:	d10d      	bne.n	801a702 <_dtoa_r+0x97a>
 801a6e6:	2b39      	cmp	r3, #57	; 0x39
 801a6e8:	d029      	beq.n	801a73e <_dtoa_r+0x9b6>
 801a6ea:	f1ba 0f00 	cmp.w	sl, #0
 801a6ee:	dd01      	ble.n	801a6f4 <_dtoa_r+0x96c>
 801a6f0:	9b05      	ldr	r3, [sp, #20]
 801a6f2:	3331      	adds	r3, #49	; 0x31
 801a6f4:	9a02      	ldr	r2, [sp, #8]
 801a6f6:	7013      	strb	r3, [r2, #0]
 801a6f8:	e775      	b.n	801a5e6 <_dtoa_r+0x85e>
 801a6fa:	4638      	mov	r0, r7
 801a6fc:	e7b8      	b.n	801a670 <_dtoa_r+0x8e8>
 801a6fe:	2201      	movs	r2, #1
 801a700:	e7e1      	b.n	801a6c6 <_dtoa_r+0x93e>
 801a702:	f1ba 0f00 	cmp.w	sl, #0
 801a706:	db06      	blt.n	801a716 <_dtoa_r+0x98e>
 801a708:	9906      	ldr	r1, [sp, #24]
 801a70a:	ea41 0a0a 	orr.w	sl, r1, sl
 801a70e:	9907      	ldr	r1, [sp, #28]
 801a710:	ea5a 0a01 	orrs.w	sl, sl, r1
 801a714:	d120      	bne.n	801a758 <_dtoa_r+0x9d0>
 801a716:	2a00      	cmp	r2, #0
 801a718:	ddec      	ble.n	801a6f4 <_dtoa_r+0x96c>
 801a71a:	4629      	mov	r1, r5
 801a71c:	2201      	movs	r2, #1
 801a71e:	4630      	mov	r0, r6
 801a720:	9304      	str	r3, [sp, #16]
 801a722:	f000 fbad 	bl	801ae80 <__lshift>
 801a726:	4621      	mov	r1, r4
 801a728:	4605      	mov	r5, r0
 801a72a:	f000 fc15 	bl	801af58 <__mcmp>
 801a72e:	2800      	cmp	r0, #0
 801a730:	9b04      	ldr	r3, [sp, #16]
 801a732:	dc02      	bgt.n	801a73a <_dtoa_r+0x9b2>
 801a734:	d1de      	bne.n	801a6f4 <_dtoa_r+0x96c>
 801a736:	07da      	lsls	r2, r3, #31
 801a738:	d5dc      	bpl.n	801a6f4 <_dtoa_r+0x96c>
 801a73a:	2b39      	cmp	r3, #57	; 0x39
 801a73c:	d1d8      	bne.n	801a6f0 <_dtoa_r+0x968>
 801a73e:	9a02      	ldr	r2, [sp, #8]
 801a740:	2339      	movs	r3, #57	; 0x39
 801a742:	7013      	strb	r3, [r2, #0]
 801a744:	4643      	mov	r3, r8
 801a746:	4698      	mov	r8, r3
 801a748:	3b01      	subs	r3, #1
 801a74a:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 801a74e:	2a39      	cmp	r2, #57	; 0x39
 801a750:	d051      	beq.n	801a7f6 <_dtoa_r+0xa6e>
 801a752:	3201      	adds	r2, #1
 801a754:	701a      	strb	r2, [r3, #0]
 801a756:	e746      	b.n	801a5e6 <_dtoa_r+0x85e>
 801a758:	2a00      	cmp	r2, #0
 801a75a:	dd03      	ble.n	801a764 <_dtoa_r+0x9dc>
 801a75c:	2b39      	cmp	r3, #57	; 0x39
 801a75e:	d0ee      	beq.n	801a73e <_dtoa_r+0x9b6>
 801a760:	3301      	adds	r3, #1
 801a762:	e7c7      	b.n	801a6f4 <_dtoa_r+0x96c>
 801a764:	9a04      	ldr	r2, [sp, #16]
 801a766:	9908      	ldr	r1, [sp, #32]
 801a768:	f802 3c01 	strb.w	r3, [r2, #-1]
 801a76c:	428a      	cmp	r2, r1
 801a76e:	d02b      	beq.n	801a7c8 <_dtoa_r+0xa40>
 801a770:	4629      	mov	r1, r5
 801a772:	2300      	movs	r3, #0
 801a774:	220a      	movs	r2, #10
 801a776:	4630      	mov	r0, r6
 801a778:	f000 f9d4 	bl	801ab24 <__multadd>
 801a77c:	45b9      	cmp	r9, r7
 801a77e:	4605      	mov	r5, r0
 801a780:	f04f 0300 	mov.w	r3, #0
 801a784:	f04f 020a 	mov.w	r2, #10
 801a788:	4649      	mov	r1, r9
 801a78a:	4630      	mov	r0, r6
 801a78c:	d107      	bne.n	801a79e <_dtoa_r+0xa16>
 801a78e:	f000 f9c9 	bl	801ab24 <__multadd>
 801a792:	4681      	mov	r9, r0
 801a794:	4607      	mov	r7, r0
 801a796:	9b04      	ldr	r3, [sp, #16]
 801a798:	3301      	adds	r3, #1
 801a79a:	9304      	str	r3, [sp, #16]
 801a79c:	e774      	b.n	801a688 <_dtoa_r+0x900>
 801a79e:	f000 f9c1 	bl	801ab24 <__multadd>
 801a7a2:	4639      	mov	r1, r7
 801a7a4:	4681      	mov	r9, r0
 801a7a6:	2300      	movs	r3, #0
 801a7a8:	220a      	movs	r2, #10
 801a7aa:	4630      	mov	r0, r6
 801a7ac:	f000 f9ba 	bl	801ab24 <__multadd>
 801a7b0:	4607      	mov	r7, r0
 801a7b2:	e7f0      	b.n	801a796 <_dtoa_r+0xa0e>
 801a7b4:	f1ba 0f00 	cmp.w	sl, #0
 801a7b8:	9a01      	ldr	r2, [sp, #4]
 801a7ba:	bfcc      	ite	gt
 801a7bc:	46d0      	movgt	r8, sl
 801a7be:	f04f 0801 	movle.w	r8, #1
 801a7c2:	4490      	add	r8, r2
 801a7c4:	f04f 0900 	mov.w	r9, #0
 801a7c8:	4629      	mov	r1, r5
 801a7ca:	2201      	movs	r2, #1
 801a7cc:	4630      	mov	r0, r6
 801a7ce:	9302      	str	r3, [sp, #8]
 801a7d0:	f000 fb56 	bl	801ae80 <__lshift>
 801a7d4:	4621      	mov	r1, r4
 801a7d6:	4605      	mov	r5, r0
 801a7d8:	f000 fbbe 	bl	801af58 <__mcmp>
 801a7dc:	2800      	cmp	r0, #0
 801a7de:	dcb1      	bgt.n	801a744 <_dtoa_r+0x9bc>
 801a7e0:	d102      	bne.n	801a7e8 <_dtoa_r+0xa60>
 801a7e2:	9b02      	ldr	r3, [sp, #8]
 801a7e4:	07db      	lsls	r3, r3, #31
 801a7e6:	d4ad      	bmi.n	801a744 <_dtoa_r+0x9bc>
 801a7e8:	4643      	mov	r3, r8
 801a7ea:	4698      	mov	r8, r3
 801a7ec:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801a7f0:	2a30      	cmp	r2, #48	; 0x30
 801a7f2:	d0fa      	beq.n	801a7ea <_dtoa_r+0xa62>
 801a7f4:	e6f7      	b.n	801a5e6 <_dtoa_r+0x85e>
 801a7f6:	9a01      	ldr	r2, [sp, #4]
 801a7f8:	429a      	cmp	r2, r3
 801a7fa:	d1a4      	bne.n	801a746 <_dtoa_r+0x9be>
 801a7fc:	f10b 0b01 	add.w	fp, fp, #1
 801a800:	2331      	movs	r3, #49	; 0x31
 801a802:	e778      	b.n	801a6f6 <_dtoa_r+0x96e>
 801a804:	4b14      	ldr	r3, [pc, #80]	; (801a858 <_dtoa_r+0xad0>)
 801a806:	f7ff bb2a 	b.w	8019e5e <_dtoa_r+0xd6>
 801a80a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801a80c:	2b00      	cmp	r3, #0
 801a80e:	f47f ab05 	bne.w	8019e1c <_dtoa_r+0x94>
 801a812:	4b12      	ldr	r3, [pc, #72]	; (801a85c <_dtoa_r+0xad4>)
 801a814:	f7ff bb23 	b.w	8019e5e <_dtoa_r+0xd6>
 801a818:	f1ba 0f00 	cmp.w	sl, #0
 801a81c:	dc03      	bgt.n	801a826 <_dtoa_r+0xa9e>
 801a81e:	9b06      	ldr	r3, [sp, #24]
 801a820:	2b02      	cmp	r3, #2
 801a822:	f73f aec8 	bgt.w	801a5b6 <_dtoa_r+0x82e>
 801a826:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801a82a:	4621      	mov	r1, r4
 801a82c:	4628      	mov	r0, r5
 801a82e:	f7ff fa23 	bl	8019c78 <quorem>
 801a832:	f100 0330 	add.w	r3, r0, #48	; 0x30
 801a836:	f808 3b01 	strb.w	r3, [r8], #1
 801a83a:	9a01      	ldr	r2, [sp, #4]
 801a83c:	eba8 0202 	sub.w	r2, r8, r2
 801a840:	4592      	cmp	sl, r2
 801a842:	ddb7      	ble.n	801a7b4 <_dtoa_r+0xa2c>
 801a844:	4629      	mov	r1, r5
 801a846:	2300      	movs	r3, #0
 801a848:	220a      	movs	r2, #10
 801a84a:	4630      	mov	r0, r6
 801a84c:	f000 f96a 	bl	801ab24 <__multadd>
 801a850:	4605      	mov	r5, r0
 801a852:	e7ea      	b.n	801a82a <_dtoa_r+0xaa2>
 801a854:	0801ee9b 	.word	0x0801ee9b
 801a858:	0801edd6 	.word	0x0801edd6
 801a85c:	0801ee36 	.word	0x0801ee36

0801a860 <_free_r>:
 801a860:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a862:	2900      	cmp	r1, #0
 801a864:	d044      	beq.n	801a8f0 <_free_r+0x90>
 801a866:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a86a:	9001      	str	r0, [sp, #4]
 801a86c:	2b00      	cmp	r3, #0
 801a86e:	f1a1 0404 	sub.w	r4, r1, #4
 801a872:	bfb8      	it	lt
 801a874:	18e4      	addlt	r4, r4, r3
 801a876:	f000 f8e7 	bl	801aa48 <__malloc_lock>
 801a87a:	4a1e      	ldr	r2, [pc, #120]	; (801a8f4 <_free_r+0x94>)
 801a87c:	9801      	ldr	r0, [sp, #4]
 801a87e:	6813      	ldr	r3, [r2, #0]
 801a880:	b933      	cbnz	r3, 801a890 <_free_r+0x30>
 801a882:	6063      	str	r3, [r4, #4]
 801a884:	6014      	str	r4, [r2, #0]
 801a886:	b003      	add	sp, #12
 801a888:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801a88c:	f000 b8e2 	b.w	801aa54 <__malloc_unlock>
 801a890:	42a3      	cmp	r3, r4
 801a892:	d908      	bls.n	801a8a6 <_free_r+0x46>
 801a894:	6825      	ldr	r5, [r4, #0]
 801a896:	1961      	adds	r1, r4, r5
 801a898:	428b      	cmp	r3, r1
 801a89a:	bf01      	itttt	eq
 801a89c:	6819      	ldreq	r1, [r3, #0]
 801a89e:	685b      	ldreq	r3, [r3, #4]
 801a8a0:	1949      	addeq	r1, r1, r5
 801a8a2:	6021      	streq	r1, [r4, #0]
 801a8a4:	e7ed      	b.n	801a882 <_free_r+0x22>
 801a8a6:	461a      	mov	r2, r3
 801a8a8:	685b      	ldr	r3, [r3, #4]
 801a8aa:	b10b      	cbz	r3, 801a8b0 <_free_r+0x50>
 801a8ac:	42a3      	cmp	r3, r4
 801a8ae:	d9fa      	bls.n	801a8a6 <_free_r+0x46>
 801a8b0:	6811      	ldr	r1, [r2, #0]
 801a8b2:	1855      	adds	r5, r2, r1
 801a8b4:	42a5      	cmp	r5, r4
 801a8b6:	d10b      	bne.n	801a8d0 <_free_r+0x70>
 801a8b8:	6824      	ldr	r4, [r4, #0]
 801a8ba:	4421      	add	r1, r4
 801a8bc:	1854      	adds	r4, r2, r1
 801a8be:	42a3      	cmp	r3, r4
 801a8c0:	6011      	str	r1, [r2, #0]
 801a8c2:	d1e0      	bne.n	801a886 <_free_r+0x26>
 801a8c4:	681c      	ldr	r4, [r3, #0]
 801a8c6:	685b      	ldr	r3, [r3, #4]
 801a8c8:	6053      	str	r3, [r2, #4]
 801a8ca:	440c      	add	r4, r1
 801a8cc:	6014      	str	r4, [r2, #0]
 801a8ce:	e7da      	b.n	801a886 <_free_r+0x26>
 801a8d0:	d902      	bls.n	801a8d8 <_free_r+0x78>
 801a8d2:	230c      	movs	r3, #12
 801a8d4:	6003      	str	r3, [r0, #0]
 801a8d6:	e7d6      	b.n	801a886 <_free_r+0x26>
 801a8d8:	6825      	ldr	r5, [r4, #0]
 801a8da:	1961      	adds	r1, r4, r5
 801a8dc:	428b      	cmp	r3, r1
 801a8de:	bf04      	itt	eq
 801a8e0:	6819      	ldreq	r1, [r3, #0]
 801a8e2:	685b      	ldreq	r3, [r3, #4]
 801a8e4:	6063      	str	r3, [r4, #4]
 801a8e6:	bf04      	itt	eq
 801a8e8:	1949      	addeq	r1, r1, r5
 801a8ea:	6021      	streq	r1, [r4, #0]
 801a8ec:	6054      	str	r4, [r2, #4]
 801a8ee:	e7ca      	b.n	801a886 <_free_r+0x26>
 801a8f0:	b003      	add	sp, #12
 801a8f2:	bd30      	pop	{r4, r5, pc}
 801a8f4:	2000732c 	.word	0x2000732c

0801a8f8 <malloc>:
 801a8f8:	4b02      	ldr	r3, [pc, #8]	; (801a904 <malloc+0xc>)
 801a8fa:	4601      	mov	r1, r0
 801a8fc:	6818      	ldr	r0, [r3, #0]
 801a8fe:	f000 b823 	b.w	801a948 <_malloc_r>
 801a902:	bf00      	nop
 801a904:	200000bc 	.word	0x200000bc

0801a908 <sbrk_aligned>:
 801a908:	b570      	push	{r4, r5, r6, lr}
 801a90a:	4e0e      	ldr	r6, [pc, #56]	; (801a944 <sbrk_aligned+0x3c>)
 801a90c:	460c      	mov	r4, r1
 801a90e:	6831      	ldr	r1, [r6, #0]
 801a910:	4605      	mov	r5, r0
 801a912:	b911      	cbnz	r1, 801a91a <sbrk_aligned+0x12>
 801a914:	f000 fea8 	bl	801b668 <_sbrk_r>
 801a918:	6030      	str	r0, [r6, #0]
 801a91a:	4621      	mov	r1, r4
 801a91c:	4628      	mov	r0, r5
 801a91e:	f000 fea3 	bl	801b668 <_sbrk_r>
 801a922:	1c43      	adds	r3, r0, #1
 801a924:	d00a      	beq.n	801a93c <sbrk_aligned+0x34>
 801a926:	1cc4      	adds	r4, r0, #3
 801a928:	f024 0403 	bic.w	r4, r4, #3
 801a92c:	42a0      	cmp	r0, r4
 801a92e:	d007      	beq.n	801a940 <sbrk_aligned+0x38>
 801a930:	1a21      	subs	r1, r4, r0
 801a932:	4628      	mov	r0, r5
 801a934:	f000 fe98 	bl	801b668 <_sbrk_r>
 801a938:	3001      	adds	r0, #1
 801a93a:	d101      	bne.n	801a940 <sbrk_aligned+0x38>
 801a93c:	f04f 34ff 	mov.w	r4, #4294967295
 801a940:	4620      	mov	r0, r4
 801a942:	bd70      	pop	{r4, r5, r6, pc}
 801a944:	20007330 	.word	0x20007330

0801a948 <_malloc_r>:
 801a948:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a94c:	1ccd      	adds	r5, r1, #3
 801a94e:	f025 0503 	bic.w	r5, r5, #3
 801a952:	3508      	adds	r5, #8
 801a954:	2d0c      	cmp	r5, #12
 801a956:	bf38      	it	cc
 801a958:	250c      	movcc	r5, #12
 801a95a:	2d00      	cmp	r5, #0
 801a95c:	4607      	mov	r7, r0
 801a95e:	db01      	blt.n	801a964 <_malloc_r+0x1c>
 801a960:	42a9      	cmp	r1, r5
 801a962:	d905      	bls.n	801a970 <_malloc_r+0x28>
 801a964:	230c      	movs	r3, #12
 801a966:	603b      	str	r3, [r7, #0]
 801a968:	2600      	movs	r6, #0
 801a96a:	4630      	mov	r0, r6
 801a96c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a970:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 801aa44 <_malloc_r+0xfc>
 801a974:	f000 f868 	bl	801aa48 <__malloc_lock>
 801a978:	f8d8 3000 	ldr.w	r3, [r8]
 801a97c:	461c      	mov	r4, r3
 801a97e:	bb5c      	cbnz	r4, 801a9d8 <_malloc_r+0x90>
 801a980:	4629      	mov	r1, r5
 801a982:	4638      	mov	r0, r7
 801a984:	f7ff ffc0 	bl	801a908 <sbrk_aligned>
 801a988:	1c43      	adds	r3, r0, #1
 801a98a:	4604      	mov	r4, r0
 801a98c:	d155      	bne.n	801aa3a <_malloc_r+0xf2>
 801a98e:	f8d8 4000 	ldr.w	r4, [r8]
 801a992:	4626      	mov	r6, r4
 801a994:	2e00      	cmp	r6, #0
 801a996:	d145      	bne.n	801aa24 <_malloc_r+0xdc>
 801a998:	2c00      	cmp	r4, #0
 801a99a:	d048      	beq.n	801aa2e <_malloc_r+0xe6>
 801a99c:	6823      	ldr	r3, [r4, #0]
 801a99e:	4631      	mov	r1, r6
 801a9a0:	4638      	mov	r0, r7
 801a9a2:	eb04 0903 	add.w	r9, r4, r3
 801a9a6:	f000 fe5f 	bl	801b668 <_sbrk_r>
 801a9aa:	4581      	cmp	r9, r0
 801a9ac:	d13f      	bne.n	801aa2e <_malloc_r+0xe6>
 801a9ae:	6821      	ldr	r1, [r4, #0]
 801a9b0:	1a6d      	subs	r5, r5, r1
 801a9b2:	4629      	mov	r1, r5
 801a9b4:	4638      	mov	r0, r7
 801a9b6:	f7ff ffa7 	bl	801a908 <sbrk_aligned>
 801a9ba:	3001      	adds	r0, #1
 801a9bc:	d037      	beq.n	801aa2e <_malloc_r+0xe6>
 801a9be:	6823      	ldr	r3, [r4, #0]
 801a9c0:	442b      	add	r3, r5
 801a9c2:	6023      	str	r3, [r4, #0]
 801a9c4:	f8d8 3000 	ldr.w	r3, [r8]
 801a9c8:	2b00      	cmp	r3, #0
 801a9ca:	d038      	beq.n	801aa3e <_malloc_r+0xf6>
 801a9cc:	685a      	ldr	r2, [r3, #4]
 801a9ce:	42a2      	cmp	r2, r4
 801a9d0:	d12b      	bne.n	801aa2a <_malloc_r+0xe2>
 801a9d2:	2200      	movs	r2, #0
 801a9d4:	605a      	str	r2, [r3, #4]
 801a9d6:	e00f      	b.n	801a9f8 <_malloc_r+0xb0>
 801a9d8:	6822      	ldr	r2, [r4, #0]
 801a9da:	1b52      	subs	r2, r2, r5
 801a9dc:	d41f      	bmi.n	801aa1e <_malloc_r+0xd6>
 801a9de:	2a0b      	cmp	r2, #11
 801a9e0:	d917      	bls.n	801aa12 <_malloc_r+0xca>
 801a9e2:	1961      	adds	r1, r4, r5
 801a9e4:	42a3      	cmp	r3, r4
 801a9e6:	6025      	str	r5, [r4, #0]
 801a9e8:	bf18      	it	ne
 801a9ea:	6059      	strne	r1, [r3, #4]
 801a9ec:	6863      	ldr	r3, [r4, #4]
 801a9ee:	bf08      	it	eq
 801a9f0:	f8c8 1000 	streq.w	r1, [r8]
 801a9f4:	5162      	str	r2, [r4, r5]
 801a9f6:	604b      	str	r3, [r1, #4]
 801a9f8:	4638      	mov	r0, r7
 801a9fa:	f104 060b 	add.w	r6, r4, #11
 801a9fe:	f000 f829 	bl	801aa54 <__malloc_unlock>
 801aa02:	f026 0607 	bic.w	r6, r6, #7
 801aa06:	1d23      	adds	r3, r4, #4
 801aa08:	1af2      	subs	r2, r6, r3
 801aa0a:	d0ae      	beq.n	801a96a <_malloc_r+0x22>
 801aa0c:	1b9b      	subs	r3, r3, r6
 801aa0e:	50a3      	str	r3, [r4, r2]
 801aa10:	e7ab      	b.n	801a96a <_malloc_r+0x22>
 801aa12:	42a3      	cmp	r3, r4
 801aa14:	6862      	ldr	r2, [r4, #4]
 801aa16:	d1dd      	bne.n	801a9d4 <_malloc_r+0x8c>
 801aa18:	f8c8 2000 	str.w	r2, [r8]
 801aa1c:	e7ec      	b.n	801a9f8 <_malloc_r+0xb0>
 801aa1e:	4623      	mov	r3, r4
 801aa20:	6864      	ldr	r4, [r4, #4]
 801aa22:	e7ac      	b.n	801a97e <_malloc_r+0x36>
 801aa24:	4634      	mov	r4, r6
 801aa26:	6876      	ldr	r6, [r6, #4]
 801aa28:	e7b4      	b.n	801a994 <_malloc_r+0x4c>
 801aa2a:	4613      	mov	r3, r2
 801aa2c:	e7cc      	b.n	801a9c8 <_malloc_r+0x80>
 801aa2e:	230c      	movs	r3, #12
 801aa30:	603b      	str	r3, [r7, #0]
 801aa32:	4638      	mov	r0, r7
 801aa34:	f000 f80e 	bl	801aa54 <__malloc_unlock>
 801aa38:	e797      	b.n	801a96a <_malloc_r+0x22>
 801aa3a:	6025      	str	r5, [r4, #0]
 801aa3c:	e7dc      	b.n	801a9f8 <_malloc_r+0xb0>
 801aa3e:	605b      	str	r3, [r3, #4]
 801aa40:	deff      	udf	#255	; 0xff
 801aa42:	bf00      	nop
 801aa44:	2000732c 	.word	0x2000732c

0801aa48 <__malloc_lock>:
 801aa48:	4801      	ldr	r0, [pc, #4]	; (801aa50 <__malloc_lock+0x8>)
 801aa4a:	f7ff b8e6 	b.w	8019c1a <__retarget_lock_acquire_recursive>
 801aa4e:	bf00      	nop
 801aa50:	20007328 	.word	0x20007328

0801aa54 <__malloc_unlock>:
 801aa54:	4801      	ldr	r0, [pc, #4]	; (801aa5c <__malloc_unlock+0x8>)
 801aa56:	f7ff b8e1 	b.w	8019c1c <__retarget_lock_release_recursive>
 801aa5a:	bf00      	nop
 801aa5c:	20007328 	.word	0x20007328

0801aa60 <_Balloc>:
 801aa60:	b570      	push	{r4, r5, r6, lr}
 801aa62:	69c6      	ldr	r6, [r0, #28]
 801aa64:	4604      	mov	r4, r0
 801aa66:	460d      	mov	r5, r1
 801aa68:	b976      	cbnz	r6, 801aa88 <_Balloc+0x28>
 801aa6a:	2010      	movs	r0, #16
 801aa6c:	f7ff ff44 	bl	801a8f8 <malloc>
 801aa70:	4602      	mov	r2, r0
 801aa72:	61e0      	str	r0, [r4, #28]
 801aa74:	b920      	cbnz	r0, 801aa80 <_Balloc+0x20>
 801aa76:	4b18      	ldr	r3, [pc, #96]	; (801aad8 <_Balloc+0x78>)
 801aa78:	4818      	ldr	r0, [pc, #96]	; (801aadc <_Balloc+0x7c>)
 801aa7a:	216b      	movs	r1, #107	; 0x6b
 801aa7c:	f7ff f8de 	bl	8019c3c <__assert_func>
 801aa80:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801aa84:	6006      	str	r6, [r0, #0]
 801aa86:	60c6      	str	r6, [r0, #12]
 801aa88:	69e6      	ldr	r6, [r4, #28]
 801aa8a:	68f3      	ldr	r3, [r6, #12]
 801aa8c:	b183      	cbz	r3, 801aab0 <_Balloc+0x50>
 801aa8e:	69e3      	ldr	r3, [r4, #28]
 801aa90:	68db      	ldr	r3, [r3, #12]
 801aa92:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801aa96:	b9b8      	cbnz	r0, 801aac8 <_Balloc+0x68>
 801aa98:	2101      	movs	r1, #1
 801aa9a:	fa01 f605 	lsl.w	r6, r1, r5
 801aa9e:	1d72      	adds	r2, r6, #5
 801aaa0:	0092      	lsls	r2, r2, #2
 801aaa2:	4620      	mov	r0, r4
 801aaa4:	f000 fdf7 	bl	801b696 <_calloc_r>
 801aaa8:	b160      	cbz	r0, 801aac4 <_Balloc+0x64>
 801aaaa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801aaae:	e00e      	b.n	801aace <_Balloc+0x6e>
 801aab0:	2221      	movs	r2, #33	; 0x21
 801aab2:	2104      	movs	r1, #4
 801aab4:	4620      	mov	r0, r4
 801aab6:	f000 fdee 	bl	801b696 <_calloc_r>
 801aaba:	69e3      	ldr	r3, [r4, #28]
 801aabc:	60f0      	str	r0, [r6, #12]
 801aabe:	68db      	ldr	r3, [r3, #12]
 801aac0:	2b00      	cmp	r3, #0
 801aac2:	d1e4      	bne.n	801aa8e <_Balloc+0x2e>
 801aac4:	2000      	movs	r0, #0
 801aac6:	bd70      	pop	{r4, r5, r6, pc}
 801aac8:	6802      	ldr	r2, [r0, #0]
 801aaca:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801aace:	2300      	movs	r3, #0
 801aad0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801aad4:	e7f7      	b.n	801aac6 <_Balloc+0x66>
 801aad6:	bf00      	nop
 801aad8:	0801ec56 	.word	0x0801ec56
 801aadc:	0801eeac 	.word	0x0801eeac

0801aae0 <_Bfree>:
 801aae0:	b570      	push	{r4, r5, r6, lr}
 801aae2:	69c6      	ldr	r6, [r0, #28]
 801aae4:	4605      	mov	r5, r0
 801aae6:	460c      	mov	r4, r1
 801aae8:	b976      	cbnz	r6, 801ab08 <_Bfree+0x28>
 801aaea:	2010      	movs	r0, #16
 801aaec:	f7ff ff04 	bl	801a8f8 <malloc>
 801aaf0:	4602      	mov	r2, r0
 801aaf2:	61e8      	str	r0, [r5, #28]
 801aaf4:	b920      	cbnz	r0, 801ab00 <_Bfree+0x20>
 801aaf6:	4b09      	ldr	r3, [pc, #36]	; (801ab1c <_Bfree+0x3c>)
 801aaf8:	4809      	ldr	r0, [pc, #36]	; (801ab20 <_Bfree+0x40>)
 801aafa:	218f      	movs	r1, #143	; 0x8f
 801aafc:	f7ff f89e 	bl	8019c3c <__assert_func>
 801ab00:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801ab04:	6006      	str	r6, [r0, #0]
 801ab06:	60c6      	str	r6, [r0, #12]
 801ab08:	b13c      	cbz	r4, 801ab1a <_Bfree+0x3a>
 801ab0a:	69eb      	ldr	r3, [r5, #28]
 801ab0c:	6862      	ldr	r2, [r4, #4]
 801ab0e:	68db      	ldr	r3, [r3, #12]
 801ab10:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801ab14:	6021      	str	r1, [r4, #0]
 801ab16:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801ab1a:	bd70      	pop	{r4, r5, r6, pc}
 801ab1c:	0801ec56 	.word	0x0801ec56
 801ab20:	0801eeac 	.word	0x0801eeac

0801ab24 <__multadd>:
 801ab24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ab28:	690d      	ldr	r5, [r1, #16]
 801ab2a:	4607      	mov	r7, r0
 801ab2c:	460c      	mov	r4, r1
 801ab2e:	461e      	mov	r6, r3
 801ab30:	f101 0c14 	add.w	ip, r1, #20
 801ab34:	2000      	movs	r0, #0
 801ab36:	f8dc 3000 	ldr.w	r3, [ip]
 801ab3a:	b299      	uxth	r1, r3
 801ab3c:	fb02 6101 	mla	r1, r2, r1, r6
 801ab40:	0c1e      	lsrs	r6, r3, #16
 801ab42:	0c0b      	lsrs	r3, r1, #16
 801ab44:	fb02 3306 	mla	r3, r2, r6, r3
 801ab48:	b289      	uxth	r1, r1
 801ab4a:	3001      	adds	r0, #1
 801ab4c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801ab50:	4285      	cmp	r5, r0
 801ab52:	f84c 1b04 	str.w	r1, [ip], #4
 801ab56:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801ab5a:	dcec      	bgt.n	801ab36 <__multadd+0x12>
 801ab5c:	b30e      	cbz	r6, 801aba2 <__multadd+0x7e>
 801ab5e:	68a3      	ldr	r3, [r4, #8]
 801ab60:	42ab      	cmp	r3, r5
 801ab62:	dc19      	bgt.n	801ab98 <__multadd+0x74>
 801ab64:	6861      	ldr	r1, [r4, #4]
 801ab66:	4638      	mov	r0, r7
 801ab68:	3101      	adds	r1, #1
 801ab6a:	f7ff ff79 	bl	801aa60 <_Balloc>
 801ab6e:	4680      	mov	r8, r0
 801ab70:	b928      	cbnz	r0, 801ab7e <__multadd+0x5a>
 801ab72:	4602      	mov	r2, r0
 801ab74:	4b0c      	ldr	r3, [pc, #48]	; (801aba8 <__multadd+0x84>)
 801ab76:	480d      	ldr	r0, [pc, #52]	; (801abac <__multadd+0x88>)
 801ab78:	21ba      	movs	r1, #186	; 0xba
 801ab7a:	f7ff f85f 	bl	8019c3c <__assert_func>
 801ab7e:	6922      	ldr	r2, [r4, #16]
 801ab80:	3202      	adds	r2, #2
 801ab82:	f104 010c 	add.w	r1, r4, #12
 801ab86:	0092      	lsls	r2, r2, #2
 801ab88:	300c      	adds	r0, #12
 801ab8a:	f7ff f848 	bl	8019c1e <memcpy>
 801ab8e:	4621      	mov	r1, r4
 801ab90:	4638      	mov	r0, r7
 801ab92:	f7ff ffa5 	bl	801aae0 <_Bfree>
 801ab96:	4644      	mov	r4, r8
 801ab98:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801ab9c:	3501      	adds	r5, #1
 801ab9e:	615e      	str	r6, [r3, #20]
 801aba0:	6125      	str	r5, [r4, #16]
 801aba2:	4620      	mov	r0, r4
 801aba4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801aba8:	0801ee9b 	.word	0x0801ee9b
 801abac:	0801eeac 	.word	0x0801eeac

0801abb0 <__hi0bits>:
 801abb0:	0c03      	lsrs	r3, r0, #16
 801abb2:	041b      	lsls	r3, r3, #16
 801abb4:	b9d3      	cbnz	r3, 801abec <__hi0bits+0x3c>
 801abb6:	0400      	lsls	r0, r0, #16
 801abb8:	2310      	movs	r3, #16
 801abba:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801abbe:	bf04      	itt	eq
 801abc0:	0200      	lsleq	r0, r0, #8
 801abc2:	3308      	addeq	r3, #8
 801abc4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801abc8:	bf04      	itt	eq
 801abca:	0100      	lsleq	r0, r0, #4
 801abcc:	3304      	addeq	r3, #4
 801abce:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801abd2:	bf04      	itt	eq
 801abd4:	0080      	lsleq	r0, r0, #2
 801abd6:	3302      	addeq	r3, #2
 801abd8:	2800      	cmp	r0, #0
 801abda:	db05      	blt.n	801abe8 <__hi0bits+0x38>
 801abdc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801abe0:	f103 0301 	add.w	r3, r3, #1
 801abe4:	bf08      	it	eq
 801abe6:	2320      	moveq	r3, #32
 801abe8:	4618      	mov	r0, r3
 801abea:	4770      	bx	lr
 801abec:	2300      	movs	r3, #0
 801abee:	e7e4      	b.n	801abba <__hi0bits+0xa>

0801abf0 <__lo0bits>:
 801abf0:	6803      	ldr	r3, [r0, #0]
 801abf2:	f013 0207 	ands.w	r2, r3, #7
 801abf6:	d00c      	beq.n	801ac12 <__lo0bits+0x22>
 801abf8:	07d9      	lsls	r1, r3, #31
 801abfa:	d422      	bmi.n	801ac42 <__lo0bits+0x52>
 801abfc:	079a      	lsls	r2, r3, #30
 801abfe:	bf49      	itett	mi
 801ac00:	085b      	lsrmi	r3, r3, #1
 801ac02:	089b      	lsrpl	r3, r3, #2
 801ac04:	6003      	strmi	r3, [r0, #0]
 801ac06:	2201      	movmi	r2, #1
 801ac08:	bf5c      	itt	pl
 801ac0a:	6003      	strpl	r3, [r0, #0]
 801ac0c:	2202      	movpl	r2, #2
 801ac0e:	4610      	mov	r0, r2
 801ac10:	4770      	bx	lr
 801ac12:	b299      	uxth	r1, r3
 801ac14:	b909      	cbnz	r1, 801ac1a <__lo0bits+0x2a>
 801ac16:	0c1b      	lsrs	r3, r3, #16
 801ac18:	2210      	movs	r2, #16
 801ac1a:	b2d9      	uxtb	r1, r3
 801ac1c:	b909      	cbnz	r1, 801ac22 <__lo0bits+0x32>
 801ac1e:	3208      	adds	r2, #8
 801ac20:	0a1b      	lsrs	r3, r3, #8
 801ac22:	0719      	lsls	r1, r3, #28
 801ac24:	bf04      	itt	eq
 801ac26:	091b      	lsreq	r3, r3, #4
 801ac28:	3204      	addeq	r2, #4
 801ac2a:	0799      	lsls	r1, r3, #30
 801ac2c:	bf04      	itt	eq
 801ac2e:	089b      	lsreq	r3, r3, #2
 801ac30:	3202      	addeq	r2, #2
 801ac32:	07d9      	lsls	r1, r3, #31
 801ac34:	d403      	bmi.n	801ac3e <__lo0bits+0x4e>
 801ac36:	085b      	lsrs	r3, r3, #1
 801ac38:	f102 0201 	add.w	r2, r2, #1
 801ac3c:	d003      	beq.n	801ac46 <__lo0bits+0x56>
 801ac3e:	6003      	str	r3, [r0, #0]
 801ac40:	e7e5      	b.n	801ac0e <__lo0bits+0x1e>
 801ac42:	2200      	movs	r2, #0
 801ac44:	e7e3      	b.n	801ac0e <__lo0bits+0x1e>
 801ac46:	2220      	movs	r2, #32
 801ac48:	e7e1      	b.n	801ac0e <__lo0bits+0x1e>
	...

0801ac4c <__i2b>:
 801ac4c:	b510      	push	{r4, lr}
 801ac4e:	460c      	mov	r4, r1
 801ac50:	2101      	movs	r1, #1
 801ac52:	f7ff ff05 	bl	801aa60 <_Balloc>
 801ac56:	4602      	mov	r2, r0
 801ac58:	b928      	cbnz	r0, 801ac66 <__i2b+0x1a>
 801ac5a:	4b05      	ldr	r3, [pc, #20]	; (801ac70 <__i2b+0x24>)
 801ac5c:	4805      	ldr	r0, [pc, #20]	; (801ac74 <__i2b+0x28>)
 801ac5e:	f240 1145 	movw	r1, #325	; 0x145
 801ac62:	f7fe ffeb 	bl	8019c3c <__assert_func>
 801ac66:	2301      	movs	r3, #1
 801ac68:	6144      	str	r4, [r0, #20]
 801ac6a:	6103      	str	r3, [r0, #16]
 801ac6c:	bd10      	pop	{r4, pc}
 801ac6e:	bf00      	nop
 801ac70:	0801ee9b 	.word	0x0801ee9b
 801ac74:	0801eeac 	.word	0x0801eeac

0801ac78 <__multiply>:
 801ac78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ac7c:	4691      	mov	r9, r2
 801ac7e:	690a      	ldr	r2, [r1, #16]
 801ac80:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801ac84:	429a      	cmp	r2, r3
 801ac86:	bfb8      	it	lt
 801ac88:	460b      	movlt	r3, r1
 801ac8a:	460c      	mov	r4, r1
 801ac8c:	bfbc      	itt	lt
 801ac8e:	464c      	movlt	r4, r9
 801ac90:	4699      	movlt	r9, r3
 801ac92:	6927      	ldr	r7, [r4, #16]
 801ac94:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801ac98:	68a3      	ldr	r3, [r4, #8]
 801ac9a:	6861      	ldr	r1, [r4, #4]
 801ac9c:	eb07 060a 	add.w	r6, r7, sl
 801aca0:	42b3      	cmp	r3, r6
 801aca2:	b085      	sub	sp, #20
 801aca4:	bfb8      	it	lt
 801aca6:	3101      	addlt	r1, #1
 801aca8:	f7ff feda 	bl	801aa60 <_Balloc>
 801acac:	b930      	cbnz	r0, 801acbc <__multiply+0x44>
 801acae:	4602      	mov	r2, r0
 801acb0:	4b44      	ldr	r3, [pc, #272]	; (801adc4 <__multiply+0x14c>)
 801acb2:	4845      	ldr	r0, [pc, #276]	; (801adc8 <__multiply+0x150>)
 801acb4:	f44f 71b1 	mov.w	r1, #354	; 0x162
 801acb8:	f7fe ffc0 	bl	8019c3c <__assert_func>
 801acbc:	f100 0514 	add.w	r5, r0, #20
 801acc0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801acc4:	462b      	mov	r3, r5
 801acc6:	2200      	movs	r2, #0
 801acc8:	4543      	cmp	r3, r8
 801acca:	d321      	bcc.n	801ad10 <__multiply+0x98>
 801accc:	f104 0314 	add.w	r3, r4, #20
 801acd0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801acd4:	f109 0314 	add.w	r3, r9, #20
 801acd8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801acdc:	9202      	str	r2, [sp, #8]
 801acde:	1b3a      	subs	r2, r7, r4
 801ace0:	3a15      	subs	r2, #21
 801ace2:	f022 0203 	bic.w	r2, r2, #3
 801ace6:	3204      	adds	r2, #4
 801ace8:	f104 0115 	add.w	r1, r4, #21
 801acec:	428f      	cmp	r7, r1
 801acee:	bf38      	it	cc
 801acf0:	2204      	movcc	r2, #4
 801acf2:	9201      	str	r2, [sp, #4]
 801acf4:	9a02      	ldr	r2, [sp, #8]
 801acf6:	9303      	str	r3, [sp, #12]
 801acf8:	429a      	cmp	r2, r3
 801acfa:	d80c      	bhi.n	801ad16 <__multiply+0x9e>
 801acfc:	2e00      	cmp	r6, #0
 801acfe:	dd03      	ble.n	801ad08 <__multiply+0x90>
 801ad00:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801ad04:	2b00      	cmp	r3, #0
 801ad06:	d05b      	beq.n	801adc0 <__multiply+0x148>
 801ad08:	6106      	str	r6, [r0, #16]
 801ad0a:	b005      	add	sp, #20
 801ad0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ad10:	f843 2b04 	str.w	r2, [r3], #4
 801ad14:	e7d8      	b.n	801acc8 <__multiply+0x50>
 801ad16:	f8b3 a000 	ldrh.w	sl, [r3]
 801ad1a:	f1ba 0f00 	cmp.w	sl, #0
 801ad1e:	d024      	beq.n	801ad6a <__multiply+0xf2>
 801ad20:	f104 0e14 	add.w	lr, r4, #20
 801ad24:	46a9      	mov	r9, r5
 801ad26:	f04f 0c00 	mov.w	ip, #0
 801ad2a:	f85e 2b04 	ldr.w	r2, [lr], #4
 801ad2e:	f8d9 1000 	ldr.w	r1, [r9]
 801ad32:	fa1f fb82 	uxth.w	fp, r2
 801ad36:	b289      	uxth	r1, r1
 801ad38:	fb0a 110b 	mla	r1, sl, fp, r1
 801ad3c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801ad40:	f8d9 2000 	ldr.w	r2, [r9]
 801ad44:	4461      	add	r1, ip
 801ad46:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801ad4a:	fb0a c20b 	mla	r2, sl, fp, ip
 801ad4e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801ad52:	b289      	uxth	r1, r1
 801ad54:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801ad58:	4577      	cmp	r7, lr
 801ad5a:	f849 1b04 	str.w	r1, [r9], #4
 801ad5e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801ad62:	d8e2      	bhi.n	801ad2a <__multiply+0xb2>
 801ad64:	9a01      	ldr	r2, [sp, #4]
 801ad66:	f845 c002 	str.w	ip, [r5, r2]
 801ad6a:	9a03      	ldr	r2, [sp, #12]
 801ad6c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801ad70:	3304      	adds	r3, #4
 801ad72:	f1b9 0f00 	cmp.w	r9, #0
 801ad76:	d021      	beq.n	801adbc <__multiply+0x144>
 801ad78:	6829      	ldr	r1, [r5, #0]
 801ad7a:	f104 0c14 	add.w	ip, r4, #20
 801ad7e:	46ae      	mov	lr, r5
 801ad80:	f04f 0a00 	mov.w	sl, #0
 801ad84:	f8bc b000 	ldrh.w	fp, [ip]
 801ad88:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801ad8c:	fb09 220b 	mla	r2, r9, fp, r2
 801ad90:	4452      	add	r2, sl
 801ad92:	b289      	uxth	r1, r1
 801ad94:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801ad98:	f84e 1b04 	str.w	r1, [lr], #4
 801ad9c:	f85c 1b04 	ldr.w	r1, [ip], #4
 801ada0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801ada4:	f8be 1000 	ldrh.w	r1, [lr]
 801ada8:	fb09 110a 	mla	r1, r9, sl, r1
 801adac:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 801adb0:	4567      	cmp	r7, ip
 801adb2:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801adb6:	d8e5      	bhi.n	801ad84 <__multiply+0x10c>
 801adb8:	9a01      	ldr	r2, [sp, #4]
 801adba:	50a9      	str	r1, [r5, r2]
 801adbc:	3504      	adds	r5, #4
 801adbe:	e799      	b.n	801acf4 <__multiply+0x7c>
 801adc0:	3e01      	subs	r6, #1
 801adc2:	e79b      	b.n	801acfc <__multiply+0x84>
 801adc4:	0801ee9b 	.word	0x0801ee9b
 801adc8:	0801eeac 	.word	0x0801eeac

0801adcc <__pow5mult>:
 801adcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801add0:	4615      	mov	r5, r2
 801add2:	f012 0203 	ands.w	r2, r2, #3
 801add6:	4606      	mov	r6, r0
 801add8:	460f      	mov	r7, r1
 801adda:	d007      	beq.n	801adec <__pow5mult+0x20>
 801addc:	4c25      	ldr	r4, [pc, #148]	; (801ae74 <__pow5mult+0xa8>)
 801adde:	3a01      	subs	r2, #1
 801ade0:	2300      	movs	r3, #0
 801ade2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801ade6:	f7ff fe9d 	bl	801ab24 <__multadd>
 801adea:	4607      	mov	r7, r0
 801adec:	10ad      	asrs	r5, r5, #2
 801adee:	d03d      	beq.n	801ae6c <__pow5mult+0xa0>
 801adf0:	69f4      	ldr	r4, [r6, #28]
 801adf2:	b97c      	cbnz	r4, 801ae14 <__pow5mult+0x48>
 801adf4:	2010      	movs	r0, #16
 801adf6:	f7ff fd7f 	bl	801a8f8 <malloc>
 801adfa:	4602      	mov	r2, r0
 801adfc:	61f0      	str	r0, [r6, #28]
 801adfe:	b928      	cbnz	r0, 801ae0c <__pow5mult+0x40>
 801ae00:	4b1d      	ldr	r3, [pc, #116]	; (801ae78 <__pow5mult+0xac>)
 801ae02:	481e      	ldr	r0, [pc, #120]	; (801ae7c <__pow5mult+0xb0>)
 801ae04:	f240 11b3 	movw	r1, #435	; 0x1b3
 801ae08:	f7fe ff18 	bl	8019c3c <__assert_func>
 801ae0c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801ae10:	6004      	str	r4, [r0, #0]
 801ae12:	60c4      	str	r4, [r0, #12]
 801ae14:	f8d6 801c 	ldr.w	r8, [r6, #28]
 801ae18:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801ae1c:	b94c      	cbnz	r4, 801ae32 <__pow5mult+0x66>
 801ae1e:	f240 2171 	movw	r1, #625	; 0x271
 801ae22:	4630      	mov	r0, r6
 801ae24:	f7ff ff12 	bl	801ac4c <__i2b>
 801ae28:	2300      	movs	r3, #0
 801ae2a:	f8c8 0008 	str.w	r0, [r8, #8]
 801ae2e:	4604      	mov	r4, r0
 801ae30:	6003      	str	r3, [r0, #0]
 801ae32:	f04f 0900 	mov.w	r9, #0
 801ae36:	07eb      	lsls	r3, r5, #31
 801ae38:	d50a      	bpl.n	801ae50 <__pow5mult+0x84>
 801ae3a:	4639      	mov	r1, r7
 801ae3c:	4622      	mov	r2, r4
 801ae3e:	4630      	mov	r0, r6
 801ae40:	f7ff ff1a 	bl	801ac78 <__multiply>
 801ae44:	4639      	mov	r1, r7
 801ae46:	4680      	mov	r8, r0
 801ae48:	4630      	mov	r0, r6
 801ae4a:	f7ff fe49 	bl	801aae0 <_Bfree>
 801ae4e:	4647      	mov	r7, r8
 801ae50:	106d      	asrs	r5, r5, #1
 801ae52:	d00b      	beq.n	801ae6c <__pow5mult+0xa0>
 801ae54:	6820      	ldr	r0, [r4, #0]
 801ae56:	b938      	cbnz	r0, 801ae68 <__pow5mult+0x9c>
 801ae58:	4622      	mov	r2, r4
 801ae5a:	4621      	mov	r1, r4
 801ae5c:	4630      	mov	r0, r6
 801ae5e:	f7ff ff0b 	bl	801ac78 <__multiply>
 801ae62:	6020      	str	r0, [r4, #0]
 801ae64:	f8c0 9000 	str.w	r9, [r0]
 801ae68:	4604      	mov	r4, r0
 801ae6a:	e7e4      	b.n	801ae36 <__pow5mult+0x6a>
 801ae6c:	4638      	mov	r0, r7
 801ae6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ae72:	bf00      	nop
 801ae74:	0801eff8 	.word	0x0801eff8
 801ae78:	0801ec56 	.word	0x0801ec56
 801ae7c:	0801eeac 	.word	0x0801eeac

0801ae80 <__lshift>:
 801ae80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ae84:	460c      	mov	r4, r1
 801ae86:	6849      	ldr	r1, [r1, #4]
 801ae88:	6923      	ldr	r3, [r4, #16]
 801ae8a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801ae8e:	68a3      	ldr	r3, [r4, #8]
 801ae90:	4607      	mov	r7, r0
 801ae92:	4691      	mov	r9, r2
 801ae94:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801ae98:	f108 0601 	add.w	r6, r8, #1
 801ae9c:	42b3      	cmp	r3, r6
 801ae9e:	db0b      	blt.n	801aeb8 <__lshift+0x38>
 801aea0:	4638      	mov	r0, r7
 801aea2:	f7ff fddd 	bl	801aa60 <_Balloc>
 801aea6:	4605      	mov	r5, r0
 801aea8:	b948      	cbnz	r0, 801aebe <__lshift+0x3e>
 801aeaa:	4602      	mov	r2, r0
 801aeac:	4b28      	ldr	r3, [pc, #160]	; (801af50 <__lshift+0xd0>)
 801aeae:	4829      	ldr	r0, [pc, #164]	; (801af54 <__lshift+0xd4>)
 801aeb0:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 801aeb4:	f7fe fec2 	bl	8019c3c <__assert_func>
 801aeb8:	3101      	adds	r1, #1
 801aeba:	005b      	lsls	r3, r3, #1
 801aebc:	e7ee      	b.n	801ae9c <__lshift+0x1c>
 801aebe:	2300      	movs	r3, #0
 801aec0:	f100 0114 	add.w	r1, r0, #20
 801aec4:	f100 0210 	add.w	r2, r0, #16
 801aec8:	4618      	mov	r0, r3
 801aeca:	4553      	cmp	r3, sl
 801aecc:	db33      	blt.n	801af36 <__lshift+0xb6>
 801aece:	6920      	ldr	r0, [r4, #16]
 801aed0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801aed4:	f104 0314 	add.w	r3, r4, #20
 801aed8:	f019 091f 	ands.w	r9, r9, #31
 801aedc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801aee0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801aee4:	d02b      	beq.n	801af3e <__lshift+0xbe>
 801aee6:	f1c9 0e20 	rsb	lr, r9, #32
 801aeea:	468a      	mov	sl, r1
 801aeec:	2200      	movs	r2, #0
 801aeee:	6818      	ldr	r0, [r3, #0]
 801aef0:	fa00 f009 	lsl.w	r0, r0, r9
 801aef4:	4310      	orrs	r0, r2
 801aef6:	f84a 0b04 	str.w	r0, [sl], #4
 801aefa:	f853 2b04 	ldr.w	r2, [r3], #4
 801aefe:	459c      	cmp	ip, r3
 801af00:	fa22 f20e 	lsr.w	r2, r2, lr
 801af04:	d8f3      	bhi.n	801aeee <__lshift+0x6e>
 801af06:	ebac 0304 	sub.w	r3, ip, r4
 801af0a:	3b15      	subs	r3, #21
 801af0c:	f023 0303 	bic.w	r3, r3, #3
 801af10:	3304      	adds	r3, #4
 801af12:	f104 0015 	add.w	r0, r4, #21
 801af16:	4584      	cmp	ip, r0
 801af18:	bf38      	it	cc
 801af1a:	2304      	movcc	r3, #4
 801af1c:	50ca      	str	r2, [r1, r3]
 801af1e:	b10a      	cbz	r2, 801af24 <__lshift+0xa4>
 801af20:	f108 0602 	add.w	r6, r8, #2
 801af24:	3e01      	subs	r6, #1
 801af26:	4638      	mov	r0, r7
 801af28:	612e      	str	r6, [r5, #16]
 801af2a:	4621      	mov	r1, r4
 801af2c:	f7ff fdd8 	bl	801aae0 <_Bfree>
 801af30:	4628      	mov	r0, r5
 801af32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801af36:	f842 0f04 	str.w	r0, [r2, #4]!
 801af3a:	3301      	adds	r3, #1
 801af3c:	e7c5      	b.n	801aeca <__lshift+0x4a>
 801af3e:	3904      	subs	r1, #4
 801af40:	f853 2b04 	ldr.w	r2, [r3], #4
 801af44:	f841 2f04 	str.w	r2, [r1, #4]!
 801af48:	459c      	cmp	ip, r3
 801af4a:	d8f9      	bhi.n	801af40 <__lshift+0xc0>
 801af4c:	e7ea      	b.n	801af24 <__lshift+0xa4>
 801af4e:	bf00      	nop
 801af50:	0801ee9b 	.word	0x0801ee9b
 801af54:	0801eeac 	.word	0x0801eeac

0801af58 <__mcmp>:
 801af58:	b530      	push	{r4, r5, lr}
 801af5a:	6902      	ldr	r2, [r0, #16]
 801af5c:	690c      	ldr	r4, [r1, #16]
 801af5e:	1b12      	subs	r2, r2, r4
 801af60:	d10e      	bne.n	801af80 <__mcmp+0x28>
 801af62:	f100 0314 	add.w	r3, r0, #20
 801af66:	3114      	adds	r1, #20
 801af68:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801af6c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801af70:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801af74:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801af78:	42a5      	cmp	r5, r4
 801af7a:	d003      	beq.n	801af84 <__mcmp+0x2c>
 801af7c:	d305      	bcc.n	801af8a <__mcmp+0x32>
 801af7e:	2201      	movs	r2, #1
 801af80:	4610      	mov	r0, r2
 801af82:	bd30      	pop	{r4, r5, pc}
 801af84:	4283      	cmp	r3, r0
 801af86:	d3f3      	bcc.n	801af70 <__mcmp+0x18>
 801af88:	e7fa      	b.n	801af80 <__mcmp+0x28>
 801af8a:	f04f 32ff 	mov.w	r2, #4294967295
 801af8e:	e7f7      	b.n	801af80 <__mcmp+0x28>

0801af90 <__mdiff>:
 801af90:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801af94:	460c      	mov	r4, r1
 801af96:	4606      	mov	r6, r0
 801af98:	4611      	mov	r1, r2
 801af9a:	4620      	mov	r0, r4
 801af9c:	4690      	mov	r8, r2
 801af9e:	f7ff ffdb 	bl	801af58 <__mcmp>
 801afa2:	1e05      	subs	r5, r0, #0
 801afa4:	d110      	bne.n	801afc8 <__mdiff+0x38>
 801afa6:	4629      	mov	r1, r5
 801afa8:	4630      	mov	r0, r6
 801afaa:	f7ff fd59 	bl	801aa60 <_Balloc>
 801afae:	b930      	cbnz	r0, 801afbe <__mdiff+0x2e>
 801afb0:	4b3a      	ldr	r3, [pc, #232]	; (801b09c <__mdiff+0x10c>)
 801afb2:	4602      	mov	r2, r0
 801afb4:	f240 2137 	movw	r1, #567	; 0x237
 801afb8:	4839      	ldr	r0, [pc, #228]	; (801b0a0 <__mdiff+0x110>)
 801afba:	f7fe fe3f 	bl	8019c3c <__assert_func>
 801afbe:	2301      	movs	r3, #1
 801afc0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801afc4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801afc8:	bfa4      	itt	ge
 801afca:	4643      	movge	r3, r8
 801afcc:	46a0      	movge	r8, r4
 801afce:	4630      	mov	r0, r6
 801afd0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801afd4:	bfa6      	itte	ge
 801afd6:	461c      	movge	r4, r3
 801afd8:	2500      	movge	r5, #0
 801afda:	2501      	movlt	r5, #1
 801afdc:	f7ff fd40 	bl	801aa60 <_Balloc>
 801afe0:	b920      	cbnz	r0, 801afec <__mdiff+0x5c>
 801afe2:	4b2e      	ldr	r3, [pc, #184]	; (801b09c <__mdiff+0x10c>)
 801afe4:	4602      	mov	r2, r0
 801afe6:	f240 2145 	movw	r1, #581	; 0x245
 801afea:	e7e5      	b.n	801afb8 <__mdiff+0x28>
 801afec:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801aff0:	6926      	ldr	r6, [r4, #16]
 801aff2:	60c5      	str	r5, [r0, #12]
 801aff4:	f104 0914 	add.w	r9, r4, #20
 801aff8:	f108 0514 	add.w	r5, r8, #20
 801affc:	f100 0e14 	add.w	lr, r0, #20
 801b000:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 801b004:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801b008:	f108 0210 	add.w	r2, r8, #16
 801b00c:	46f2      	mov	sl, lr
 801b00e:	2100      	movs	r1, #0
 801b010:	f859 3b04 	ldr.w	r3, [r9], #4
 801b014:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801b018:	fa11 f88b 	uxtah	r8, r1, fp
 801b01c:	b299      	uxth	r1, r3
 801b01e:	0c1b      	lsrs	r3, r3, #16
 801b020:	eba8 0801 	sub.w	r8, r8, r1
 801b024:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801b028:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801b02c:	fa1f f888 	uxth.w	r8, r8
 801b030:	1419      	asrs	r1, r3, #16
 801b032:	454e      	cmp	r6, r9
 801b034:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801b038:	f84a 3b04 	str.w	r3, [sl], #4
 801b03c:	d8e8      	bhi.n	801b010 <__mdiff+0x80>
 801b03e:	1b33      	subs	r3, r6, r4
 801b040:	3b15      	subs	r3, #21
 801b042:	f023 0303 	bic.w	r3, r3, #3
 801b046:	3304      	adds	r3, #4
 801b048:	3415      	adds	r4, #21
 801b04a:	42a6      	cmp	r6, r4
 801b04c:	bf38      	it	cc
 801b04e:	2304      	movcc	r3, #4
 801b050:	441d      	add	r5, r3
 801b052:	4473      	add	r3, lr
 801b054:	469e      	mov	lr, r3
 801b056:	462e      	mov	r6, r5
 801b058:	4566      	cmp	r6, ip
 801b05a:	d30e      	bcc.n	801b07a <__mdiff+0xea>
 801b05c:	f10c 0203 	add.w	r2, ip, #3
 801b060:	1b52      	subs	r2, r2, r5
 801b062:	f022 0203 	bic.w	r2, r2, #3
 801b066:	3d03      	subs	r5, #3
 801b068:	45ac      	cmp	ip, r5
 801b06a:	bf38      	it	cc
 801b06c:	2200      	movcc	r2, #0
 801b06e:	4413      	add	r3, r2
 801b070:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 801b074:	b17a      	cbz	r2, 801b096 <__mdiff+0x106>
 801b076:	6107      	str	r7, [r0, #16]
 801b078:	e7a4      	b.n	801afc4 <__mdiff+0x34>
 801b07a:	f856 8b04 	ldr.w	r8, [r6], #4
 801b07e:	fa11 f288 	uxtah	r2, r1, r8
 801b082:	1414      	asrs	r4, r2, #16
 801b084:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801b088:	b292      	uxth	r2, r2
 801b08a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801b08e:	f84e 2b04 	str.w	r2, [lr], #4
 801b092:	1421      	asrs	r1, r4, #16
 801b094:	e7e0      	b.n	801b058 <__mdiff+0xc8>
 801b096:	3f01      	subs	r7, #1
 801b098:	e7ea      	b.n	801b070 <__mdiff+0xe0>
 801b09a:	bf00      	nop
 801b09c:	0801ee9b 	.word	0x0801ee9b
 801b0a0:	0801eeac 	.word	0x0801eeac

0801b0a4 <__d2b>:
 801b0a4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801b0a8:	460f      	mov	r7, r1
 801b0aa:	2101      	movs	r1, #1
 801b0ac:	ec59 8b10 	vmov	r8, r9, d0
 801b0b0:	4616      	mov	r6, r2
 801b0b2:	f7ff fcd5 	bl	801aa60 <_Balloc>
 801b0b6:	4604      	mov	r4, r0
 801b0b8:	b930      	cbnz	r0, 801b0c8 <__d2b+0x24>
 801b0ba:	4602      	mov	r2, r0
 801b0bc:	4b24      	ldr	r3, [pc, #144]	; (801b150 <__d2b+0xac>)
 801b0be:	4825      	ldr	r0, [pc, #148]	; (801b154 <__d2b+0xb0>)
 801b0c0:	f240 310f 	movw	r1, #783	; 0x30f
 801b0c4:	f7fe fdba 	bl	8019c3c <__assert_func>
 801b0c8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801b0cc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801b0d0:	bb2d      	cbnz	r5, 801b11e <__d2b+0x7a>
 801b0d2:	9301      	str	r3, [sp, #4]
 801b0d4:	f1b8 0300 	subs.w	r3, r8, #0
 801b0d8:	d026      	beq.n	801b128 <__d2b+0x84>
 801b0da:	4668      	mov	r0, sp
 801b0dc:	9300      	str	r3, [sp, #0]
 801b0de:	f7ff fd87 	bl	801abf0 <__lo0bits>
 801b0e2:	e9dd 1200 	ldrd	r1, r2, [sp]
 801b0e6:	b1e8      	cbz	r0, 801b124 <__d2b+0x80>
 801b0e8:	f1c0 0320 	rsb	r3, r0, #32
 801b0ec:	fa02 f303 	lsl.w	r3, r2, r3
 801b0f0:	430b      	orrs	r3, r1
 801b0f2:	40c2      	lsrs	r2, r0
 801b0f4:	6163      	str	r3, [r4, #20]
 801b0f6:	9201      	str	r2, [sp, #4]
 801b0f8:	9b01      	ldr	r3, [sp, #4]
 801b0fa:	61a3      	str	r3, [r4, #24]
 801b0fc:	2b00      	cmp	r3, #0
 801b0fe:	bf14      	ite	ne
 801b100:	2202      	movne	r2, #2
 801b102:	2201      	moveq	r2, #1
 801b104:	6122      	str	r2, [r4, #16]
 801b106:	b1bd      	cbz	r5, 801b138 <__d2b+0x94>
 801b108:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801b10c:	4405      	add	r5, r0
 801b10e:	603d      	str	r5, [r7, #0]
 801b110:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801b114:	6030      	str	r0, [r6, #0]
 801b116:	4620      	mov	r0, r4
 801b118:	b003      	add	sp, #12
 801b11a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b11e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801b122:	e7d6      	b.n	801b0d2 <__d2b+0x2e>
 801b124:	6161      	str	r1, [r4, #20]
 801b126:	e7e7      	b.n	801b0f8 <__d2b+0x54>
 801b128:	a801      	add	r0, sp, #4
 801b12a:	f7ff fd61 	bl	801abf0 <__lo0bits>
 801b12e:	9b01      	ldr	r3, [sp, #4]
 801b130:	6163      	str	r3, [r4, #20]
 801b132:	3020      	adds	r0, #32
 801b134:	2201      	movs	r2, #1
 801b136:	e7e5      	b.n	801b104 <__d2b+0x60>
 801b138:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801b13c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801b140:	6038      	str	r0, [r7, #0]
 801b142:	6918      	ldr	r0, [r3, #16]
 801b144:	f7ff fd34 	bl	801abb0 <__hi0bits>
 801b148:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801b14c:	e7e2      	b.n	801b114 <__d2b+0x70>
 801b14e:	bf00      	nop
 801b150:	0801ee9b 	.word	0x0801ee9b
 801b154:	0801eeac 	.word	0x0801eeac

0801b158 <__sfputc_r>:
 801b158:	6893      	ldr	r3, [r2, #8]
 801b15a:	3b01      	subs	r3, #1
 801b15c:	2b00      	cmp	r3, #0
 801b15e:	b410      	push	{r4}
 801b160:	6093      	str	r3, [r2, #8]
 801b162:	da08      	bge.n	801b176 <__sfputc_r+0x1e>
 801b164:	6994      	ldr	r4, [r2, #24]
 801b166:	42a3      	cmp	r3, r4
 801b168:	db01      	blt.n	801b16e <__sfputc_r+0x16>
 801b16a:	290a      	cmp	r1, #10
 801b16c:	d103      	bne.n	801b176 <__sfputc_r+0x1e>
 801b16e:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b172:	f7fe bc36 	b.w	80199e2 <__swbuf_r>
 801b176:	6813      	ldr	r3, [r2, #0]
 801b178:	1c58      	adds	r0, r3, #1
 801b17a:	6010      	str	r0, [r2, #0]
 801b17c:	7019      	strb	r1, [r3, #0]
 801b17e:	4608      	mov	r0, r1
 801b180:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b184:	4770      	bx	lr

0801b186 <__sfputs_r>:
 801b186:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b188:	4606      	mov	r6, r0
 801b18a:	460f      	mov	r7, r1
 801b18c:	4614      	mov	r4, r2
 801b18e:	18d5      	adds	r5, r2, r3
 801b190:	42ac      	cmp	r4, r5
 801b192:	d101      	bne.n	801b198 <__sfputs_r+0x12>
 801b194:	2000      	movs	r0, #0
 801b196:	e007      	b.n	801b1a8 <__sfputs_r+0x22>
 801b198:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b19c:	463a      	mov	r2, r7
 801b19e:	4630      	mov	r0, r6
 801b1a0:	f7ff ffda 	bl	801b158 <__sfputc_r>
 801b1a4:	1c43      	adds	r3, r0, #1
 801b1a6:	d1f3      	bne.n	801b190 <__sfputs_r+0xa>
 801b1a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801b1ac <_vfiprintf_r>:
 801b1ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b1b0:	460d      	mov	r5, r1
 801b1b2:	b09d      	sub	sp, #116	; 0x74
 801b1b4:	4614      	mov	r4, r2
 801b1b6:	4698      	mov	r8, r3
 801b1b8:	4606      	mov	r6, r0
 801b1ba:	b118      	cbz	r0, 801b1c4 <_vfiprintf_r+0x18>
 801b1bc:	6a03      	ldr	r3, [r0, #32]
 801b1be:	b90b      	cbnz	r3, 801b1c4 <_vfiprintf_r+0x18>
 801b1c0:	f7fe fb28 	bl	8019814 <__sinit>
 801b1c4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801b1c6:	07d9      	lsls	r1, r3, #31
 801b1c8:	d405      	bmi.n	801b1d6 <_vfiprintf_r+0x2a>
 801b1ca:	89ab      	ldrh	r3, [r5, #12]
 801b1cc:	059a      	lsls	r2, r3, #22
 801b1ce:	d402      	bmi.n	801b1d6 <_vfiprintf_r+0x2a>
 801b1d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801b1d2:	f7fe fd22 	bl	8019c1a <__retarget_lock_acquire_recursive>
 801b1d6:	89ab      	ldrh	r3, [r5, #12]
 801b1d8:	071b      	lsls	r3, r3, #28
 801b1da:	d501      	bpl.n	801b1e0 <_vfiprintf_r+0x34>
 801b1dc:	692b      	ldr	r3, [r5, #16]
 801b1de:	b99b      	cbnz	r3, 801b208 <_vfiprintf_r+0x5c>
 801b1e0:	4629      	mov	r1, r5
 801b1e2:	4630      	mov	r0, r6
 801b1e4:	f7fe fc3a 	bl	8019a5c <__swsetup_r>
 801b1e8:	b170      	cbz	r0, 801b208 <_vfiprintf_r+0x5c>
 801b1ea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801b1ec:	07dc      	lsls	r4, r3, #31
 801b1ee:	d504      	bpl.n	801b1fa <_vfiprintf_r+0x4e>
 801b1f0:	f04f 30ff 	mov.w	r0, #4294967295
 801b1f4:	b01d      	add	sp, #116	; 0x74
 801b1f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b1fa:	89ab      	ldrh	r3, [r5, #12]
 801b1fc:	0598      	lsls	r0, r3, #22
 801b1fe:	d4f7      	bmi.n	801b1f0 <_vfiprintf_r+0x44>
 801b200:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801b202:	f7fe fd0b 	bl	8019c1c <__retarget_lock_release_recursive>
 801b206:	e7f3      	b.n	801b1f0 <_vfiprintf_r+0x44>
 801b208:	2300      	movs	r3, #0
 801b20a:	9309      	str	r3, [sp, #36]	; 0x24
 801b20c:	2320      	movs	r3, #32
 801b20e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801b212:	f8cd 800c 	str.w	r8, [sp, #12]
 801b216:	2330      	movs	r3, #48	; 0x30
 801b218:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 801b3cc <_vfiprintf_r+0x220>
 801b21c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801b220:	f04f 0901 	mov.w	r9, #1
 801b224:	4623      	mov	r3, r4
 801b226:	469a      	mov	sl, r3
 801b228:	f813 2b01 	ldrb.w	r2, [r3], #1
 801b22c:	b10a      	cbz	r2, 801b232 <_vfiprintf_r+0x86>
 801b22e:	2a25      	cmp	r2, #37	; 0x25
 801b230:	d1f9      	bne.n	801b226 <_vfiprintf_r+0x7a>
 801b232:	ebba 0b04 	subs.w	fp, sl, r4
 801b236:	d00b      	beq.n	801b250 <_vfiprintf_r+0xa4>
 801b238:	465b      	mov	r3, fp
 801b23a:	4622      	mov	r2, r4
 801b23c:	4629      	mov	r1, r5
 801b23e:	4630      	mov	r0, r6
 801b240:	f7ff ffa1 	bl	801b186 <__sfputs_r>
 801b244:	3001      	adds	r0, #1
 801b246:	f000 80a9 	beq.w	801b39c <_vfiprintf_r+0x1f0>
 801b24a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801b24c:	445a      	add	r2, fp
 801b24e:	9209      	str	r2, [sp, #36]	; 0x24
 801b250:	f89a 3000 	ldrb.w	r3, [sl]
 801b254:	2b00      	cmp	r3, #0
 801b256:	f000 80a1 	beq.w	801b39c <_vfiprintf_r+0x1f0>
 801b25a:	2300      	movs	r3, #0
 801b25c:	f04f 32ff 	mov.w	r2, #4294967295
 801b260:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801b264:	f10a 0a01 	add.w	sl, sl, #1
 801b268:	9304      	str	r3, [sp, #16]
 801b26a:	9307      	str	r3, [sp, #28]
 801b26c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801b270:	931a      	str	r3, [sp, #104]	; 0x68
 801b272:	4654      	mov	r4, sl
 801b274:	2205      	movs	r2, #5
 801b276:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b27a:	4854      	ldr	r0, [pc, #336]	; (801b3cc <_vfiprintf_r+0x220>)
 801b27c:	f7e6 fae0 	bl	8001840 <memchr>
 801b280:	9a04      	ldr	r2, [sp, #16]
 801b282:	b9d8      	cbnz	r0, 801b2bc <_vfiprintf_r+0x110>
 801b284:	06d1      	lsls	r1, r2, #27
 801b286:	bf44      	itt	mi
 801b288:	2320      	movmi	r3, #32
 801b28a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801b28e:	0713      	lsls	r3, r2, #28
 801b290:	bf44      	itt	mi
 801b292:	232b      	movmi	r3, #43	; 0x2b
 801b294:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801b298:	f89a 3000 	ldrb.w	r3, [sl]
 801b29c:	2b2a      	cmp	r3, #42	; 0x2a
 801b29e:	d015      	beq.n	801b2cc <_vfiprintf_r+0x120>
 801b2a0:	9a07      	ldr	r2, [sp, #28]
 801b2a2:	4654      	mov	r4, sl
 801b2a4:	2000      	movs	r0, #0
 801b2a6:	f04f 0c0a 	mov.w	ip, #10
 801b2aa:	4621      	mov	r1, r4
 801b2ac:	f811 3b01 	ldrb.w	r3, [r1], #1
 801b2b0:	3b30      	subs	r3, #48	; 0x30
 801b2b2:	2b09      	cmp	r3, #9
 801b2b4:	d94d      	bls.n	801b352 <_vfiprintf_r+0x1a6>
 801b2b6:	b1b0      	cbz	r0, 801b2e6 <_vfiprintf_r+0x13a>
 801b2b8:	9207      	str	r2, [sp, #28]
 801b2ba:	e014      	b.n	801b2e6 <_vfiprintf_r+0x13a>
 801b2bc:	eba0 0308 	sub.w	r3, r0, r8
 801b2c0:	fa09 f303 	lsl.w	r3, r9, r3
 801b2c4:	4313      	orrs	r3, r2
 801b2c6:	9304      	str	r3, [sp, #16]
 801b2c8:	46a2      	mov	sl, r4
 801b2ca:	e7d2      	b.n	801b272 <_vfiprintf_r+0xc6>
 801b2cc:	9b03      	ldr	r3, [sp, #12]
 801b2ce:	1d19      	adds	r1, r3, #4
 801b2d0:	681b      	ldr	r3, [r3, #0]
 801b2d2:	9103      	str	r1, [sp, #12]
 801b2d4:	2b00      	cmp	r3, #0
 801b2d6:	bfbb      	ittet	lt
 801b2d8:	425b      	neglt	r3, r3
 801b2da:	f042 0202 	orrlt.w	r2, r2, #2
 801b2de:	9307      	strge	r3, [sp, #28]
 801b2e0:	9307      	strlt	r3, [sp, #28]
 801b2e2:	bfb8      	it	lt
 801b2e4:	9204      	strlt	r2, [sp, #16]
 801b2e6:	7823      	ldrb	r3, [r4, #0]
 801b2e8:	2b2e      	cmp	r3, #46	; 0x2e
 801b2ea:	d10c      	bne.n	801b306 <_vfiprintf_r+0x15a>
 801b2ec:	7863      	ldrb	r3, [r4, #1]
 801b2ee:	2b2a      	cmp	r3, #42	; 0x2a
 801b2f0:	d134      	bne.n	801b35c <_vfiprintf_r+0x1b0>
 801b2f2:	9b03      	ldr	r3, [sp, #12]
 801b2f4:	1d1a      	adds	r2, r3, #4
 801b2f6:	681b      	ldr	r3, [r3, #0]
 801b2f8:	9203      	str	r2, [sp, #12]
 801b2fa:	2b00      	cmp	r3, #0
 801b2fc:	bfb8      	it	lt
 801b2fe:	f04f 33ff 	movlt.w	r3, #4294967295
 801b302:	3402      	adds	r4, #2
 801b304:	9305      	str	r3, [sp, #20]
 801b306:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 801b3dc <_vfiprintf_r+0x230>
 801b30a:	7821      	ldrb	r1, [r4, #0]
 801b30c:	2203      	movs	r2, #3
 801b30e:	4650      	mov	r0, sl
 801b310:	f7e6 fa96 	bl	8001840 <memchr>
 801b314:	b138      	cbz	r0, 801b326 <_vfiprintf_r+0x17a>
 801b316:	9b04      	ldr	r3, [sp, #16]
 801b318:	eba0 000a 	sub.w	r0, r0, sl
 801b31c:	2240      	movs	r2, #64	; 0x40
 801b31e:	4082      	lsls	r2, r0
 801b320:	4313      	orrs	r3, r2
 801b322:	3401      	adds	r4, #1
 801b324:	9304      	str	r3, [sp, #16]
 801b326:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b32a:	4829      	ldr	r0, [pc, #164]	; (801b3d0 <_vfiprintf_r+0x224>)
 801b32c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801b330:	2206      	movs	r2, #6
 801b332:	f7e6 fa85 	bl	8001840 <memchr>
 801b336:	2800      	cmp	r0, #0
 801b338:	d03f      	beq.n	801b3ba <_vfiprintf_r+0x20e>
 801b33a:	4b26      	ldr	r3, [pc, #152]	; (801b3d4 <_vfiprintf_r+0x228>)
 801b33c:	bb1b      	cbnz	r3, 801b386 <_vfiprintf_r+0x1da>
 801b33e:	9b03      	ldr	r3, [sp, #12]
 801b340:	3307      	adds	r3, #7
 801b342:	f023 0307 	bic.w	r3, r3, #7
 801b346:	3308      	adds	r3, #8
 801b348:	9303      	str	r3, [sp, #12]
 801b34a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b34c:	443b      	add	r3, r7
 801b34e:	9309      	str	r3, [sp, #36]	; 0x24
 801b350:	e768      	b.n	801b224 <_vfiprintf_r+0x78>
 801b352:	fb0c 3202 	mla	r2, ip, r2, r3
 801b356:	460c      	mov	r4, r1
 801b358:	2001      	movs	r0, #1
 801b35a:	e7a6      	b.n	801b2aa <_vfiprintf_r+0xfe>
 801b35c:	2300      	movs	r3, #0
 801b35e:	3401      	adds	r4, #1
 801b360:	9305      	str	r3, [sp, #20]
 801b362:	4619      	mov	r1, r3
 801b364:	f04f 0c0a 	mov.w	ip, #10
 801b368:	4620      	mov	r0, r4
 801b36a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801b36e:	3a30      	subs	r2, #48	; 0x30
 801b370:	2a09      	cmp	r2, #9
 801b372:	d903      	bls.n	801b37c <_vfiprintf_r+0x1d0>
 801b374:	2b00      	cmp	r3, #0
 801b376:	d0c6      	beq.n	801b306 <_vfiprintf_r+0x15a>
 801b378:	9105      	str	r1, [sp, #20]
 801b37a:	e7c4      	b.n	801b306 <_vfiprintf_r+0x15a>
 801b37c:	fb0c 2101 	mla	r1, ip, r1, r2
 801b380:	4604      	mov	r4, r0
 801b382:	2301      	movs	r3, #1
 801b384:	e7f0      	b.n	801b368 <_vfiprintf_r+0x1bc>
 801b386:	ab03      	add	r3, sp, #12
 801b388:	9300      	str	r3, [sp, #0]
 801b38a:	462a      	mov	r2, r5
 801b38c:	4b12      	ldr	r3, [pc, #72]	; (801b3d8 <_vfiprintf_r+0x22c>)
 801b38e:	a904      	add	r1, sp, #16
 801b390:	4630      	mov	r0, r6
 801b392:	f7fd fe09 	bl	8018fa8 <_printf_float>
 801b396:	4607      	mov	r7, r0
 801b398:	1c78      	adds	r0, r7, #1
 801b39a:	d1d6      	bne.n	801b34a <_vfiprintf_r+0x19e>
 801b39c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801b39e:	07d9      	lsls	r1, r3, #31
 801b3a0:	d405      	bmi.n	801b3ae <_vfiprintf_r+0x202>
 801b3a2:	89ab      	ldrh	r3, [r5, #12]
 801b3a4:	059a      	lsls	r2, r3, #22
 801b3a6:	d402      	bmi.n	801b3ae <_vfiprintf_r+0x202>
 801b3a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801b3aa:	f7fe fc37 	bl	8019c1c <__retarget_lock_release_recursive>
 801b3ae:	89ab      	ldrh	r3, [r5, #12]
 801b3b0:	065b      	lsls	r3, r3, #25
 801b3b2:	f53f af1d 	bmi.w	801b1f0 <_vfiprintf_r+0x44>
 801b3b6:	9809      	ldr	r0, [sp, #36]	; 0x24
 801b3b8:	e71c      	b.n	801b1f4 <_vfiprintf_r+0x48>
 801b3ba:	ab03      	add	r3, sp, #12
 801b3bc:	9300      	str	r3, [sp, #0]
 801b3be:	462a      	mov	r2, r5
 801b3c0:	4b05      	ldr	r3, [pc, #20]	; (801b3d8 <_vfiprintf_r+0x22c>)
 801b3c2:	a904      	add	r1, sp, #16
 801b3c4:	4630      	mov	r0, r6
 801b3c6:	f7fe f877 	bl	80194b8 <_printf_i>
 801b3ca:	e7e4      	b.n	801b396 <_vfiprintf_r+0x1ea>
 801b3cc:	0801f004 	.word	0x0801f004
 801b3d0:	0801f00e 	.word	0x0801f00e
 801b3d4:	08018fa9 	.word	0x08018fa9
 801b3d8:	0801b187 	.word	0x0801b187
 801b3dc:	0801f00a 	.word	0x0801f00a

0801b3e0 <__sflush_r>:
 801b3e0:	898a      	ldrh	r2, [r1, #12]
 801b3e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b3e6:	4605      	mov	r5, r0
 801b3e8:	0710      	lsls	r0, r2, #28
 801b3ea:	460c      	mov	r4, r1
 801b3ec:	d458      	bmi.n	801b4a0 <__sflush_r+0xc0>
 801b3ee:	684b      	ldr	r3, [r1, #4]
 801b3f0:	2b00      	cmp	r3, #0
 801b3f2:	dc05      	bgt.n	801b400 <__sflush_r+0x20>
 801b3f4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801b3f6:	2b00      	cmp	r3, #0
 801b3f8:	dc02      	bgt.n	801b400 <__sflush_r+0x20>
 801b3fa:	2000      	movs	r0, #0
 801b3fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b400:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801b402:	2e00      	cmp	r6, #0
 801b404:	d0f9      	beq.n	801b3fa <__sflush_r+0x1a>
 801b406:	2300      	movs	r3, #0
 801b408:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801b40c:	682f      	ldr	r7, [r5, #0]
 801b40e:	6a21      	ldr	r1, [r4, #32]
 801b410:	602b      	str	r3, [r5, #0]
 801b412:	d032      	beq.n	801b47a <__sflush_r+0x9a>
 801b414:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801b416:	89a3      	ldrh	r3, [r4, #12]
 801b418:	075a      	lsls	r2, r3, #29
 801b41a:	d505      	bpl.n	801b428 <__sflush_r+0x48>
 801b41c:	6863      	ldr	r3, [r4, #4]
 801b41e:	1ac0      	subs	r0, r0, r3
 801b420:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801b422:	b10b      	cbz	r3, 801b428 <__sflush_r+0x48>
 801b424:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801b426:	1ac0      	subs	r0, r0, r3
 801b428:	2300      	movs	r3, #0
 801b42a:	4602      	mov	r2, r0
 801b42c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801b42e:	6a21      	ldr	r1, [r4, #32]
 801b430:	4628      	mov	r0, r5
 801b432:	47b0      	blx	r6
 801b434:	1c43      	adds	r3, r0, #1
 801b436:	89a3      	ldrh	r3, [r4, #12]
 801b438:	d106      	bne.n	801b448 <__sflush_r+0x68>
 801b43a:	6829      	ldr	r1, [r5, #0]
 801b43c:	291d      	cmp	r1, #29
 801b43e:	d82b      	bhi.n	801b498 <__sflush_r+0xb8>
 801b440:	4a29      	ldr	r2, [pc, #164]	; (801b4e8 <__sflush_r+0x108>)
 801b442:	410a      	asrs	r2, r1
 801b444:	07d6      	lsls	r6, r2, #31
 801b446:	d427      	bmi.n	801b498 <__sflush_r+0xb8>
 801b448:	2200      	movs	r2, #0
 801b44a:	6062      	str	r2, [r4, #4]
 801b44c:	04d9      	lsls	r1, r3, #19
 801b44e:	6922      	ldr	r2, [r4, #16]
 801b450:	6022      	str	r2, [r4, #0]
 801b452:	d504      	bpl.n	801b45e <__sflush_r+0x7e>
 801b454:	1c42      	adds	r2, r0, #1
 801b456:	d101      	bne.n	801b45c <__sflush_r+0x7c>
 801b458:	682b      	ldr	r3, [r5, #0]
 801b45a:	b903      	cbnz	r3, 801b45e <__sflush_r+0x7e>
 801b45c:	6560      	str	r0, [r4, #84]	; 0x54
 801b45e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801b460:	602f      	str	r7, [r5, #0]
 801b462:	2900      	cmp	r1, #0
 801b464:	d0c9      	beq.n	801b3fa <__sflush_r+0x1a>
 801b466:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801b46a:	4299      	cmp	r1, r3
 801b46c:	d002      	beq.n	801b474 <__sflush_r+0x94>
 801b46e:	4628      	mov	r0, r5
 801b470:	f7ff f9f6 	bl	801a860 <_free_r>
 801b474:	2000      	movs	r0, #0
 801b476:	6360      	str	r0, [r4, #52]	; 0x34
 801b478:	e7c0      	b.n	801b3fc <__sflush_r+0x1c>
 801b47a:	2301      	movs	r3, #1
 801b47c:	4628      	mov	r0, r5
 801b47e:	47b0      	blx	r6
 801b480:	1c41      	adds	r1, r0, #1
 801b482:	d1c8      	bne.n	801b416 <__sflush_r+0x36>
 801b484:	682b      	ldr	r3, [r5, #0]
 801b486:	2b00      	cmp	r3, #0
 801b488:	d0c5      	beq.n	801b416 <__sflush_r+0x36>
 801b48a:	2b1d      	cmp	r3, #29
 801b48c:	d001      	beq.n	801b492 <__sflush_r+0xb2>
 801b48e:	2b16      	cmp	r3, #22
 801b490:	d101      	bne.n	801b496 <__sflush_r+0xb6>
 801b492:	602f      	str	r7, [r5, #0]
 801b494:	e7b1      	b.n	801b3fa <__sflush_r+0x1a>
 801b496:	89a3      	ldrh	r3, [r4, #12]
 801b498:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b49c:	81a3      	strh	r3, [r4, #12]
 801b49e:	e7ad      	b.n	801b3fc <__sflush_r+0x1c>
 801b4a0:	690f      	ldr	r7, [r1, #16]
 801b4a2:	2f00      	cmp	r7, #0
 801b4a4:	d0a9      	beq.n	801b3fa <__sflush_r+0x1a>
 801b4a6:	0793      	lsls	r3, r2, #30
 801b4a8:	680e      	ldr	r6, [r1, #0]
 801b4aa:	bf08      	it	eq
 801b4ac:	694b      	ldreq	r3, [r1, #20]
 801b4ae:	600f      	str	r7, [r1, #0]
 801b4b0:	bf18      	it	ne
 801b4b2:	2300      	movne	r3, #0
 801b4b4:	eba6 0807 	sub.w	r8, r6, r7
 801b4b8:	608b      	str	r3, [r1, #8]
 801b4ba:	f1b8 0f00 	cmp.w	r8, #0
 801b4be:	dd9c      	ble.n	801b3fa <__sflush_r+0x1a>
 801b4c0:	6a21      	ldr	r1, [r4, #32]
 801b4c2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801b4c4:	4643      	mov	r3, r8
 801b4c6:	463a      	mov	r2, r7
 801b4c8:	4628      	mov	r0, r5
 801b4ca:	47b0      	blx	r6
 801b4cc:	2800      	cmp	r0, #0
 801b4ce:	dc06      	bgt.n	801b4de <__sflush_r+0xfe>
 801b4d0:	89a3      	ldrh	r3, [r4, #12]
 801b4d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b4d6:	81a3      	strh	r3, [r4, #12]
 801b4d8:	f04f 30ff 	mov.w	r0, #4294967295
 801b4dc:	e78e      	b.n	801b3fc <__sflush_r+0x1c>
 801b4de:	4407      	add	r7, r0
 801b4e0:	eba8 0800 	sub.w	r8, r8, r0
 801b4e4:	e7e9      	b.n	801b4ba <__sflush_r+0xda>
 801b4e6:	bf00      	nop
 801b4e8:	dfbffffe 	.word	0xdfbffffe

0801b4ec <_fflush_r>:
 801b4ec:	b538      	push	{r3, r4, r5, lr}
 801b4ee:	690b      	ldr	r3, [r1, #16]
 801b4f0:	4605      	mov	r5, r0
 801b4f2:	460c      	mov	r4, r1
 801b4f4:	b913      	cbnz	r3, 801b4fc <_fflush_r+0x10>
 801b4f6:	2500      	movs	r5, #0
 801b4f8:	4628      	mov	r0, r5
 801b4fa:	bd38      	pop	{r3, r4, r5, pc}
 801b4fc:	b118      	cbz	r0, 801b506 <_fflush_r+0x1a>
 801b4fe:	6a03      	ldr	r3, [r0, #32]
 801b500:	b90b      	cbnz	r3, 801b506 <_fflush_r+0x1a>
 801b502:	f7fe f987 	bl	8019814 <__sinit>
 801b506:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b50a:	2b00      	cmp	r3, #0
 801b50c:	d0f3      	beq.n	801b4f6 <_fflush_r+0xa>
 801b50e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801b510:	07d0      	lsls	r0, r2, #31
 801b512:	d404      	bmi.n	801b51e <_fflush_r+0x32>
 801b514:	0599      	lsls	r1, r3, #22
 801b516:	d402      	bmi.n	801b51e <_fflush_r+0x32>
 801b518:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b51a:	f7fe fb7e 	bl	8019c1a <__retarget_lock_acquire_recursive>
 801b51e:	4628      	mov	r0, r5
 801b520:	4621      	mov	r1, r4
 801b522:	f7ff ff5d 	bl	801b3e0 <__sflush_r>
 801b526:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801b528:	07da      	lsls	r2, r3, #31
 801b52a:	4605      	mov	r5, r0
 801b52c:	d4e4      	bmi.n	801b4f8 <_fflush_r+0xc>
 801b52e:	89a3      	ldrh	r3, [r4, #12]
 801b530:	059b      	lsls	r3, r3, #22
 801b532:	d4e1      	bmi.n	801b4f8 <_fflush_r+0xc>
 801b534:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b536:	f7fe fb71 	bl	8019c1c <__retarget_lock_release_recursive>
 801b53a:	e7dd      	b.n	801b4f8 <_fflush_r+0xc>

0801b53c <fiprintf>:
 801b53c:	b40e      	push	{r1, r2, r3}
 801b53e:	b503      	push	{r0, r1, lr}
 801b540:	4601      	mov	r1, r0
 801b542:	ab03      	add	r3, sp, #12
 801b544:	4805      	ldr	r0, [pc, #20]	; (801b55c <fiprintf+0x20>)
 801b546:	f853 2b04 	ldr.w	r2, [r3], #4
 801b54a:	6800      	ldr	r0, [r0, #0]
 801b54c:	9301      	str	r3, [sp, #4]
 801b54e:	f7ff fe2d 	bl	801b1ac <_vfiprintf_r>
 801b552:	b002      	add	sp, #8
 801b554:	f85d eb04 	ldr.w	lr, [sp], #4
 801b558:	b003      	add	sp, #12
 801b55a:	4770      	bx	lr
 801b55c:	200000bc 	.word	0x200000bc

0801b560 <__swhatbuf_r>:
 801b560:	b570      	push	{r4, r5, r6, lr}
 801b562:	460c      	mov	r4, r1
 801b564:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b568:	2900      	cmp	r1, #0
 801b56a:	b096      	sub	sp, #88	; 0x58
 801b56c:	4615      	mov	r5, r2
 801b56e:	461e      	mov	r6, r3
 801b570:	da0d      	bge.n	801b58e <__swhatbuf_r+0x2e>
 801b572:	89a3      	ldrh	r3, [r4, #12]
 801b574:	f013 0f80 	tst.w	r3, #128	; 0x80
 801b578:	f04f 0100 	mov.w	r1, #0
 801b57c:	bf0c      	ite	eq
 801b57e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801b582:	2340      	movne	r3, #64	; 0x40
 801b584:	2000      	movs	r0, #0
 801b586:	6031      	str	r1, [r6, #0]
 801b588:	602b      	str	r3, [r5, #0]
 801b58a:	b016      	add	sp, #88	; 0x58
 801b58c:	bd70      	pop	{r4, r5, r6, pc}
 801b58e:	466a      	mov	r2, sp
 801b590:	f000 f848 	bl	801b624 <_fstat_r>
 801b594:	2800      	cmp	r0, #0
 801b596:	dbec      	blt.n	801b572 <__swhatbuf_r+0x12>
 801b598:	9901      	ldr	r1, [sp, #4]
 801b59a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 801b59e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801b5a2:	4259      	negs	r1, r3
 801b5a4:	4159      	adcs	r1, r3
 801b5a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801b5aa:	e7eb      	b.n	801b584 <__swhatbuf_r+0x24>

0801b5ac <__smakebuf_r>:
 801b5ac:	898b      	ldrh	r3, [r1, #12]
 801b5ae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801b5b0:	079d      	lsls	r5, r3, #30
 801b5b2:	4606      	mov	r6, r0
 801b5b4:	460c      	mov	r4, r1
 801b5b6:	d507      	bpl.n	801b5c8 <__smakebuf_r+0x1c>
 801b5b8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801b5bc:	6023      	str	r3, [r4, #0]
 801b5be:	6123      	str	r3, [r4, #16]
 801b5c0:	2301      	movs	r3, #1
 801b5c2:	6163      	str	r3, [r4, #20]
 801b5c4:	b002      	add	sp, #8
 801b5c6:	bd70      	pop	{r4, r5, r6, pc}
 801b5c8:	ab01      	add	r3, sp, #4
 801b5ca:	466a      	mov	r2, sp
 801b5cc:	f7ff ffc8 	bl	801b560 <__swhatbuf_r>
 801b5d0:	9900      	ldr	r1, [sp, #0]
 801b5d2:	4605      	mov	r5, r0
 801b5d4:	4630      	mov	r0, r6
 801b5d6:	f7ff f9b7 	bl	801a948 <_malloc_r>
 801b5da:	b948      	cbnz	r0, 801b5f0 <__smakebuf_r+0x44>
 801b5dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b5e0:	059a      	lsls	r2, r3, #22
 801b5e2:	d4ef      	bmi.n	801b5c4 <__smakebuf_r+0x18>
 801b5e4:	f023 0303 	bic.w	r3, r3, #3
 801b5e8:	f043 0302 	orr.w	r3, r3, #2
 801b5ec:	81a3      	strh	r3, [r4, #12]
 801b5ee:	e7e3      	b.n	801b5b8 <__smakebuf_r+0xc>
 801b5f0:	89a3      	ldrh	r3, [r4, #12]
 801b5f2:	6020      	str	r0, [r4, #0]
 801b5f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801b5f8:	81a3      	strh	r3, [r4, #12]
 801b5fa:	9b00      	ldr	r3, [sp, #0]
 801b5fc:	6163      	str	r3, [r4, #20]
 801b5fe:	9b01      	ldr	r3, [sp, #4]
 801b600:	6120      	str	r0, [r4, #16]
 801b602:	b15b      	cbz	r3, 801b61c <__smakebuf_r+0x70>
 801b604:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801b608:	4630      	mov	r0, r6
 801b60a:	f000 f81d 	bl	801b648 <_isatty_r>
 801b60e:	b128      	cbz	r0, 801b61c <__smakebuf_r+0x70>
 801b610:	89a3      	ldrh	r3, [r4, #12]
 801b612:	f023 0303 	bic.w	r3, r3, #3
 801b616:	f043 0301 	orr.w	r3, r3, #1
 801b61a:	81a3      	strh	r3, [r4, #12]
 801b61c:	89a3      	ldrh	r3, [r4, #12]
 801b61e:	431d      	orrs	r5, r3
 801b620:	81a5      	strh	r5, [r4, #12]
 801b622:	e7cf      	b.n	801b5c4 <__smakebuf_r+0x18>

0801b624 <_fstat_r>:
 801b624:	b538      	push	{r3, r4, r5, lr}
 801b626:	4d07      	ldr	r5, [pc, #28]	; (801b644 <_fstat_r+0x20>)
 801b628:	2300      	movs	r3, #0
 801b62a:	4604      	mov	r4, r0
 801b62c:	4608      	mov	r0, r1
 801b62e:	4611      	mov	r1, r2
 801b630:	602b      	str	r3, [r5, #0]
 801b632:	f7e7 fedc 	bl	80033ee <_fstat>
 801b636:	1c43      	adds	r3, r0, #1
 801b638:	d102      	bne.n	801b640 <_fstat_r+0x1c>
 801b63a:	682b      	ldr	r3, [r5, #0]
 801b63c:	b103      	cbz	r3, 801b640 <_fstat_r+0x1c>
 801b63e:	6023      	str	r3, [r4, #0]
 801b640:	bd38      	pop	{r3, r4, r5, pc}
 801b642:	bf00      	nop
 801b644:	20007324 	.word	0x20007324

0801b648 <_isatty_r>:
 801b648:	b538      	push	{r3, r4, r5, lr}
 801b64a:	4d06      	ldr	r5, [pc, #24]	; (801b664 <_isatty_r+0x1c>)
 801b64c:	2300      	movs	r3, #0
 801b64e:	4604      	mov	r4, r0
 801b650:	4608      	mov	r0, r1
 801b652:	602b      	str	r3, [r5, #0]
 801b654:	f7e7 fedb 	bl	800340e <_isatty>
 801b658:	1c43      	adds	r3, r0, #1
 801b65a:	d102      	bne.n	801b662 <_isatty_r+0x1a>
 801b65c:	682b      	ldr	r3, [r5, #0]
 801b65e:	b103      	cbz	r3, 801b662 <_isatty_r+0x1a>
 801b660:	6023      	str	r3, [r4, #0]
 801b662:	bd38      	pop	{r3, r4, r5, pc}
 801b664:	20007324 	.word	0x20007324

0801b668 <_sbrk_r>:
 801b668:	b538      	push	{r3, r4, r5, lr}
 801b66a:	4d06      	ldr	r5, [pc, #24]	; (801b684 <_sbrk_r+0x1c>)
 801b66c:	2300      	movs	r3, #0
 801b66e:	4604      	mov	r4, r0
 801b670:	4608      	mov	r0, r1
 801b672:	602b      	str	r3, [r5, #0]
 801b674:	f7e7 fee4 	bl	8003440 <_sbrk>
 801b678:	1c43      	adds	r3, r0, #1
 801b67a:	d102      	bne.n	801b682 <_sbrk_r+0x1a>
 801b67c:	682b      	ldr	r3, [r5, #0]
 801b67e:	b103      	cbz	r3, 801b682 <_sbrk_r+0x1a>
 801b680:	6023      	str	r3, [r4, #0]
 801b682:	bd38      	pop	{r3, r4, r5, pc}
 801b684:	20007324 	.word	0x20007324

0801b688 <abort>:
 801b688:	b508      	push	{r3, lr}
 801b68a:	2006      	movs	r0, #6
 801b68c:	f000 f860 	bl	801b750 <raise>
 801b690:	2001      	movs	r0, #1
 801b692:	f7e7 fe5d 	bl	8003350 <_exit>

0801b696 <_calloc_r>:
 801b696:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801b698:	fba1 2402 	umull	r2, r4, r1, r2
 801b69c:	b94c      	cbnz	r4, 801b6b2 <_calloc_r+0x1c>
 801b69e:	4611      	mov	r1, r2
 801b6a0:	9201      	str	r2, [sp, #4]
 801b6a2:	f7ff f951 	bl	801a948 <_malloc_r>
 801b6a6:	9a01      	ldr	r2, [sp, #4]
 801b6a8:	4605      	mov	r5, r0
 801b6aa:	b930      	cbnz	r0, 801b6ba <_calloc_r+0x24>
 801b6ac:	4628      	mov	r0, r5
 801b6ae:	b003      	add	sp, #12
 801b6b0:	bd30      	pop	{r4, r5, pc}
 801b6b2:	220c      	movs	r2, #12
 801b6b4:	6002      	str	r2, [r0, #0]
 801b6b6:	2500      	movs	r5, #0
 801b6b8:	e7f8      	b.n	801b6ac <_calloc_r+0x16>
 801b6ba:	4621      	mov	r1, r4
 801b6bc:	f7fe fa36 	bl	8019b2c <memset>
 801b6c0:	e7f4      	b.n	801b6ac <_calloc_r+0x16>

0801b6c2 <__ascii_mbtowc>:
 801b6c2:	b082      	sub	sp, #8
 801b6c4:	b901      	cbnz	r1, 801b6c8 <__ascii_mbtowc+0x6>
 801b6c6:	a901      	add	r1, sp, #4
 801b6c8:	b142      	cbz	r2, 801b6dc <__ascii_mbtowc+0x1a>
 801b6ca:	b14b      	cbz	r3, 801b6e0 <__ascii_mbtowc+0x1e>
 801b6cc:	7813      	ldrb	r3, [r2, #0]
 801b6ce:	600b      	str	r3, [r1, #0]
 801b6d0:	7812      	ldrb	r2, [r2, #0]
 801b6d2:	1e10      	subs	r0, r2, #0
 801b6d4:	bf18      	it	ne
 801b6d6:	2001      	movne	r0, #1
 801b6d8:	b002      	add	sp, #8
 801b6da:	4770      	bx	lr
 801b6dc:	4610      	mov	r0, r2
 801b6de:	e7fb      	b.n	801b6d8 <__ascii_mbtowc+0x16>
 801b6e0:	f06f 0001 	mvn.w	r0, #1
 801b6e4:	e7f8      	b.n	801b6d8 <__ascii_mbtowc+0x16>

0801b6e6 <__ascii_wctomb>:
 801b6e6:	b149      	cbz	r1, 801b6fc <__ascii_wctomb+0x16>
 801b6e8:	2aff      	cmp	r2, #255	; 0xff
 801b6ea:	bf85      	ittet	hi
 801b6ec:	238a      	movhi	r3, #138	; 0x8a
 801b6ee:	6003      	strhi	r3, [r0, #0]
 801b6f0:	700a      	strbls	r2, [r1, #0]
 801b6f2:	f04f 30ff 	movhi.w	r0, #4294967295
 801b6f6:	bf98      	it	ls
 801b6f8:	2001      	movls	r0, #1
 801b6fa:	4770      	bx	lr
 801b6fc:	4608      	mov	r0, r1
 801b6fe:	4770      	bx	lr

0801b700 <_raise_r>:
 801b700:	291f      	cmp	r1, #31
 801b702:	b538      	push	{r3, r4, r5, lr}
 801b704:	4604      	mov	r4, r0
 801b706:	460d      	mov	r5, r1
 801b708:	d904      	bls.n	801b714 <_raise_r+0x14>
 801b70a:	2316      	movs	r3, #22
 801b70c:	6003      	str	r3, [r0, #0]
 801b70e:	f04f 30ff 	mov.w	r0, #4294967295
 801b712:	bd38      	pop	{r3, r4, r5, pc}
 801b714:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 801b716:	b112      	cbz	r2, 801b71e <_raise_r+0x1e>
 801b718:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801b71c:	b94b      	cbnz	r3, 801b732 <_raise_r+0x32>
 801b71e:	4620      	mov	r0, r4
 801b720:	f000 f830 	bl	801b784 <_getpid_r>
 801b724:	462a      	mov	r2, r5
 801b726:	4601      	mov	r1, r0
 801b728:	4620      	mov	r0, r4
 801b72a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801b72e:	f000 b817 	b.w	801b760 <_kill_r>
 801b732:	2b01      	cmp	r3, #1
 801b734:	d00a      	beq.n	801b74c <_raise_r+0x4c>
 801b736:	1c59      	adds	r1, r3, #1
 801b738:	d103      	bne.n	801b742 <_raise_r+0x42>
 801b73a:	2316      	movs	r3, #22
 801b73c:	6003      	str	r3, [r0, #0]
 801b73e:	2001      	movs	r0, #1
 801b740:	e7e7      	b.n	801b712 <_raise_r+0x12>
 801b742:	2400      	movs	r4, #0
 801b744:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801b748:	4628      	mov	r0, r5
 801b74a:	4798      	blx	r3
 801b74c:	2000      	movs	r0, #0
 801b74e:	e7e0      	b.n	801b712 <_raise_r+0x12>

0801b750 <raise>:
 801b750:	4b02      	ldr	r3, [pc, #8]	; (801b75c <raise+0xc>)
 801b752:	4601      	mov	r1, r0
 801b754:	6818      	ldr	r0, [r3, #0]
 801b756:	f7ff bfd3 	b.w	801b700 <_raise_r>
 801b75a:	bf00      	nop
 801b75c:	200000bc 	.word	0x200000bc

0801b760 <_kill_r>:
 801b760:	b538      	push	{r3, r4, r5, lr}
 801b762:	4d07      	ldr	r5, [pc, #28]	; (801b780 <_kill_r+0x20>)
 801b764:	2300      	movs	r3, #0
 801b766:	4604      	mov	r4, r0
 801b768:	4608      	mov	r0, r1
 801b76a:	4611      	mov	r1, r2
 801b76c:	602b      	str	r3, [r5, #0]
 801b76e:	f7e7 fddd 	bl	800332c <_kill>
 801b772:	1c43      	adds	r3, r0, #1
 801b774:	d102      	bne.n	801b77c <_kill_r+0x1c>
 801b776:	682b      	ldr	r3, [r5, #0]
 801b778:	b103      	cbz	r3, 801b77c <_kill_r+0x1c>
 801b77a:	6023      	str	r3, [r4, #0]
 801b77c:	bd38      	pop	{r3, r4, r5, pc}
 801b77e:	bf00      	nop
 801b780:	20007324 	.word	0x20007324

0801b784 <_getpid_r>:
 801b784:	f7e7 bdca 	b.w	800331c <_getpid>

0801b788 <_init>:
 801b788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b78a:	bf00      	nop
 801b78c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b78e:	bc08      	pop	{r3}
 801b790:	469e      	mov	lr, r3
 801b792:	4770      	bx	lr

0801b794 <_fini>:
 801b794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b796:	bf00      	nop
 801b798:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b79a:	bc08      	pop	{r3}
 801b79c:	469e      	mov	lr, r3
 801b79e:	4770      	bx	lr

0801b7a0 <__stop_timer_veneer>:
 801b7a0:	f85f f000 	ldr.w	pc, [pc]	; 801b7a4 <__stop_timer_veneer+0x4>
 801b7a4:	00001309 	.word	0x00001309

0801b7a8 <__check_timer_veneer>:
 801b7a8:	f85f f000 	ldr.w	pc, [pc]	; 801b7ac <__check_timer_veneer+0x4>
 801b7ac:	0000132d 	.word	0x0000132d

0801b7b0 <__timer_delay_veneer>:
 801b7b0:	f85f f000 	ldr.w	pc, [pc]	; 801b7b4 <__timer_delay_veneer+0x4>
 801b7b4:	00001345 	.word	0x00001345

0801b7b8 <__start_pop_veneer>:
 801b7b8:	f85f f000 	ldr.w	pc, [pc]	; 801b7bc <__start_pop_veneer+0x4>
 801b7bc:	00001435 	.word	0x00001435

0801b7c0 <__start_continuous_MW_sweep_veneer>:
 801b7c0:	f85f f000 	ldr.w	pc, [pc]	; 801b7c4 <__start_continuous_MW_sweep_veneer+0x4>
 801b7c4:	00000e09 	.word	0x00000e09

0801b7c8 <__start_POP_calibration_veneer>:
 801b7c8:	f85f f000 	ldr.w	pc, [pc]	; 801b7cc <__start_POP_calibration_veneer+0x4>
 801b7cc:	00000d09 	.word	0x00000d09

0801b7d0 <__MW_update_veneer>:
 801b7d0:	f85f f000 	ldr.w	pc, [pc]	; 801b7d4 <__MW_update_veneer+0x4>
 801b7d4:	00000e25 	.word	0x00000e25

0801b7d8 <__start_timer_veneer>:
 801b7d8:	f85f f000 	ldr.w	pc, [pc]	; 801b7dc <__start_timer_veneer+0x4>
 801b7dc:	000012cd 	.word	0x000012cd

0801b7e0 <__set_MW_power_veneer>:
 801b7e0:	f85f f000 	ldr.w	pc, [pc]	; 801b7e4 <__set_MW_power_veneer+0x4>
 801b7e4:	00000123 	.word	0x00000123

0801b7e8 <__calc_fixed_time_MW_sweep_veneer>:
 801b7e8:	f85f f000 	ldr.w	pc, [pc]	; 801b7ec <__calc_fixed_time_MW_sweep_veneer+0x4>
 801b7ec:	00000891 	.word	0x00000891

0801b7f0 <__stop_pop_veneer>:
 801b7f0:	f85f f000 	ldr.w	pc, [pc]	; 801b7f4 <__stop_pop_veneer+0x4>
 801b7f4:	00001491 	.word	0x00001491
